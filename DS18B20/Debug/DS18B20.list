
DS18B20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800b168  0800b168  0000c168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b4  0800b8b4  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800b8b4  0800b8b4  0000d1d4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800b8b4  0800b8b4  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8b4  0800b8b4  0000c8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b8b8  0800b8b8  0000c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b8bc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  0800ba90  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  0800ba90  0000d4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b30  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ce  00000000  00000000  00015d2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000990  00000000  00000000  00017f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070a  00000000  00000000  00018890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dd89  00000000  00000000  00018f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf38  00000000  00000000  00026d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000470f3  00000000  00000000  00032c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00079d4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  00079d94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0007d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001d4 	.word	0x200001d4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b150 	.word	0x0800b150

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001d8 	.word	0x200001d8
 8000104:	0800b150 	.word	0x0800b150

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f9dd 	bl	80017fc <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f921 	bl	8001694 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f9cf 	bl	80017fc <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f9c5 	bl	80017fc <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f94b 	bl	800171c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f941 	bl	800171c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f002 f91d 	bl	80026fc <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	@ (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fcea 	bl	8001ea4 <__aeabi_dsub>
 80004d0:	f002 f914 	bl	80026fc <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	2300      	movs	r3, #0
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb3 	bl	8000458 <__aeabi_dcmplt>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d108      	bne.n	8000508 <__aeabi_d2lz+0x24>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f000 f80f 	bl	800051c <__aeabi_d2ulz>
 80004fe:	0002      	movs	r2, r0
 8000500:	000b      	movs	r3, r1
 8000502:	0010      	movs	r0, r2
 8000504:	0019      	movs	r1, r3
 8000506:	bd70      	pop	{r4, r5, r6, pc}
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	061b      	lsls	r3, r3, #24
 800050c:	18e9      	adds	r1, r5, r3
 800050e:	0020      	movs	r0, r4
 8000510:	f000 f804 	bl	800051c <__aeabi_d2ulz>
 8000514:	2300      	movs	r3, #0
 8000516:	4242      	negs	r2, r0
 8000518:	418b      	sbcs	r3, r1
 800051a:	e7f2      	b.n	8000502 <__aeabi_d2lz+0x1e>

0800051c <__aeabi_d2ulz>:
 800051c:	b570      	push	{r4, r5, r6, lr}
 800051e:	2200      	movs	r2, #0
 8000520:	4b0b      	ldr	r3, [pc, #44]	@ (8000550 <__aeabi_d2ulz+0x34>)
 8000522:	000d      	movs	r5, r1
 8000524:	0004      	movs	r4, r0
 8000526:	f001 f9d7 	bl	80018d8 <__aeabi_dmul>
 800052a:	f7ff ffbd 	bl	80004a8 <__aeabi_d2uiz>
 800052e:	0006      	movs	r6, r0
 8000530:	f002 f94e 	bl	80027d0 <__aeabi_ui2d>
 8000534:	2200      	movs	r2, #0
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <__aeabi_d2ulz+0x38>)
 8000538:	f001 f9ce 	bl	80018d8 <__aeabi_dmul>
 800053c:	0002      	movs	r2, r0
 800053e:	000b      	movs	r3, r1
 8000540:	0020      	movs	r0, r4
 8000542:	0029      	movs	r1, r5
 8000544:	f001 fcae 	bl	8001ea4 <__aeabi_dsub>
 8000548:	f7ff ffae 	bl	80004a8 <__aeabi_d2uiz>
 800054c:	0031      	movs	r1, r6
 800054e:	bd70      	pop	{r4, r5, r6, pc}
 8000550:	3df00000 	.word	0x3df00000
 8000554:	41f00000 	.word	0x41f00000

08000558 <__aeabi_l2d>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0006      	movs	r6, r0
 800055c:	0008      	movs	r0, r1
 800055e:	f002 f909 	bl	8002774 <__aeabi_i2d>
 8000562:	2200      	movs	r2, #0
 8000564:	4b06      	ldr	r3, [pc, #24]	@ (8000580 <__aeabi_l2d+0x28>)
 8000566:	f001 f9b7 	bl	80018d8 <__aeabi_dmul>
 800056a:	000d      	movs	r5, r1
 800056c:	0004      	movs	r4, r0
 800056e:	0030      	movs	r0, r6
 8000570:	f002 f92e 	bl	80027d0 <__aeabi_ui2d>
 8000574:	002b      	movs	r3, r5
 8000576:	0022      	movs	r2, r4
 8000578:	f000 f9ae 	bl	80008d8 <__aeabi_dadd>
 800057c:	bd70      	pop	{r4, r5, r6, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)
 8000580:	41f00000 	.word	0x41f00000

08000584 <__aeabi_fmul>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	464f      	mov	r7, r9
 8000588:	4646      	mov	r6, r8
 800058a:	46d6      	mov	lr, sl
 800058c:	0044      	lsls	r4, r0, #1
 800058e:	b5c0      	push	{r6, r7, lr}
 8000590:	0246      	lsls	r6, r0, #9
 8000592:	1c0f      	adds	r7, r1, #0
 8000594:	0a76      	lsrs	r6, r6, #9
 8000596:	0e24      	lsrs	r4, r4, #24
 8000598:	0fc5      	lsrs	r5, r0, #31
 800059a:	2c00      	cmp	r4, #0
 800059c:	d100      	bne.n	80005a0 <__aeabi_fmul+0x1c>
 800059e:	e0da      	b.n	8000756 <__aeabi_fmul+0x1d2>
 80005a0:	2cff      	cmp	r4, #255	@ 0xff
 80005a2:	d074      	beq.n	800068e <__aeabi_fmul+0x10a>
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	00f6      	lsls	r6, r6, #3
 80005a8:	04db      	lsls	r3, r3, #19
 80005aa:	431e      	orrs	r6, r3
 80005ac:	2300      	movs	r3, #0
 80005ae:	4699      	mov	r9, r3
 80005b0:	469a      	mov	sl, r3
 80005b2:	3c7f      	subs	r4, #127	@ 0x7f
 80005b4:	027b      	lsls	r3, r7, #9
 80005b6:	0a5b      	lsrs	r3, r3, #9
 80005b8:	4698      	mov	r8, r3
 80005ba:	007b      	lsls	r3, r7, #1
 80005bc:	0e1b      	lsrs	r3, r3, #24
 80005be:	0fff      	lsrs	r7, r7, #31
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d074      	beq.n	80006ae <__aeabi_fmul+0x12a>
 80005c4:	2bff      	cmp	r3, #255	@ 0xff
 80005c6:	d100      	bne.n	80005ca <__aeabi_fmul+0x46>
 80005c8:	e08e      	b.n	80006e8 <__aeabi_fmul+0x164>
 80005ca:	4642      	mov	r2, r8
 80005cc:	2180      	movs	r1, #128	@ 0x80
 80005ce:	00d2      	lsls	r2, r2, #3
 80005d0:	04c9      	lsls	r1, r1, #19
 80005d2:	4311      	orrs	r1, r2
 80005d4:	3b7f      	subs	r3, #127	@ 0x7f
 80005d6:	002a      	movs	r2, r5
 80005d8:	18e4      	adds	r4, r4, r3
 80005da:	464b      	mov	r3, r9
 80005dc:	407a      	eors	r2, r7
 80005de:	4688      	mov	r8, r1
 80005e0:	b2d2      	uxtb	r2, r2
 80005e2:	2b0a      	cmp	r3, #10
 80005e4:	dc75      	bgt.n	80006d2 <__aeabi_fmul+0x14e>
 80005e6:	464b      	mov	r3, r9
 80005e8:	2000      	movs	r0, #0
 80005ea:	2b02      	cmp	r3, #2
 80005ec:	dd0f      	ble.n	800060e <__aeabi_fmul+0x8a>
 80005ee:	4649      	mov	r1, r9
 80005f0:	2301      	movs	r3, #1
 80005f2:	408b      	lsls	r3, r1
 80005f4:	21a6      	movs	r1, #166	@ 0xa6
 80005f6:	00c9      	lsls	r1, r1, #3
 80005f8:	420b      	tst	r3, r1
 80005fa:	d169      	bne.n	80006d0 <__aeabi_fmul+0x14c>
 80005fc:	2190      	movs	r1, #144	@ 0x90
 80005fe:	0089      	lsls	r1, r1, #2
 8000600:	420b      	tst	r3, r1
 8000602:	d000      	beq.n	8000606 <__aeabi_fmul+0x82>
 8000604:	e100      	b.n	8000808 <__aeabi_fmul+0x284>
 8000606:	2188      	movs	r1, #136	@ 0x88
 8000608:	4219      	tst	r1, r3
 800060a:	d000      	beq.n	800060e <__aeabi_fmul+0x8a>
 800060c:	e0f5      	b.n	80007fa <__aeabi_fmul+0x276>
 800060e:	4641      	mov	r1, r8
 8000610:	0409      	lsls	r1, r1, #16
 8000612:	0c09      	lsrs	r1, r1, #16
 8000614:	4643      	mov	r3, r8
 8000616:	0008      	movs	r0, r1
 8000618:	0c35      	lsrs	r5, r6, #16
 800061a:	0436      	lsls	r6, r6, #16
 800061c:	0c1b      	lsrs	r3, r3, #16
 800061e:	0c36      	lsrs	r6, r6, #16
 8000620:	4370      	muls	r0, r6
 8000622:	4369      	muls	r1, r5
 8000624:	435e      	muls	r6, r3
 8000626:	435d      	muls	r5, r3
 8000628:	1876      	adds	r6, r6, r1
 800062a:	0c03      	lsrs	r3, r0, #16
 800062c:	199b      	adds	r3, r3, r6
 800062e:	4299      	cmp	r1, r3
 8000630:	d903      	bls.n	800063a <__aeabi_fmul+0xb6>
 8000632:	2180      	movs	r1, #128	@ 0x80
 8000634:	0249      	lsls	r1, r1, #9
 8000636:	468c      	mov	ip, r1
 8000638:	4465      	add	r5, ip
 800063a:	0400      	lsls	r0, r0, #16
 800063c:	0419      	lsls	r1, r3, #16
 800063e:	0c00      	lsrs	r0, r0, #16
 8000640:	1809      	adds	r1, r1, r0
 8000642:	018e      	lsls	r6, r1, #6
 8000644:	1e70      	subs	r0, r6, #1
 8000646:	4186      	sbcs	r6, r0
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	0e89      	lsrs	r1, r1, #26
 800064c:	195b      	adds	r3, r3, r5
 800064e:	430e      	orrs	r6, r1
 8000650:	019b      	lsls	r3, r3, #6
 8000652:	431e      	orrs	r6, r3
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	d46c      	bmi.n	8000732 <__aeabi_fmul+0x1ae>
 8000658:	0023      	movs	r3, r4
 800065a:	337f      	adds	r3, #127	@ 0x7f
 800065c:	2b00      	cmp	r3, #0
 800065e:	dc00      	bgt.n	8000662 <__aeabi_fmul+0xde>
 8000660:	e0b1      	b.n	80007c6 <__aeabi_fmul+0x242>
 8000662:	0015      	movs	r5, r2
 8000664:	0771      	lsls	r1, r6, #29
 8000666:	d00b      	beq.n	8000680 <__aeabi_fmul+0xfc>
 8000668:	200f      	movs	r0, #15
 800066a:	0021      	movs	r1, r4
 800066c:	4030      	ands	r0, r6
 800066e:	2804      	cmp	r0, #4
 8000670:	d006      	beq.n	8000680 <__aeabi_fmul+0xfc>
 8000672:	3604      	adds	r6, #4
 8000674:	0132      	lsls	r2, r6, #4
 8000676:	d503      	bpl.n	8000680 <__aeabi_fmul+0xfc>
 8000678:	4b6e      	ldr	r3, [pc, #440]	@ (8000834 <__aeabi_fmul+0x2b0>)
 800067a:	401e      	ands	r6, r3
 800067c:	000b      	movs	r3, r1
 800067e:	3380      	adds	r3, #128	@ 0x80
 8000680:	2bfe      	cmp	r3, #254	@ 0xfe
 8000682:	dd00      	ble.n	8000686 <__aeabi_fmul+0x102>
 8000684:	e0bd      	b.n	8000802 <__aeabi_fmul+0x27e>
 8000686:	01b2      	lsls	r2, r6, #6
 8000688:	0a52      	lsrs	r2, r2, #9
 800068a:	b2db      	uxtb	r3, r3
 800068c:	e048      	b.n	8000720 <__aeabi_fmul+0x19c>
 800068e:	2e00      	cmp	r6, #0
 8000690:	d000      	beq.n	8000694 <__aeabi_fmul+0x110>
 8000692:	e092      	b.n	80007ba <__aeabi_fmul+0x236>
 8000694:	2308      	movs	r3, #8
 8000696:	4699      	mov	r9, r3
 8000698:	3b06      	subs	r3, #6
 800069a:	469a      	mov	sl, r3
 800069c:	027b      	lsls	r3, r7, #9
 800069e:	0a5b      	lsrs	r3, r3, #9
 80006a0:	4698      	mov	r8, r3
 80006a2:	007b      	lsls	r3, r7, #1
 80006a4:	24ff      	movs	r4, #255	@ 0xff
 80006a6:	0e1b      	lsrs	r3, r3, #24
 80006a8:	0fff      	lsrs	r7, r7, #31
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d18a      	bne.n	80005c4 <__aeabi_fmul+0x40>
 80006ae:	4642      	mov	r2, r8
 80006b0:	2a00      	cmp	r2, #0
 80006b2:	d164      	bne.n	800077e <__aeabi_fmul+0x1fa>
 80006b4:	4649      	mov	r1, r9
 80006b6:	3201      	adds	r2, #1
 80006b8:	4311      	orrs	r1, r2
 80006ba:	4689      	mov	r9, r1
 80006bc:	290a      	cmp	r1, #10
 80006be:	dc08      	bgt.n	80006d2 <__aeabi_fmul+0x14e>
 80006c0:	407d      	eors	r5, r7
 80006c2:	2001      	movs	r0, #1
 80006c4:	b2ea      	uxtb	r2, r5
 80006c6:	2902      	cmp	r1, #2
 80006c8:	dc91      	bgt.n	80005ee <__aeabi_fmul+0x6a>
 80006ca:	0015      	movs	r5, r2
 80006cc:	2200      	movs	r2, #0
 80006ce:	e027      	b.n	8000720 <__aeabi_fmul+0x19c>
 80006d0:	0015      	movs	r5, r2
 80006d2:	4653      	mov	r3, sl
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d100      	bne.n	80006da <__aeabi_fmul+0x156>
 80006d8:	e093      	b.n	8000802 <__aeabi_fmul+0x27e>
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d01a      	beq.n	8000714 <__aeabi_fmul+0x190>
 80006de:	2b01      	cmp	r3, #1
 80006e0:	d12c      	bne.n	800073c <__aeabi_fmul+0x1b8>
 80006e2:	2300      	movs	r3, #0
 80006e4:	2200      	movs	r2, #0
 80006e6:	e01b      	b.n	8000720 <__aeabi_fmul+0x19c>
 80006e8:	4643      	mov	r3, r8
 80006ea:	34ff      	adds	r4, #255	@ 0xff
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d055      	beq.n	800079c <__aeabi_fmul+0x218>
 80006f0:	2103      	movs	r1, #3
 80006f2:	464b      	mov	r3, r9
 80006f4:	430b      	orrs	r3, r1
 80006f6:	0019      	movs	r1, r3
 80006f8:	2b0a      	cmp	r3, #10
 80006fa:	dc00      	bgt.n	80006fe <__aeabi_fmul+0x17a>
 80006fc:	e092      	b.n	8000824 <__aeabi_fmul+0x2a0>
 80006fe:	2b0f      	cmp	r3, #15
 8000700:	d000      	beq.n	8000704 <__aeabi_fmul+0x180>
 8000702:	e08c      	b.n	800081e <__aeabi_fmul+0x29a>
 8000704:	2280      	movs	r2, #128	@ 0x80
 8000706:	03d2      	lsls	r2, r2, #15
 8000708:	4216      	tst	r6, r2
 800070a:	d003      	beq.n	8000714 <__aeabi_fmul+0x190>
 800070c:	4643      	mov	r3, r8
 800070e:	4213      	tst	r3, r2
 8000710:	d100      	bne.n	8000714 <__aeabi_fmul+0x190>
 8000712:	e07d      	b.n	8000810 <__aeabi_fmul+0x28c>
 8000714:	2280      	movs	r2, #128	@ 0x80
 8000716:	03d2      	lsls	r2, r2, #15
 8000718:	4332      	orrs	r2, r6
 800071a:	0252      	lsls	r2, r2, #9
 800071c:	0a52      	lsrs	r2, r2, #9
 800071e:	23ff      	movs	r3, #255	@ 0xff
 8000720:	05d8      	lsls	r0, r3, #23
 8000722:	07ed      	lsls	r5, r5, #31
 8000724:	4310      	orrs	r0, r2
 8000726:	4328      	orrs	r0, r5
 8000728:	bce0      	pop	{r5, r6, r7}
 800072a:	46ba      	mov	sl, r7
 800072c:	46b1      	mov	r9, r6
 800072e:	46a8      	mov	r8, r5
 8000730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000732:	2301      	movs	r3, #1
 8000734:	0015      	movs	r5, r2
 8000736:	0871      	lsrs	r1, r6, #1
 8000738:	401e      	ands	r6, r3
 800073a:	430e      	orrs	r6, r1
 800073c:	0023      	movs	r3, r4
 800073e:	3380      	adds	r3, #128	@ 0x80
 8000740:	1c61      	adds	r1, r4, #1
 8000742:	2b00      	cmp	r3, #0
 8000744:	dd41      	ble.n	80007ca <__aeabi_fmul+0x246>
 8000746:	0772      	lsls	r2, r6, #29
 8000748:	d094      	beq.n	8000674 <__aeabi_fmul+0xf0>
 800074a:	220f      	movs	r2, #15
 800074c:	4032      	ands	r2, r6
 800074e:	2a04      	cmp	r2, #4
 8000750:	d000      	beq.n	8000754 <__aeabi_fmul+0x1d0>
 8000752:	e78e      	b.n	8000672 <__aeabi_fmul+0xee>
 8000754:	e78e      	b.n	8000674 <__aeabi_fmul+0xf0>
 8000756:	2e00      	cmp	r6, #0
 8000758:	d105      	bne.n	8000766 <__aeabi_fmul+0x1e2>
 800075a:	2304      	movs	r3, #4
 800075c:	4699      	mov	r9, r3
 800075e:	3b03      	subs	r3, #3
 8000760:	2400      	movs	r4, #0
 8000762:	469a      	mov	sl, r3
 8000764:	e726      	b.n	80005b4 <__aeabi_fmul+0x30>
 8000766:	0030      	movs	r0, r6
 8000768:	f002 f920 	bl	80029ac <__clzsi2>
 800076c:	2476      	movs	r4, #118	@ 0x76
 800076e:	1f43      	subs	r3, r0, #5
 8000770:	409e      	lsls	r6, r3
 8000772:	2300      	movs	r3, #0
 8000774:	4264      	negs	r4, r4
 8000776:	4699      	mov	r9, r3
 8000778:	469a      	mov	sl, r3
 800077a:	1a24      	subs	r4, r4, r0
 800077c:	e71a      	b.n	80005b4 <__aeabi_fmul+0x30>
 800077e:	4640      	mov	r0, r8
 8000780:	f002 f914 	bl	80029ac <__clzsi2>
 8000784:	464b      	mov	r3, r9
 8000786:	1a24      	subs	r4, r4, r0
 8000788:	3c76      	subs	r4, #118	@ 0x76
 800078a:	2b0a      	cmp	r3, #10
 800078c:	dca1      	bgt.n	80006d2 <__aeabi_fmul+0x14e>
 800078e:	4643      	mov	r3, r8
 8000790:	3805      	subs	r0, #5
 8000792:	4083      	lsls	r3, r0
 8000794:	407d      	eors	r5, r7
 8000796:	4698      	mov	r8, r3
 8000798:	b2ea      	uxtb	r2, r5
 800079a:	e724      	b.n	80005e6 <__aeabi_fmul+0x62>
 800079c:	464a      	mov	r2, r9
 800079e:	3302      	adds	r3, #2
 80007a0:	4313      	orrs	r3, r2
 80007a2:	002a      	movs	r2, r5
 80007a4:	407a      	eors	r2, r7
 80007a6:	b2d2      	uxtb	r2, r2
 80007a8:	2b0a      	cmp	r3, #10
 80007aa:	dc92      	bgt.n	80006d2 <__aeabi_fmul+0x14e>
 80007ac:	4649      	mov	r1, r9
 80007ae:	0015      	movs	r5, r2
 80007b0:	2900      	cmp	r1, #0
 80007b2:	d026      	beq.n	8000802 <__aeabi_fmul+0x27e>
 80007b4:	4699      	mov	r9, r3
 80007b6:	2002      	movs	r0, #2
 80007b8:	e719      	b.n	80005ee <__aeabi_fmul+0x6a>
 80007ba:	230c      	movs	r3, #12
 80007bc:	4699      	mov	r9, r3
 80007be:	3b09      	subs	r3, #9
 80007c0:	24ff      	movs	r4, #255	@ 0xff
 80007c2:	469a      	mov	sl, r3
 80007c4:	e6f6      	b.n	80005b4 <__aeabi_fmul+0x30>
 80007c6:	0015      	movs	r5, r2
 80007c8:	0021      	movs	r1, r4
 80007ca:	2201      	movs	r2, #1
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	2b1b      	cmp	r3, #27
 80007d0:	dd00      	ble.n	80007d4 <__aeabi_fmul+0x250>
 80007d2:	e786      	b.n	80006e2 <__aeabi_fmul+0x15e>
 80007d4:	319e      	adds	r1, #158	@ 0x9e
 80007d6:	0032      	movs	r2, r6
 80007d8:	408e      	lsls	r6, r1
 80007da:	40da      	lsrs	r2, r3
 80007dc:	1e73      	subs	r3, r6, #1
 80007de:	419e      	sbcs	r6, r3
 80007e0:	4332      	orrs	r2, r6
 80007e2:	0753      	lsls	r3, r2, #29
 80007e4:	d004      	beq.n	80007f0 <__aeabi_fmul+0x26c>
 80007e6:	230f      	movs	r3, #15
 80007e8:	4013      	ands	r3, r2
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d000      	beq.n	80007f0 <__aeabi_fmul+0x26c>
 80007ee:	3204      	adds	r2, #4
 80007f0:	0153      	lsls	r3, r2, #5
 80007f2:	d510      	bpl.n	8000816 <__aeabi_fmul+0x292>
 80007f4:	2301      	movs	r3, #1
 80007f6:	2200      	movs	r2, #0
 80007f8:	e792      	b.n	8000720 <__aeabi_fmul+0x19c>
 80007fa:	003d      	movs	r5, r7
 80007fc:	4646      	mov	r6, r8
 80007fe:	4682      	mov	sl, r0
 8000800:	e767      	b.n	80006d2 <__aeabi_fmul+0x14e>
 8000802:	23ff      	movs	r3, #255	@ 0xff
 8000804:	2200      	movs	r2, #0
 8000806:	e78b      	b.n	8000720 <__aeabi_fmul+0x19c>
 8000808:	2280      	movs	r2, #128	@ 0x80
 800080a:	2500      	movs	r5, #0
 800080c:	03d2      	lsls	r2, r2, #15
 800080e:	e786      	b.n	800071e <__aeabi_fmul+0x19a>
 8000810:	003d      	movs	r5, r7
 8000812:	431a      	orrs	r2, r3
 8000814:	e783      	b.n	800071e <__aeabi_fmul+0x19a>
 8000816:	0192      	lsls	r2, r2, #6
 8000818:	2300      	movs	r3, #0
 800081a:	0a52      	lsrs	r2, r2, #9
 800081c:	e780      	b.n	8000720 <__aeabi_fmul+0x19c>
 800081e:	003d      	movs	r5, r7
 8000820:	4646      	mov	r6, r8
 8000822:	e777      	b.n	8000714 <__aeabi_fmul+0x190>
 8000824:	002a      	movs	r2, r5
 8000826:	2301      	movs	r3, #1
 8000828:	407a      	eors	r2, r7
 800082a:	408b      	lsls	r3, r1
 800082c:	2003      	movs	r0, #3
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	e6e9      	b.n	8000606 <__aeabi_fmul+0x82>
 8000832:	46c0      	nop			@ (mov r8, r8)
 8000834:	f7ffffff 	.word	0xf7ffffff

08000838 <__aeabi_i2f>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	2800      	cmp	r0, #0
 800083c:	d012      	beq.n	8000864 <__aeabi_i2f+0x2c>
 800083e:	17c3      	asrs	r3, r0, #31
 8000840:	18c5      	adds	r5, r0, r3
 8000842:	405d      	eors	r5, r3
 8000844:	0fc4      	lsrs	r4, r0, #31
 8000846:	0028      	movs	r0, r5
 8000848:	f002 f8b0 	bl	80029ac <__clzsi2>
 800084c:	239e      	movs	r3, #158	@ 0x9e
 800084e:	1a1b      	subs	r3, r3, r0
 8000850:	2b96      	cmp	r3, #150	@ 0x96
 8000852:	dc0f      	bgt.n	8000874 <__aeabi_i2f+0x3c>
 8000854:	2808      	cmp	r0, #8
 8000856:	d038      	beq.n	80008ca <__aeabi_i2f+0x92>
 8000858:	3808      	subs	r0, #8
 800085a:	4085      	lsls	r5, r0
 800085c:	026d      	lsls	r5, r5, #9
 800085e:	0a6d      	lsrs	r5, r5, #9
 8000860:	b2d8      	uxtb	r0, r3
 8000862:	e002      	b.n	800086a <__aeabi_i2f+0x32>
 8000864:	2400      	movs	r4, #0
 8000866:	2000      	movs	r0, #0
 8000868:	2500      	movs	r5, #0
 800086a:	05c0      	lsls	r0, r0, #23
 800086c:	4328      	orrs	r0, r5
 800086e:	07e4      	lsls	r4, r4, #31
 8000870:	4320      	orrs	r0, r4
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	2b99      	cmp	r3, #153	@ 0x99
 8000876:	dc14      	bgt.n	80008a2 <__aeabi_i2f+0x6a>
 8000878:	1f42      	subs	r2, r0, #5
 800087a:	4095      	lsls	r5, r2
 800087c:	002a      	movs	r2, r5
 800087e:	4915      	ldr	r1, [pc, #84]	@ (80008d4 <__aeabi_i2f+0x9c>)
 8000880:	4011      	ands	r1, r2
 8000882:	0755      	lsls	r5, r2, #29
 8000884:	d01c      	beq.n	80008c0 <__aeabi_i2f+0x88>
 8000886:	250f      	movs	r5, #15
 8000888:	402a      	ands	r2, r5
 800088a:	2a04      	cmp	r2, #4
 800088c:	d018      	beq.n	80008c0 <__aeabi_i2f+0x88>
 800088e:	3104      	adds	r1, #4
 8000890:	08ca      	lsrs	r2, r1, #3
 8000892:	0149      	lsls	r1, r1, #5
 8000894:	d515      	bpl.n	80008c2 <__aeabi_i2f+0x8a>
 8000896:	239f      	movs	r3, #159	@ 0x9f
 8000898:	0252      	lsls	r2, r2, #9
 800089a:	1a18      	subs	r0, r3, r0
 800089c:	0a55      	lsrs	r5, r2, #9
 800089e:	b2c0      	uxtb	r0, r0
 80008a0:	e7e3      	b.n	800086a <__aeabi_i2f+0x32>
 80008a2:	2205      	movs	r2, #5
 80008a4:	0029      	movs	r1, r5
 80008a6:	1a12      	subs	r2, r2, r0
 80008a8:	40d1      	lsrs	r1, r2
 80008aa:	0002      	movs	r2, r0
 80008ac:	321b      	adds	r2, #27
 80008ae:	4095      	lsls	r5, r2
 80008b0:	002a      	movs	r2, r5
 80008b2:	1e55      	subs	r5, r2, #1
 80008b4:	41aa      	sbcs	r2, r5
 80008b6:	430a      	orrs	r2, r1
 80008b8:	4906      	ldr	r1, [pc, #24]	@ (80008d4 <__aeabi_i2f+0x9c>)
 80008ba:	4011      	ands	r1, r2
 80008bc:	0755      	lsls	r5, r2, #29
 80008be:	d1e2      	bne.n	8000886 <__aeabi_i2f+0x4e>
 80008c0:	08ca      	lsrs	r2, r1, #3
 80008c2:	0252      	lsls	r2, r2, #9
 80008c4:	0a55      	lsrs	r5, r2, #9
 80008c6:	b2d8      	uxtb	r0, r3
 80008c8:	e7cf      	b.n	800086a <__aeabi_i2f+0x32>
 80008ca:	026d      	lsls	r5, r5, #9
 80008cc:	0a6d      	lsrs	r5, r5, #9
 80008ce:	308e      	adds	r0, #142	@ 0x8e
 80008d0:	e7cb      	b.n	800086a <__aeabi_i2f+0x32>
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	fbffffff 	.word	0xfbffffff

080008d8 <__aeabi_dadd>:
 80008d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008da:	464f      	mov	r7, r9
 80008dc:	4646      	mov	r6, r8
 80008de:	46d6      	mov	lr, sl
 80008e0:	b5c0      	push	{r6, r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	9000      	str	r0, [sp, #0]
 80008e6:	9101      	str	r1, [sp, #4]
 80008e8:	030e      	lsls	r6, r1, #12
 80008ea:	004c      	lsls	r4, r1, #1
 80008ec:	0fcd      	lsrs	r5, r1, #31
 80008ee:	0a71      	lsrs	r1, r6, #9
 80008f0:	9e00      	ldr	r6, [sp, #0]
 80008f2:	005f      	lsls	r7, r3, #1
 80008f4:	0f76      	lsrs	r6, r6, #29
 80008f6:	430e      	orrs	r6, r1
 80008f8:	9900      	ldr	r1, [sp, #0]
 80008fa:	9200      	str	r2, [sp, #0]
 80008fc:	9301      	str	r3, [sp, #4]
 80008fe:	00c9      	lsls	r1, r1, #3
 8000900:	4689      	mov	r9, r1
 8000902:	0319      	lsls	r1, r3, #12
 8000904:	0d7b      	lsrs	r3, r7, #21
 8000906:	4698      	mov	r8, r3
 8000908:	9b01      	ldr	r3, [sp, #4]
 800090a:	0a49      	lsrs	r1, r1, #9
 800090c:	0fdb      	lsrs	r3, r3, #31
 800090e:	469c      	mov	ip, r3
 8000910:	9b00      	ldr	r3, [sp, #0]
 8000912:	9a00      	ldr	r2, [sp, #0]
 8000914:	0f5b      	lsrs	r3, r3, #29
 8000916:	430b      	orrs	r3, r1
 8000918:	4641      	mov	r1, r8
 800091a:	0d64      	lsrs	r4, r4, #21
 800091c:	00d2      	lsls	r2, r2, #3
 800091e:	1a61      	subs	r1, r4, r1
 8000920:	4565      	cmp	r5, ip
 8000922:	d100      	bne.n	8000926 <__aeabi_dadd+0x4e>
 8000924:	e0a6      	b.n	8000a74 <__aeabi_dadd+0x19c>
 8000926:	2900      	cmp	r1, #0
 8000928:	dd72      	ble.n	8000a10 <__aeabi_dadd+0x138>
 800092a:	4647      	mov	r7, r8
 800092c:	2f00      	cmp	r7, #0
 800092e:	d100      	bne.n	8000932 <__aeabi_dadd+0x5a>
 8000930:	e0dd      	b.n	8000aee <__aeabi_dadd+0x216>
 8000932:	4fcc      	ldr	r7, [pc, #816]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000934:	42bc      	cmp	r4, r7
 8000936:	d100      	bne.n	800093a <__aeabi_dadd+0x62>
 8000938:	e19a      	b.n	8000c70 <__aeabi_dadd+0x398>
 800093a:	2701      	movs	r7, #1
 800093c:	2938      	cmp	r1, #56	@ 0x38
 800093e:	dc17      	bgt.n	8000970 <__aeabi_dadd+0x98>
 8000940:	2780      	movs	r7, #128	@ 0x80
 8000942:	043f      	lsls	r7, r7, #16
 8000944:	433b      	orrs	r3, r7
 8000946:	291f      	cmp	r1, #31
 8000948:	dd00      	ble.n	800094c <__aeabi_dadd+0x74>
 800094a:	e1dd      	b.n	8000d08 <__aeabi_dadd+0x430>
 800094c:	2720      	movs	r7, #32
 800094e:	1a78      	subs	r0, r7, r1
 8000950:	001f      	movs	r7, r3
 8000952:	4087      	lsls	r7, r0
 8000954:	46ba      	mov	sl, r7
 8000956:	0017      	movs	r7, r2
 8000958:	40cf      	lsrs	r7, r1
 800095a:	4684      	mov	ip, r0
 800095c:	0038      	movs	r0, r7
 800095e:	4657      	mov	r7, sl
 8000960:	4307      	orrs	r7, r0
 8000962:	4660      	mov	r0, ip
 8000964:	4082      	lsls	r2, r0
 8000966:	40cb      	lsrs	r3, r1
 8000968:	1e50      	subs	r0, r2, #1
 800096a:	4182      	sbcs	r2, r0
 800096c:	1af6      	subs	r6, r6, r3
 800096e:	4317      	orrs	r7, r2
 8000970:	464b      	mov	r3, r9
 8000972:	1bdf      	subs	r7, r3, r7
 8000974:	45b9      	cmp	r9, r7
 8000976:	4180      	sbcs	r0, r0
 8000978:	4240      	negs	r0, r0
 800097a:	1a36      	subs	r6, r6, r0
 800097c:	0233      	lsls	r3, r6, #8
 800097e:	d400      	bmi.n	8000982 <__aeabi_dadd+0xaa>
 8000980:	e0ff      	b.n	8000b82 <__aeabi_dadd+0x2aa>
 8000982:	0276      	lsls	r6, r6, #9
 8000984:	0a76      	lsrs	r6, r6, #9
 8000986:	2e00      	cmp	r6, #0
 8000988:	d100      	bne.n	800098c <__aeabi_dadd+0xb4>
 800098a:	e13c      	b.n	8000c06 <__aeabi_dadd+0x32e>
 800098c:	0030      	movs	r0, r6
 800098e:	f002 f80d 	bl	80029ac <__clzsi2>
 8000992:	0003      	movs	r3, r0
 8000994:	3b08      	subs	r3, #8
 8000996:	2120      	movs	r1, #32
 8000998:	0038      	movs	r0, r7
 800099a:	1aca      	subs	r2, r1, r3
 800099c:	40d0      	lsrs	r0, r2
 800099e:	409e      	lsls	r6, r3
 80009a0:	0002      	movs	r2, r0
 80009a2:	409f      	lsls	r7, r3
 80009a4:	4332      	orrs	r2, r6
 80009a6:	429c      	cmp	r4, r3
 80009a8:	dd00      	ble.n	80009ac <__aeabi_dadd+0xd4>
 80009aa:	e1a6      	b.n	8000cfa <__aeabi_dadd+0x422>
 80009ac:	1b18      	subs	r0, r3, r4
 80009ae:	3001      	adds	r0, #1
 80009b0:	1a09      	subs	r1, r1, r0
 80009b2:	003e      	movs	r6, r7
 80009b4:	408f      	lsls	r7, r1
 80009b6:	40c6      	lsrs	r6, r0
 80009b8:	1e7b      	subs	r3, r7, #1
 80009ba:	419f      	sbcs	r7, r3
 80009bc:	0013      	movs	r3, r2
 80009be:	408b      	lsls	r3, r1
 80009c0:	4337      	orrs	r7, r6
 80009c2:	431f      	orrs	r7, r3
 80009c4:	40c2      	lsrs	r2, r0
 80009c6:	003b      	movs	r3, r7
 80009c8:	0016      	movs	r6, r2
 80009ca:	2400      	movs	r4, #0
 80009cc:	4313      	orrs	r3, r2
 80009ce:	d100      	bne.n	80009d2 <__aeabi_dadd+0xfa>
 80009d0:	e1df      	b.n	8000d92 <__aeabi_dadd+0x4ba>
 80009d2:	077b      	lsls	r3, r7, #29
 80009d4:	d100      	bne.n	80009d8 <__aeabi_dadd+0x100>
 80009d6:	e332      	b.n	800103e <__aeabi_dadd+0x766>
 80009d8:	230f      	movs	r3, #15
 80009da:	003a      	movs	r2, r7
 80009dc:	403b      	ands	r3, r7
 80009de:	2b04      	cmp	r3, #4
 80009e0:	d004      	beq.n	80009ec <__aeabi_dadd+0x114>
 80009e2:	1d3a      	adds	r2, r7, #4
 80009e4:	42ba      	cmp	r2, r7
 80009e6:	41bf      	sbcs	r7, r7
 80009e8:	427f      	negs	r7, r7
 80009ea:	19f6      	adds	r6, r6, r7
 80009ec:	0233      	lsls	r3, r6, #8
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_dadd+0x11a>
 80009f0:	e323      	b.n	800103a <__aeabi_dadd+0x762>
 80009f2:	4b9c      	ldr	r3, [pc, #624]	@ (8000c64 <__aeabi_dadd+0x38c>)
 80009f4:	3401      	adds	r4, #1
 80009f6:	429c      	cmp	r4, r3
 80009f8:	d100      	bne.n	80009fc <__aeabi_dadd+0x124>
 80009fa:	e0b4      	b.n	8000b66 <__aeabi_dadd+0x28e>
 80009fc:	4b9a      	ldr	r3, [pc, #616]	@ (8000c68 <__aeabi_dadd+0x390>)
 80009fe:	0564      	lsls	r4, r4, #21
 8000a00:	401e      	ands	r6, r3
 8000a02:	0d64      	lsrs	r4, r4, #21
 8000a04:	0777      	lsls	r7, r6, #29
 8000a06:	08d2      	lsrs	r2, r2, #3
 8000a08:	0276      	lsls	r6, r6, #9
 8000a0a:	4317      	orrs	r7, r2
 8000a0c:	0b36      	lsrs	r6, r6, #12
 8000a0e:	e0ac      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	d100      	bne.n	8000a16 <__aeabi_dadd+0x13e>
 8000a14:	e07e      	b.n	8000b14 <__aeabi_dadd+0x23c>
 8000a16:	4641      	mov	r1, r8
 8000a18:	1b09      	subs	r1, r1, r4
 8000a1a:	2c00      	cmp	r4, #0
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x148>
 8000a1e:	e160      	b.n	8000ce2 <__aeabi_dadd+0x40a>
 8000a20:	0034      	movs	r4, r6
 8000a22:	4648      	mov	r0, r9
 8000a24:	4304      	orrs	r4, r0
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x152>
 8000a28:	e1c9      	b.n	8000dbe <__aeabi_dadd+0x4e6>
 8000a2a:	1e4c      	subs	r4, r1, #1
 8000a2c:	2901      	cmp	r1, #1
 8000a2e:	d100      	bne.n	8000a32 <__aeabi_dadd+0x15a>
 8000a30:	e22e      	b.n	8000e90 <__aeabi_dadd+0x5b8>
 8000a32:	4d8c      	ldr	r5, [pc, #560]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000a34:	42a9      	cmp	r1, r5
 8000a36:	d100      	bne.n	8000a3a <__aeabi_dadd+0x162>
 8000a38:	e224      	b.n	8000e84 <__aeabi_dadd+0x5ac>
 8000a3a:	2701      	movs	r7, #1
 8000a3c:	2c38      	cmp	r4, #56	@ 0x38
 8000a3e:	dc11      	bgt.n	8000a64 <__aeabi_dadd+0x18c>
 8000a40:	0021      	movs	r1, r4
 8000a42:	291f      	cmp	r1, #31
 8000a44:	dd00      	ble.n	8000a48 <__aeabi_dadd+0x170>
 8000a46:	e20b      	b.n	8000e60 <__aeabi_dadd+0x588>
 8000a48:	2420      	movs	r4, #32
 8000a4a:	0037      	movs	r7, r6
 8000a4c:	4648      	mov	r0, r9
 8000a4e:	1a64      	subs	r4, r4, r1
 8000a50:	40a7      	lsls	r7, r4
 8000a52:	40c8      	lsrs	r0, r1
 8000a54:	4307      	orrs	r7, r0
 8000a56:	4648      	mov	r0, r9
 8000a58:	40a0      	lsls	r0, r4
 8000a5a:	40ce      	lsrs	r6, r1
 8000a5c:	1e44      	subs	r4, r0, #1
 8000a5e:	41a0      	sbcs	r0, r4
 8000a60:	1b9b      	subs	r3, r3, r6
 8000a62:	4307      	orrs	r7, r0
 8000a64:	1bd7      	subs	r7, r2, r7
 8000a66:	42ba      	cmp	r2, r7
 8000a68:	4192      	sbcs	r2, r2
 8000a6a:	4252      	negs	r2, r2
 8000a6c:	4665      	mov	r5, ip
 8000a6e:	4644      	mov	r4, r8
 8000a70:	1a9e      	subs	r6, r3, r2
 8000a72:	e783      	b.n	800097c <__aeabi_dadd+0xa4>
 8000a74:	2900      	cmp	r1, #0
 8000a76:	dc00      	bgt.n	8000a7a <__aeabi_dadd+0x1a2>
 8000a78:	e09c      	b.n	8000bb4 <__aeabi_dadd+0x2dc>
 8000a7a:	4647      	mov	r7, r8
 8000a7c:	2f00      	cmp	r7, #0
 8000a7e:	d167      	bne.n	8000b50 <__aeabi_dadd+0x278>
 8000a80:	001f      	movs	r7, r3
 8000a82:	4317      	orrs	r7, r2
 8000a84:	d100      	bne.n	8000a88 <__aeabi_dadd+0x1b0>
 8000a86:	e0e4      	b.n	8000c52 <__aeabi_dadd+0x37a>
 8000a88:	1e48      	subs	r0, r1, #1
 8000a8a:	2901      	cmp	r1, #1
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x1b8>
 8000a8e:	e19b      	b.n	8000dc8 <__aeabi_dadd+0x4f0>
 8000a90:	4f74      	ldr	r7, [pc, #464]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000a92:	42b9      	cmp	r1, r7
 8000a94:	d100      	bne.n	8000a98 <__aeabi_dadd+0x1c0>
 8000a96:	e0eb      	b.n	8000c70 <__aeabi_dadd+0x398>
 8000a98:	2701      	movs	r7, #1
 8000a9a:	0001      	movs	r1, r0
 8000a9c:	2838      	cmp	r0, #56	@ 0x38
 8000a9e:	dc11      	bgt.n	8000ac4 <__aeabi_dadd+0x1ec>
 8000aa0:	291f      	cmp	r1, #31
 8000aa2:	dd00      	ble.n	8000aa6 <__aeabi_dadd+0x1ce>
 8000aa4:	e1c7      	b.n	8000e36 <__aeabi_dadd+0x55e>
 8000aa6:	2720      	movs	r7, #32
 8000aa8:	1a78      	subs	r0, r7, r1
 8000aaa:	001f      	movs	r7, r3
 8000aac:	4684      	mov	ip, r0
 8000aae:	4087      	lsls	r7, r0
 8000ab0:	0010      	movs	r0, r2
 8000ab2:	40c8      	lsrs	r0, r1
 8000ab4:	4307      	orrs	r7, r0
 8000ab6:	4660      	mov	r0, ip
 8000ab8:	4082      	lsls	r2, r0
 8000aba:	40cb      	lsrs	r3, r1
 8000abc:	1e50      	subs	r0, r2, #1
 8000abe:	4182      	sbcs	r2, r0
 8000ac0:	18f6      	adds	r6, r6, r3
 8000ac2:	4317      	orrs	r7, r2
 8000ac4:	444f      	add	r7, r9
 8000ac6:	454f      	cmp	r7, r9
 8000ac8:	4180      	sbcs	r0, r0
 8000aca:	4240      	negs	r0, r0
 8000acc:	1836      	adds	r6, r6, r0
 8000ace:	0233      	lsls	r3, r6, #8
 8000ad0:	d557      	bpl.n	8000b82 <__aeabi_dadd+0x2aa>
 8000ad2:	4b64      	ldr	r3, [pc, #400]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000ad4:	3401      	adds	r4, #1
 8000ad6:	429c      	cmp	r4, r3
 8000ad8:	d045      	beq.n	8000b66 <__aeabi_dadd+0x28e>
 8000ada:	2101      	movs	r1, #1
 8000adc:	4b62      	ldr	r3, [pc, #392]	@ (8000c68 <__aeabi_dadd+0x390>)
 8000ade:	087a      	lsrs	r2, r7, #1
 8000ae0:	401e      	ands	r6, r3
 8000ae2:	4039      	ands	r1, r7
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	07f7      	lsls	r7, r6, #31
 8000ae8:	4317      	orrs	r7, r2
 8000aea:	0876      	lsrs	r6, r6, #1
 8000aec:	e771      	b.n	80009d2 <__aeabi_dadd+0xfa>
 8000aee:	001f      	movs	r7, r3
 8000af0:	4317      	orrs	r7, r2
 8000af2:	d100      	bne.n	8000af6 <__aeabi_dadd+0x21e>
 8000af4:	e0ad      	b.n	8000c52 <__aeabi_dadd+0x37a>
 8000af6:	1e4f      	subs	r7, r1, #1
 8000af8:	46bc      	mov	ip, r7
 8000afa:	2901      	cmp	r1, #1
 8000afc:	d100      	bne.n	8000b00 <__aeabi_dadd+0x228>
 8000afe:	e182      	b.n	8000e06 <__aeabi_dadd+0x52e>
 8000b00:	4f58      	ldr	r7, [pc, #352]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000b02:	42b9      	cmp	r1, r7
 8000b04:	d100      	bne.n	8000b08 <__aeabi_dadd+0x230>
 8000b06:	e190      	b.n	8000e2a <__aeabi_dadd+0x552>
 8000b08:	4661      	mov	r1, ip
 8000b0a:	2701      	movs	r7, #1
 8000b0c:	2938      	cmp	r1, #56	@ 0x38
 8000b0e:	dd00      	ble.n	8000b12 <__aeabi_dadd+0x23a>
 8000b10:	e72e      	b.n	8000970 <__aeabi_dadd+0x98>
 8000b12:	e718      	b.n	8000946 <__aeabi_dadd+0x6e>
 8000b14:	4f55      	ldr	r7, [pc, #340]	@ (8000c6c <__aeabi_dadd+0x394>)
 8000b16:	1c61      	adds	r1, r4, #1
 8000b18:	4239      	tst	r1, r7
 8000b1a:	d000      	beq.n	8000b1e <__aeabi_dadd+0x246>
 8000b1c:	e0d0      	b.n	8000cc0 <__aeabi_dadd+0x3e8>
 8000b1e:	0031      	movs	r1, r6
 8000b20:	4648      	mov	r0, r9
 8000b22:	001f      	movs	r7, r3
 8000b24:	4301      	orrs	r1, r0
 8000b26:	4317      	orrs	r7, r2
 8000b28:	2c00      	cmp	r4, #0
 8000b2a:	d000      	beq.n	8000b2e <__aeabi_dadd+0x256>
 8000b2c:	e13d      	b.n	8000daa <__aeabi_dadd+0x4d2>
 8000b2e:	2900      	cmp	r1, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_dadd+0x25c>
 8000b32:	e1bc      	b.n	8000eae <__aeabi_dadd+0x5d6>
 8000b34:	2f00      	cmp	r7, #0
 8000b36:	d000      	beq.n	8000b3a <__aeabi_dadd+0x262>
 8000b38:	e1bf      	b.n	8000eba <__aeabi_dadd+0x5e2>
 8000b3a:	464b      	mov	r3, r9
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	08d8      	lsrs	r0, r3, #3
 8000b40:	0777      	lsls	r7, r6, #29
 8000b42:	4307      	orrs	r7, r0
 8000b44:	08f0      	lsrs	r0, r6, #3
 8000b46:	0306      	lsls	r6, r0, #12
 8000b48:	054c      	lsls	r4, r1, #21
 8000b4a:	0b36      	lsrs	r6, r6, #12
 8000b4c:	0d64      	lsrs	r4, r4, #21
 8000b4e:	e00c      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000b50:	4f44      	ldr	r7, [pc, #272]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000b52:	42bc      	cmp	r4, r7
 8000b54:	d100      	bne.n	8000b58 <__aeabi_dadd+0x280>
 8000b56:	e08b      	b.n	8000c70 <__aeabi_dadd+0x398>
 8000b58:	2701      	movs	r7, #1
 8000b5a:	2938      	cmp	r1, #56	@ 0x38
 8000b5c:	dcb2      	bgt.n	8000ac4 <__aeabi_dadd+0x1ec>
 8000b5e:	2780      	movs	r7, #128	@ 0x80
 8000b60:	043f      	lsls	r7, r7, #16
 8000b62:	433b      	orrs	r3, r7
 8000b64:	e79c      	b.n	8000aa0 <__aeabi_dadd+0x1c8>
 8000b66:	2600      	movs	r6, #0
 8000b68:	2700      	movs	r7, #0
 8000b6a:	0524      	lsls	r4, r4, #20
 8000b6c:	4334      	orrs	r4, r6
 8000b6e:	07ed      	lsls	r5, r5, #31
 8000b70:	432c      	orrs	r4, r5
 8000b72:	0038      	movs	r0, r7
 8000b74:	0021      	movs	r1, r4
 8000b76:	b002      	add	sp, #8
 8000b78:	bce0      	pop	{r5, r6, r7}
 8000b7a:	46ba      	mov	sl, r7
 8000b7c:	46b1      	mov	r9, r6
 8000b7e:	46a8      	mov	r8, r5
 8000b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b82:	077b      	lsls	r3, r7, #29
 8000b84:	d004      	beq.n	8000b90 <__aeabi_dadd+0x2b8>
 8000b86:	230f      	movs	r3, #15
 8000b88:	403b      	ands	r3, r7
 8000b8a:	2b04      	cmp	r3, #4
 8000b8c:	d000      	beq.n	8000b90 <__aeabi_dadd+0x2b8>
 8000b8e:	e728      	b.n	80009e2 <__aeabi_dadd+0x10a>
 8000b90:	08f8      	lsrs	r0, r7, #3
 8000b92:	4b34      	ldr	r3, [pc, #208]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000b94:	0777      	lsls	r7, r6, #29
 8000b96:	4307      	orrs	r7, r0
 8000b98:	08f0      	lsrs	r0, r6, #3
 8000b9a:	429c      	cmp	r4, r3
 8000b9c:	d000      	beq.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000b9e:	e24a      	b.n	8001036 <__aeabi_dadd+0x75e>
 8000ba0:	003b      	movs	r3, r7
 8000ba2:	4303      	orrs	r3, r0
 8000ba4:	d059      	beq.n	8000c5a <__aeabi_dadd+0x382>
 8000ba6:	2680      	movs	r6, #128	@ 0x80
 8000ba8:	0336      	lsls	r6, r6, #12
 8000baa:	4306      	orrs	r6, r0
 8000bac:	0336      	lsls	r6, r6, #12
 8000bae:	4c2d      	ldr	r4, [pc, #180]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000bb0:	0b36      	lsrs	r6, r6, #12
 8000bb2:	e7da      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	d061      	beq.n	8000c7c <__aeabi_dadd+0x3a4>
 8000bb8:	4641      	mov	r1, r8
 8000bba:	1b09      	subs	r1, r1, r4
 8000bbc:	2c00      	cmp	r4, #0
 8000bbe:	d100      	bne.n	8000bc2 <__aeabi_dadd+0x2ea>
 8000bc0:	e0b9      	b.n	8000d36 <__aeabi_dadd+0x45e>
 8000bc2:	4c28      	ldr	r4, [pc, #160]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000bc4:	45a0      	cmp	r8, r4
 8000bc6:	d100      	bne.n	8000bca <__aeabi_dadd+0x2f2>
 8000bc8:	e1a5      	b.n	8000f16 <__aeabi_dadd+0x63e>
 8000bca:	2701      	movs	r7, #1
 8000bcc:	2938      	cmp	r1, #56	@ 0x38
 8000bce:	dc13      	bgt.n	8000bf8 <__aeabi_dadd+0x320>
 8000bd0:	2480      	movs	r4, #128	@ 0x80
 8000bd2:	0424      	lsls	r4, r4, #16
 8000bd4:	4326      	orrs	r6, r4
 8000bd6:	291f      	cmp	r1, #31
 8000bd8:	dd00      	ble.n	8000bdc <__aeabi_dadd+0x304>
 8000bda:	e1c8      	b.n	8000f6e <__aeabi_dadd+0x696>
 8000bdc:	2420      	movs	r4, #32
 8000bde:	0037      	movs	r7, r6
 8000be0:	4648      	mov	r0, r9
 8000be2:	1a64      	subs	r4, r4, r1
 8000be4:	40a7      	lsls	r7, r4
 8000be6:	40c8      	lsrs	r0, r1
 8000be8:	4307      	orrs	r7, r0
 8000bea:	4648      	mov	r0, r9
 8000bec:	40a0      	lsls	r0, r4
 8000bee:	40ce      	lsrs	r6, r1
 8000bf0:	1e44      	subs	r4, r0, #1
 8000bf2:	41a0      	sbcs	r0, r4
 8000bf4:	199b      	adds	r3, r3, r6
 8000bf6:	4307      	orrs	r7, r0
 8000bf8:	18bf      	adds	r7, r7, r2
 8000bfa:	4297      	cmp	r7, r2
 8000bfc:	4192      	sbcs	r2, r2
 8000bfe:	4252      	negs	r2, r2
 8000c00:	4644      	mov	r4, r8
 8000c02:	18d6      	adds	r6, r2, r3
 8000c04:	e763      	b.n	8000ace <__aeabi_dadd+0x1f6>
 8000c06:	0038      	movs	r0, r7
 8000c08:	f001 fed0 	bl	80029ac <__clzsi2>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	3318      	adds	r3, #24
 8000c10:	2b1f      	cmp	r3, #31
 8000c12:	dc00      	bgt.n	8000c16 <__aeabi_dadd+0x33e>
 8000c14:	e6bf      	b.n	8000996 <__aeabi_dadd+0xbe>
 8000c16:	003a      	movs	r2, r7
 8000c18:	3808      	subs	r0, #8
 8000c1a:	4082      	lsls	r2, r0
 8000c1c:	429c      	cmp	r4, r3
 8000c1e:	dd00      	ble.n	8000c22 <__aeabi_dadd+0x34a>
 8000c20:	e083      	b.n	8000d2a <__aeabi_dadd+0x452>
 8000c22:	1b1b      	subs	r3, r3, r4
 8000c24:	1c58      	adds	r0, r3, #1
 8000c26:	281f      	cmp	r0, #31
 8000c28:	dc00      	bgt.n	8000c2c <__aeabi_dadd+0x354>
 8000c2a:	e1b4      	b.n	8000f96 <__aeabi_dadd+0x6be>
 8000c2c:	0017      	movs	r7, r2
 8000c2e:	3b1f      	subs	r3, #31
 8000c30:	40df      	lsrs	r7, r3
 8000c32:	2820      	cmp	r0, #32
 8000c34:	d005      	beq.n	8000c42 <__aeabi_dadd+0x36a>
 8000c36:	2340      	movs	r3, #64	@ 0x40
 8000c38:	1a1b      	subs	r3, r3, r0
 8000c3a:	409a      	lsls	r2, r3
 8000c3c:	1e53      	subs	r3, r2, #1
 8000c3e:	419a      	sbcs	r2, r3
 8000c40:	4317      	orrs	r7, r2
 8000c42:	2400      	movs	r4, #0
 8000c44:	2f00      	cmp	r7, #0
 8000c46:	d00a      	beq.n	8000c5e <__aeabi_dadd+0x386>
 8000c48:	077b      	lsls	r3, r7, #29
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dadd+0x376>
 8000c4c:	e6c4      	b.n	80009d8 <__aeabi_dadd+0x100>
 8000c4e:	0026      	movs	r6, r4
 8000c50:	e79e      	b.n	8000b90 <__aeabi_dadd+0x2b8>
 8000c52:	464b      	mov	r3, r9
 8000c54:	000c      	movs	r4, r1
 8000c56:	08d8      	lsrs	r0, r3, #3
 8000c58:	e79b      	b.n	8000b92 <__aeabi_dadd+0x2ba>
 8000c5a:	2700      	movs	r7, #0
 8000c5c:	4c01      	ldr	r4, [pc, #4]	@ (8000c64 <__aeabi_dadd+0x38c>)
 8000c5e:	2600      	movs	r6, #0
 8000c60:	e783      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	000007ff 	.word	0x000007ff
 8000c68:	ff7fffff 	.word	0xff7fffff
 8000c6c:	000007fe 	.word	0x000007fe
 8000c70:	464b      	mov	r3, r9
 8000c72:	0777      	lsls	r7, r6, #29
 8000c74:	08d8      	lsrs	r0, r3, #3
 8000c76:	4307      	orrs	r7, r0
 8000c78:	08f0      	lsrs	r0, r6, #3
 8000c7a:	e791      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000c7c:	4fcd      	ldr	r7, [pc, #820]	@ (8000fb4 <__aeabi_dadd+0x6dc>)
 8000c7e:	1c61      	adds	r1, r4, #1
 8000c80:	4239      	tst	r1, r7
 8000c82:	d16b      	bne.n	8000d5c <__aeabi_dadd+0x484>
 8000c84:	0031      	movs	r1, r6
 8000c86:	4648      	mov	r0, r9
 8000c88:	4301      	orrs	r1, r0
 8000c8a:	2c00      	cmp	r4, #0
 8000c8c:	d000      	beq.n	8000c90 <__aeabi_dadd+0x3b8>
 8000c8e:	e14b      	b.n	8000f28 <__aeabi_dadd+0x650>
 8000c90:	001f      	movs	r7, r3
 8000c92:	4317      	orrs	r7, r2
 8000c94:	2900      	cmp	r1, #0
 8000c96:	d100      	bne.n	8000c9a <__aeabi_dadd+0x3c2>
 8000c98:	e181      	b.n	8000f9e <__aeabi_dadd+0x6c6>
 8000c9a:	2f00      	cmp	r7, #0
 8000c9c:	d100      	bne.n	8000ca0 <__aeabi_dadd+0x3c8>
 8000c9e:	e74c      	b.n	8000b3a <__aeabi_dadd+0x262>
 8000ca0:	444a      	add	r2, r9
 8000ca2:	454a      	cmp	r2, r9
 8000ca4:	4180      	sbcs	r0, r0
 8000ca6:	18f6      	adds	r6, r6, r3
 8000ca8:	4240      	negs	r0, r0
 8000caa:	1836      	adds	r6, r6, r0
 8000cac:	0233      	lsls	r3, r6, #8
 8000cae:	d500      	bpl.n	8000cb2 <__aeabi_dadd+0x3da>
 8000cb0:	e1b0      	b.n	8001014 <__aeabi_dadd+0x73c>
 8000cb2:	0017      	movs	r7, r2
 8000cb4:	4691      	mov	r9, r2
 8000cb6:	4337      	orrs	r7, r6
 8000cb8:	d000      	beq.n	8000cbc <__aeabi_dadd+0x3e4>
 8000cba:	e73e      	b.n	8000b3a <__aeabi_dadd+0x262>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e754      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000cc0:	4649      	mov	r1, r9
 8000cc2:	1a89      	subs	r1, r1, r2
 8000cc4:	4688      	mov	r8, r1
 8000cc6:	45c1      	cmp	r9, r8
 8000cc8:	41bf      	sbcs	r7, r7
 8000cca:	1af1      	subs	r1, r6, r3
 8000ccc:	427f      	negs	r7, r7
 8000cce:	1bc9      	subs	r1, r1, r7
 8000cd0:	020f      	lsls	r7, r1, #8
 8000cd2:	d461      	bmi.n	8000d98 <__aeabi_dadd+0x4c0>
 8000cd4:	4647      	mov	r7, r8
 8000cd6:	430f      	orrs	r7, r1
 8000cd8:	d100      	bne.n	8000cdc <__aeabi_dadd+0x404>
 8000cda:	e0bd      	b.n	8000e58 <__aeabi_dadd+0x580>
 8000cdc:	000e      	movs	r6, r1
 8000cde:	4647      	mov	r7, r8
 8000ce0:	e651      	b.n	8000986 <__aeabi_dadd+0xae>
 8000ce2:	4cb5      	ldr	r4, [pc, #724]	@ (8000fb8 <__aeabi_dadd+0x6e0>)
 8000ce4:	45a0      	cmp	r8, r4
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dadd+0x412>
 8000ce8:	e100      	b.n	8000eec <__aeabi_dadd+0x614>
 8000cea:	2701      	movs	r7, #1
 8000cec:	2938      	cmp	r1, #56	@ 0x38
 8000cee:	dd00      	ble.n	8000cf2 <__aeabi_dadd+0x41a>
 8000cf0:	e6b8      	b.n	8000a64 <__aeabi_dadd+0x18c>
 8000cf2:	2480      	movs	r4, #128	@ 0x80
 8000cf4:	0424      	lsls	r4, r4, #16
 8000cf6:	4326      	orrs	r6, r4
 8000cf8:	e6a3      	b.n	8000a42 <__aeabi_dadd+0x16a>
 8000cfa:	4eb0      	ldr	r6, [pc, #704]	@ (8000fbc <__aeabi_dadd+0x6e4>)
 8000cfc:	1ae4      	subs	r4, r4, r3
 8000cfe:	4016      	ands	r6, r2
 8000d00:	077b      	lsls	r3, r7, #29
 8000d02:	d000      	beq.n	8000d06 <__aeabi_dadd+0x42e>
 8000d04:	e73f      	b.n	8000b86 <__aeabi_dadd+0x2ae>
 8000d06:	e743      	b.n	8000b90 <__aeabi_dadd+0x2b8>
 8000d08:	000f      	movs	r7, r1
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	3f20      	subs	r7, #32
 8000d0e:	40f8      	lsrs	r0, r7
 8000d10:	4684      	mov	ip, r0
 8000d12:	2920      	cmp	r1, #32
 8000d14:	d003      	beq.n	8000d1e <__aeabi_dadd+0x446>
 8000d16:	2740      	movs	r7, #64	@ 0x40
 8000d18:	1a79      	subs	r1, r7, r1
 8000d1a:	408b      	lsls	r3, r1
 8000d1c:	431a      	orrs	r2, r3
 8000d1e:	1e53      	subs	r3, r2, #1
 8000d20:	419a      	sbcs	r2, r3
 8000d22:	4663      	mov	r3, ip
 8000d24:	0017      	movs	r7, r2
 8000d26:	431f      	orrs	r7, r3
 8000d28:	e622      	b.n	8000970 <__aeabi_dadd+0x98>
 8000d2a:	48a4      	ldr	r0, [pc, #656]	@ (8000fbc <__aeabi_dadd+0x6e4>)
 8000d2c:	1ae1      	subs	r1, r4, r3
 8000d2e:	4010      	ands	r0, r2
 8000d30:	0747      	lsls	r7, r0, #29
 8000d32:	08c0      	lsrs	r0, r0, #3
 8000d34:	e707      	b.n	8000b46 <__aeabi_dadd+0x26e>
 8000d36:	0034      	movs	r4, r6
 8000d38:	4648      	mov	r0, r9
 8000d3a:	4304      	orrs	r4, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dadd+0x468>
 8000d3e:	e0fa      	b.n	8000f36 <__aeabi_dadd+0x65e>
 8000d40:	1e4c      	subs	r4, r1, #1
 8000d42:	2901      	cmp	r1, #1
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x470>
 8000d46:	e0d7      	b.n	8000ef8 <__aeabi_dadd+0x620>
 8000d48:	4f9b      	ldr	r7, [pc, #620]	@ (8000fb8 <__aeabi_dadd+0x6e0>)
 8000d4a:	42b9      	cmp	r1, r7
 8000d4c:	d100      	bne.n	8000d50 <__aeabi_dadd+0x478>
 8000d4e:	e0e2      	b.n	8000f16 <__aeabi_dadd+0x63e>
 8000d50:	2701      	movs	r7, #1
 8000d52:	2c38      	cmp	r4, #56	@ 0x38
 8000d54:	dd00      	ble.n	8000d58 <__aeabi_dadd+0x480>
 8000d56:	e74f      	b.n	8000bf8 <__aeabi_dadd+0x320>
 8000d58:	0021      	movs	r1, r4
 8000d5a:	e73c      	b.n	8000bd6 <__aeabi_dadd+0x2fe>
 8000d5c:	4c96      	ldr	r4, [pc, #600]	@ (8000fb8 <__aeabi_dadd+0x6e0>)
 8000d5e:	42a1      	cmp	r1, r4
 8000d60:	d100      	bne.n	8000d64 <__aeabi_dadd+0x48c>
 8000d62:	e0dd      	b.n	8000f20 <__aeabi_dadd+0x648>
 8000d64:	444a      	add	r2, r9
 8000d66:	454a      	cmp	r2, r9
 8000d68:	4180      	sbcs	r0, r0
 8000d6a:	18f3      	adds	r3, r6, r3
 8000d6c:	4240      	negs	r0, r0
 8000d6e:	1818      	adds	r0, r3, r0
 8000d70:	07c7      	lsls	r7, r0, #31
 8000d72:	0852      	lsrs	r2, r2, #1
 8000d74:	4317      	orrs	r7, r2
 8000d76:	0846      	lsrs	r6, r0, #1
 8000d78:	0752      	lsls	r2, r2, #29
 8000d7a:	d005      	beq.n	8000d88 <__aeabi_dadd+0x4b0>
 8000d7c:	220f      	movs	r2, #15
 8000d7e:	000c      	movs	r4, r1
 8000d80:	403a      	ands	r2, r7
 8000d82:	2a04      	cmp	r2, #4
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dadd+0x4b0>
 8000d86:	e62c      	b.n	80009e2 <__aeabi_dadd+0x10a>
 8000d88:	0776      	lsls	r6, r6, #29
 8000d8a:	08ff      	lsrs	r7, r7, #3
 8000d8c:	4337      	orrs	r7, r6
 8000d8e:	0900      	lsrs	r0, r0, #4
 8000d90:	e6d9      	b.n	8000b46 <__aeabi_dadd+0x26e>
 8000d92:	2700      	movs	r7, #0
 8000d94:	2600      	movs	r6, #0
 8000d96:	e6e8      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000d98:	4649      	mov	r1, r9
 8000d9a:	1a57      	subs	r7, r2, r1
 8000d9c:	42ba      	cmp	r2, r7
 8000d9e:	4192      	sbcs	r2, r2
 8000da0:	1b9e      	subs	r6, r3, r6
 8000da2:	4252      	negs	r2, r2
 8000da4:	4665      	mov	r5, ip
 8000da6:	1ab6      	subs	r6, r6, r2
 8000da8:	e5ed      	b.n	8000986 <__aeabi_dadd+0xae>
 8000daa:	2900      	cmp	r1, #0
 8000dac:	d000      	beq.n	8000db0 <__aeabi_dadd+0x4d8>
 8000dae:	e0c6      	b.n	8000f3e <__aeabi_dadd+0x666>
 8000db0:	2f00      	cmp	r7, #0
 8000db2:	d167      	bne.n	8000e84 <__aeabi_dadd+0x5ac>
 8000db4:	2680      	movs	r6, #128	@ 0x80
 8000db6:	2500      	movs	r5, #0
 8000db8:	4c7f      	ldr	r4, [pc, #508]	@ (8000fb8 <__aeabi_dadd+0x6e0>)
 8000dba:	0336      	lsls	r6, r6, #12
 8000dbc:	e6d5      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000dbe:	4665      	mov	r5, ip
 8000dc0:	000c      	movs	r4, r1
 8000dc2:	001e      	movs	r6, r3
 8000dc4:	08d0      	lsrs	r0, r2, #3
 8000dc6:	e6e4      	b.n	8000b92 <__aeabi_dadd+0x2ba>
 8000dc8:	444a      	add	r2, r9
 8000dca:	454a      	cmp	r2, r9
 8000dcc:	4180      	sbcs	r0, r0
 8000dce:	18f3      	adds	r3, r6, r3
 8000dd0:	4240      	negs	r0, r0
 8000dd2:	1818      	adds	r0, r3, r0
 8000dd4:	0011      	movs	r1, r2
 8000dd6:	0203      	lsls	r3, r0, #8
 8000dd8:	d400      	bmi.n	8000ddc <__aeabi_dadd+0x504>
 8000dda:	e096      	b.n	8000f0a <__aeabi_dadd+0x632>
 8000ddc:	4b77      	ldr	r3, [pc, #476]	@ (8000fbc <__aeabi_dadd+0x6e4>)
 8000dde:	0849      	lsrs	r1, r1, #1
 8000de0:	4018      	ands	r0, r3
 8000de2:	07c3      	lsls	r3, r0, #31
 8000de4:	430b      	orrs	r3, r1
 8000de6:	0844      	lsrs	r4, r0, #1
 8000de8:	0749      	lsls	r1, r1, #29
 8000dea:	d100      	bne.n	8000dee <__aeabi_dadd+0x516>
 8000dec:	e129      	b.n	8001042 <__aeabi_dadd+0x76a>
 8000dee:	220f      	movs	r2, #15
 8000df0:	401a      	ands	r2, r3
 8000df2:	2a04      	cmp	r2, #4
 8000df4:	d100      	bne.n	8000df8 <__aeabi_dadd+0x520>
 8000df6:	e0ea      	b.n	8000fce <__aeabi_dadd+0x6f6>
 8000df8:	1d1f      	adds	r7, r3, #4
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	41b6      	sbcs	r6, r6
 8000dfe:	4276      	negs	r6, r6
 8000e00:	1936      	adds	r6, r6, r4
 8000e02:	2402      	movs	r4, #2
 8000e04:	e6c4      	b.n	8000b90 <__aeabi_dadd+0x2b8>
 8000e06:	4649      	mov	r1, r9
 8000e08:	1a8f      	subs	r7, r1, r2
 8000e0a:	45b9      	cmp	r9, r7
 8000e0c:	4180      	sbcs	r0, r0
 8000e0e:	1af6      	subs	r6, r6, r3
 8000e10:	4240      	negs	r0, r0
 8000e12:	1a36      	subs	r6, r6, r0
 8000e14:	0233      	lsls	r3, r6, #8
 8000e16:	d406      	bmi.n	8000e26 <__aeabi_dadd+0x54e>
 8000e18:	0773      	lsls	r3, r6, #29
 8000e1a:	08ff      	lsrs	r7, r7, #3
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	08f0      	lsrs	r0, r6, #3
 8000e22:	e690      	b.n	8000b46 <__aeabi_dadd+0x26e>
 8000e24:	4665      	mov	r5, ip
 8000e26:	2401      	movs	r4, #1
 8000e28:	e5ab      	b.n	8000982 <__aeabi_dadd+0xaa>
 8000e2a:	464b      	mov	r3, r9
 8000e2c:	0777      	lsls	r7, r6, #29
 8000e2e:	08d8      	lsrs	r0, r3, #3
 8000e30:	4307      	orrs	r7, r0
 8000e32:	08f0      	lsrs	r0, r6, #3
 8000e34:	e6b4      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000e36:	000f      	movs	r7, r1
 8000e38:	0018      	movs	r0, r3
 8000e3a:	3f20      	subs	r7, #32
 8000e3c:	40f8      	lsrs	r0, r7
 8000e3e:	4684      	mov	ip, r0
 8000e40:	2920      	cmp	r1, #32
 8000e42:	d003      	beq.n	8000e4c <__aeabi_dadd+0x574>
 8000e44:	2740      	movs	r7, #64	@ 0x40
 8000e46:	1a79      	subs	r1, r7, r1
 8000e48:	408b      	lsls	r3, r1
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	1e53      	subs	r3, r2, #1
 8000e4e:	419a      	sbcs	r2, r3
 8000e50:	4663      	mov	r3, ip
 8000e52:	0017      	movs	r7, r2
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e635      	b.n	8000ac4 <__aeabi_dadd+0x1ec>
 8000e58:	2500      	movs	r5, #0
 8000e5a:	2400      	movs	r4, #0
 8000e5c:	2600      	movs	r6, #0
 8000e5e:	e684      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000e60:	000c      	movs	r4, r1
 8000e62:	0035      	movs	r5, r6
 8000e64:	3c20      	subs	r4, #32
 8000e66:	40e5      	lsrs	r5, r4
 8000e68:	2920      	cmp	r1, #32
 8000e6a:	d005      	beq.n	8000e78 <__aeabi_dadd+0x5a0>
 8000e6c:	2440      	movs	r4, #64	@ 0x40
 8000e6e:	1a61      	subs	r1, r4, r1
 8000e70:	408e      	lsls	r6, r1
 8000e72:	4649      	mov	r1, r9
 8000e74:	4331      	orrs	r1, r6
 8000e76:	4689      	mov	r9, r1
 8000e78:	4648      	mov	r0, r9
 8000e7a:	1e41      	subs	r1, r0, #1
 8000e7c:	4188      	sbcs	r0, r1
 8000e7e:	0007      	movs	r7, r0
 8000e80:	432f      	orrs	r7, r5
 8000e82:	e5ef      	b.n	8000a64 <__aeabi_dadd+0x18c>
 8000e84:	08d2      	lsrs	r2, r2, #3
 8000e86:	075f      	lsls	r7, r3, #29
 8000e88:	4665      	mov	r5, ip
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	08d8      	lsrs	r0, r3, #3
 8000e8e:	e687      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000e90:	1a17      	subs	r7, r2, r0
 8000e92:	42ba      	cmp	r2, r7
 8000e94:	4192      	sbcs	r2, r2
 8000e96:	1b9e      	subs	r6, r3, r6
 8000e98:	4252      	negs	r2, r2
 8000e9a:	1ab6      	subs	r6, r6, r2
 8000e9c:	0233      	lsls	r3, r6, #8
 8000e9e:	d4c1      	bmi.n	8000e24 <__aeabi_dadd+0x54c>
 8000ea0:	0773      	lsls	r3, r6, #29
 8000ea2:	08ff      	lsrs	r7, r7, #3
 8000ea4:	4665      	mov	r5, ip
 8000ea6:	2101      	movs	r1, #1
 8000ea8:	431f      	orrs	r7, r3
 8000eaa:	08f0      	lsrs	r0, r6, #3
 8000eac:	e64b      	b.n	8000b46 <__aeabi_dadd+0x26e>
 8000eae:	2f00      	cmp	r7, #0
 8000eb0:	d07b      	beq.n	8000faa <__aeabi_dadd+0x6d2>
 8000eb2:	4665      	mov	r5, ip
 8000eb4:	001e      	movs	r6, r3
 8000eb6:	4691      	mov	r9, r2
 8000eb8:	e63f      	b.n	8000b3a <__aeabi_dadd+0x262>
 8000eba:	1a81      	subs	r1, r0, r2
 8000ebc:	4688      	mov	r8, r1
 8000ebe:	45c1      	cmp	r9, r8
 8000ec0:	41a4      	sbcs	r4, r4
 8000ec2:	1af1      	subs	r1, r6, r3
 8000ec4:	4264      	negs	r4, r4
 8000ec6:	1b09      	subs	r1, r1, r4
 8000ec8:	2480      	movs	r4, #128	@ 0x80
 8000eca:	0424      	lsls	r4, r4, #16
 8000ecc:	4221      	tst	r1, r4
 8000ece:	d077      	beq.n	8000fc0 <__aeabi_dadd+0x6e8>
 8000ed0:	1a10      	subs	r0, r2, r0
 8000ed2:	4282      	cmp	r2, r0
 8000ed4:	4192      	sbcs	r2, r2
 8000ed6:	0007      	movs	r7, r0
 8000ed8:	1b9e      	subs	r6, r3, r6
 8000eda:	4252      	negs	r2, r2
 8000edc:	1ab6      	subs	r6, r6, r2
 8000ede:	4337      	orrs	r7, r6
 8000ee0:	d000      	beq.n	8000ee4 <__aeabi_dadd+0x60c>
 8000ee2:	e0a0      	b.n	8001026 <__aeabi_dadd+0x74e>
 8000ee4:	4665      	mov	r5, ip
 8000ee6:	2400      	movs	r4, #0
 8000ee8:	2600      	movs	r6, #0
 8000eea:	e63e      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000eec:	075f      	lsls	r7, r3, #29
 8000eee:	08d2      	lsrs	r2, r2, #3
 8000ef0:	4665      	mov	r5, ip
 8000ef2:	4317      	orrs	r7, r2
 8000ef4:	08d8      	lsrs	r0, r3, #3
 8000ef6:	e653      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000ef8:	1881      	adds	r1, r0, r2
 8000efa:	4291      	cmp	r1, r2
 8000efc:	4192      	sbcs	r2, r2
 8000efe:	18f0      	adds	r0, r6, r3
 8000f00:	4252      	negs	r2, r2
 8000f02:	1880      	adds	r0, r0, r2
 8000f04:	0203      	lsls	r3, r0, #8
 8000f06:	d500      	bpl.n	8000f0a <__aeabi_dadd+0x632>
 8000f08:	e768      	b.n	8000ddc <__aeabi_dadd+0x504>
 8000f0a:	0747      	lsls	r7, r0, #29
 8000f0c:	08c9      	lsrs	r1, r1, #3
 8000f0e:	430f      	orrs	r7, r1
 8000f10:	08c0      	lsrs	r0, r0, #3
 8000f12:	2101      	movs	r1, #1
 8000f14:	e617      	b.n	8000b46 <__aeabi_dadd+0x26e>
 8000f16:	08d2      	lsrs	r2, r2, #3
 8000f18:	075f      	lsls	r7, r3, #29
 8000f1a:	4317      	orrs	r7, r2
 8000f1c:	08d8      	lsrs	r0, r3, #3
 8000f1e:	e63f      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000f20:	000c      	movs	r4, r1
 8000f22:	2600      	movs	r6, #0
 8000f24:	2700      	movs	r7, #0
 8000f26:	e620      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000f28:	2900      	cmp	r1, #0
 8000f2a:	d156      	bne.n	8000fda <__aeabi_dadd+0x702>
 8000f2c:	075f      	lsls	r7, r3, #29
 8000f2e:	08d2      	lsrs	r2, r2, #3
 8000f30:	4317      	orrs	r7, r2
 8000f32:	08d8      	lsrs	r0, r3, #3
 8000f34:	e634      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000f36:	000c      	movs	r4, r1
 8000f38:	001e      	movs	r6, r3
 8000f3a:	08d0      	lsrs	r0, r2, #3
 8000f3c:	e629      	b.n	8000b92 <__aeabi_dadd+0x2ba>
 8000f3e:	08c1      	lsrs	r1, r0, #3
 8000f40:	0770      	lsls	r0, r6, #29
 8000f42:	4301      	orrs	r1, r0
 8000f44:	08f0      	lsrs	r0, r6, #3
 8000f46:	2f00      	cmp	r7, #0
 8000f48:	d062      	beq.n	8001010 <__aeabi_dadd+0x738>
 8000f4a:	2480      	movs	r4, #128	@ 0x80
 8000f4c:	0324      	lsls	r4, r4, #12
 8000f4e:	4220      	tst	r0, r4
 8000f50:	d007      	beq.n	8000f62 <__aeabi_dadd+0x68a>
 8000f52:	08de      	lsrs	r6, r3, #3
 8000f54:	4226      	tst	r6, r4
 8000f56:	d104      	bne.n	8000f62 <__aeabi_dadd+0x68a>
 8000f58:	4665      	mov	r5, ip
 8000f5a:	0030      	movs	r0, r6
 8000f5c:	08d1      	lsrs	r1, r2, #3
 8000f5e:	075b      	lsls	r3, r3, #29
 8000f60:	4319      	orrs	r1, r3
 8000f62:	0f4f      	lsrs	r7, r1, #29
 8000f64:	00c9      	lsls	r1, r1, #3
 8000f66:	08c9      	lsrs	r1, r1, #3
 8000f68:	077f      	lsls	r7, r7, #29
 8000f6a:	430f      	orrs	r7, r1
 8000f6c:	e618      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000f6e:	000c      	movs	r4, r1
 8000f70:	0030      	movs	r0, r6
 8000f72:	3c20      	subs	r4, #32
 8000f74:	40e0      	lsrs	r0, r4
 8000f76:	4684      	mov	ip, r0
 8000f78:	2920      	cmp	r1, #32
 8000f7a:	d005      	beq.n	8000f88 <__aeabi_dadd+0x6b0>
 8000f7c:	2440      	movs	r4, #64	@ 0x40
 8000f7e:	1a61      	subs	r1, r4, r1
 8000f80:	408e      	lsls	r6, r1
 8000f82:	4649      	mov	r1, r9
 8000f84:	4331      	orrs	r1, r6
 8000f86:	4689      	mov	r9, r1
 8000f88:	4648      	mov	r0, r9
 8000f8a:	1e41      	subs	r1, r0, #1
 8000f8c:	4188      	sbcs	r0, r1
 8000f8e:	4661      	mov	r1, ip
 8000f90:	0007      	movs	r7, r0
 8000f92:	430f      	orrs	r7, r1
 8000f94:	e630      	b.n	8000bf8 <__aeabi_dadd+0x320>
 8000f96:	2120      	movs	r1, #32
 8000f98:	2700      	movs	r7, #0
 8000f9a:	1a09      	subs	r1, r1, r0
 8000f9c:	e50e      	b.n	80009bc <__aeabi_dadd+0xe4>
 8000f9e:	001e      	movs	r6, r3
 8000fa0:	2f00      	cmp	r7, #0
 8000fa2:	d000      	beq.n	8000fa6 <__aeabi_dadd+0x6ce>
 8000fa4:	e522      	b.n	80009ec <__aeabi_dadd+0x114>
 8000fa6:	2400      	movs	r4, #0
 8000fa8:	e758      	b.n	8000e5c <__aeabi_dadd+0x584>
 8000faa:	2500      	movs	r5, #0
 8000fac:	2400      	movs	r4, #0
 8000fae:	2600      	movs	r6, #0
 8000fb0:	e5db      	b.n	8000b6a <__aeabi_dadd+0x292>
 8000fb2:	46c0      	nop			@ (mov r8, r8)
 8000fb4:	000007fe 	.word	0x000007fe
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	ff7fffff 	.word	0xff7fffff
 8000fc0:	4647      	mov	r7, r8
 8000fc2:	430f      	orrs	r7, r1
 8000fc4:	d100      	bne.n	8000fc8 <__aeabi_dadd+0x6f0>
 8000fc6:	e747      	b.n	8000e58 <__aeabi_dadd+0x580>
 8000fc8:	000e      	movs	r6, r1
 8000fca:	46c1      	mov	r9, r8
 8000fcc:	e5b5      	b.n	8000b3a <__aeabi_dadd+0x262>
 8000fce:	08df      	lsrs	r7, r3, #3
 8000fd0:	0764      	lsls	r4, r4, #29
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4327      	orrs	r7, r4
 8000fd6:	0900      	lsrs	r0, r0, #4
 8000fd8:	e5b5      	b.n	8000b46 <__aeabi_dadd+0x26e>
 8000fda:	0019      	movs	r1, r3
 8000fdc:	08c0      	lsrs	r0, r0, #3
 8000fde:	0777      	lsls	r7, r6, #29
 8000fe0:	4307      	orrs	r7, r0
 8000fe2:	4311      	orrs	r1, r2
 8000fe4:	08f0      	lsrs	r0, r6, #3
 8000fe6:	2900      	cmp	r1, #0
 8000fe8:	d100      	bne.n	8000fec <__aeabi_dadd+0x714>
 8000fea:	e5d9      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8000fec:	2180      	movs	r1, #128	@ 0x80
 8000fee:	0309      	lsls	r1, r1, #12
 8000ff0:	4208      	tst	r0, r1
 8000ff2:	d007      	beq.n	8001004 <__aeabi_dadd+0x72c>
 8000ff4:	08dc      	lsrs	r4, r3, #3
 8000ff6:	420c      	tst	r4, r1
 8000ff8:	d104      	bne.n	8001004 <__aeabi_dadd+0x72c>
 8000ffa:	08d2      	lsrs	r2, r2, #3
 8000ffc:	075b      	lsls	r3, r3, #29
 8000ffe:	431a      	orrs	r2, r3
 8001000:	0017      	movs	r7, r2
 8001002:	0020      	movs	r0, r4
 8001004:	0f7b      	lsrs	r3, r7, #29
 8001006:	00ff      	lsls	r7, r7, #3
 8001008:	08ff      	lsrs	r7, r7, #3
 800100a:	075b      	lsls	r3, r3, #29
 800100c:	431f      	orrs	r7, r3
 800100e:	e5c7      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8001010:	000f      	movs	r7, r1
 8001012:	e5c5      	b.n	8000ba0 <__aeabi_dadd+0x2c8>
 8001014:	4b12      	ldr	r3, [pc, #72]	@ (8001060 <__aeabi_dadd+0x788>)
 8001016:	08d2      	lsrs	r2, r2, #3
 8001018:	4033      	ands	r3, r6
 800101a:	075f      	lsls	r7, r3, #29
 800101c:	025b      	lsls	r3, r3, #9
 800101e:	2401      	movs	r4, #1
 8001020:	4317      	orrs	r7, r2
 8001022:	0b1e      	lsrs	r6, r3, #12
 8001024:	e5a1      	b.n	8000b6a <__aeabi_dadd+0x292>
 8001026:	4226      	tst	r6, r4
 8001028:	d012      	beq.n	8001050 <__aeabi_dadd+0x778>
 800102a:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <__aeabi_dadd+0x788>)
 800102c:	4665      	mov	r5, ip
 800102e:	0002      	movs	r2, r0
 8001030:	2401      	movs	r4, #1
 8001032:	401e      	ands	r6, r3
 8001034:	e4e6      	b.n	8000a04 <__aeabi_dadd+0x12c>
 8001036:	0021      	movs	r1, r4
 8001038:	e585      	b.n	8000b46 <__aeabi_dadd+0x26e>
 800103a:	0017      	movs	r7, r2
 800103c:	e5a8      	b.n	8000b90 <__aeabi_dadd+0x2b8>
 800103e:	003a      	movs	r2, r7
 8001040:	e4d4      	b.n	80009ec <__aeabi_dadd+0x114>
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	0764      	lsls	r4, r4, #29
 8001046:	431c      	orrs	r4, r3
 8001048:	0027      	movs	r7, r4
 800104a:	2102      	movs	r1, #2
 800104c:	0900      	lsrs	r0, r0, #4
 800104e:	e57a      	b.n	8000b46 <__aeabi_dadd+0x26e>
 8001050:	08c0      	lsrs	r0, r0, #3
 8001052:	0777      	lsls	r7, r6, #29
 8001054:	4307      	orrs	r7, r0
 8001056:	4665      	mov	r5, ip
 8001058:	2100      	movs	r1, #0
 800105a:	08f0      	lsrs	r0, r6, #3
 800105c:	e573      	b.n	8000b46 <__aeabi_dadd+0x26e>
 800105e:	46c0      	nop			@ (mov r8, r8)
 8001060:	ff7fffff 	.word	0xff7fffff

08001064 <__aeabi_ddiv>:
 8001064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001066:	46de      	mov	lr, fp
 8001068:	4645      	mov	r5, r8
 800106a:	4657      	mov	r7, sl
 800106c:	464e      	mov	r6, r9
 800106e:	b5e0      	push	{r5, r6, r7, lr}
 8001070:	b087      	sub	sp, #28
 8001072:	9200      	str	r2, [sp, #0]
 8001074:	9301      	str	r3, [sp, #4]
 8001076:	030b      	lsls	r3, r1, #12
 8001078:	0b1b      	lsrs	r3, r3, #12
 800107a:	469b      	mov	fp, r3
 800107c:	0fca      	lsrs	r2, r1, #31
 800107e:	004b      	lsls	r3, r1, #1
 8001080:	0004      	movs	r4, r0
 8001082:	4680      	mov	r8, r0
 8001084:	0d5b      	lsrs	r3, r3, #21
 8001086:	9202      	str	r2, [sp, #8]
 8001088:	d100      	bne.n	800108c <__aeabi_ddiv+0x28>
 800108a:	e098      	b.n	80011be <__aeabi_ddiv+0x15a>
 800108c:	4a7c      	ldr	r2, [pc, #496]	@ (8001280 <__aeabi_ddiv+0x21c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d037      	beq.n	8001102 <__aeabi_ddiv+0x9e>
 8001092:	4659      	mov	r1, fp
 8001094:	0f42      	lsrs	r2, r0, #29
 8001096:	00c9      	lsls	r1, r1, #3
 8001098:	430a      	orrs	r2, r1
 800109a:	2180      	movs	r1, #128	@ 0x80
 800109c:	0409      	lsls	r1, r1, #16
 800109e:	4311      	orrs	r1, r2
 80010a0:	00c2      	lsls	r2, r0, #3
 80010a2:	4690      	mov	r8, r2
 80010a4:	4a77      	ldr	r2, [pc, #476]	@ (8001284 <__aeabi_ddiv+0x220>)
 80010a6:	4689      	mov	r9, r1
 80010a8:	4692      	mov	sl, r2
 80010aa:	449a      	add	sl, r3
 80010ac:	2300      	movs	r3, #0
 80010ae:	2400      	movs	r4, #0
 80010b0:	9303      	str	r3, [sp, #12]
 80010b2:	9e00      	ldr	r6, [sp, #0]
 80010b4:	9f01      	ldr	r7, [sp, #4]
 80010b6:	033b      	lsls	r3, r7, #12
 80010b8:	0b1b      	lsrs	r3, r3, #12
 80010ba:	469b      	mov	fp, r3
 80010bc:	007b      	lsls	r3, r7, #1
 80010be:	0030      	movs	r0, r6
 80010c0:	0d5b      	lsrs	r3, r3, #21
 80010c2:	0ffd      	lsrs	r5, r7, #31
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d059      	beq.n	800117c <__aeabi_ddiv+0x118>
 80010c8:	4a6d      	ldr	r2, [pc, #436]	@ (8001280 <__aeabi_ddiv+0x21c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d048      	beq.n	8001160 <__aeabi_ddiv+0xfc>
 80010ce:	4659      	mov	r1, fp
 80010d0:	0f72      	lsrs	r2, r6, #29
 80010d2:	00c9      	lsls	r1, r1, #3
 80010d4:	430a      	orrs	r2, r1
 80010d6:	2180      	movs	r1, #128	@ 0x80
 80010d8:	0409      	lsls	r1, r1, #16
 80010da:	4311      	orrs	r1, r2
 80010dc:	468b      	mov	fp, r1
 80010de:	4969      	ldr	r1, [pc, #420]	@ (8001284 <__aeabi_ddiv+0x220>)
 80010e0:	00f2      	lsls	r2, r6, #3
 80010e2:	468c      	mov	ip, r1
 80010e4:	4651      	mov	r1, sl
 80010e6:	4463      	add	r3, ip
 80010e8:	1acb      	subs	r3, r1, r3
 80010ea:	469a      	mov	sl, r3
 80010ec:	2100      	movs	r1, #0
 80010ee:	9e02      	ldr	r6, [sp, #8]
 80010f0:	406e      	eors	r6, r5
 80010f2:	b2f6      	uxtb	r6, r6
 80010f4:	2c0f      	cmp	r4, #15
 80010f6:	d900      	bls.n	80010fa <__aeabi_ddiv+0x96>
 80010f8:	e0ce      	b.n	8001298 <__aeabi_ddiv+0x234>
 80010fa:	4b63      	ldr	r3, [pc, #396]	@ (8001288 <__aeabi_ddiv+0x224>)
 80010fc:	00a4      	lsls	r4, r4, #2
 80010fe:	591b      	ldr	r3, [r3, r4]
 8001100:	469f      	mov	pc, r3
 8001102:	465a      	mov	r2, fp
 8001104:	4302      	orrs	r2, r0
 8001106:	4691      	mov	r9, r2
 8001108:	d000      	beq.n	800110c <__aeabi_ddiv+0xa8>
 800110a:	e090      	b.n	800122e <__aeabi_ddiv+0x1ca>
 800110c:	469a      	mov	sl, r3
 800110e:	2302      	movs	r3, #2
 8001110:	4690      	mov	r8, r2
 8001112:	2408      	movs	r4, #8
 8001114:	9303      	str	r3, [sp, #12]
 8001116:	e7cc      	b.n	80010b2 <__aeabi_ddiv+0x4e>
 8001118:	46cb      	mov	fp, r9
 800111a:	4642      	mov	r2, r8
 800111c:	9d02      	ldr	r5, [sp, #8]
 800111e:	9903      	ldr	r1, [sp, #12]
 8001120:	2902      	cmp	r1, #2
 8001122:	d100      	bne.n	8001126 <__aeabi_ddiv+0xc2>
 8001124:	e1de      	b.n	80014e4 <__aeabi_ddiv+0x480>
 8001126:	2903      	cmp	r1, #3
 8001128:	d100      	bne.n	800112c <__aeabi_ddiv+0xc8>
 800112a:	e08d      	b.n	8001248 <__aeabi_ddiv+0x1e4>
 800112c:	2901      	cmp	r1, #1
 800112e:	d000      	beq.n	8001132 <__aeabi_ddiv+0xce>
 8001130:	e179      	b.n	8001426 <__aeabi_ddiv+0x3c2>
 8001132:	002e      	movs	r6, r5
 8001134:	2200      	movs	r2, #0
 8001136:	2300      	movs	r3, #0
 8001138:	2400      	movs	r4, #0
 800113a:	4690      	mov	r8, r2
 800113c:	051b      	lsls	r3, r3, #20
 800113e:	4323      	orrs	r3, r4
 8001140:	07f6      	lsls	r6, r6, #31
 8001142:	4333      	orrs	r3, r6
 8001144:	4640      	mov	r0, r8
 8001146:	0019      	movs	r1, r3
 8001148:	b007      	add	sp, #28
 800114a:	bcf0      	pop	{r4, r5, r6, r7}
 800114c:	46bb      	mov	fp, r7
 800114e:	46b2      	mov	sl, r6
 8001150:	46a9      	mov	r9, r5
 8001152:	46a0      	mov	r8, r4
 8001154:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001156:	2200      	movs	r2, #0
 8001158:	2400      	movs	r4, #0
 800115a:	4690      	mov	r8, r2
 800115c:	4b48      	ldr	r3, [pc, #288]	@ (8001280 <__aeabi_ddiv+0x21c>)
 800115e:	e7ed      	b.n	800113c <__aeabi_ddiv+0xd8>
 8001160:	465a      	mov	r2, fp
 8001162:	9b00      	ldr	r3, [sp, #0]
 8001164:	431a      	orrs	r2, r3
 8001166:	4b49      	ldr	r3, [pc, #292]	@ (800128c <__aeabi_ddiv+0x228>)
 8001168:	469c      	mov	ip, r3
 800116a:	44e2      	add	sl, ip
 800116c:	2a00      	cmp	r2, #0
 800116e:	d159      	bne.n	8001224 <__aeabi_ddiv+0x1c0>
 8001170:	2302      	movs	r3, #2
 8001172:	431c      	orrs	r4, r3
 8001174:	2300      	movs	r3, #0
 8001176:	2102      	movs	r1, #2
 8001178:	469b      	mov	fp, r3
 800117a:	e7b8      	b.n	80010ee <__aeabi_ddiv+0x8a>
 800117c:	465a      	mov	r2, fp
 800117e:	9b00      	ldr	r3, [sp, #0]
 8001180:	431a      	orrs	r2, r3
 8001182:	d049      	beq.n	8001218 <__aeabi_ddiv+0x1b4>
 8001184:	465b      	mov	r3, fp
 8001186:	2b00      	cmp	r3, #0
 8001188:	d100      	bne.n	800118c <__aeabi_ddiv+0x128>
 800118a:	e19c      	b.n	80014c6 <__aeabi_ddiv+0x462>
 800118c:	4658      	mov	r0, fp
 800118e:	f001 fc0d 	bl	80029ac <__clzsi2>
 8001192:	0002      	movs	r2, r0
 8001194:	0003      	movs	r3, r0
 8001196:	3a0b      	subs	r2, #11
 8001198:	271d      	movs	r7, #29
 800119a:	9e00      	ldr	r6, [sp, #0]
 800119c:	1aba      	subs	r2, r7, r2
 800119e:	0019      	movs	r1, r3
 80011a0:	4658      	mov	r0, fp
 80011a2:	40d6      	lsrs	r6, r2
 80011a4:	3908      	subs	r1, #8
 80011a6:	4088      	lsls	r0, r1
 80011a8:	0032      	movs	r2, r6
 80011aa:	4302      	orrs	r2, r0
 80011ac:	4693      	mov	fp, r2
 80011ae:	9a00      	ldr	r2, [sp, #0]
 80011b0:	408a      	lsls	r2, r1
 80011b2:	4937      	ldr	r1, [pc, #220]	@ (8001290 <__aeabi_ddiv+0x22c>)
 80011b4:	4453      	add	r3, sl
 80011b6:	468a      	mov	sl, r1
 80011b8:	2100      	movs	r1, #0
 80011ba:	449a      	add	sl, r3
 80011bc:	e797      	b.n	80010ee <__aeabi_ddiv+0x8a>
 80011be:	465b      	mov	r3, fp
 80011c0:	4303      	orrs	r3, r0
 80011c2:	4699      	mov	r9, r3
 80011c4:	d021      	beq.n	800120a <__aeabi_ddiv+0x1a6>
 80011c6:	465b      	mov	r3, fp
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x16a>
 80011cc:	e169      	b.n	80014a2 <__aeabi_ddiv+0x43e>
 80011ce:	4658      	mov	r0, fp
 80011d0:	f001 fbec 	bl	80029ac <__clzsi2>
 80011d4:	230b      	movs	r3, #11
 80011d6:	425b      	negs	r3, r3
 80011d8:	469c      	mov	ip, r3
 80011da:	0002      	movs	r2, r0
 80011dc:	4484      	add	ip, r0
 80011de:	4666      	mov	r6, ip
 80011e0:	231d      	movs	r3, #29
 80011e2:	1b9b      	subs	r3, r3, r6
 80011e4:	0026      	movs	r6, r4
 80011e6:	0011      	movs	r1, r2
 80011e8:	4658      	mov	r0, fp
 80011ea:	40de      	lsrs	r6, r3
 80011ec:	3908      	subs	r1, #8
 80011ee:	4088      	lsls	r0, r1
 80011f0:	0033      	movs	r3, r6
 80011f2:	4303      	orrs	r3, r0
 80011f4:	4699      	mov	r9, r3
 80011f6:	0023      	movs	r3, r4
 80011f8:	408b      	lsls	r3, r1
 80011fa:	4698      	mov	r8, r3
 80011fc:	4b25      	ldr	r3, [pc, #148]	@ (8001294 <__aeabi_ddiv+0x230>)
 80011fe:	2400      	movs	r4, #0
 8001200:	1a9b      	subs	r3, r3, r2
 8001202:	469a      	mov	sl, r3
 8001204:	2300      	movs	r3, #0
 8001206:	9303      	str	r3, [sp, #12]
 8001208:	e753      	b.n	80010b2 <__aeabi_ddiv+0x4e>
 800120a:	2300      	movs	r3, #0
 800120c:	4698      	mov	r8, r3
 800120e:	469a      	mov	sl, r3
 8001210:	3301      	adds	r3, #1
 8001212:	2404      	movs	r4, #4
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	e74c      	b.n	80010b2 <__aeabi_ddiv+0x4e>
 8001218:	2301      	movs	r3, #1
 800121a:	431c      	orrs	r4, r3
 800121c:	2300      	movs	r3, #0
 800121e:	2101      	movs	r1, #1
 8001220:	469b      	mov	fp, r3
 8001222:	e764      	b.n	80010ee <__aeabi_ddiv+0x8a>
 8001224:	2303      	movs	r3, #3
 8001226:	0032      	movs	r2, r6
 8001228:	2103      	movs	r1, #3
 800122a:	431c      	orrs	r4, r3
 800122c:	e75f      	b.n	80010ee <__aeabi_ddiv+0x8a>
 800122e:	469a      	mov	sl, r3
 8001230:	2303      	movs	r3, #3
 8001232:	46d9      	mov	r9, fp
 8001234:	240c      	movs	r4, #12
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	e73b      	b.n	80010b2 <__aeabi_ddiv+0x4e>
 800123a:	2300      	movs	r3, #0
 800123c:	2480      	movs	r4, #128	@ 0x80
 800123e:	4698      	mov	r8, r3
 8001240:	2600      	movs	r6, #0
 8001242:	4b0f      	ldr	r3, [pc, #60]	@ (8001280 <__aeabi_ddiv+0x21c>)
 8001244:	0324      	lsls	r4, r4, #12
 8001246:	e779      	b.n	800113c <__aeabi_ddiv+0xd8>
 8001248:	2480      	movs	r4, #128	@ 0x80
 800124a:	465b      	mov	r3, fp
 800124c:	0324      	lsls	r4, r4, #12
 800124e:	431c      	orrs	r4, r3
 8001250:	0324      	lsls	r4, r4, #12
 8001252:	002e      	movs	r6, r5
 8001254:	4690      	mov	r8, r2
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <__aeabi_ddiv+0x21c>)
 8001258:	0b24      	lsrs	r4, r4, #12
 800125a:	e76f      	b.n	800113c <__aeabi_ddiv+0xd8>
 800125c:	2480      	movs	r4, #128	@ 0x80
 800125e:	464b      	mov	r3, r9
 8001260:	0324      	lsls	r4, r4, #12
 8001262:	4223      	tst	r3, r4
 8001264:	d002      	beq.n	800126c <__aeabi_ddiv+0x208>
 8001266:	465b      	mov	r3, fp
 8001268:	4223      	tst	r3, r4
 800126a:	d0f0      	beq.n	800124e <__aeabi_ddiv+0x1ea>
 800126c:	2480      	movs	r4, #128	@ 0x80
 800126e:	464b      	mov	r3, r9
 8001270:	0324      	lsls	r4, r4, #12
 8001272:	431c      	orrs	r4, r3
 8001274:	0324      	lsls	r4, r4, #12
 8001276:	9e02      	ldr	r6, [sp, #8]
 8001278:	4b01      	ldr	r3, [pc, #4]	@ (8001280 <__aeabi_ddiv+0x21c>)
 800127a:	0b24      	lsrs	r4, r4, #12
 800127c:	e75e      	b.n	800113c <__aeabi_ddiv+0xd8>
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	000007ff 	.word	0x000007ff
 8001284:	fffffc01 	.word	0xfffffc01
 8001288:	0800b414 	.word	0x0800b414
 800128c:	fffff801 	.word	0xfffff801
 8001290:	000003f3 	.word	0x000003f3
 8001294:	fffffc0d 	.word	0xfffffc0d
 8001298:	45cb      	cmp	fp, r9
 800129a:	d200      	bcs.n	800129e <__aeabi_ddiv+0x23a>
 800129c:	e0f8      	b.n	8001490 <__aeabi_ddiv+0x42c>
 800129e:	d100      	bne.n	80012a2 <__aeabi_ddiv+0x23e>
 80012a0:	e0f3      	b.n	800148a <__aeabi_ddiv+0x426>
 80012a2:	2301      	movs	r3, #1
 80012a4:	425b      	negs	r3, r3
 80012a6:	469c      	mov	ip, r3
 80012a8:	4644      	mov	r4, r8
 80012aa:	4648      	mov	r0, r9
 80012ac:	2500      	movs	r5, #0
 80012ae:	44e2      	add	sl, ip
 80012b0:	465b      	mov	r3, fp
 80012b2:	0e17      	lsrs	r7, r2, #24
 80012b4:	021b      	lsls	r3, r3, #8
 80012b6:	431f      	orrs	r7, r3
 80012b8:	0c19      	lsrs	r1, r3, #16
 80012ba:	043b      	lsls	r3, r7, #16
 80012bc:	0212      	lsls	r2, r2, #8
 80012be:	9700      	str	r7, [sp, #0]
 80012c0:	0c1f      	lsrs	r7, r3, #16
 80012c2:	4691      	mov	r9, r2
 80012c4:	9102      	str	r1, [sp, #8]
 80012c6:	9703      	str	r7, [sp, #12]
 80012c8:	f7fe ffc0 	bl	800024c <__aeabi_uidivmod>
 80012cc:	0002      	movs	r2, r0
 80012ce:	437a      	muls	r2, r7
 80012d0:	040b      	lsls	r3, r1, #16
 80012d2:	0c21      	lsrs	r1, r4, #16
 80012d4:	4680      	mov	r8, r0
 80012d6:	4319      	orrs	r1, r3
 80012d8:	428a      	cmp	r2, r1
 80012da:	d909      	bls.n	80012f0 <__aeabi_ddiv+0x28c>
 80012dc:	9f00      	ldr	r7, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	46bc      	mov	ip, r7
 80012e2:	425b      	negs	r3, r3
 80012e4:	4461      	add	r1, ip
 80012e6:	469c      	mov	ip, r3
 80012e8:	44e0      	add	r8, ip
 80012ea:	428f      	cmp	r7, r1
 80012ec:	d800      	bhi.n	80012f0 <__aeabi_ddiv+0x28c>
 80012ee:	e15c      	b.n	80015aa <__aeabi_ddiv+0x546>
 80012f0:	1a88      	subs	r0, r1, r2
 80012f2:	9902      	ldr	r1, [sp, #8]
 80012f4:	f7fe ffaa 	bl	800024c <__aeabi_uidivmod>
 80012f8:	9a03      	ldr	r2, [sp, #12]
 80012fa:	0424      	lsls	r4, r4, #16
 80012fc:	4342      	muls	r2, r0
 80012fe:	0409      	lsls	r1, r1, #16
 8001300:	0c24      	lsrs	r4, r4, #16
 8001302:	0003      	movs	r3, r0
 8001304:	430c      	orrs	r4, r1
 8001306:	42a2      	cmp	r2, r4
 8001308:	d906      	bls.n	8001318 <__aeabi_ddiv+0x2b4>
 800130a:	9900      	ldr	r1, [sp, #0]
 800130c:	3b01      	subs	r3, #1
 800130e:	468c      	mov	ip, r1
 8001310:	4464      	add	r4, ip
 8001312:	42a1      	cmp	r1, r4
 8001314:	d800      	bhi.n	8001318 <__aeabi_ddiv+0x2b4>
 8001316:	e142      	b.n	800159e <__aeabi_ddiv+0x53a>
 8001318:	1aa0      	subs	r0, r4, r2
 800131a:	4642      	mov	r2, r8
 800131c:	0412      	lsls	r2, r2, #16
 800131e:	431a      	orrs	r2, r3
 8001320:	4693      	mov	fp, r2
 8001322:	464b      	mov	r3, r9
 8001324:	4659      	mov	r1, fp
 8001326:	0c1b      	lsrs	r3, r3, #16
 8001328:	001f      	movs	r7, r3
 800132a:	9304      	str	r3, [sp, #16]
 800132c:	040b      	lsls	r3, r1, #16
 800132e:	4649      	mov	r1, r9
 8001330:	0409      	lsls	r1, r1, #16
 8001332:	0c09      	lsrs	r1, r1, #16
 8001334:	000c      	movs	r4, r1
 8001336:	0c1b      	lsrs	r3, r3, #16
 8001338:	435c      	muls	r4, r3
 800133a:	0c12      	lsrs	r2, r2, #16
 800133c:	437b      	muls	r3, r7
 800133e:	4688      	mov	r8, r1
 8001340:	4351      	muls	r1, r2
 8001342:	437a      	muls	r2, r7
 8001344:	0c27      	lsrs	r7, r4, #16
 8001346:	46bc      	mov	ip, r7
 8001348:	185b      	adds	r3, r3, r1
 800134a:	4463      	add	r3, ip
 800134c:	4299      	cmp	r1, r3
 800134e:	d903      	bls.n	8001358 <__aeabi_ddiv+0x2f4>
 8001350:	2180      	movs	r1, #128	@ 0x80
 8001352:	0249      	lsls	r1, r1, #9
 8001354:	468c      	mov	ip, r1
 8001356:	4462      	add	r2, ip
 8001358:	0c19      	lsrs	r1, r3, #16
 800135a:	0424      	lsls	r4, r4, #16
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	0c24      	lsrs	r4, r4, #16
 8001360:	188a      	adds	r2, r1, r2
 8001362:	191c      	adds	r4, r3, r4
 8001364:	4290      	cmp	r0, r2
 8001366:	d302      	bcc.n	800136e <__aeabi_ddiv+0x30a>
 8001368:	d116      	bne.n	8001398 <__aeabi_ddiv+0x334>
 800136a:	42a5      	cmp	r5, r4
 800136c:	d214      	bcs.n	8001398 <__aeabi_ddiv+0x334>
 800136e:	465b      	mov	r3, fp
 8001370:	9f00      	ldr	r7, [sp, #0]
 8001372:	3b01      	subs	r3, #1
 8001374:	444d      	add	r5, r9
 8001376:	9305      	str	r3, [sp, #20]
 8001378:	454d      	cmp	r5, r9
 800137a:	419b      	sbcs	r3, r3
 800137c:	46bc      	mov	ip, r7
 800137e:	425b      	negs	r3, r3
 8001380:	4463      	add	r3, ip
 8001382:	18c0      	adds	r0, r0, r3
 8001384:	4287      	cmp	r7, r0
 8001386:	d300      	bcc.n	800138a <__aeabi_ddiv+0x326>
 8001388:	e102      	b.n	8001590 <__aeabi_ddiv+0x52c>
 800138a:	4282      	cmp	r2, r0
 800138c:	d900      	bls.n	8001390 <__aeabi_ddiv+0x32c>
 800138e:	e129      	b.n	80015e4 <__aeabi_ddiv+0x580>
 8001390:	d100      	bne.n	8001394 <__aeabi_ddiv+0x330>
 8001392:	e124      	b.n	80015de <__aeabi_ddiv+0x57a>
 8001394:	9b05      	ldr	r3, [sp, #20]
 8001396:	469b      	mov	fp, r3
 8001398:	1b2c      	subs	r4, r5, r4
 800139a:	42a5      	cmp	r5, r4
 800139c:	41ad      	sbcs	r5, r5
 800139e:	9b00      	ldr	r3, [sp, #0]
 80013a0:	1a80      	subs	r0, r0, r2
 80013a2:	426d      	negs	r5, r5
 80013a4:	1b40      	subs	r0, r0, r5
 80013a6:	4283      	cmp	r3, r0
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x348>
 80013aa:	e10f      	b.n	80015cc <__aeabi_ddiv+0x568>
 80013ac:	9902      	ldr	r1, [sp, #8]
 80013ae:	f7fe ff4d 	bl	800024c <__aeabi_uidivmod>
 80013b2:	9a03      	ldr	r2, [sp, #12]
 80013b4:	040b      	lsls	r3, r1, #16
 80013b6:	4342      	muls	r2, r0
 80013b8:	0c21      	lsrs	r1, r4, #16
 80013ba:	0005      	movs	r5, r0
 80013bc:	4319      	orrs	r1, r3
 80013be:	428a      	cmp	r2, r1
 80013c0:	d900      	bls.n	80013c4 <__aeabi_ddiv+0x360>
 80013c2:	e0cb      	b.n	800155c <__aeabi_ddiv+0x4f8>
 80013c4:	1a88      	subs	r0, r1, r2
 80013c6:	9902      	ldr	r1, [sp, #8]
 80013c8:	f7fe ff40 	bl	800024c <__aeabi_uidivmod>
 80013cc:	9a03      	ldr	r2, [sp, #12]
 80013ce:	0424      	lsls	r4, r4, #16
 80013d0:	4342      	muls	r2, r0
 80013d2:	0409      	lsls	r1, r1, #16
 80013d4:	0c24      	lsrs	r4, r4, #16
 80013d6:	0003      	movs	r3, r0
 80013d8:	430c      	orrs	r4, r1
 80013da:	42a2      	cmp	r2, r4
 80013dc:	d900      	bls.n	80013e0 <__aeabi_ddiv+0x37c>
 80013de:	e0ca      	b.n	8001576 <__aeabi_ddiv+0x512>
 80013e0:	4641      	mov	r1, r8
 80013e2:	1aa4      	subs	r4, r4, r2
 80013e4:	042a      	lsls	r2, r5, #16
 80013e6:	431a      	orrs	r2, r3
 80013e8:	9f04      	ldr	r7, [sp, #16]
 80013ea:	0413      	lsls	r3, r2, #16
 80013ec:	0c1b      	lsrs	r3, r3, #16
 80013ee:	4359      	muls	r1, r3
 80013f0:	4640      	mov	r0, r8
 80013f2:	437b      	muls	r3, r7
 80013f4:	469c      	mov	ip, r3
 80013f6:	0c15      	lsrs	r5, r2, #16
 80013f8:	4368      	muls	r0, r5
 80013fa:	0c0b      	lsrs	r3, r1, #16
 80013fc:	4484      	add	ip, r0
 80013fe:	4463      	add	r3, ip
 8001400:	437d      	muls	r5, r7
 8001402:	4298      	cmp	r0, r3
 8001404:	d903      	bls.n	800140e <__aeabi_ddiv+0x3aa>
 8001406:	2080      	movs	r0, #128	@ 0x80
 8001408:	0240      	lsls	r0, r0, #9
 800140a:	4684      	mov	ip, r0
 800140c:	4465      	add	r5, ip
 800140e:	0c18      	lsrs	r0, r3, #16
 8001410:	0409      	lsls	r1, r1, #16
 8001412:	041b      	lsls	r3, r3, #16
 8001414:	0c09      	lsrs	r1, r1, #16
 8001416:	1940      	adds	r0, r0, r5
 8001418:	185b      	adds	r3, r3, r1
 800141a:	4284      	cmp	r4, r0
 800141c:	d327      	bcc.n	800146e <__aeabi_ddiv+0x40a>
 800141e:	d023      	beq.n	8001468 <__aeabi_ddiv+0x404>
 8001420:	2301      	movs	r3, #1
 8001422:	0035      	movs	r5, r6
 8001424:	431a      	orrs	r2, r3
 8001426:	4b94      	ldr	r3, [pc, #592]	@ (8001678 <__aeabi_ddiv+0x614>)
 8001428:	4453      	add	r3, sl
 800142a:	2b00      	cmp	r3, #0
 800142c:	dd60      	ble.n	80014f0 <__aeabi_ddiv+0x48c>
 800142e:	0751      	lsls	r1, r2, #29
 8001430:	d000      	beq.n	8001434 <__aeabi_ddiv+0x3d0>
 8001432:	e086      	b.n	8001542 <__aeabi_ddiv+0x4de>
 8001434:	002e      	movs	r6, r5
 8001436:	08d1      	lsrs	r1, r2, #3
 8001438:	465a      	mov	r2, fp
 800143a:	01d2      	lsls	r2, r2, #7
 800143c:	d506      	bpl.n	800144c <__aeabi_ddiv+0x3e8>
 800143e:	465a      	mov	r2, fp
 8001440:	4b8e      	ldr	r3, [pc, #568]	@ (800167c <__aeabi_ddiv+0x618>)
 8001442:	401a      	ands	r2, r3
 8001444:	2380      	movs	r3, #128	@ 0x80
 8001446:	4693      	mov	fp, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	4453      	add	r3, sl
 800144c:	4a8c      	ldr	r2, [pc, #560]	@ (8001680 <__aeabi_ddiv+0x61c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	dd00      	ble.n	8001454 <__aeabi_ddiv+0x3f0>
 8001452:	e680      	b.n	8001156 <__aeabi_ddiv+0xf2>
 8001454:	465a      	mov	r2, fp
 8001456:	0752      	lsls	r2, r2, #29
 8001458:	430a      	orrs	r2, r1
 800145a:	4690      	mov	r8, r2
 800145c:	465a      	mov	r2, fp
 800145e:	055b      	lsls	r3, r3, #21
 8001460:	0254      	lsls	r4, r2, #9
 8001462:	0b24      	lsrs	r4, r4, #12
 8001464:	0d5b      	lsrs	r3, r3, #21
 8001466:	e669      	b.n	800113c <__aeabi_ddiv+0xd8>
 8001468:	0035      	movs	r5, r6
 800146a:	2b00      	cmp	r3, #0
 800146c:	d0db      	beq.n	8001426 <__aeabi_ddiv+0x3c2>
 800146e:	9d00      	ldr	r5, [sp, #0]
 8001470:	1e51      	subs	r1, r2, #1
 8001472:	46ac      	mov	ip, r5
 8001474:	4464      	add	r4, ip
 8001476:	42ac      	cmp	r4, r5
 8001478:	d200      	bcs.n	800147c <__aeabi_ddiv+0x418>
 800147a:	e09e      	b.n	80015ba <__aeabi_ddiv+0x556>
 800147c:	4284      	cmp	r4, r0
 800147e:	d200      	bcs.n	8001482 <__aeabi_ddiv+0x41e>
 8001480:	e0e1      	b.n	8001646 <__aeabi_ddiv+0x5e2>
 8001482:	d100      	bne.n	8001486 <__aeabi_ddiv+0x422>
 8001484:	e0ee      	b.n	8001664 <__aeabi_ddiv+0x600>
 8001486:	000a      	movs	r2, r1
 8001488:	e7ca      	b.n	8001420 <__aeabi_ddiv+0x3bc>
 800148a:	4542      	cmp	r2, r8
 800148c:	d900      	bls.n	8001490 <__aeabi_ddiv+0x42c>
 800148e:	e708      	b.n	80012a2 <__aeabi_ddiv+0x23e>
 8001490:	464b      	mov	r3, r9
 8001492:	07dc      	lsls	r4, r3, #31
 8001494:	0858      	lsrs	r0, r3, #1
 8001496:	4643      	mov	r3, r8
 8001498:	085b      	lsrs	r3, r3, #1
 800149a:	431c      	orrs	r4, r3
 800149c:	4643      	mov	r3, r8
 800149e:	07dd      	lsls	r5, r3, #31
 80014a0:	e706      	b.n	80012b0 <__aeabi_ddiv+0x24c>
 80014a2:	f001 fa83 	bl	80029ac <__clzsi2>
 80014a6:	2315      	movs	r3, #21
 80014a8:	469c      	mov	ip, r3
 80014aa:	4484      	add	ip, r0
 80014ac:	0002      	movs	r2, r0
 80014ae:	4663      	mov	r3, ip
 80014b0:	3220      	adds	r2, #32
 80014b2:	2b1c      	cmp	r3, #28
 80014b4:	dc00      	bgt.n	80014b8 <__aeabi_ddiv+0x454>
 80014b6:	e692      	b.n	80011de <__aeabi_ddiv+0x17a>
 80014b8:	0023      	movs	r3, r4
 80014ba:	3808      	subs	r0, #8
 80014bc:	4083      	lsls	r3, r0
 80014be:	4699      	mov	r9, r3
 80014c0:	2300      	movs	r3, #0
 80014c2:	4698      	mov	r8, r3
 80014c4:	e69a      	b.n	80011fc <__aeabi_ddiv+0x198>
 80014c6:	f001 fa71 	bl	80029ac <__clzsi2>
 80014ca:	0002      	movs	r2, r0
 80014cc:	0003      	movs	r3, r0
 80014ce:	3215      	adds	r2, #21
 80014d0:	3320      	adds	r3, #32
 80014d2:	2a1c      	cmp	r2, #28
 80014d4:	dc00      	bgt.n	80014d8 <__aeabi_ddiv+0x474>
 80014d6:	e65f      	b.n	8001198 <__aeabi_ddiv+0x134>
 80014d8:	9900      	ldr	r1, [sp, #0]
 80014da:	3808      	subs	r0, #8
 80014dc:	4081      	lsls	r1, r0
 80014de:	2200      	movs	r2, #0
 80014e0:	468b      	mov	fp, r1
 80014e2:	e666      	b.n	80011b2 <__aeabi_ddiv+0x14e>
 80014e4:	2200      	movs	r2, #0
 80014e6:	002e      	movs	r6, r5
 80014e8:	2400      	movs	r4, #0
 80014ea:	4690      	mov	r8, r2
 80014ec:	4b65      	ldr	r3, [pc, #404]	@ (8001684 <__aeabi_ddiv+0x620>)
 80014ee:	e625      	b.n	800113c <__aeabi_ddiv+0xd8>
 80014f0:	002e      	movs	r6, r5
 80014f2:	2101      	movs	r1, #1
 80014f4:	1ac9      	subs	r1, r1, r3
 80014f6:	2938      	cmp	r1, #56	@ 0x38
 80014f8:	dd00      	ble.n	80014fc <__aeabi_ddiv+0x498>
 80014fa:	e61b      	b.n	8001134 <__aeabi_ddiv+0xd0>
 80014fc:	291f      	cmp	r1, #31
 80014fe:	dc7e      	bgt.n	80015fe <__aeabi_ddiv+0x59a>
 8001500:	4861      	ldr	r0, [pc, #388]	@ (8001688 <__aeabi_ddiv+0x624>)
 8001502:	0014      	movs	r4, r2
 8001504:	4450      	add	r0, sl
 8001506:	465b      	mov	r3, fp
 8001508:	4082      	lsls	r2, r0
 800150a:	4083      	lsls	r3, r0
 800150c:	40cc      	lsrs	r4, r1
 800150e:	1e50      	subs	r0, r2, #1
 8001510:	4182      	sbcs	r2, r0
 8001512:	4323      	orrs	r3, r4
 8001514:	431a      	orrs	r2, r3
 8001516:	465b      	mov	r3, fp
 8001518:	40cb      	lsrs	r3, r1
 800151a:	0751      	lsls	r1, r2, #29
 800151c:	d009      	beq.n	8001532 <__aeabi_ddiv+0x4ce>
 800151e:	210f      	movs	r1, #15
 8001520:	4011      	ands	r1, r2
 8001522:	2904      	cmp	r1, #4
 8001524:	d005      	beq.n	8001532 <__aeabi_ddiv+0x4ce>
 8001526:	1d11      	adds	r1, r2, #4
 8001528:	4291      	cmp	r1, r2
 800152a:	4192      	sbcs	r2, r2
 800152c:	4252      	negs	r2, r2
 800152e:	189b      	adds	r3, r3, r2
 8001530:	000a      	movs	r2, r1
 8001532:	0219      	lsls	r1, r3, #8
 8001534:	d400      	bmi.n	8001538 <__aeabi_ddiv+0x4d4>
 8001536:	e09b      	b.n	8001670 <__aeabi_ddiv+0x60c>
 8001538:	2200      	movs	r2, #0
 800153a:	2301      	movs	r3, #1
 800153c:	2400      	movs	r4, #0
 800153e:	4690      	mov	r8, r2
 8001540:	e5fc      	b.n	800113c <__aeabi_ddiv+0xd8>
 8001542:	210f      	movs	r1, #15
 8001544:	4011      	ands	r1, r2
 8001546:	2904      	cmp	r1, #4
 8001548:	d100      	bne.n	800154c <__aeabi_ddiv+0x4e8>
 800154a:	e773      	b.n	8001434 <__aeabi_ddiv+0x3d0>
 800154c:	1d11      	adds	r1, r2, #4
 800154e:	4291      	cmp	r1, r2
 8001550:	4192      	sbcs	r2, r2
 8001552:	4252      	negs	r2, r2
 8001554:	002e      	movs	r6, r5
 8001556:	08c9      	lsrs	r1, r1, #3
 8001558:	4493      	add	fp, r2
 800155a:	e76d      	b.n	8001438 <__aeabi_ddiv+0x3d4>
 800155c:	9b00      	ldr	r3, [sp, #0]
 800155e:	3d01      	subs	r5, #1
 8001560:	469c      	mov	ip, r3
 8001562:	4461      	add	r1, ip
 8001564:	428b      	cmp	r3, r1
 8001566:	d900      	bls.n	800156a <__aeabi_ddiv+0x506>
 8001568:	e72c      	b.n	80013c4 <__aeabi_ddiv+0x360>
 800156a:	428a      	cmp	r2, r1
 800156c:	d800      	bhi.n	8001570 <__aeabi_ddiv+0x50c>
 800156e:	e729      	b.n	80013c4 <__aeabi_ddiv+0x360>
 8001570:	1e85      	subs	r5, r0, #2
 8001572:	4461      	add	r1, ip
 8001574:	e726      	b.n	80013c4 <__aeabi_ddiv+0x360>
 8001576:	9900      	ldr	r1, [sp, #0]
 8001578:	3b01      	subs	r3, #1
 800157a:	468c      	mov	ip, r1
 800157c:	4464      	add	r4, ip
 800157e:	42a1      	cmp	r1, r4
 8001580:	d900      	bls.n	8001584 <__aeabi_ddiv+0x520>
 8001582:	e72d      	b.n	80013e0 <__aeabi_ddiv+0x37c>
 8001584:	42a2      	cmp	r2, r4
 8001586:	d800      	bhi.n	800158a <__aeabi_ddiv+0x526>
 8001588:	e72a      	b.n	80013e0 <__aeabi_ddiv+0x37c>
 800158a:	1e83      	subs	r3, r0, #2
 800158c:	4464      	add	r4, ip
 800158e:	e727      	b.n	80013e0 <__aeabi_ddiv+0x37c>
 8001590:	4287      	cmp	r7, r0
 8001592:	d000      	beq.n	8001596 <__aeabi_ddiv+0x532>
 8001594:	e6fe      	b.n	8001394 <__aeabi_ddiv+0x330>
 8001596:	45a9      	cmp	r9, r5
 8001598:	d900      	bls.n	800159c <__aeabi_ddiv+0x538>
 800159a:	e6fb      	b.n	8001394 <__aeabi_ddiv+0x330>
 800159c:	e6f5      	b.n	800138a <__aeabi_ddiv+0x326>
 800159e:	42a2      	cmp	r2, r4
 80015a0:	d800      	bhi.n	80015a4 <__aeabi_ddiv+0x540>
 80015a2:	e6b9      	b.n	8001318 <__aeabi_ddiv+0x2b4>
 80015a4:	1e83      	subs	r3, r0, #2
 80015a6:	4464      	add	r4, ip
 80015a8:	e6b6      	b.n	8001318 <__aeabi_ddiv+0x2b4>
 80015aa:	428a      	cmp	r2, r1
 80015ac:	d800      	bhi.n	80015b0 <__aeabi_ddiv+0x54c>
 80015ae:	e69f      	b.n	80012f0 <__aeabi_ddiv+0x28c>
 80015b0:	46bc      	mov	ip, r7
 80015b2:	1e83      	subs	r3, r0, #2
 80015b4:	4698      	mov	r8, r3
 80015b6:	4461      	add	r1, ip
 80015b8:	e69a      	b.n	80012f0 <__aeabi_ddiv+0x28c>
 80015ba:	000a      	movs	r2, r1
 80015bc:	4284      	cmp	r4, r0
 80015be:	d000      	beq.n	80015c2 <__aeabi_ddiv+0x55e>
 80015c0:	e72e      	b.n	8001420 <__aeabi_ddiv+0x3bc>
 80015c2:	454b      	cmp	r3, r9
 80015c4:	d000      	beq.n	80015c8 <__aeabi_ddiv+0x564>
 80015c6:	e72b      	b.n	8001420 <__aeabi_ddiv+0x3bc>
 80015c8:	0035      	movs	r5, r6
 80015ca:	e72c      	b.n	8001426 <__aeabi_ddiv+0x3c2>
 80015cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001678 <__aeabi_ddiv+0x614>)
 80015ce:	4a2f      	ldr	r2, [pc, #188]	@ (800168c <__aeabi_ddiv+0x628>)
 80015d0:	4453      	add	r3, sl
 80015d2:	4592      	cmp	sl, r2
 80015d4:	db43      	blt.n	800165e <__aeabi_ddiv+0x5fa>
 80015d6:	2201      	movs	r2, #1
 80015d8:	2100      	movs	r1, #0
 80015da:	4493      	add	fp, r2
 80015dc:	e72c      	b.n	8001438 <__aeabi_ddiv+0x3d4>
 80015de:	42ac      	cmp	r4, r5
 80015e0:	d800      	bhi.n	80015e4 <__aeabi_ddiv+0x580>
 80015e2:	e6d7      	b.n	8001394 <__aeabi_ddiv+0x330>
 80015e4:	2302      	movs	r3, #2
 80015e6:	425b      	negs	r3, r3
 80015e8:	469c      	mov	ip, r3
 80015ea:	9900      	ldr	r1, [sp, #0]
 80015ec:	444d      	add	r5, r9
 80015ee:	454d      	cmp	r5, r9
 80015f0:	419b      	sbcs	r3, r3
 80015f2:	44e3      	add	fp, ip
 80015f4:	468c      	mov	ip, r1
 80015f6:	425b      	negs	r3, r3
 80015f8:	4463      	add	r3, ip
 80015fa:	18c0      	adds	r0, r0, r3
 80015fc:	e6cc      	b.n	8001398 <__aeabi_ddiv+0x334>
 80015fe:	201f      	movs	r0, #31
 8001600:	4240      	negs	r0, r0
 8001602:	1ac3      	subs	r3, r0, r3
 8001604:	4658      	mov	r0, fp
 8001606:	40d8      	lsrs	r0, r3
 8001608:	2920      	cmp	r1, #32
 800160a:	d004      	beq.n	8001616 <__aeabi_ddiv+0x5b2>
 800160c:	4659      	mov	r1, fp
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <__aeabi_ddiv+0x62c>)
 8001610:	4453      	add	r3, sl
 8001612:	4099      	lsls	r1, r3
 8001614:	430a      	orrs	r2, r1
 8001616:	1e53      	subs	r3, r2, #1
 8001618:	419a      	sbcs	r2, r3
 800161a:	2307      	movs	r3, #7
 800161c:	0019      	movs	r1, r3
 800161e:	4302      	orrs	r2, r0
 8001620:	2400      	movs	r4, #0
 8001622:	4011      	ands	r1, r2
 8001624:	4213      	tst	r3, r2
 8001626:	d009      	beq.n	800163c <__aeabi_ddiv+0x5d8>
 8001628:	3308      	adds	r3, #8
 800162a:	4013      	ands	r3, r2
 800162c:	2b04      	cmp	r3, #4
 800162e:	d01d      	beq.n	800166c <__aeabi_ddiv+0x608>
 8001630:	1d13      	adds	r3, r2, #4
 8001632:	4293      	cmp	r3, r2
 8001634:	4189      	sbcs	r1, r1
 8001636:	001a      	movs	r2, r3
 8001638:	4249      	negs	r1, r1
 800163a:	0749      	lsls	r1, r1, #29
 800163c:	08d2      	lsrs	r2, r2, #3
 800163e:	430a      	orrs	r2, r1
 8001640:	4690      	mov	r8, r2
 8001642:	2300      	movs	r3, #0
 8001644:	e57a      	b.n	800113c <__aeabi_ddiv+0xd8>
 8001646:	4649      	mov	r1, r9
 8001648:	9f00      	ldr	r7, [sp, #0]
 800164a:	004d      	lsls	r5, r1, #1
 800164c:	454d      	cmp	r5, r9
 800164e:	4189      	sbcs	r1, r1
 8001650:	46bc      	mov	ip, r7
 8001652:	4249      	negs	r1, r1
 8001654:	4461      	add	r1, ip
 8001656:	46a9      	mov	r9, r5
 8001658:	3a02      	subs	r2, #2
 800165a:	1864      	adds	r4, r4, r1
 800165c:	e7ae      	b.n	80015bc <__aeabi_ddiv+0x558>
 800165e:	2201      	movs	r2, #1
 8001660:	4252      	negs	r2, r2
 8001662:	e746      	b.n	80014f2 <__aeabi_ddiv+0x48e>
 8001664:	4599      	cmp	r9, r3
 8001666:	d3ee      	bcc.n	8001646 <__aeabi_ddiv+0x5e2>
 8001668:	000a      	movs	r2, r1
 800166a:	e7aa      	b.n	80015c2 <__aeabi_ddiv+0x55e>
 800166c:	2100      	movs	r1, #0
 800166e:	e7e5      	b.n	800163c <__aeabi_ddiv+0x5d8>
 8001670:	0759      	lsls	r1, r3, #29
 8001672:	025b      	lsls	r3, r3, #9
 8001674:	0b1c      	lsrs	r4, r3, #12
 8001676:	e7e1      	b.n	800163c <__aeabi_ddiv+0x5d8>
 8001678:	000003ff 	.word	0x000003ff
 800167c:	feffffff 	.word	0xfeffffff
 8001680:	000007fe 	.word	0x000007fe
 8001684:	000007ff 	.word	0x000007ff
 8001688:	0000041e 	.word	0x0000041e
 800168c:	fffffc02 	.word	0xfffffc02
 8001690:	0000043e 	.word	0x0000043e

08001694 <__eqdf2>:
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	4657      	mov	r7, sl
 8001698:	46de      	mov	lr, fp
 800169a:	464e      	mov	r6, r9
 800169c:	4645      	mov	r5, r8
 800169e:	b5e0      	push	{r5, r6, r7, lr}
 80016a0:	000d      	movs	r5, r1
 80016a2:	0004      	movs	r4, r0
 80016a4:	0fe8      	lsrs	r0, r5, #31
 80016a6:	4683      	mov	fp, r0
 80016a8:	0309      	lsls	r1, r1, #12
 80016aa:	0fd8      	lsrs	r0, r3, #31
 80016ac:	0b09      	lsrs	r1, r1, #12
 80016ae:	4682      	mov	sl, r0
 80016b0:	4819      	ldr	r0, [pc, #100]	@ (8001718 <__eqdf2+0x84>)
 80016b2:	468c      	mov	ip, r1
 80016b4:	031f      	lsls	r7, r3, #12
 80016b6:	0069      	lsls	r1, r5, #1
 80016b8:	005e      	lsls	r6, r3, #1
 80016ba:	0d49      	lsrs	r1, r1, #21
 80016bc:	0b3f      	lsrs	r7, r7, #12
 80016be:	0d76      	lsrs	r6, r6, #21
 80016c0:	4281      	cmp	r1, r0
 80016c2:	d018      	beq.n	80016f6 <__eqdf2+0x62>
 80016c4:	4286      	cmp	r6, r0
 80016c6:	d00f      	beq.n	80016e8 <__eqdf2+0x54>
 80016c8:	2001      	movs	r0, #1
 80016ca:	42b1      	cmp	r1, r6
 80016cc:	d10d      	bne.n	80016ea <__eqdf2+0x56>
 80016ce:	45bc      	cmp	ip, r7
 80016d0:	d10b      	bne.n	80016ea <__eqdf2+0x56>
 80016d2:	4294      	cmp	r4, r2
 80016d4:	d109      	bne.n	80016ea <__eqdf2+0x56>
 80016d6:	45d3      	cmp	fp, sl
 80016d8:	d01c      	beq.n	8001714 <__eqdf2+0x80>
 80016da:	2900      	cmp	r1, #0
 80016dc:	d105      	bne.n	80016ea <__eqdf2+0x56>
 80016de:	4660      	mov	r0, ip
 80016e0:	4320      	orrs	r0, r4
 80016e2:	1e43      	subs	r3, r0, #1
 80016e4:	4198      	sbcs	r0, r3
 80016e6:	e000      	b.n	80016ea <__eqdf2+0x56>
 80016e8:	2001      	movs	r0, #1
 80016ea:	bcf0      	pop	{r4, r5, r6, r7}
 80016ec:	46bb      	mov	fp, r7
 80016ee:	46b2      	mov	sl, r6
 80016f0:	46a9      	mov	r9, r5
 80016f2:	46a0      	mov	r8, r4
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016f6:	2001      	movs	r0, #1
 80016f8:	428e      	cmp	r6, r1
 80016fa:	d1f6      	bne.n	80016ea <__eqdf2+0x56>
 80016fc:	4661      	mov	r1, ip
 80016fe:	4339      	orrs	r1, r7
 8001700:	000f      	movs	r7, r1
 8001702:	4317      	orrs	r7, r2
 8001704:	4327      	orrs	r7, r4
 8001706:	d1f0      	bne.n	80016ea <__eqdf2+0x56>
 8001708:	465b      	mov	r3, fp
 800170a:	4652      	mov	r2, sl
 800170c:	1a98      	subs	r0, r3, r2
 800170e:	1e43      	subs	r3, r0, #1
 8001710:	4198      	sbcs	r0, r3
 8001712:	e7ea      	b.n	80016ea <__eqdf2+0x56>
 8001714:	2000      	movs	r0, #0
 8001716:	e7e8      	b.n	80016ea <__eqdf2+0x56>
 8001718:	000007ff 	.word	0x000007ff

0800171c <__gedf2>:
 800171c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171e:	4657      	mov	r7, sl
 8001720:	464e      	mov	r6, r9
 8001722:	4645      	mov	r5, r8
 8001724:	46de      	mov	lr, fp
 8001726:	b5e0      	push	{r5, r6, r7, lr}
 8001728:	000d      	movs	r5, r1
 800172a:	030e      	lsls	r6, r1, #12
 800172c:	0049      	lsls	r1, r1, #1
 800172e:	0d49      	lsrs	r1, r1, #21
 8001730:	468a      	mov	sl, r1
 8001732:	0fdf      	lsrs	r7, r3, #31
 8001734:	0fe9      	lsrs	r1, r5, #31
 8001736:	46bc      	mov	ip, r7
 8001738:	b083      	sub	sp, #12
 800173a:	4f2f      	ldr	r7, [pc, #188]	@ (80017f8 <__gedf2+0xdc>)
 800173c:	0004      	movs	r4, r0
 800173e:	4680      	mov	r8, r0
 8001740:	9101      	str	r1, [sp, #4]
 8001742:	0058      	lsls	r0, r3, #1
 8001744:	0319      	lsls	r1, r3, #12
 8001746:	4691      	mov	r9, r2
 8001748:	0b36      	lsrs	r6, r6, #12
 800174a:	0b09      	lsrs	r1, r1, #12
 800174c:	0d40      	lsrs	r0, r0, #21
 800174e:	45ba      	cmp	sl, r7
 8001750:	d01d      	beq.n	800178e <__gedf2+0x72>
 8001752:	42b8      	cmp	r0, r7
 8001754:	d00d      	beq.n	8001772 <__gedf2+0x56>
 8001756:	4657      	mov	r7, sl
 8001758:	2f00      	cmp	r7, #0
 800175a:	d12a      	bne.n	80017b2 <__gedf2+0x96>
 800175c:	4334      	orrs	r4, r6
 800175e:	2800      	cmp	r0, #0
 8001760:	d124      	bne.n	80017ac <__gedf2+0x90>
 8001762:	430a      	orrs	r2, r1
 8001764:	d036      	beq.n	80017d4 <__gedf2+0xb8>
 8001766:	2c00      	cmp	r4, #0
 8001768:	d141      	bne.n	80017ee <__gedf2+0xd2>
 800176a:	4663      	mov	r3, ip
 800176c:	0058      	lsls	r0, r3, #1
 800176e:	3801      	subs	r0, #1
 8001770:	e015      	b.n	800179e <__gedf2+0x82>
 8001772:	4311      	orrs	r1, r2
 8001774:	d138      	bne.n	80017e8 <__gedf2+0xcc>
 8001776:	4653      	mov	r3, sl
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <__gedf2+0x64>
 800177c:	4326      	orrs	r6, r4
 800177e:	d0f4      	beq.n	800176a <__gedf2+0x4e>
 8001780:	9b01      	ldr	r3, [sp, #4]
 8001782:	4563      	cmp	r3, ip
 8001784:	d107      	bne.n	8001796 <__gedf2+0x7a>
 8001786:	9b01      	ldr	r3, [sp, #4]
 8001788:	0058      	lsls	r0, r3, #1
 800178a:	3801      	subs	r0, #1
 800178c:	e007      	b.n	800179e <__gedf2+0x82>
 800178e:	4326      	orrs	r6, r4
 8001790:	d12a      	bne.n	80017e8 <__gedf2+0xcc>
 8001792:	4550      	cmp	r0, sl
 8001794:	d021      	beq.n	80017da <__gedf2+0xbe>
 8001796:	2001      	movs	r0, #1
 8001798:	9b01      	ldr	r3, [sp, #4]
 800179a:	425f      	negs	r7, r3
 800179c:	4338      	orrs	r0, r7
 800179e:	b003      	add	sp, #12
 80017a0:	bcf0      	pop	{r4, r5, r6, r7}
 80017a2:	46bb      	mov	fp, r7
 80017a4:	46b2      	mov	sl, r6
 80017a6:	46a9      	mov	r9, r5
 80017a8:	46a0      	mov	r8, r4
 80017aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ac:	2c00      	cmp	r4, #0
 80017ae:	d0dc      	beq.n	800176a <__gedf2+0x4e>
 80017b0:	e7e6      	b.n	8001780 <__gedf2+0x64>
 80017b2:	2800      	cmp	r0, #0
 80017b4:	d0ef      	beq.n	8001796 <__gedf2+0x7a>
 80017b6:	9b01      	ldr	r3, [sp, #4]
 80017b8:	4563      	cmp	r3, ip
 80017ba:	d1ec      	bne.n	8001796 <__gedf2+0x7a>
 80017bc:	4582      	cmp	sl, r0
 80017be:	dcea      	bgt.n	8001796 <__gedf2+0x7a>
 80017c0:	dbe1      	blt.n	8001786 <__gedf2+0x6a>
 80017c2:	428e      	cmp	r6, r1
 80017c4:	d8e7      	bhi.n	8001796 <__gedf2+0x7a>
 80017c6:	d1de      	bne.n	8001786 <__gedf2+0x6a>
 80017c8:	45c8      	cmp	r8, r9
 80017ca:	d8e4      	bhi.n	8001796 <__gedf2+0x7a>
 80017cc:	2000      	movs	r0, #0
 80017ce:	45c8      	cmp	r8, r9
 80017d0:	d2e5      	bcs.n	800179e <__gedf2+0x82>
 80017d2:	e7d8      	b.n	8001786 <__gedf2+0x6a>
 80017d4:	2c00      	cmp	r4, #0
 80017d6:	d0e2      	beq.n	800179e <__gedf2+0x82>
 80017d8:	e7dd      	b.n	8001796 <__gedf2+0x7a>
 80017da:	4311      	orrs	r1, r2
 80017dc:	d104      	bne.n	80017e8 <__gedf2+0xcc>
 80017de:	9b01      	ldr	r3, [sp, #4]
 80017e0:	4563      	cmp	r3, ip
 80017e2:	d1d8      	bne.n	8001796 <__gedf2+0x7a>
 80017e4:	2000      	movs	r0, #0
 80017e6:	e7da      	b.n	800179e <__gedf2+0x82>
 80017e8:	2002      	movs	r0, #2
 80017ea:	4240      	negs	r0, r0
 80017ec:	e7d7      	b.n	800179e <__gedf2+0x82>
 80017ee:	9b01      	ldr	r3, [sp, #4]
 80017f0:	4563      	cmp	r3, ip
 80017f2:	d0e6      	beq.n	80017c2 <__gedf2+0xa6>
 80017f4:	e7cf      	b.n	8001796 <__gedf2+0x7a>
 80017f6:	46c0      	nop			@ (mov r8, r8)
 80017f8:	000007ff 	.word	0x000007ff

080017fc <__ledf2>:
 80017fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017fe:	4657      	mov	r7, sl
 8001800:	464e      	mov	r6, r9
 8001802:	4645      	mov	r5, r8
 8001804:	46de      	mov	lr, fp
 8001806:	b5e0      	push	{r5, r6, r7, lr}
 8001808:	000d      	movs	r5, r1
 800180a:	030e      	lsls	r6, r1, #12
 800180c:	0049      	lsls	r1, r1, #1
 800180e:	0d49      	lsrs	r1, r1, #21
 8001810:	468a      	mov	sl, r1
 8001812:	0fdf      	lsrs	r7, r3, #31
 8001814:	0fe9      	lsrs	r1, r5, #31
 8001816:	46bc      	mov	ip, r7
 8001818:	b083      	sub	sp, #12
 800181a:	4f2e      	ldr	r7, [pc, #184]	@ (80018d4 <__ledf2+0xd8>)
 800181c:	0004      	movs	r4, r0
 800181e:	4680      	mov	r8, r0
 8001820:	9101      	str	r1, [sp, #4]
 8001822:	0058      	lsls	r0, r3, #1
 8001824:	0319      	lsls	r1, r3, #12
 8001826:	4691      	mov	r9, r2
 8001828:	0b36      	lsrs	r6, r6, #12
 800182a:	0b09      	lsrs	r1, r1, #12
 800182c:	0d40      	lsrs	r0, r0, #21
 800182e:	45ba      	cmp	sl, r7
 8001830:	d01e      	beq.n	8001870 <__ledf2+0x74>
 8001832:	42b8      	cmp	r0, r7
 8001834:	d00d      	beq.n	8001852 <__ledf2+0x56>
 8001836:	4657      	mov	r7, sl
 8001838:	2f00      	cmp	r7, #0
 800183a:	d127      	bne.n	800188c <__ledf2+0x90>
 800183c:	4334      	orrs	r4, r6
 800183e:	2800      	cmp	r0, #0
 8001840:	d133      	bne.n	80018aa <__ledf2+0xae>
 8001842:	430a      	orrs	r2, r1
 8001844:	d034      	beq.n	80018b0 <__ledf2+0xb4>
 8001846:	2c00      	cmp	r4, #0
 8001848:	d140      	bne.n	80018cc <__ledf2+0xd0>
 800184a:	4663      	mov	r3, ip
 800184c:	0058      	lsls	r0, r3, #1
 800184e:	3801      	subs	r0, #1
 8001850:	e015      	b.n	800187e <__ledf2+0x82>
 8001852:	4311      	orrs	r1, r2
 8001854:	d112      	bne.n	800187c <__ledf2+0x80>
 8001856:	4653      	mov	r3, sl
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <__ledf2+0x64>
 800185c:	4326      	orrs	r6, r4
 800185e:	d0f4      	beq.n	800184a <__ledf2+0x4e>
 8001860:	9b01      	ldr	r3, [sp, #4]
 8001862:	4563      	cmp	r3, ip
 8001864:	d01d      	beq.n	80018a2 <__ledf2+0xa6>
 8001866:	2001      	movs	r0, #1
 8001868:	9b01      	ldr	r3, [sp, #4]
 800186a:	425f      	negs	r7, r3
 800186c:	4338      	orrs	r0, r7
 800186e:	e006      	b.n	800187e <__ledf2+0x82>
 8001870:	4326      	orrs	r6, r4
 8001872:	d103      	bne.n	800187c <__ledf2+0x80>
 8001874:	4550      	cmp	r0, sl
 8001876:	d1f6      	bne.n	8001866 <__ledf2+0x6a>
 8001878:	4311      	orrs	r1, r2
 800187a:	d01c      	beq.n	80018b6 <__ledf2+0xba>
 800187c:	2002      	movs	r0, #2
 800187e:	b003      	add	sp, #12
 8001880:	bcf0      	pop	{r4, r5, r6, r7}
 8001882:	46bb      	mov	fp, r7
 8001884:	46b2      	mov	sl, r6
 8001886:	46a9      	mov	r9, r5
 8001888:	46a0      	mov	r8, r4
 800188a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800188c:	2800      	cmp	r0, #0
 800188e:	d0ea      	beq.n	8001866 <__ledf2+0x6a>
 8001890:	9b01      	ldr	r3, [sp, #4]
 8001892:	4563      	cmp	r3, ip
 8001894:	d1e7      	bne.n	8001866 <__ledf2+0x6a>
 8001896:	4582      	cmp	sl, r0
 8001898:	dce5      	bgt.n	8001866 <__ledf2+0x6a>
 800189a:	db02      	blt.n	80018a2 <__ledf2+0xa6>
 800189c:	428e      	cmp	r6, r1
 800189e:	d8e2      	bhi.n	8001866 <__ledf2+0x6a>
 80018a0:	d00e      	beq.n	80018c0 <__ledf2+0xc4>
 80018a2:	9b01      	ldr	r3, [sp, #4]
 80018a4:	0058      	lsls	r0, r3, #1
 80018a6:	3801      	subs	r0, #1
 80018a8:	e7e9      	b.n	800187e <__ledf2+0x82>
 80018aa:	2c00      	cmp	r4, #0
 80018ac:	d0cd      	beq.n	800184a <__ledf2+0x4e>
 80018ae:	e7d7      	b.n	8001860 <__ledf2+0x64>
 80018b0:	2c00      	cmp	r4, #0
 80018b2:	d0e4      	beq.n	800187e <__ledf2+0x82>
 80018b4:	e7d7      	b.n	8001866 <__ledf2+0x6a>
 80018b6:	9b01      	ldr	r3, [sp, #4]
 80018b8:	2000      	movs	r0, #0
 80018ba:	4563      	cmp	r3, ip
 80018bc:	d0df      	beq.n	800187e <__ledf2+0x82>
 80018be:	e7d2      	b.n	8001866 <__ledf2+0x6a>
 80018c0:	45c8      	cmp	r8, r9
 80018c2:	d8d0      	bhi.n	8001866 <__ledf2+0x6a>
 80018c4:	2000      	movs	r0, #0
 80018c6:	45c8      	cmp	r8, r9
 80018c8:	d2d9      	bcs.n	800187e <__ledf2+0x82>
 80018ca:	e7ea      	b.n	80018a2 <__ledf2+0xa6>
 80018cc:	9b01      	ldr	r3, [sp, #4]
 80018ce:	4563      	cmp	r3, ip
 80018d0:	d0e4      	beq.n	800189c <__ledf2+0xa0>
 80018d2:	e7c8      	b.n	8001866 <__ledf2+0x6a>
 80018d4:	000007ff 	.word	0x000007ff

080018d8 <__aeabi_dmul>:
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	4657      	mov	r7, sl
 80018dc:	464e      	mov	r6, r9
 80018de:	46de      	mov	lr, fp
 80018e0:	4645      	mov	r5, r8
 80018e2:	b5e0      	push	{r5, r6, r7, lr}
 80018e4:	001f      	movs	r7, r3
 80018e6:	030b      	lsls	r3, r1, #12
 80018e8:	0b1b      	lsrs	r3, r3, #12
 80018ea:	0016      	movs	r6, r2
 80018ec:	469a      	mov	sl, r3
 80018ee:	0fca      	lsrs	r2, r1, #31
 80018f0:	004b      	lsls	r3, r1, #1
 80018f2:	0004      	movs	r4, r0
 80018f4:	4691      	mov	r9, r2
 80018f6:	b085      	sub	sp, #20
 80018f8:	0d5b      	lsrs	r3, r3, #21
 80018fa:	d100      	bne.n	80018fe <__aeabi_dmul+0x26>
 80018fc:	e1cf      	b.n	8001c9e <__aeabi_dmul+0x3c6>
 80018fe:	4acd      	ldr	r2, [pc, #820]	@ (8001c34 <__aeabi_dmul+0x35c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d055      	beq.n	80019b0 <__aeabi_dmul+0xd8>
 8001904:	4651      	mov	r1, sl
 8001906:	0f42      	lsrs	r2, r0, #29
 8001908:	00c9      	lsls	r1, r1, #3
 800190a:	430a      	orrs	r2, r1
 800190c:	2180      	movs	r1, #128	@ 0x80
 800190e:	0409      	lsls	r1, r1, #16
 8001910:	4311      	orrs	r1, r2
 8001912:	00c2      	lsls	r2, r0, #3
 8001914:	4690      	mov	r8, r2
 8001916:	4ac8      	ldr	r2, [pc, #800]	@ (8001c38 <__aeabi_dmul+0x360>)
 8001918:	468a      	mov	sl, r1
 800191a:	4693      	mov	fp, r2
 800191c:	449b      	add	fp, r3
 800191e:	2300      	movs	r3, #0
 8001920:	2500      	movs	r5, #0
 8001922:	9302      	str	r3, [sp, #8]
 8001924:	033c      	lsls	r4, r7, #12
 8001926:	007b      	lsls	r3, r7, #1
 8001928:	0ffa      	lsrs	r2, r7, #31
 800192a:	9601      	str	r6, [sp, #4]
 800192c:	0b24      	lsrs	r4, r4, #12
 800192e:	0d5b      	lsrs	r3, r3, #21
 8001930:	9200      	str	r2, [sp, #0]
 8001932:	d100      	bne.n	8001936 <__aeabi_dmul+0x5e>
 8001934:	e188      	b.n	8001c48 <__aeabi_dmul+0x370>
 8001936:	4abf      	ldr	r2, [pc, #764]	@ (8001c34 <__aeabi_dmul+0x35c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d100      	bne.n	800193e <__aeabi_dmul+0x66>
 800193c:	e092      	b.n	8001a64 <__aeabi_dmul+0x18c>
 800193e:	4abe      	ldr	r2, [pc, #760]	@ (8001c38 <__aeabi_dmul+0x360>)
 8001940:	4694      	mov	ip, r2
 8001942:	4463      	add	r3, ip
 8001944:	449b      	add	fp, r3
 8001946:	2d0a      	cmp	r5, #10
 8001948:	dc42      	bgt.n	80019d0 <__aeabi_dmul+0xf8>
 800194a:	00e4      	lsls	r4, r4, #3
 800194c:	0f73      	lsrs	r3, r6, #29
 800194e:	4323      	orrs	r3, r4
 8001950:	2480      	movs	r4, #128	@ 0x80
 8001952:	4649      	mov	r1, r9
 8001954:	0424      	lsls	r4, r4, #16
 8001956:	431c      	orrs	r4, r3
 8001958:	00f3      	lsls	r3, r6, #3
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	9b00      	ldr	r3, [sp, #0]
 800195e:	2000      	movs	r0, #0
 8001960:	4059      	eors	r1, r3
 8001962:	b2cb      	uxtb	r3, r1
 8001964:	9303      	str	r3, [sp, #12]
 8001966:	2d02      	cmp	r5, #2
 8001968:	dc00      	bgt.n	800196c <__aeabi_dmul+0x94>
 800196a:	e094      	b.n	8001a96 <__aeabi_dmul+0x1be>
 800196c:	2301      	movs	r3, #1
 800196e:	40ab      	lsls	r3, r5
 8001970:	001d      	movs	r5, r3
 8001972:	23a6      	movs	r3, #166	@ 0xa6
 8001974:	002a      	movs	r2, r5
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	401a      	ands	r2, r3
 800197a:	421d      	tst	r5, r3
 800197c:	d000      	beq.n	8001980 <__aeabi_dmul+0xa8>
 800197e:	e229      	b.n	8001dd4 <__aeabi_dmul+0x4fc>
 8001980:	2390      	movs	r3, #144	@ 0x90
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	421d      	tst	r5, r3
 8001986:	d100      	bne.n	800198a <__aeabi_dmul+0xb2>
 8001988:	e24d      	b.n	8001e26 <__aeabi_dmul+0x54e>
 800198a:	2300      	movs	r3, #0
 800198c:	2480      	movs	r4, #128	@ 0x80
 800198e:	4699      	mov	r9, r3
 8001990:	0324      	lsls	r4, r4, #12
 8001992:	4ba8      	ldr	r3, [pc, #672]	@ (8001c34 <__aeabi_dmul+0x35c>)
 8001994:	0010      	movs	r0, r2
 8001996:	464a      	mov	r2, r9
 8001998:	051b      	lsls	r3, r3, #20
 800199a:	4323      	orrs	r3, r4
 800199c:	07d2      	lsls	r2, r2, #31
 800199e:	4313      	orrs	r3, r2
 80019a0:	0019      	movs	r1, r3
 80019a2:	b005      	add	sp, #20
 80019a4:	bcf0      	pop	{r4, r5, r6, r7}
 80019a6:	46bb      	mov	fp, r7
 80019a8:	46b2      	mov	sl, r6
 80019aa:	46a9      	mov	r9, r5
 80019ac:	46a0      	mov	r8, r4
 80019ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b0:	4652      	mov	r2, sl
 80019b2:	4302      	orrs	r2, r0
 80019b4:	4690      	mov	r8, r2
 80019b6:	d000      	beq.n	80019ba <__aeabi_dmul+0xe2>
 80019b8:	e1ac      	b.n	8001d14 <__aeabi_dmul+0x43c>
 80019ba:	469b      	mov	fp, r3
 80019bc:	2302      	movs	r3, #2
 80019be:	4692      	mov	sl, r2
 80019c0:	2508      	movs	r5, #8
 80019c2:	9302      	str	r3, [sp, #8]
 80019c4:	e7ae      	b.n	8001924 <__aeabi_dmul+0x4c>
 80019c6:	9b00      	ldr	r3, [sp, #0]
 80019c8:	46a2      	mov	sl, r4
 80019ca:	4699      	mov	r9, r3
 80019cc:	9b01      	ldr	r3, [sp, #4]
 80019ce:	4698      	mov	r8, r3
 80019d0:	9b02      	ldr	r3, [sp, #8]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d100      	bne.n	80019d8 <__aeabi_dmul+0x100>
 80019d6:	e1ca      	b.n	8001d6e <__aeabi_dmul+0x496>
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d100      	bne.n	80019de <__aeabi_dmul+0x106>
 80019dc:	e192      	b.n	8001d04 <__aeabi_dmul+0x42c>
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d110      	bne.n	8001a04 <__aeabi_dmul+0x12c>
 80019e2:	2300      	movs	r3, #0
 80019e4:	2400      	movs	r4, #0
 80019e6:	2200      	movs	r2, #0
 80019e8:	e7d4      	b.n	8001994 <__aeabi_dmul+0xbc>
 80019ea:	2201      	movs	r2, #1
 80019ec:	087b      	lsrs	r3, r7, #1
 80019ee:	403a      	ands	r2, r7
 80019f0:	4313      	orrs	r3, r2
 80019f2:	4652      	mov	r2, sl
 80019f4:	07d2      	lsls	r2, r2, #31
 80019f6:	4313      	orrs	r3, r2
 80019f8:	4698      	mov	r8, r3
 80019fa:	4653      	mov	r3, sl
 80019fc:	085b      	lsrs	r3, r3, #1
 80019fe:	469a      	mov	sl, r3
 8001a00:	9b03      	ldr	r3, [sp, #12]
 8001a02:	4699      	mov	r9, r3
 8001a04:	465b      	mov	r3, fp
 8001a06:	1c58      	adds	r0, r3, #1
 8001a08:	2380      	movs	r3, #128	@ 0x80
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	445b      	add	r3, fp
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dc00      	bgt.n	8001a14 <__aeabi_dmul+0x13c>
 8001a12:	e1b1      	b.n	8001d78 <__aeabi_dmul+0x4a0>
 8001a14:	4642      	mov	r2, r8
 8001a16:	0752      	lsls	r2, r2, #29
 8001a18:	d00b      	beq.n	8001a32 <__aeabi_dmul+0x15a>
 8001a1a:	220f      	movs	r2, #15
 8001a1c:	4641      	mov	r1, r8
 8001a1e:	400a      	ands	r2, r1
 8001a20:	2a04      	cmp	r2, #4
 8001a22:	d006      	beq.n	8001a32 <__aeabi_dmul+0x15a>
 8001a24:	4642      	mov	r2, r8
 8001a26:	1d11      	adds	r1, r2, #4
 8001a28:	4541      	cmp	r1, r8
 8001a2a:	4192      	sbcs	r2, r2
 8001a2c:	4688      	mov	r8, r1
 8001a2e:	4252      	negs	r2, r2
 8001a30:	4492      	add	sl, r2
 8001a32:	4652      	mov	r2, sl
 8001a34:	01d2      	lsls	r2, r2, #7
 8001a36:	d506      	bpl.n	8001a46 <__aeabi_dmul+0x16e>
 8001a38:	4652      	mov	r2, sl
 8001a3a:	4b80      	ldr	r3, [pc, #512]	@ (8001c3c <__aeabi_dmul+0x364>)
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	4692      	mov	sl, r2
 8001a42:	00db      	lsls	r3, r3, #3
 8001a44:	18c3      	adds	r3, r0, r3
 8001a46:	4a7e      	ldr	r2, [pc, #504]	@ (8001c40 <__aeabi_dmul+0x368>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	dd00      	ble.n	8001a4e <__aeabi_dmul+0x176>
 8001a4c:	e18f      	b.n	8001d6e <__aeabi_dmul+0x496>
 8001a4e:	4642      	mov	r2, r8
 8001a50:	08d1      	lsrs	r1, r2, #3
 8001a52:	4652      	mov	r2, sl
 8001a54:	0752      	lsls	r2, r2, #29
 8001a56:	430a      	orrs	r2, r1
 8001a58:	4651      	mov	r1, sl
 8001a5a:	055b      	lsls	r3, r3, #21
 8001a5c:	024c      	lsls	r4, r1, #9
 8001a5e:	0b24      	lsrs	r4, r4, #12
 8001a60:	0d5b      	lsrs	r3, r3, #21
 8001a62:	e797      	b.n	8001994 <__aeabi_dmul+0xbc>
 8001a64:	4b73      	ldr	r3, [pc, #460]	@ (8001c34 <__aeabi_dmul+0x35c>)
 8001a66:	4326      	orrs	r6, r4
 8001a68:	469c      	mov	ip, r3
 8001a6a:	44e3      	add	fp, ip
 8001a6c:	2e00      	cmp	r6, #0
 8001a6e:	d100      	bne.n	8001a72 <__aeabi_dmul+0x19a>
 8001a70:	e16f      	b.n	8001d52 <__aeabi_dmul+0x47a>
 8001a72:	2303      	movs	r3, #3
 8001a74:	4649      	mov	r1, r9
 8001a76:	431d      	orrs	r5, r3
 8001a78:	9b00      	ldr	r3, [sp, #0]
 8001a7a:	4059      	eors	r1, r3
 8001a7c:	b2cb      	uxtb	r3, r1
 8001a7e:	9303      	str	r3, [sp, #12]
 8001a80:	2d0a      	cmp	r5, #10
 8001a82:	dd00      	ble.n	8001a86 <__aeabi_dmul+0x1ae>
 8001a84:	e133      	b.n	8001cee <__aeabi_dmul+0x416>
 8001a86:	2301      	movs	r3, #1
 8001a88:	40ab      	lsls	r3, r5
 8001a8a:	001d      	movs	r5, r3
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	2288      	movs	r2, #136	@ 0x88
 8001a92:	422a      	tst	r2, r5
 8001a94:	d197      	bne.n	80019c6 <__aeabi_dmul+0xee>
 8001a96:	4642      	mov	r2, r8
 8001a98:	4643      	mov	r3, r8
 8001a9a:	0412      	lsls	r2, r2, #16
 8001a9c:	0c12      	lsrs	r2, r2, #16
 8001a9e:	0016      	movs	r6, r2
 8001aa0:	9801      	ldr	r0, [sp, #4]
 8001aa2:	0c1d      	lsrs	r5, r3, #16
 8001aa4:	0c03      	lsrs	r3, r0, #16
 8001aa6:	0400      	lsls	r0, r0, #16
 8001aa8:	0c00      	lsrs	r0, r0, #16
 8001aaa:	4346      	muls	r6, r0
 8001aac:	46b4      	mov	ip, r6
 8001aae:	001e      	movs	r6, r3
 8001ab0:	436e      	muls	r6, r5
 8001ab2:	9600      	str	r6, [sp, #0]
 8001ab4:	0016      	movs	r6, r2
 8001ab6:	0007      	movs	r7, r0
 8001ab8:	435e      	muls	r6, r3
 8001aba:	4661      	mov	r1, ip
 8001abc:	46b0      	mov	r8, r6
 8001abe:	436f      	muls	r7, r5
 8001ac0:	0c0e      	lsrs	r6, r1, #16
 8001ac2:	44b8      	add	r8, r7
 8001ac4:	4446      	add	r6, r8
 8001ac6:	42b7      	cmp	r7, r6
 8001ac8:	d905      	bls.n	8001ad6 <__aeabi_dmul+0x1fe>
 8001aca:	2180      	movs	r1, #128	@ 0x80
 8001acc:	0249      	lsls	r1, r1, #9
 8001ace:	4688      	mov	r8, r1
 8001ad0:	9f00      	ldr	r7, [sp, #0]
 8001ad2:	4447      	add	r7, r8
 8001ad4:	9700      	str	r7, [sp, #0]
 8001ad6:	4661      	mov	r1, ip
 8001ad8:	0409      	lsls	r1, r1, #16
 8001ada:	0c09      	lsrs	r1, r1, #16
 8001adc:	0c37      	lsrs	r7, r6, #16
 8001ade:	0436      	lsls	r6, r6, #16
 8001ae0:	468c      	mov	ip, r1
 8001ae2:	0031      	movs	r1, r6
 8001ae4:	4461      	add	r1, ip
 8001ae6:	9101      	str	r1, [sp, #4]
 8001ae8:	0011      	movs	r1, r2
 8001aea:	0c26      	lsrs	r6, r4, #16
 8001aec:	0424      	lsls	r4, r4, #16
 8001aee:	0c24      	lsrs	r4, r4, #16
 8001af0:	4361      	muls	r1, r4
 8001af2:	468c      	mov	ip, r1
 8001af4:	0021      	movs	r1, r4
 8001af6:	4369      	muls	r1, r5
 8001af8:	4689      	mov	r9, r1
 8001afa:	4661      	mov	r1, ip
 8001afc:	0c09      	lsrs	r1, r1, #16
 8001afe:	4688      	mov	r8, r1
 8001b00:	4372      	muls	r2, r6
 8001b02:	444a      	add	r2, r9
 8001b04:	4442      	add	r2, r8
 8001b06:	4375      	muls	r5, r6
 8001b08:	4591      	cmp	r9, r2
 8001b0a:	d903      	bls.n	8001b14 <__aeabi_dmul+0x23c>
 8001b0c:	2180      	movs	r1, #128	@ 0x80
 8001b0e:	0249      	lsls	r1, r1, #9
 8001b10:	4688      	mov	r8, r1
 8001b12:	4445      	add	r5, r8
 8001b14:	0c11      	lsrs	r1, r2, #16
 8001b16:	4688      	mov	r8, r1
 8001b18:	4661      	mov	r1, ip
 8001b1a:	0409      	lsls	r1, r1, #16
 8001b1c:	0c09      	lsrs	r1, r1, #16
 8001b1e:	468c      	mov	ip, r1
 8001b20:	0412      	lsls	r2, r2, #16
 8001b22:	4462      	add	r2, ip
 8001b24:	18b9      	adds	r1, r7, r2
 8001b26:	9102      	str	r1, [sp, #8]
 8001b28:	4651      	mov	r1, sl
 8001b2a:	0c09      	lsrs	r1, r1, #16
 8001b2c:	468c      	mov	ip, r1
 8001b2e:	4651      	mov	r1, sl
 8001b30:	040f      	lsls	r7, r1, #16
 8001b32:	0c3f      	lsrs	r7, r7, #16
 8001b34:	0039      	movs	r1, r7
 8001b36:	4341      	muls	r1, r0
 8001b38:	4445      	add	r5, r8
 8001b3a:	4688      	mov	r8, r1
 8001b3c:	4661      	mov	r1, ip
 8001b3e:	4341      	muls	r1, r0
 8001b40:	468a      	mov	sl, r1
 8001b42:	4641      	mov	r1, r8
 8001b44:	4660      	mov	r0, ip
 8001b46:	0c09      	lsrs	r1, r1, #16
 8001b48:	4689      	mov	r9, r1
 8001b4a:	4358      	muls	r0, r3
 8001b4c:	437b      	muls	r3, r7
 8001b4e:	4453      	add	r3, sl
 8001b50:	444b      	add	r3, r9
 8001b52:	459a      	cmp	sl, r3
 8001b54:	d903      	bls.n	8001b5e <__aeabi_dmul+0x286>
 8001b56:	2180      	movs	r1, #128	@ 0x80
 8001b58:	0249      	lsls	r1, r1, #9
 8001b5a:	4689      	mov	r9, r1
 8001b5c:	4448      	add	r0, r9
 8001b5e:	0c19      	lsrs	r1, r3, #16
 8001b60:	4689      	mov	r9, r1
 8001b62:	4641      	mov	r1, r8
 8001b64:	0409      	lsls	r1, r1, #16
 8001b66:	0c09      	lsrs	r1, r1, #16
 8001b68:	4688      	mov	r8, r1
 8001b6a:	0039      	movs	r1, r7
 8001b6c:	4361      	muls	r1, r4
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	4443      	add	r3, r8
 8001b72:	4688      	mov	r8, r1
 8001b74:	4661      	mov	r1, ip
 8001b76:	434c      	muls	r4, r1
 8001b78:	4371      	muls	r1, r6
 8001b7a:	468c      	mov	ip, r1
 8001b7c:	4641      	mov	r1, r8
 8001b7e:	4377      	muls	r7, r6
 8001b80:	0c0e      	lsrs	r6, r1, #16
 8001b82:	193f      	adds	r7, r7, r4
 8001b84:	19f6      	adds	r6, r6, r7
 8001b86:	4448      	add	r0, r9
 8001b88:	42b4      	cmp	r4, r6
 8001b8a:	d903      	bls.n	8001b94 <__aeabi_dmul+0x2bc>
 8001b8c:	2180      	movs	r1, #128	@ 0x80
 8001b8e:	0249      	lsls	r1, r1, #9
 8001b90:	4689      	mov	r9, r1
 8001b92:	44cc      	add	ip, r9
 8001b94:	9902      	ldr	r1, [sp, #8]
 8001b96:	9f00      	ldr	r7, [sp, #0]
 8001b98:	4689      	mov	r9, r1
 8001b9a:	0431      	lsls	r1, r6, #16
 8001b9c:	444f      	add	r7, r9
 8001b9e:	4689      	mov	r9, r1
 8001ba0:	4641      	mov	r1, r8
 8001ba2:	4297      	cmp	r7, r2
 8001ba4:	4192      	sbcs	r2, r2
 8001ba6:	040c      	lsls	r4, r1, #16
 8001ba8:	0c24      	lsrs	r4, r4, #16
 8001baa:	444c      	add	r4, r9
 8001bac:	18ff      	adds	r7, r7, r3
 8001bae:	4252      	negs	r2, r2
 8001bb0:	1964      	adds	r4, r4, r5
 8001bb2:	18a1      	adds	r1, r4, r2
 8001bb4:	429f      	cmp	r7, r3
 8001bb6:	419b      	sbcs	r3, r3
 8001bb8:	4688      	mov	r8, r1
 8001bba:	4682      	mov	sl, r0
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	4699      	mov	r9, r3
 8001bc0:	4590      	cmp	r8, r2
 8001bc2:	4192      	sbcs	r2, r2
 8001bc4:	42ac      	cmp	r4, r5
 8001bc6:	41a4      	sbcs	r4, r4
 8001bc8:	44c2      	add	sl, r8
 8001bca:	44d1      	add	r9, sl
 8001bcc:	4252      	negs	r2, r2
 8001bce:	4264      	negs	r4, r4
 8001bd0:	4314      	orrs	r4, r2
 8001bd2:	4599      	cmp	r9, r3
 8001bd4:	419b      	sbcs	r3, r3
 8001bd6:	4582      	cmp	sl, r0
 8001bd8:	4192      	sbcs	r2, r2
 8001bda:	425b      	negs	r3, r3
 8001bdc:	4252      	negs	r2, r2
 8001bde:	4313      	orrs	r3, r2
 8001be0:	464a      	mov	r2, r9
 8001be2:	0c36      	lsrs	r6, r6, #16
 8001be4:	19a4      	adds	r4, r4, r6
 8001be6:	18e3      	adds	r3, r4, r3
 8001be8:	4463      	add	r3, ip
 8001bea:	025b      	lsls	r3, r3, #9
 8001bec:	0dd2      	lsrs	r2, r2, #23
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	9901      	ldr	r1, [sp, #4]
 8001bf2:	4692      	mov	sl, r2
 8001bf4:	027a      	lsls	r2, r7, #9
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	1e50      	subs	r0, r2, #1
 8001bfa:	4182      	sbcs	r2, r0
 8001bfc:	0dff      	lsrs	r7, r7, #23
 8001bfe:	4317      	orrs	r7, r2
 8001c00:	464a      	mov	r2, r9
 8001c02:	0252      	lsls	r2, r2, #9
 8001c04:	4317      	orrs	r7, r2
 8001c06:	46b8      	mov	r8, r7
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	d500      	bpl.n	8001c0e <__aeabi_dmul+0x336>
 8001c0c:	e6ed      	b.n	80019ea <__aeabi_dmul+0x112>
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c44 <__aeabi_dmul+0x36c>)
 8001c10:	9a03      	ldr	r2, [sp, #12]
 8001c12:	445b      	add	r3, fp
 8001c14:	4691      	mov	r9, r2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	dc00      	bgt.n	8001c1c <__aeabi_dmul+0x344>
 8001c1a:	e0ac      	b.n	8001d76 <__aeabi_dmul+0x49e>
 8001c1c:	003a      	movs	r2, r7
 8001c1e:	0752      	lsls	r2, r2, #29
 8001c20:	d100      	bne.n	8001c24 <__aeabi_dmul+0x34c>
 8001c22:	e710      	b.n	8001a46 <__aeabi_dmul+0x16e>
 8001c24:	220f      	movs	r2, #15
 8001c26:	4658      	mov	r0, fp
 8001c28:	403a      	ands	r2, r7
 8001c2a:	2a04      	cmp	r2, #4
 8001c2c:	d000      	beq.n	8001c30 <__aeabi_dmul+0x358>
 8001c2e:	e6f9      	b.n	8001a24 <__aeabi_dmul+0x14c>
 8001c30:	e709      	b.n	8001a46 <__aeabi_dmul+0x16e>
 8001c32:	46c0      	nop			@ (mov r8, r8)
 8001c34:	000007ff 	.word	0x000007ff
 8001c38:	fffffc01 	.word	0xfffffc01
 8001c3c:	feffffff 	.word	0xfeffffff
 8001c40:	000007fe 	.word	0x000007fe
 8001c44:	000003ff 	.word	0x000003ff
 8001c48:	0022      	movs	r2, r4
 8001c4a:	4332      	orrs	r2, r6
 8001c4c:	d06f      	beq.n	8001d2e <__aeabi_dmul+0x456>
 8001c4e:	2c00      	cmp	r4, #0
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dmul+0x37c>
 8001c52:	e0c2      	b.n	8001dda <__aeabi_dmul+0x502>
 8001c54:	0020      	movs	r0, r4
 8001c56:	f000 fea9 	bl	80029ac <__clzsi2>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	3a0b      	subs	r2, #11
 8001c60:	201d      	movs	r0, #29
 8001c62:	1a82      	subs	r2, r0, r2
 8001c64:	0030      	movs	r0, r6
 8001c66:	0019      	movs	r1, r3
 8001c68:	40d0      	lsrs	r0, r2
 8001c6a:	3908      	subs	r1, #8
 8001c6c:	408c      	lsls	r4, r1
 8001c6e:	0002      	movs	r2, r0
 8001c70:	4322      	orrs	r2, r4
 8001c72:	0034      	movs	r4, r6
 8001c74:	408c      	lsls	r4, r1
 8001c76:	4659      	mov	r1, fp
 8001c78:	1acb      	subs	r3, r1, r3
 8001c7a:	4986      	ldr	r1, [pc, #536]	@ (8001e94 <__aeabi_dmul+0x5bc>)
 8001c7c:	468b      	mov	fp, r1
 8001c7e:	449b      	add	fp, r3
 8001c80:	2d0a      	cmp	r5, #10
 8001c82:	dd00      	ble.n	8001c86 <__aeabi_dmul+0x3ae>
 8001c84:	e6a4      	b.n	80019d0 <__aeabi_dmul+0xf8>
 8001c86:	4649      	mov	r1, r9
 8001c88:	9b00      	ldr	r3, [sp, #0]
 8001c8a:	9401      	str	r4, [sp, #4]
 8001c8c:	4059      	eors	r1, r3
 8001c8e:	b2cb      	uxtb	r3, r1
 8001c90:	0014      	movs	r4, r2
 8001c92:	2000      	movs	r0, #0
 8001c94:	9303      	str	r3, [sp, #12]
 8001c96:	2d02      	cmp	r5, #2
 8001c98:	dd00      	ble.n	8001c9c <__aeabi_dmul+0x3c4>
 8001c9a:	e667      	b.n	800196c <__aeabi_dmul+0x94>
 8001c9c:	e6fb      	b.n	8001a96 <__aeabi_dmul+0x1be>
 8001c9e:	4653      	mov	r3, sl
 8001ca0:	4303      	orrs	r3, r0
 8001ca2:	4698      	mov	r8, r3
 8001ca4:	d03c      	beq.n	8001d20 <__aeabi_dmul+0x448>
 8001ca6:	4653      	mov	r3, sl
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d100      	bne.n	8001cae <__aeabi_dmul+0x3d6>
 8001cac:	e0a3      	b.n	8001df6 <__aeabi_dmul+0x51e>
 8001cae:	4650      	mov	r0, sl
 8001cb0:	f000 fe7c 	bl	80029ac <__clzsi2>
 8001cb4:	230b      	movs	r3, #11
 8001cb6:	425b      	negs	r3, r3
 8001cb8:	469c      	mov	ip, r3
 8001cba:	0002      	movs	r2, r0
 8001cbc:	4484      	add	ip, r0
 8001cbe:	0011      	movs	r1, r2
 8001cc0:	4650      	mov	r0, sl
 8001cc2:	3908      	subs	r1, #8
 8001cc4:	4088      	lsls	r0, r1
 8001cc6:	231d      	movs	r3, #29
 8001cc8:	4680      	mov	r8, r0
 8001cca:	4660      	mov	r0, ip
 8001ccc:	1a1b      	subs	r3, r3, r0
 8001cce:	0020      	movs	r0, r4
 8001cd0:	40d8      	lsrs	r0, r3
 8001cd2:	0003      	movs	r3, r0
 8001cd4:	4640      	mov	r0, r8
 8001cd6:	4303      	orrs	r3, r0
 8001cd8:	469a      	mov	sl, r3
 8001cda:	0023      	movs	r3, r4
 8001cdc:	408b      	lsls	r3, r1
 8001cde:	4698      	mov	r8, r3
 8001ce0:	4b6c      	ldr	r3, [pc, #432]	@ (8001e94 <__aeabi_dmul+0x5bc>)
 8001ce2:	2500      	movs	r5, #0
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	2300      	movs	r3, #0
 8001cea:	9302      	str	r3, [sp, #8]
 8001cec:	e61a      	b.n	8001924 <__aeabi_dmul+0x4c>
 8001cee:	2d0f      	cmp	r5, #15
 8001cf0:	d000      	beq.n	8001cf4 <__aeabi_dmul+0x41c>
 8001cf2:	e0c9      	b.n	8001e88 <__aeabi_dmul+0x5b0>
 8001cf4:	2380      	movs	r3, #128	@ 0x80
 8001cf6:	4652      	mov	r2, sl
 8001cf8:	031b      	lsls	r3, r3, #12
 8001cfa:	421a      	tst	r2, r3
 8001cfc:	d002      	beq.n	8001d04 <__aeabi_dmul+0x42c>
 8001cfe:	421c      	tst	r4, r3
 8001d00:	d100      	bne.n	8001d04 <__aeabi_dmul+0x42c>
 8001d02:	e092      	b.n	8001e2a <__aeabi_dmul+0x552>
 8001d04:	2480      	movs	r4, #128	@ 0x80
 8001d06:	4653      	mov	r3, sl
 8001d08:	0324      	lsls	r4, r4, #12
 8001d0a:	431c      	orrs	r4, r3
 8001d0c:	0324      	lsls	r4, r4, #12
 8001d0e:	4642      	mov	r2, r8
 8001d10:	0b24      	lsrs	r4, r4, #12
 8001d12:	e63e      	b.n	8001992 <__aeabi_dmul+0xba>
 8001d14:	469b      	mov	fp, r3
 8001d16:	2303      	movs	r3, #3
 8001d18:	4680      	mov	r8, r0
 8001d1a:	250c      	movs	r5, #12
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	e601      	b.n	8001924 <__aeabi_dmul+0x4c>
 8001d20:	2300      	movs	r3, #0
 8001d22:	469a      	mov	sl, r3
 8001d24:	469b      	mov	fp, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	2504      	movs	r5, #4
 8001d2a:	9302      	str	r3, [sp, #8]
 8001d2c:	e5fa      	b.n	8001924 <__aeabi_dmul+0x4c>
 8001d2e:	2101      	movs	r1, #1
 8001d30:	430d      	orrs	r5, r1
 8001d32:	2d0a      	cmp	r5, #10
 8001d34:	dd00      	ble.n	8001d38 <__aeabi_dmul+0x460>
 8001d36:	e64b      	b.n	80019d0 <__aeabi_dmul+0xf8>
 8001d38:	4649      	mov	r1, r9
 8001d3a:	9800      	ldr	r0, [sp, #0]
 8001d3c:	4041      	eors	r1, r0
 8001d3e:	b2c9      	uxtb	r1, r1
 8001d40:	9103      	str	r1, [sp, #12]
 8001d42:	2d02      	cmp	r5, #2
 8001d44:	dc00      	bgt.n	8001d48 <__aeabi_dmul+0x470>
 8001d46:	e096      	b.n	8001e76 <__aeabi_dmul+0x59e>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	e60c      	b.n	800196c <__aeabi_dmul+0x94>
 8001d52:	4649      	mov	r1, r9
 8001d54:	2302      	movs	r3, #2
 8001d56:	9a00      	ldr	r2, [sp, #0]
 8001d58:	432b      	orrs	r3, r5
 8001d5a:	4051      	eors	r1, r2
 8001d5c:	b2ca      	uxtb	r2, r1
 8001d5e:	9203      	str	r2, [sp, #12]
 8001d60:	2b0a      	cmp	r3, #10
 8001d62:	dd00      	ble.n	8001d66 <__aeabi_dmul+0x48e>
 8001d64:	e634      	b.n	80019d0 <__aeabi_dmul+0xf8>
 8001d66:	2d00      	cmp	r5, #0
 8001d68:	d157      	bne.n	8001e1a <__aeabi_dmul+0x542>
 8001d6a:	9b03      	ldr	r3, [sp, #12]
 8001d6c:	4699      	mov	r9, r3
 8001d6e:	2400      	movs	r4, #0
 8001d70:	2200      	movs	r2, #0
 8001d72:	4b49      	ldr	r3, [pc, #292]	@ (8001e98 <__aeabi_dmul+0x5c0>)
 8001d74:	e60e      	b.n	8001994 <__aeabi_dmul+0xbc>
 8001d76:	4658      	mov	r0, fp
 8001d78:	2101      	movs	r1, #1
 8001d7a:	1ac9      	subs	r1, r1, r3
 8001d7c:	2938      	cmp	r1, #56	@ 0x38
 8001d7e:	dd00      	ble.n	8001d82 <__aeabi_dmul+0x4aa>
 8001d80:	e62f      	b.n	80019e2 <__aeabi_dmul+0x10a>
 8001d82:	291f      	cmp	r1, #31
 8001d84:	dd56      	ble.n	8001e34 <__aeabi_dmul+0x55c>
 8001d86:	221f      	movs	r2, #31
 8001d88:	4654      	mov	r4, sl
 8001d8a:	4252      	negs	r2, r2
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	40dc      	lsrs	r4, r3
 8001d90:	2920      	cmp	r1, #32
 8001d92:	d007      	beq.n	8001da4 <__aeabi_dmul+0x4cc>
 8001d94:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <__aeabi_dmul+0x5c4>)
 8001d96:	4642      	mov	r2, r8
 8001d98:	469c      	mov	ip, r3
 8001d9a:	4653      	mov	r3, sl
 8001d9c:	4460      	add	r0, ip
 8001d9e:	4083      	lsls	r3, r0
 8001da0:	431a      	orrs	r2, r3
 8001da2:	4690      	mov	r8, r2
 8001da4:	4642      	mov	r2, r8
 8001da6:	2107      	movs	r1, #7
 8001da8:	1e53      	subs	r3, r2, #1
 8001daa:	419a      	sbcs	r2, r3
 8001dac:	000b      	movs	r3, r1
 8001dae:	4322      	orrs	r2, r4
 8001db0:	4013      	ands	r3, r2
 8001db2:	2400      	movs	r4, #0
 8001db4:	4211      	tst	r1, r2
 8001db6:	d009      	beq.n	8001dcc <__aeabi_dmul+0x4f4>
 8001db8:	230f      	movs	r3, #15
 8001dba:	4013      	ands	r3, r2
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d05d      	beq.n	8001e7c <__aeabi_dmul+0x5a4>
 8001dc0:	1d11      	adds	r1, r2, #4
 8001dc2:	4291      	cmp	r1, r2
 8001dc4:	419b      	sbcs	r3, r3
 8001dc6:	000a      	movs	r2, r1
 8001dc8:	425b      	negs	r3, r3
 8001dca:	075b      	lsls	r3, r3, #29
 8001dcc:	08d2      	lsrs	r2, r2, #3
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e5df      	b.n	8001994 <__aeabi_dmul+0xbc>
 8001dd4:	9b03      	ldr	r3, [sp, #12]
 8001dd6:	4699      	mov	r9, r3
 8001dd8:	e5fa      	b.n	80019d0 <__aeabi_dmul+0xf8>
 8001dda:	9801      	ldr	r0, [sp, #4]
 8001ddc:	f000 fde6 	bl	80029ac <__clzsi2>
 8001de0:	0002      	movs	r2, r0
 8001de2:	0003      	movs	r3, r0
 8001de4:	3215      	adds	r2, #21
 8001de6:	3320      	adds	r3, #32
 8001de8:	2a1c      	cmp	r2, #28
 8001dea:	dc00      	bgt.n	8001dee <__aeabi_dmul+0x516>
 8001dec:	e738      	b.n	8001c60 <__aeabi_dmul+0x388>
 8001dee:	9a01      	ldr	r2, [sp, #4]
 8001df0:	3808      	subs	r0, #8
 8001df2:	4082      	lsls	r2, r0
 8001df4:	e73f      	b.n	8001c76 <__aeabi_dmul+0x39e>
 8001df6:	f000 fdd9 	bl	80029ac <__clzsi2>
 8001dfa:	2315      	movs	r3, #21
 8001dfc:	469c      	mov	ip, r3
 8001dfe:	4484      	add	ip, r0
 8001e00:	0002      	movs	r2, r0
 8001e02:	4663      	mov	r3, ip
 8001e04:	3220      	adds	r2, #32
 8001e06:	2b1c      	cmp	r3, #28
 8001e08:	dc00      	bgt.n	8001e0c <__aeabi_dmul+0x534>
 8001e0a:	e758      	b.n	8001cbe <__aeabi_dmul+0x3e6>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	4698      	mov	r8, r3
 8001e10:	0023      	movs	r3, r4
 8001e12:	3808      	subs	r0, #8
 8001e14:	4083      	lsls	r3, r0
 8001e16:	469a      	mov	sl, r3
 8001e18:	e762      	b.n	8001ce0 <__aeabi_dmul+0x408>
 8001e1a:	001d      	movs	r5, r3
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	2400      	movs	r4, #0
 8001e20:	2002      	movs	r0, #2
 8001e22:	9301      	str	r3, [sp, #4]
 8001e24:	e5a2      	b.n	800196c <__aeabi_dmul+0x94>
 8001e26:	9002      	str	r0, [sp, #8]
 8001e28:	e632      	b.n	8001a90 <__aeabi_dmul+0x1b8>
 8001e2a:	431c      	orrs	r4, r3
 8001e2c:	9b00      	ldr	r3, [sp, #0]
 8001e2e:	9a01      	ldr	r2, [sp, #4]
 8001e30:	4699      	mov	r9, r3
 8001e32:	e5ae      	b.n	8001992 <__aeabi_dmul+0xba>
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <__aeabi_dmul+0x5c8>)
 8001e36:	4652      	mov	r2, sl
 8001e38:	18c3      	adds	r3, r0, r3
 8001e3a:	4640      	mov	r0, r8
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	40c8      	lsrs	r0, r1
 8001e40:	4302      	orrs	r2, r0
 8001e42:	4640      	mov	r0, r8
 8001e44:	4098      	lsls	r0, r3
 8001e46:	0003      	movs	r3, r0
 8001e48:	1e58      	subs	r0, r3, #1
 8001e4a:	4183      	sbcs	r3, r0
 8001e4c:	4654      	mov	r4, sl
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	40cc      	lsrs	r4, r1
 8001e52:	0753      	lsls	r3, r2, #29
 8001e54:	d009      	beq.n	8001e6a <__aeabi_dmul+0x592>
 8001e56:	230f      	movs	r3, #15
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d005      	beq.n	8001e6a <__aeabi_dmul+0x592>
 8001e5e:	1d13      	adds	r3, r2, #4
 8001e60:	4293      	cmp	r3, r2
 8001e62:	4192      	sbcs	r2, r2
 8001e64:	4252      	negs	r2, r2
 8001e66:	18a4      	adds	r4, r4, r2
 8001e68:	001a      	movs	r2, r3
 8001e6a:	0223      	lsls	r3, r4, #8
 8001e6c:	d508      	bpl.n	8001e80 <__aeabi_dmul+0x5a8>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	2400      	movs	r4, #0
 8001e72:	2200      	movs	r2, #0
 8001e74:	e58e      	b.n	8001994 <__aeabi_dmul+0xbc>
 8001e76:	4689      	mov	r9, r1
 8001e78:	2400      	movs	r4, #0
 8001e7a:	e58b      	b.n	8001994 <__aeabi_dmul+0xbc>
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e7a5      	b.n	8001dcc <__aeabi_dmul+0x4f4>
 8001e80:	0763      	lsls	r3, r4, #29
 8001e82:	0264      	lsls	r4, r4, #9
 8001e84:	0b24      	lsrs	r4, r4, #12
 8001e86:	e7a1      	b.n	8001dcc <__aeabi_dmul+0x4f4>
 8001e88:	9b00      	ldr	r3, [sp, #0]
 8001e8a:	46a2      	mov	sl, r4
 8001e8c:	4699      	mov	r9, r3
 8001e8e:	9b01      	ldr	r3, [sp, #4]
 8001e90:	4698      	mov	r8, r3
 8001e92:	e737      	b.n	8001d04 <__aeabi_dmul+0x42c>
 8001e94:	fffffc0d 	.word	0xfffffc0d
 8001e98:	000007ff 	.word	0x000007ff
 8001e9c:	0000043e 	.word	0x0000043e
 8001ea0:	0000041e 	.word	0x0000041e

08001ea4 <__aeabi_dsub>:
 8001ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ea6:	4657      	mov	r7, sl
 8001ea8:	464e      	mov	r6, r9
 8001eaa:	4645      	mov	r5, r8
 8001eac:	46de      	mov	lr, fp
 8001eae:	b5e0      	push	{r5, r6, r7, lr}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	9000      	str	r0, [sp, #0]
 8001eb4:	9101      	str	r1, [sp, #4]
 8001eb6:	030c      	lsls	r4, r1, #12
 8001eb8:	004d      	lsls	r5, r1, #1
 8001eba:	0fce      	lsrs	r6, r1, #31
 8001ebc:	0a61      	lsrs	r1, r4, #9
 8001ebe:	9c00      	ldr	r4, [sp, #0]
 8001ec0:	005f      	lsls	r7, r3, #1
 8001ec2:	0f64      	lsrs	r4, r4, #29
 8001ec4:	430c      	orrs	r4, r1
 8001ec6:	9900      	ldr	r1, [sp, #0]
 8001ec8:	9200      	str	r2, [sp, #0]
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	00c8      	lsls	r0, r1, #3
 8001ece:	0319      	lsls	r1, r3, #12
 8001ed0:	0d7b      	lsrs	r3, r7, #21
 8001ed2:	4699      	mov	r9, r3
 8001ed4:	9b01      	ldr	r3, [sp, #4]
 8001ed6:	4fcc      	ldr	r7, [pc, #816]	@ (8002208 <__aeabi_dsub+0x364>)
 8001ed8:	0fdb      	lsrs	r3, r3, #31
 8001eda:	469c      	mov	ip, r3
 8001edc:	0a4b      	lsrs	r3, r1, #9
 8001ede:	9900      	ldr	r1, [sp, #0]
 8001ee0:	4680      	mov	r8, r0
 8001ee2:	0f49      	lsrs	r1, r1, #29
 8001ee4:	4319      	orrs	r1, r3
 8001ee6:	9b00      	ldr	r3, [sp, #0]
 8001ee8:	468b      	mov	fp, r1
 8001eea:	00da      	lsls	r2, r3, #3
 8001eec:	4692      	mov	sl, r2
 8001eee:	0d6d      	lsrs	r5, r5, #21
 8001ef0:	45b9      	cmp	r9, r7
 8001ef2:	d100      	bne.n	8001ef6 <__aeabi_dsub+0x52>
 8001ef4:	e0bf      	b.n	8002076 <__aeabi_dsub+0x1d2>
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4661      	mov	r1, ip
 8001efa:	4059      	eors	r1, r3
 8001efc:	464b      	mov	r3, r9
 8001efe:	468c      	mov	ip, r1
 8001f00:	1aeb      	subs	r3, r5, r3
 8001f02:	428e      	cmp	r6, r1
 8001f04:	d075      	beq.n	8001ff2 <__aeabi_dsub+0x14e>
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	dc00      	bgt.n	8001f0c <__aeabi_dsub+0x68>
 8001f0a:	e2a3      	b.n	8002454 <__aeabi_dsub+0x5b0>
 8001f0c:	4649      	mov	r1, r9
 8001f0e:	2900      	cmp	r1, #0
 8001f10:	d100      	bne.n	8001f14 <__aeabi_dsub+0x70>
 8001f12:	e0ce      	b.n	80020b2 <__aeabi_dsub+0x20e>
 8001f14:	42bd      	cmp	r5, r7
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x76>
 8001f18:	e200      	b.n	800231c <__aeabi_dsub+0x478>
 8001f1a:	2701      	movs	r7, #1
 8001f1c:	2b38      	cmp	r3, #56	@ 0x38
 8001f1e:	dc19      	bgt.n	8001f54 <__aeabi_dsub+0xb0>
 8001f20:	2780      	movs	r7, #128	@ 0x80
 8001f22:	4659      	mov	r1, fp
 8001f24:	043f      	lsls	r7, r7, #16
 8001f26:	4339      	orrs	r1, r7
 8001f28:	468b      	mov	fp, r1
 8001f2a:	2b1f      	cmp	r3, #31
 8001f2c:	dd00      	ble.n	8001f30 <__aeabi_dsub+0x8c>
 8001f2e:	e1fa      	b.n	8002326 <__aeabi_dsub+0x482>
 8001f30:	2720      	movs	r7, #32
 8001f32:	1af9      	subs	r1, r7, r3
 8001f34:	468c      	mov	ip, r1
 8001f36:	4659      	mov	r1, fp
 8001f38:	4667      	mov	r7, ip
 8001f3a:	40b9      	lsls	r1, r7
 8001f3c:	000f      	movs	r7, r1
 8001f3e:	0011      	movs	r1, r2
 8001f40:	40d9      	lsrs	r1, r3
 8001f42:	430f      	orrs	r7, r1
 8001f44:	4661      	mov	r1, ip
 8001f46:	408a      	lsls	r2, r1
 8001f48:	1e51      	subs	r1, r2, #1
 8001f4a:	418a      	sbcs	r2, r1
 8001f4c:	4659      	mov	r1, fp
 8001f4e:	40d9      	lsrs	r1, r3
 8001f50:	4317      	orrs	r7, r2
 8001f52:	1a64      	subs	r4, r4, r1
 8001f54:	1bc7      	subs	r7, r0, r7
 8001f56:	42b8      	cmp	r0, r7
 8001f58:	4180      	sbcs	r0, r0
 8001f5a:	4240      	negs	r0, r0
 8001f5c:	1a24      	subs	r4, r4, r0
 8001f5e:	0223      	lsls	r3, r4, #8
 8001f60:	d400      	bmi.n	8001f64 <__aeabi_dsub+0xc0>
 8001f62:	e140      	b.n	80021e6 <__aeabi_dsub+0x342>
 8001f64:	0264      	lsls	r4, r4, #9
 8001f66:	0a64      	lsrs	r4, r4, #9
 8001f68:	2c00      	cmp	r4, #0
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dsub+0xca>
 8001f6c:	e154      	b.n	8002218 <__aeabi_dsub+0x374>
 8001f6e:	0020      	movs	r0, r4
 8001f70:	f000 fd1c 	bl	80029ac <__clzsi2>
 8001f74:	0003      	movs	r3, r0
 8001f76:	3b08      	subs	r3, #8
 8001f78:	2120      	movs	r1, #32
 8001f7a:	0038      	movs	r0, r7
 8001f7c:	1aca      	subs	r2, r1, r3
 8001f7e:	40d0      	lsrs	r0, r2
 8001f80:	409c      	lsls	r4, r3
 8001f82:	0002      	movs	r2, r0
 8001f84:	409f      	lsls	r7, r3
 8001f86:	4322      	orrs	r2, r4
 8001f88:	429d      	cmp	r5, r3
 8001f8a:	dd00      	ble.n	8001f8e <__aeabi_dsub+0xea>
 8001f8c:	e1a6      	b.n	80022dc <__aeabi_dsub+0x438>
 8001f8e:	1b58      	subs	r0, r3, r5
 8001f90:	3001      	adds	r0, #1
 8001f92:	1a09      	subs	r1, r1, r0
 8001f94:	003c      	movs	r4, r7
 8001f96:	408f      	lsls	r7, r1
 8001f98:	40c4      	lsrs	r4, r0
 8001f9a:	1e7b      	subs	r3, r7, #1
 8001f9c:	419f      	sbcs	r7, r3
 8001f9e:	0013      	movs	r3, r2
 8001fa0:	408b      	lsls	r3, r1
 8001fa2:	4327      	orrs	r7, r4
 8001fa4:	431f      	orrs	r7, r3
 8001fa6:	40c2      	lsrs	r2, r0
 8001fa8:	003b      	movs	r3, r7
 8001faa:	0014      	movs	r4, r2
 8001fac:	2500      	movs	r5, #0
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	d100      	bne.n	8001fb4 <__aeabi_dsub+0x110>
 8001fb2:	e1f7      	b.n	80023a4 <__aeabi_dsub+0x500>
 8001fb4:	077b      	lsls	r3, r7, #29
 8001fb6:	d100      	bne.n	8001fba <__aeabi_dsub+0x116>
 8001fb8:	e377      	b.n	80026aa <__aeabi_dsub+0x806>
 8001fba:	230f      	movs	r3, #15
 8001fbc:	0038      	movs	r0, r7
 8001fbe:	403b      	ands	r3, r7
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d004      	beq.n	8001fce <__aeabi_dsub+0x12a>
 8001fc4:	1d38      	adds	r0, r7, #4
 8001fc6:	42b8      	cmp	r0, r7
 8001fc8:	41bf      	sbcs	r7, r7
 8001fca:	427f      	negs	r7, r7
 8001fcc:	19e4      	adds	r4, r4, r7
 8001fce:	0223      	lsls	r3, r4, #8
 8001fd0:	d400      	bmi.n	8001fd4 <__aeabi_dsub+0x130>
 8001fd2:	e368      	b.n	80026a6 <__aeabi_dsub+0x802>
 8001fd4:	4b8c      	ldr	r3, [pc, #560]	@ (8002208 <__aeabi_dsub+0x364>)
 8001fd6:	3501      	adds	r5, #1
 8001fd8:	429d      	cmp	r5, r3
 8001fda:	d100      	bne.n	8001fde <__aeabi_dsub+0x13a>
 8001fdc:	e0f4      	b.n	80021c8 <__aeabi_dsub+0x324>
 8001fde:	4b8b      	ldr	r3, [pc, #556]	@ (800220c <__aeabi_dsub+0x368>)
 8001fe0:	056d      	lsls	r5, r5, #21
 8001fe2:	401c      	ands	r4, r3
 8001fe4:	0d6d      	lsrs	r5, r5, #21
 8001fe6:	0767      	lsls	r7, r4, #29
 8001fe8:	08c0      	lsrs	r0, r0, #3
 8001fea:	0264      	lsls	r4, r4, #9
 8001fec:	4307      	orrs	r7, r0
 8001fee:	0b24      	lsrs	r4, r4, #12
 8001ff0:	e0ec      	b.n	80021cc <__aeabi_dsub+0x328>
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	dc00      	bgt.n	8001ff8 <__aeabi_dsub+0x154>
 8001ff6:	e329      	b.n	800264c <__aeabi_dsub+0x7a8>
 8001ff8:	4649      	mov	r1, r9
 8001ffa:	2900      	cmp	r1, #0
 8001ffc:	d000      	beq.n	8002000 <__aeabi_dsub+0x15c>
 8001ffe:	e0d6      	b.n	80021ae <__aeabi_dsub+0x30a>
 8002000:	4659      	mov	r1, fp
 8002002:	4311      	orrs	r1, r2
 8002004:	d100      	bne.n	8002008 <__aeabi_dsub+0x164>
 8002006:	e12e      	b.n	8002266 <__aeabi_dsub+0x3c2>
 8002008:	1e59      	subs	r1, r3, #1
 800200a:	2b01      	cmp	r3, #1
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x16c>
 800200e:	e1e6      	b.n	80023de <__aeabi_dsub+0x53a>
 8002010:	42bb      	cmp	r3, r7
 8002012:	d100      	bne.n	8002016 <__aeabi_dsub+0x172>
 8002014:	e182      	b.n	800231c <__aeabi_dsub+0x478>
 8002016:	2701      	movs	r7, #1
 8002018:	000b      	movs	r3, r1
 800201a:	2938      	cmp	r1, #56	@ 0x38
 800201c:	dc14      	bgt.n	8002048 <__aeabi_dsub+0x1a4>
 800201e:	2b1f      	cmp	r3, #31
 8002020:	dd00      	ble.n	8002024 <__aeabi_dsub+0x180>
 8002022:	e23c      	b.n	800249e <__aeabi_dsub+0x5fa>
 8002024:	2720      	movs	r7, #32
 8002026:	1af9      	subs	r1, r7, r3
 8002028:	468c      	mov	ip, r1
 800202a:	4659      	mov	r1, fp
 800202c:	4667      	mov	r7, ip
 800202e:	40b9      	lsls	r1, r7
 8002030:	000f      	movs	r7, r1
 8002032:	0011      	movs	r1, r2
 8002034:	40d9      	lsrs	r1, r3
 8002036:	430f      	orrs	r7, r1
 8002038:	4661      	mov	r1, ip
 800203a:	408a      	lsls	r2, r1
 800203c:	1e51      	subs	r1, r2, #1
 800203e:	418a      	sbcs	r2, r1
 8002040:	4659      	mov	r1, fp
 8002042:	40d9      	lsrs	r1, r3
 8002044:	4317      	orrs	r7, r2
 8002046:	1864      	adds	r4, r4, r1
 8002048:	183f      	adds	r7, r7, r0
 800204a:	4287      	cmp	r7, r0
 800204c:	4180      	sbcs	r0, r0
 800204e:	4240      	negs	r0, r0
 8002050:	1824      	adds	r4, r4, r0
 8002052:	0223      	lsls	r3, r4, #8
 8002054:	d400      	bmi.n	8002058 <__aeabi_dsub+0x1b4>
 8002056:	e0c6      	b.n	80021e6 <__aeabi_dsub+0x342>
 8002058:	4b6b      	ldr	r3, [pc, #428]	@ (8002208 <__aeabi_dsub+0x364>)
 800205a:	3501      	adds	r5, #1
 800205c:	429d      	cmp	r5, r3
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x1be>
 8002060:	e0b2      	b.n	80021c8 <__aeabi_dsub+0x324>
 8002062:	2101      	movs	r1, #1
 8002064:	4b69      	ldr	r3, [pc, #420]	@ (800220c <__aeabi_dsub+0x368>)
 8002066:	087a      	lsrs	r2, r7, #1
 8002068:	401c      	ands	r4, r3
 800206a:	4039      	ands	r1, r7
 800206c:	430a      	orrs	r2, r1
 800206e:	07e7      	lsls	r7, r4, #31
 8002070:	4317      	orrs	r7, r2
 8002072:	0864      	lsrs	r4, r4, #1
 8002074:	e79e      	b.n	8001fb4 <__aeabi_dsub+0x110>
 8002076:	4b66      	ldr	r3, [pc, #408]	@ (8002210 <__aeabi_dsub+0x36c>)
 8002078:	4311      	orrs	r1, r2
 800207a:	468a      	mov	sl, r1
 800207c:	18eb      	adds	r3, r5, r3
 800207e:	2900      	cmp	r1, #0
 8002080:	d028      	beq.n	80020d4 <__aeabi_dsub+0x230>
 8002082:	4566      	cmp	r6, ip
 8002084:	d02c      	beq.n	80020e0 <__aeabi_dsub+0x23c>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d05b      	beq.n	8002142 <__aeabi_dsub+0x29e>
 800208a:	2d00      	cmp	r5, #0
 800208c:	d100      	bne.n	8002090 <__aeabi_dsub+0x1ec>
 800208e:	e12c      	b.n	80022ea <__aeabi_dsub+0x446>
 8002090:	465b      	mov	r3, fp
 8002092:	4666      	mov	r6, ip
 8002094:	075f      	lsls	r7, r3, #29
 8002096:	08d2      	lsrs	r2, r2, #3
 8002098:	4317      	orrs	r7, r2
 800209a:	08dd      	lsrs	r5, r3, #3
 800209c:	003b      	movs	r3, r7
 800209e:	432b      	orrs	r3, r5
 80020a0:	d100      	bne.n	80020a4 <__aeabi_dsub+0x200>
 80020a2:	e0e2      	b.n	800226a <__aeabi_dsub+0x3c6>
 80020a4:	2480      	movs	r4, #128	@ 0x80
 80020a6:	0324      	lsls	r4, r4, #12
 80020a8:	432c      	orrs	r4, r5
 80020aa:	0324      	lsls	r4, r4, #12
 80020ac:	4d56      	ldr	r5, [pc, #344]	@ (8002208 <__aeabi_dsub+0x364>)
 80020ae:	0b24      	lsrs	r4, r4, #12
 80020b0:	e08c      	b.n	80021cc <__aeabi_dsub+0x328>
 80020b2:	4659      	mov	r1, fp
 80020b4:	4311      	orrs	r1, r2
 80020b6:	d100      	bne.n	80020ba <__aeabi_dsub+0x216>
 80020b8:	e0d5      	b.n	8002266 <__aeabi_dsub+0x3c2>
 80020ba:	1e59      	subs	r1, r3, #1
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d100      	bne.n	80020c2 <__aeabi_dsub+0x21e>
 80020c0:	e1b9      	b.n	8002436 <__aeabi_dsub+0x592>
 80020c2:	42bb      	cmp	r3, r7
 80020c4:	d100      	bne.n	80020c8 <__aeabi_dsub+0x224>
 80020c6:	e1b1      	b.n	800242c <__aeabi_dsub+0x588>
 80020c8:	2701      	movs	r7, #1
 80020ca:	000b      	movs	r3, r1
 80020cc:	2938      	cmp	r1, #56	@ 0x38
 80020ce:	dd00      	ble.n	80020d2 <__aeabi_dsub+0x22e>
 80020d0:	e740      	b.n	8001f54 <__aeabi_dsub+0xb0>
 80020d2:	e72a      	b.n	8001f2a <__aeabi_dsub+0x86>
 80020d4:	4661      	mov	r1, ip
 80020d6:	2701      	movs	r7, #1
 80020d8:	4079      	eors	r1, r7
 80020da:	468c      	mov	ip, r1
 80020dc:	4566      	cmp	r6, ip
 80020de:	d1d2      	bne.n	8002086 <__aeabi_dsub+0x1e2>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d100      	bne.n	80020e6 <__aeabi_dsub+0x242>
 80020e4:	e0c5      	b.n	8002272 <__aeabi_dsub+0x3ce>
 80020e6:	2d00      	cmp	r5, #0
 80020e8:	d000      	beq.n	80020ec <__aeabi_dsub+0x248>
 80020ea:	e155      	b.n	8002398 <__aeabi_dsub+0x4f4>
 80020ec:	464b      	mov	r3, r9
 80020ee:	0025      	movs	r5, r4
 80020f0:	4305      	orrs	r5, r0
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x252>
 80020f4:	e212      	b.n	800251c <__aeabi_dsub+0x678>
 80020f6:	1e59      	subs	r1, r3, #1
 80020f8:	468c      	mov	ip, r1
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x25c>
 80020fe:	e249      	b.n	8002594 <__aeabi_dsub+0x6f0>
 8002100:	4d41      	ldr	r5, [pc, #260]	@ (8002208 <__aeabi_dsub+0x364>)
 8002102:	42ab      	cmp	r3, r5
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x264>
 8002106:	e28f      	b.n	8002628 <__aeabi_dsub+0x784>
 8002108:	2701      	movs	r7, #1
 800210a:	2938      	cmp	r1, #56	@ 0x38
 800210c:	dc11      	bgt.n	8002132 <__aeabi_dsub+0x28e>
 800210e:	4663      	mov	r3, ip
 8002110:	2b1f      	cmp	r3, #31
 8002112:	dd00      	ble.n	8002116 <__aeabi_dsub+0x272>
 8002114:	e25b      	b.n	80025ce <__aeabi_dsub+0x72a>
 8002116:	4661      	mov	r1, ip
 8002118:	2320      	movs	r3, #32
 800211a:	0027      	movs	r7, r4
 800211c:	1a5b      	subs	r3, r3, r1
 800211e:	0005      	movs	r5, r0
 8002120:	4098      	lsls	r0, r3
 8002122:	409f      	lsls	r7, r3
 8002124:	40cd      	lsrs	r5, r1
 8002126:	1e43      	subs	r3, r0, #1
 8002128:	4198      	sbcs	r0, r3
 800212a:	40cc      	lsrs	r4, r1
 800212c:	432f      	orrs	r7, r5
 800212e:	4307      	orrs	r7, r0
 8002130:	44a3      	add	fp, r4
 8002132:	18bf      	adds	r7, r7, r2
 8002134:	4297      	cmp	r7, r2
 8002136:	4192      	sbcs	r2, r2
 8002138:	4252      	negs	r2, r2
 800213a:	445a      	add	r2, fp
 800213c:	0014      	movs	r4, r2
 800213e:	464d      	mov	r5, r9
 8002140:	e787      	b.n	8002052 <__aeabi_dsub+0x1ae>
 8002142:	4f34      	ldr	r7, [pc, #208]	@ (8002214 <__aeabi_dsub+0x370>)
 8002144:	1c6b      	adds	r3, r5, #1
 8002146:	423b      	tst	r3, r7
 8002148:	d000      	beq.n	800214c <__aeabi_dsub+0x2a8>
 800214a:	e0b6      	b.n	80022ba <__aeabi_dsub+0x416>
 800214c:	4659      	mov	r1, fp
 800214e:	0023      	movs	r3, r4
 8002150:	4311      	orrs	r1, r2
 8002152:	000f      	movs	r7, r1
 8002154:	4303      	orrs	r3, r0
 8002156:	2d00      	cmp	r5, #0
 8002158:	d000      	beq.n	800215c <__aeabi_dsub+0x2b8>
 800215a:	e126      	b.n	80023aa <__aeabi_dsub+0x506>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d100      	bne.n	8002162 <__aeabi_dsub+0x2be>
 8002160:	e1c0      	b.n	80024e4 <__aeabi_dsub+0x640>
 8002162:	2900      	cmp	r1, #0
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x2c4>
 8002166:	e0a1      	b.n	80022ac <__aeabi_dsub+0x408>
 8002168:	1a83      	subs	r3, r0, r2
 800216a:	4698      	mov	r8, r3
 800216c:	465b      	mov	r3, fp
 800216e:	4540      	cmp	r0, r8
 8002170:	41ad      	sbcs	r5, r5
 8002172:	1ae3      	subs	r3, r4, r3
 8002174:	426d      	negs	r5, r5
 8002176:	1b5b      	subs	r3, r3, r5
 8002178:	2580      	movs	r5, #128	@ 0x80
 800217a:	042d      	lsls	r5, r5, #16
 800217c:	422b      	tst	r3, r5
 800217e:	d100      	bne.n	8002182 <__aeabi_dsub+0x2de>
 8002180:	e14b      	b.n	800241a <__aeabi_dsub+0x576>
 8002182:	465b      	mov	r3, fp
 8002184:	1a10      	subs	r0, r2, r0
 8002186:	4282      	cmp	r2, r0
 8002188:	4192      	sbcs	r2, r2
 800218a:	1b1c      	subs	r4, r3, r4
 800218c:	0007      	movs	r7, r0
 800218e:	2601      	movs	r6, #1
 8002190:	4663      	mov	r3, ip
 8002192:	4252      	negs	r2, r2
 8002194:	1aa4      	subs	r4, r4, r2
 8002196:	4327      	orrs	r7, r4
 8002198:	401e      	ands	r6, r3
 800219a:	2f00      	cmp	r7, #0
 800219c:	d100      	bne.n	80021a0 <__aeabi_dsub+0x2fc>
 800219e:	e142      	b.n	8002426 <__aeabi_dsub+0x582>
 80021a0:	422c      	tst	r4, r5
 80021a2:	d100      	bne.n	80021a6 <__aeabi_dsub+0x302>
 80021a4:	e26d      	b.n	8002682 <__aeabi_dsub+0x7de>
 80021a6:	4b19      	ldr	r3, [pc, #100]	@ (800220c <__aeabi_dsub+0x368>)
 80021a8:	2501      	movs	r5, #1
 80021aa:	401c      	ands	r4, r3
 80021ac:	e71b      	b.n	8001fe6 <__aeabi_dsub+0x142>
 80021ae:	42bd      	cmp	r5, r7
 80021b0:	d100      	bne.n	80021b4 <__aeabi_dsub+0x310>
 80021b2:	e13b      	b.n	800242c <__aeabi_dsub+0x588>
 80021b4:	2701      	movs	r7, #1
 80021b6:	2b38      	cmp	r3, #56	@ 0x38
 80021b8:	dd00      	ble.n	80021bc <__aeabi_dsub+0x318>
 80021ba:	e745      	b.n	8002048 <__aeabi_dsub+0x1a4>
 80021bc:	2780      	movs	r7, #128	@ 0x80
 80021be:	4659      	mov	r1, fp
 80021c0:	043f      	lsls	r7, r7, #16
 80021c2:	4339      	orrs	r1, r7
 80021c4:	468b      	mov	fp, r1
 80021c6:	e72a      	b.n	800201e <__aeabi_dsub+0x17a>
 80021c8:	2400      	movs	r4, #0
 80021ca:	2700      	movs	r7, #0
 80021cc:	052d      	lsls	r5, r5, #20
 80021ce:	4325      	orrs	r5, r4
 80021d0:	07f6      	lsls	r6, r6, #31
 80021d2:	4335      	orrs	r5, r6
 80021d4:	0038      	movs	r0, r7
 80021d6:	0029      	movs	r1, r5
 80021d8:	b003      	add	sp, #12
 80021da:	bcf0      	pop	{r4, r5, r6, r7}
 80021dc:	46bb      	mov	fp, r7
 80021de:	46b2      	mov	sl, r6
 80021e0:	46a9      	mov	r9, r5
 80021e2:	46a0      	mov	r8, r4
 80021e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021e6:	077b      	lsls	r3, r7, #29
 80021e8:	d004      	beq.n	80021f4 <__aeabi_dsub+0x350>
 80021ea:	230f      	movs	r3, #15
 80021ec:	403b      	ands	r3, r7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	d000      	beq.n	80021f4 <__aeabi_dsub+0x350>
 80021f2:	e6e7      	b.n	8001fc4 <__aeabi_dsub+0x120>
 80021f4:	002b      	movs	r3, r5
 80021f6:	08f8      	lsrs	r0, r7, #3
 80021f8:	4a03      	ldr	r2, [pc, #12]	@ (8002208 <__aeabi_dsub+0x364>)
 80021fa:	0767      	lsls	r7, r4, #29
 80021fc:	4307      	orrs	r7, r0
 80021fe:	08e5      	lsrs	r5, r4, #3
 8002200:	4293      	cmp	r3, r2
 8002202:	d100      	bne.n	8002206 <__aeabi_dsub+0x362>
 8002204:	e74a      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002206:	e0a5      	b.n	8002354 <__aeabi_dsub+0x4b0>
 8002208:	000007ff 	.word	0x000007ff
 800220c:	ff7fffff 	.word	0xff7fffff
 8002210:	fffff801 	.word	0xfffff801
 8002214:	000007fe 	.word	0x000007fe
 8002218:	0038      	movs	r0, r7
 800221a:	f000 fbc7 	bl	80029ac <__clzsi2>
 800221e:	0003      	movs	r3, r0
 8002220:	3318      	adds	r3, #24
 8002222:	2b1f      	cmp	r3, #31
 8002224:	dc00      	bgt.n	8002228 <__aeabi_dsub+0x384>
 8002226:	e6a7      	b.n	8001f78 <__aeabi_dsub+0xd4>
 8002228:	003a      	movs	r2, r7
 800222a:	3808      	subs	r0, #8
 800222c:	4082      	lsls	r2, r0
 800222e:	429d      	cmp	r5, r3
 8002230:	dd00      	ble.n	8002234 <__aeabi_dsub+0x390>
 8002232:	e08a      	b.n	800234a <__aeabi_dsub+0x4a6>
 8002234:	1b5b      	subs	r3, r3, r5
 8002236:	1c58      	adds	r0, r3, #1
 8002238:	281f      	cmp	r0, #31
 800223a:	dc00      	bgt.n	800223e <__aeabi_dsub+0x39a>
 800223c:	e1d8      	b.n	80025f0 <__aeabi_dsub+0x74c>
 800223e:	0017      	movs	r7, r2
 8002240:	3b1f      	subs	r3, #31
 8002242:	40df      	lsrs	r7, r3
 8002244:	2820      	cmp	r0, #32
 8002246:	d005      	beq.n	8002254 <__aeabi_dsub+0x3b0>
 8002248:	2340      	movs	r3, #64	@ 0x40
 800224a:	1a1b      	subs	r3, r3, r0
 800224c:	409a      	lsls	r2, r3
 800224e:	1e53      	subs	r3, r2, #1
 8002250:	419a      	sbcs	r2, r3
 8002252:	4317      	orrs	r7, r2
 8002254:	2500      	movs	r5, #0
 8002256:	2f00      	cmp	r7, #0
 8002258:	d100      	bne.n	800225c <__aeabi_dsub+0x3b8>
 800225a:	e0e5      	b.n	8002428 <__aeabi_dsub+0x584>
 800225c:	077b      	lsls	r3, r7, #29
 800225e:	d000      	beq.n	8002262 <__aeabi_dsub+0x3be>
 8002260:	e6ab      	b.n	8001fba <__aeabi_dsub+0x116>
 8002262:	002c      	movs	r4, r5
 8002264:	e7c6      	b.n	80021f4 <__aeabi_dsub+0x350>
 8002266:	08c0      	lsrs	r0, r0, #3
 8002268:	e7c6      	b.n	80021f8 <__aeabi_dsub+0x354>
 800226a:	2700      	movs	r7, #0
 800226c:	2400      	movs	r4, #0
 800226e:	4dd1      	ldr	r5, [pc, #836]	@ (80025b4 <__aeabi_dsub+0x710>)
 8002270:	e7ac      	b.n	80021cc <__aeabi_dsub+0x328>
 8002272:	4fd1      	ldr	r7, [pc, #836]	@ (80025b8 <__aeabi_dsub+0x714>)
 8002274:	1c6b      	adds	r3, r5, #1
 8002276:	423b      	tst	r3, r7
 8002278:	d171      	bne.n	800235e <__aeabi_dsub+0x4ba>
 800227a:	0023      	movs	r3, r4
 800227c:	4303      	orrs	r3, r0
 800227e:	2d00      	cmp	r5, #0
 8002280:	d000      	beq.n	8002284 <__aeabi_dsub+0x3e0>
 8002282:	e14e      	b.n	8002522 <__aeabi_dsub+0x67e>
 8002284:	4657      	mov	r7, sl
 8002286:	2b00      	cmp	r3, #0
 8002288:	d100      	bne.n	800228c <__aeabi_dsub+0x3e8>
 800228a:	e1b5      	b.n	80025f8 <__aeabi_dsub+0x754>
 800228c:	2f00      	cmp	r7, #0
 800228e:	d00d      	beq.n	80022ac <__aeabi_dsub+0x408>
 8002290:	1883      	adds	r3, r0, r2
 8002292:	4283      	cmp	r3, r0
 8002294:	4180      	sbcs	r0, r0
 8002296:	445c      	add	r4, fp
 8002298:	4240      	negs	r0, r0
 800229a:	1824      	adds	r4, r4, r0
 800229c:	0222      	lsls	r2, r4, #8
 800229e:	d500      	bpl.n	80022a2 <__aeabi_dsub+0x3fe>
 80022a0:	e1c8      	b.n	8002634 <__aeabi_dsub+0x790>
 80022a2:	001f      	movs	r7, r3
 80022a4:	4698      	mov	r8, r3
 80022a6:	4327      	orrs	r7, r4
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x408>
 80022aa:	e0bc      	b.n	8002426 <__aeabi_dsub+0x582>
 80022ac:	4643      	mov	r3, r8
 80022ae:	0767      	lsls	r7, r4, #29
 80022b0:	08db      	lsrs	r3, r3, #3
 80022b2:	431f      	orrs	r7, r3
 80022b4:	08e5      	lsrs	r5, r4, #3
 80022b6:	2300      	movs	r3, #0
 80022b8:	e04c      	b.n	8002354 <__aeabi_dsub+0x4b0>
 80022ba:	1a83      	subs	r3, r0, r2
 80022bc:	4698      	mov	r8, r3
 80022be:	465b      	mov	r3, fp
 80022c0:	4540      	cmp	r0, r8
 80022c2:	41bf      	sbcs	r7, r7
 80022c4:	1ae3      	subs	r3, r4, r3
 80022c6:	427f      	negs	r7, r7
 80022c8:	1bdb      	subs	r3, r3, r7
 80022ca:	021f      	lsls	r7, r3, #8
 80022cc:	d47c      	bmi.n	80023c8 <__aeabi_dsub+0x524>
 80022ce:	4647      	mov	r7, r8
 80022d0:	431f      	orrs	r7, r3
 80022d2:	d100      	bne.n	80022d6 <__aeabi_dsub+0x432>
 80022d4:	e0a6      	b.n	8002424 <__aeabi_dsub+0x580>
 80022d6:	001c      	movs	r4, r3
 80022d8:	4647      	mov	r7, r8
 80022da:	e645      	b.n	8001f68 <__aeabi_dsub+0xc4>
 80022dc:	4cb7      	ldr	r4, [pc, #732]	@ (80025bc <__aeabi_dsub+0x718>)
 80022de:	1aed      	subs	r5, r5, r3
 80022e0:	4014      	ands	r4, r2
 80022e2:	077b      	lsls	r3, r7, #29
 80022e4:	d000      	beq.n	80022e8 <__aeabi_dsub+0x444>
 80022e6:	e780      	b.n	80021ea <__aeabi_dsub+0x346>
 80022e8:	e784      	b.n	80021f4 <__aeabi_dsub+0x350>
 80022ea:	464b      	mov	r3, r9
 80022ec:	0025      	movs	r5, r4
 80022ee:	4305      	orrs	r5, r0
 80022f0:	d066      	beq.n	80023c0 <__aeabi_dsub+0x51c>
 80022f2:	1e5f      	subs	r7, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d100      	bne.n	80022fa <__aeabi_dsub+0x456>
 80022f8:	e0fc      	b.n	80024f4 <__aeabi_dsub+0x650>
 80022fa:	4dae      	ldr	r5, [pc, #696]	@ (80025b4 <__aeabi_dsub+0x710>)
 80022fc:	42ab      	cmp	r3, r5
 80022fe:	d100      	bne.n	8002302 <__aeabi_dsub+0x45e>
 8002300:	e15e      	b.n	80025c0 <__aeabi_dsub+0x71c>
 8002302:	4666      	mov	r6, ip
 8002304:	2f38      	cmp	r7, #56	@ 0x38
 8002306:	dc00      	bgt.n	800230a <__aeabi_dsub+0x466>
 8002308:	e0b4      	b.n	8002474 <__aeabi_dsub+0x5d0>
 800230a:	2001      	movs	r0, #1
 800230c:	1a17      	subs	r7, r2, r0
 800230e:	42ba      	cmp	r2, r7
 8002310:	4192      	sbcs	r2, r2
 8002312:	465b      	mov	r3, fp
 8002314:	4252      	negs	r2, r2
 8002316:	464d      	mov	r5, r9
 8002318:	1a9c      	subs	r4, r3, r2
 800231a:	e620      	b.n	8001f5e <__aeabi_dsub+0xba>
 800231c:	0767      	lsls	r7, r4, #29
 800231e:	08c0      	lsrs	r0, r0, #3
 8002320:	4307      	orrs	r7, r0
 8002322:	08e5      	lsrs	r5, r4, #3
 8002324:	e6ba      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002326:	001f      	movs	r7, r3
 8002328:	4659      	mov	r1, fp
 800232a:	3f20      	subs	r7, #32
 800232c:	40f9      	lsrs	r1, r7
 800232e:	000f      	movs	r7, r1
 8002330:	2b20      	cmp	r3, #32
 8002332:	d005      	beq.n	8002340 <__aeabi_dsub+0x49c>
 8002334:	2140      	movs	r1, #64	@ 0x40
 8002336:	1acb      	subs	r3, r1, r3
 8002338:	4659      	mov	r1, fp
 800233a:	4099      	lsls	r1, r3
 800233c:	430a      	orrs	r2, r1
 800233e:	4692      	mov	sl, r2
 8002340:	4653      	mov	r3, sl
 8002342:	1e5a      	subs	r2, r3, #1
 8002344:	4193      	sbcs	r3, r2
 8002346:	431f      	orrs	r7, r3
 8002348:	e604      	b.n	8001f54 <__aeabi_dsub+0xb0>
 800234a:	1aeb      	subs	r3, r5, r3
 800234c:	4d9b      	ldr	r5, [pc, #620]	@ (80025bc <__aeabi_dsub+0x718>)
 800234e:	4015      	ands	r5, r2
 8002350:	076f      	lsls	r7, r5, #29
 8002352:	08ed      	lsrs	r5, r5, #3
 8002354:	032c      	lsls	r4, r5, #12
 8002356:	055d      	lsls	r5, r3, #21
 8002358:	0b24      	lsrs	r4, r4, #12
 800235a:	0d6d      	lsrs	r5, r5, #21
 800235c:	e736      	b.n	80021cc <__aeabi_dsub+0x328>
 800235e:	4d95      	ldr	r5, [pc, #596]	@ (80025b4 <__aeabi_dsub+0x710>)
 8002360:	42ab      	cmp	r3, r5
 8002362:	d100      	bne.n	8002366 <__aeabi_dsub+0x4c2>
 8002364:	e0d6      	b.n	8002514 <__aeabi_dsub+0x670>
 8002366:	1882      	adds	r2, r0, r2
 8002368:	0021      	movs	r1, r4
 800236a:	4282      	cmp	r2, r0
 800236c:	4180      	sbcs	r0, r0
 800236e:	4459      	add	r1, fp
 8002370:	4240      	negs	r0, r0
 8002372:	1808      	adds	r0, r1, r0
 8002374:	07c7      	lsls	r7, r0, #31
 8002376:	0852      	lsrs	r2, r2, #1
 8002378:	4317      	orrs	r7, r2
 800237a:	0844      	lsrs	r4, r0, #1
 800237c:	0752      	lsls	r2, r2, #29
 800237e:	d400      	bmi.n	8002382 <__aeabi_dsub+0x4de>
 8002380:	e185      	b.n	800268e <__aeabi_dsub+0x7ea>
 8002382:	220f      	movs	r2, #15
 8002384:	001d      	movs	r5, r3
 8002386:	403a      	ands	r2, r7
 8002388:	2a04      	cmp	r2, #4
 800238a:	d000      	beq.n	800238e <__aeabi_dsub+0x4ea>
 800238c:	e61a      	b.n	8001fc4 <__aeabi_dsub+0x120>
 800238e:	08ff      	lsrs	r7, r7, #3
 8002390:	0764      	lsls	r4, r4, #29
 8002392:	4327      	orrs	r7, r4
 8002394:	0905      	lsrs	r5, r0, #4
 8002396:	e7dd      	b.n	8002354 <__aeabi_dsub+0x4b0>
 8002398:	465b      	mov	r3, fp
 800239a:	08d2      	lsrs	r2, r2, #3
 800239c:	075f      	lsls	r7, r3, #29
 800239e:	4317      	orrs	r7, r2
 80023a0:	08dd      	lsrs	r5, r3, #3
 80023a2:	e67b      	b.n	800209c <__aeabi_dsub+0x1f8>
 80023a4:	2700      	movs	r7, #0
 80023a6:	2400      	movs	r4, #0
 80023a8:	e710      	b.n	80021cc <__aeabi_dsub+0x328>
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d000      	beq.n	80023b0 <__aeabi_dsub+0x50c>
 80023ae:	e0d6      	b.n	800255e <__aeabi_dsub+0x6ba>
 80023b0:	2900      	cmp	r1, #0
 80023b2:	d000      	beq.n	80023b6 <__aeabi_dsub+0x512>
 80023b4:	e12f      	b.n	8002616 <__aeabi_dsub+0x772>
 80023b6:	2480      	movs	r4, #128	@ 0x80
 80023b8:	2600      	movs	r6, #0
 80023ba:	4d7e      	ldr	r5, [pc, #504]	@ (80025b4 <__aeabi_dsub+0x710>)
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	e705      	b.n	80021cc <__aeabi_dsub+0x328>
 80023c0:	4666      	mov	r6, ip
 80023c2:	465c      	mov	r4, fp
 80023c4:	08d0      	lsrs	r0, r2, #3
 80023c6:	e717      	b.n	80021f8 <__aeabi_dsub+0x354>
 80023c8:	465b      	mov	r3, fp
 80023ca:	1a17      	subs	r7, r2, r0
 80023cc:	42ba      	cmp	r2, r7
 80023ce:	4192      	sbcs	r2, r2
 80023d0:	1b1c      	subs	r4, r3, r4
 80023d2:	2601      	movs	r6, #1
 80023d4:	4663      	mov	r3, ip
 80023d6:	4252      	negs	r2, r2
 80023d8:	1aa4      	subs	r4, r4, r2
 80023da:	401e      	ands	r6, r3
 80023dc:	e5c4      	b.n	8001f68 <__aeabi_dsub+0xc4>
 80023de:	1883      	adds	r3, r0, r2
 80023e0:	4283      	cmp	r3, r0
 80023e2:	4180      	sbcs	r0, r0
 80023e4:	445c      	add	r4, fp
 80023e6:	4240      	negs	r0, r0
 80023e8:	1825      	adds	r5, r4, r0
 80023ea:	022a      	lsls	r2, r5, #8
 80023ec:	d400      	bmi.n	80023f0 <__aeabi_dsub+0x54c>
 80023ee:	e0da      	b.n	80025a6 <__aeabi_dsub+0x702>
 80023f0:	4a72      	ldr	r2, [pc, #456]	@ (80025bc <__aeabi_dsub+0x718>)
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	4015      	ands	r5, r2
 80023f6:	07ea      	lsls	r2, r5, #31
 80023f8:	431a      	orrs	r2, r3
 80023fa:	0869      	lsrs	r1, r5, #1
 80023fc:	075b      	lsls	r3, r3, #29
 80023fe:	d400      	bmi.n	8002402 <__aeabi_dsub+0x55e>
 8002400:	e14a      	b.n	8002698 <__aeabi_dsub+0x7f4>
 8002402:	230f      	movs	r3, #15
 8002404:	4013      	ands	r3, r2
 8002406:	2b04      	cmp	r3, #4
 8002408:	d100      	bne.n	800240c <__aeabi_dsub+0x568>
 800240a:	e0fc      	b.n	8002606 <__aeabi_dsub+0x762>
 800240c:	1d17      	adds	r7, r2, #4
 800240e:	4297      	cmp	r7, r2
 8002410:	41a4      	sbcs	r4, r4
 8002412:	4264      	negs	r4, r4
 8002414:	2502      	movs	r5, #2
 8002416:	1864      	adds	r4, r4, r1
 8002418:	e6ec      	b.n	80021f4 <__aeabi_dsub+0x350>
 800241a:	4647      	mov	r7, r8
 800241c:	001c      	movs	r4, r3
 800241e:	431f      	orrs	r7, r3
 8002420:	d000      	beq.n	8002424 <__aeabi_dsub+0x580>
 8002422:	e743      	b.n	80022ac <__aeabi_dsub+0x408>
 8002424:	2600      	movs	r6, #0
 8002426:	2500      	movs	r5, #0
 8002428:	2400      	movs	r4, #0
 800242a:	e6cf      	b.n	80021cc <__aeabi_dsub+0x328>
 800242c:	08c0      	lsrs	r0, r0, #3
 800242e:	0767      	lsls	r7, r4, #29
 8002430:	4307      	orrs	r7, r0
 8002432:	08e5      	lsrs	r5, r4, #3
 8002434:	e632      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002436:	1a87      	subs	r7, r0, r2
 8002438:	465b      	mov	r3, fp
 800243a:	42b8      	cmp	r0, r7
 800243c:	4180      	sbcs	r0, r0
 800243e:	1ae4      	subs	r4, r4, r3
 8002440:	4240      	negs	r0, r0
 8002442:	1a24      	subs	r4, r4, r0
 8002444:	0223      	lsls	r3, r4, #8
 8002446:	d428      	bmi.n	800249a <__aeabi_dsub+0x5f6>
 8002448:	0763      	lsls	r3, r4, #29
 800244a:	08ff      	lsrs	r7, r7, #3
 800244c:	431f      	orrs	r7, r3
 800244e:	08e5      	lsrs	r5, r4, #3
 8002450:	2301      	movs	r3, #1
 8002452:	e77f      	b.n	8002354 <__aeabi_dsub+0x4b0>
 8002454:	2b00      	cmp	r3, #0
 8002456:	d100      	bne.n	800245a <__aeabi_dsub+0x5b6>
 8002458:	e673      	b.n	8002142 <__aeabi_dsub+0x29e>
 800245a:	464b      	mov	r3, r9
 800245c:	1b5f      	subs	r7, r3, r5
 800245e:	003b      	movs	r3, r7
 8002460:	2d00      	cmp	r5, #0
 8002462:	d100      	bne.n	8002466 <__aeabi_dsub+0x5c2>
 8002464:	e742      	b.n	80022ec <__aeabi_dsub+0x448>
 8002466:	2f38      	cmp	r7, #56	@ 0x38
 8002468:	dd00      	ble.n	800246c <__aeabi_dsub+0x5c8>
 800246a:	e0ec      	b.n	8002646 <__aeabi_dsub+0x7a2>
 800246c:	2380      	movs	r3, #128	@ 0x80
 800246e:	000e      	movs	r6, r1
 8002470:	041b      	lsls	r3, r3, #16
 8002472:	431c      	orrs	r4, r3
 8002474:	2f1f      	cmp	r7, #31
 8002476:	dc25      	bgt.n	80024c4 <__aeabi_dsub+0x620>
 8002478:	2520      	movs	r5, #32
 800247a:	0023      	movs	r3, r4
 800247c:	1bed      	subs	r5, r5, r7
 800247e:	0001      	movs	r1, r0
 8002480:	40a8      	lsls	r0, r5
 8002482:	40ab      	lsls	r3, r5
 8002484:	40f9      	lsrs	r1, r7
 8002486:	1e45      	subs	r5, r0, #1
 8002488:	41a8      	sbcs	r0, r5
 800248a:	430b      	orrs	r3, r1
 800248c:	40fc      	lsrs	r4, r7
 800248e:	4318      	orrs	r0, r3
 8002490:	465b      	mov	r3, fp
 8002492:	1b1b      	subs	r3, r3, r4
 8002494:	469b      	mov	fp, r3
 8002496:	e739      	b.n	800230c <__aeabi_dsub+0x468>
 8002498:	4666      	mov	r6, ip
 800249a:	2501      	movs	r5, #1
 800249c:	e562      	b.n	8001f64 <__aeabi_dsub+0xc0>
 800249e:	001f      	movs	r7, r3
 80024a0:	4659      	mov	r1, fp
 80024a2:	3f20      	subs	r7, #32
 80024a4:	40f9      	lsrs	r1, r7
 80024a6:	468c      	mov	ip, r1
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	d005      	beq.n	80024b8 <__aeabi_dsub+0x614>
 80024ac:	2740      	movs	r7, #64	@ 0x40
 80024ae:	4659      	mov	r1, fp
 80024b0:	1afb      	subs	r3, r7, r3
 80024b2:	4099      	lsls	r1, r3
 80024b4:	430a      	orrs	r2, r1
 80024b6:	4692      	mov	sl, r2
 80024b8:	4657      	mov	r7, sl
 80024ba:	1e7b      	subs	r3, r7, #1
 80024bc:	419f      	sbcs	r7, r3
 80024be:	4663      	mov	r3, ip
 80024c0:	431f      	orrs	r7, r3
 80024c2:	e5c1      	b.n	8002048 <__aeabi_dsub+0x1a4>
 80024c4:	003b      	movs	r3, r7
 80024c6:	0025      	movs	r5, r4
 80024c8:	3b20      	subs	r3, #32
 80024ca:	40dd      	lsrs	r5, r3
 80024cc:	2f20      	cmp	r7, #32
 80024ce:	d004      	beq.n	80024da <__aeabi_dsub+0x636>
 80024d0:	2340      	movs	r3, #64	@ 0x40
 80024d2:	1bdb      	subs	r3, r3, r7
 80024d4:	409c      	lsls	r4, r3
 80024d6:	4320      	orrs	r0, r4
 80024d8:	4680      	mov	r8, r0
 80024da:	4640      	mov	r0, r8
 80024dc:	1e43      	subs	r3, r0, #1
 80024de:	4198      	sbcs	r0, r3
 80024e0:	4328      	orrs	r0, r5
 80024e2:	e713      	b.n	800230c <__aeabi_dsub+0x468>
 80024e4:	2900      	cmp	r1, #0
 80024e6:	d09d      	beq.n	8002424 <__aeabi_dsub+0x580>
 80024e8:	2601      	movs	r6, #1
 80024ea:	4663      	mov	r3, ip
 80024ec:	465c      	mov	r4, fp
 80024ee:	4690      	mov	r8, r2
 80024f0:	401e      	ands	r6, r3
 80024f2:	e6db      	b.n	80022ac <__aeabi_dsub+0x408>
 80024f4:	1a17      	subs	r7, r2, r0
 80024f6:	465b      	mov	r3, fp
 80024f8:	42ba      	cmp	r2, r7
 80024fa:	4192      	sbcs	r2, r2
 80024fc:	1b1c      	subs	r4, r3, r4
 80024fe:	4252      	negs	r2, r2
 8002500:	1aa4      	subs	r4, r4, r2
 8002502:	0223      	lsls	r3, r4, #8
 8002504:	d4c8      	bmi.n	8002498 <__aeabi_dsub+0x5f4>
 8002506:	0763      	lsls	r3, r4, #29
 8002508:	08ff      	lsrs	r7, r7, #3
 800250a:	431f      	orrs	r7, r3
 800250c:	4666      	mov	r6, ip
 800250e:	2301      	movs	r3, #1
 8002510:	08e5      	lsrs	r5, r4, #3
 8002512:	e71f      	b.n	8002354 <__aeabi_dsub+0x4b0>
 8002514:	001d      	movs	r5, r3
 8002516:	2400      	movs	r4, #0
 8002518:	2700      	movs	r7, #0
 800251a:	e657      	b.n	80021cc <__aeabi_dsub+0x328>
 800251c:	465c      	mov	r4, fp
 800251e:	08d0      	lsrs	r0, r2, #3
 8002520:	e66a      	b.n	80021f8 <__aeabi_dsub+0x354>
 8002522:	2b00      	cmp	r3, #0
 8002524:	d100      	bne.n	8002528 <__aeabi_dsub+0x684>
 8002526:	e737      	b.n	8002398 <__aeabi_dsub+0x4f4>
 8002528:	4653      	mov	r3, sl
 800252a:	08c0      	lsrs	r0, r0, #3
 800252c:	0767      	lsls	r7, r4, #29
 800252e:	4307      	orrs	r7, r0
 8002530:	08e5      	lsrs	r5, r4, #3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d100      	bne.n	8002538 <__aeabi_dsub+0x694>
 8002536:	e5b1      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002538:	2380      	movs	r3, #128	@ 0x80
 800253a:	031b      	lsls	r3, r3, #12
 800253c:	421d      	tst	r5, r3
 800253e:	d008      	beq.n	8002552 <__aeabi_dsub+0x6ae>
 8002540:	4659      	mov	r1, fp
 8002542:	08c8      	lsrs	r0, r1, #3
 8002544:	4218      	tst	r0, r3
 8002546:	d104      	bne.n	8002552 <__aeabi_dsub+0x6ae>
 8002548:	08d2      	lsrs	r2, r2, #3
 800254a:	0749      	lsls	r1, r1, #29
 800254c:	430a      	orrs	r2, r1
 800254e:	0017      	movs	r7, r2
 8002550:	0005      	movs	r5, r0
 8002552:	0f7b      	lsrs	r3, r7, #29
 8002554:	00ff      	lsls	r7, r7, #3
 8002556:	08ff      	lsrs	r7, r7, #3
 8002558:	075b      	lsls	r3, r3, #29
 800255a:	431f      	orrs	r7, r3
 800255c:	e59e      	b.n	800209c <__aeabi_dsub+0x1f8>
 800255e:	08c0      	lsrs	r0, r0, #3
 8002560:	0763      	lsls	r3, r4, #29
 8002562:	4318      	orrs	r0, r3
 8002564:	08e5      	lsrs	r5, r4, #3
 8002566:	2900      	cmp	r1, #0
 8002568:	d053      	beq.n	8002612 <__aeabi_dsub+0x76e>
 800256a:	2380      	movs	r3, #128	@ 0x80
 800256c:	031b      	lsls	r3, r3, #12
 800256e:	421d      	tst	r5, r3
 8002570:	d00a      	beq.n	8002588 <__aeabi_dsub+0x6e4>
 8002572:	4659      	mov	r1, fp
 8002574:	08cc      	lsrs	r4, r1, #3
 8002576:	421c      	tst	r4, r3
 8002578:	d106      	bne.n	8002588 <__aeabi_dsub+0x6e4>
 800257a:	2601      	movs	r6, #1
 800257c:	4663      	mov	r3, ip
 800257e:	0025      	movs	r5, r4
 8002580:	08d0      	lsrs	r0, r2, #3
 8002582:	0749      	lsls	r1, r1, #29
 8002584:	4308      	orrs	r0, r1
 8002586:	401e      	ands	r6, r3
 8002588:	0f47      	lsrs	r7, r0, #29
 800258a:	00c0      	lsls	r0, r0, #3
 800258c:	08c0      	lsrs	r0, r0, #3
 800258e:	077f      	lsls	r7, r7, #29
 8002590:	4307      	orrs	r7, r0
 8002592:	e583      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002594:	1883      	adds	r3, r0, r2
 8002596:	4293      	cmp	r3, r2
 8002598:	4192      	sbcs	r2, r2
 800259a:	445c      	add	r4, fp
 800259c:	4252      	negs	r2, r2
 800259e:	18a5      	adds	r5, r4, r2
 80025a0:	022a      	lsls	r2, r5, #8
 80025a2:	d500      	bpl.n	80025a6 <__aeabi_dsub+0x702>
 80025a4:	e724      	b.n	80023f0 <__aeabi_dsub+0x54c>
 80025a6:	076f      	lsls	r7, r5, #29
 80025a8:	08db      	lsrs	r3, r3, #3
 80025aa:	431f      	orrs	r7, r3
 80025ac:	08ed      	lsrs	r5, r5, #3
 80025ae:	2301      	movs	r3, #1
 80025b0:	e6d0      	b.n	8002354 <__aeabi_dsub+0x4b0>
 80025b2:	46c0      	nop			@ (mov r8, r8)
 80025b4:	000007ff 	.word	0x000007ff
 80025b8:	000007fe 	.word	0x000007fe
 80025bc:	ff7fffff 	.word	0xff7fffff
 80025c0:	465b      	mov	r3, fp
 80025c2:	08d2      	lsrs	r2, r2, #3
 80025c4:	075f      	lsls	r7, r3, #29
 80025c6:	4666      	mov	r6, ip
 80025c8:	4317      	orrs	r7, r2
 80025ca:	08dd      	lsrs	r5, r3, #3
 80025cc:	e566      	b.n	800209c <__aeabi_dsub+0x1f8>
 80025ce:	0025      	movs	r5, r4
 80025d0:	3b20      	subs	r3, #32
 80025d2:	40dd      	lsrs	r5, r3
 80025d4:	4663      	mov	r3, ip
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	d005      	beq.n	80025e6 <__aeabi_dsub+0x742>
 80025da:	2340      	movs	r3, #64	@ 0x40
 80025dc:	4661      	mov	r1, ip
 80025de:	1a5b      	subs	r3, r3, r1
 80025e0:	409c      	lsls	r4, r3
 80025e2:	4320      	orrs	r0, r4
 80025e4:	4680      	mov	r8, r0
 80025e6:	4647      	mov	r7, r8
 80025e8:	1e7b      	subs	r3, r7, #1
 80025ea:	419f      	sbcs	r7, r3
 80025ec:	432f      	orrs	r7, r5
 80025ee:	e5a0      	b.n	8002132 <__aeabi_dsub+0x28e>
 80025f0:	2120      	movs	r1, #32
 80025f2:	2700      	movs	r7, #0
 80025f4:	1a09      	subs	r1, r1, r0
 80025f6:	e4d2      	b.n	8001f9e <__aeabi_dsub+0xfa>
 80025f8:	2f00      	cmp	r7, #0
 80025fa:	d100      	bne.n	80025fe <__aeabi_dsub+0x75a>
 80025fc:	e713      	b.n	8002426 <__aeabi_dsub+0x582>
 80025fe:	465c      	mov	r4, fp
 8002600:	0017      	movs	r7, r2
 8002602:	2500      	movs	r5, #0
 8002604:	e5f6      	b.n	80021f4 <__aeabi_dsub+0x350>
 8002606:	08d7      	lsrs	r7, r2, #3
 8002608:	0749      	lsls	r1, r1, #29
 800260a:	2302      	movs	r3, #2
 800260c:	430f      	orrs	r7, r1
 800260e:	092d      	lsrs	r5, r5, #4
 8002610:	e6a0      	b.n	8002354 <__aeabi_dsub+0x4b0>
 8002612:	0007      	movs	r7, r0
 8002614:	e542      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002616:	465b      	mov	r3, fp
 8002618:	2601      	movs	r6, #1
 800261a:	075f      	lsls	r7, r3, #29
 800261c:	08dd      	lsrs	r5, r3, #3
 800261e:	4663      	mov	r3, ip
 8002620:	08d2      	lsrs	r2, r2, #3
 8002622:	4317      	orrs	r7, r2
 8002624:	401e      	ands	r6, r3
 8002626:	e539      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002628:	465b      	mov	r3, fp
 800262a:	08d2      	lsrs	r2, r2, #3
 800262c:	075f      	lsls	r7, r3, #29
 800262e:	4317      	orrs	r7, r2
 8002630:	08dd      	lsrs	r5, r3, #3
 8002632:	e533      	b.n	800209c <__aeabi_dsub+0x1f8>
 8002634:	4a1e      	ldr	r2, [pc, #120]	@ (80026b0 <__aeabi_dsub+0x80c>)
 8002636:	08db      	lsrs	r3, r3, #3
 8002638:	4022      	ands	r2, r4
 800263a:	0757      	lsls	r7, r2, #29
 800263c:	0252      	lsls	r2, r2, #9
 800263e:	2501      	movs	r5, #1
 8002640:	431f      	orrs	r7, r3
 8002642:	0b14      	lsrs	r4, r2, #12
 8002644:	e5c2      	b.n	80021cc <__aeabi_dsub+0x328>
 8002646:	000e      	movs	r6, r1
 8002648:	2001      	movs	r0, #1
 800264a:	e65f      	b.n	800230c <__aeabi_dsub+0x468>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <__aeabi_dsub+0x7c8>
 8002650:	464b      	mov	r3, r9
 8002652:	1b5b      	subs	r3, r3, r5
 8002654:	469c      	mov	ip, r3
 8002656:	2d00      	cmp	r5, #0
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x7b8>
 800265a:	e548      	b.n	80020ee <__aeabi_dsub+0x24a>
 800265c:	2701      	movs	r7, #1
 800265e:	2b38      	cmp	r3, #56	@ 0x38
 8002660:	dd00      	ble.n	8002664 <__aeabi_dsub+0x7c0>
 8002662:	e566      	b.n	8002132 <__aeabi_dsub+0x28e>
 8002664:	2380      	movs	r3, #128	@ 0x80
 8002666:	041b      	lsls	r3, r3, #16
 8002668:	431c      	orrs	r4, r3
 800266a:	e550      	b.n	800210e <__aeabi_dsub+0x26a>
 800266c:	1c6b      	adds	r3, r5, #1
 800266e:	4d11      	ldr	r5, [pc, #68]	@ (80026b4 <__aeabi_dsub+0x810>)
 8002670:	422b      	tst	r3, r5
 8002672:	d000      	beq.n	8002676 <__aeabi_dsub+0x7d2>
 8002674:	e673      	b.n	800235e <__aeabi_dsub+0x4ba>
 8002676:	4659      	mov	r1, fp
 8002678:	0023      	movs	r3, r4
 800267a:	4311      	orrs	r1, r2
 800267c:	468a      	mov	sl, r1
 800267e:	4303      	orrs	r3, r0
 8002680:	e600      	b.n	8002284 <__aeabi_dsub+0x3e0>
 8002682:	0767      	lsls	r7, r4, #29
 8002684:	08c0      	lsrs	r0, r0, #3
 8002686:	2300      	movs	r3, #0
 8002688:	4307      	orrs	r7, r0
 800268a:	08e5      	lsrs	r5, r4, #3
 800268c:	e662      	b.n	8002354 <__aeabi_dsub+0x4b0>
 800268e:	0764      	lsls	r4, r4, #29
 8002690:	08ff      	lsrs	r7, r7, #3
 8002692:	4327      	orrs	r7, r4
 8002694:	0905      	lsrs	r5, r0, #4
 8002696:	e65d      	b.n	8002354 <__aeabi_dsub+0x4b0>
 8002698:	08d2      	lsrs	r2, r2, #3
 800269a:	0749      	lsls	r1, r1, #29
 800269c:	4311      	orrs	r1, r2
 800269e:	000f      	movs	r7, r1
 80026a0:	2302      	movs	r3, #2
 80026a2:	092d      	lsrs	r5, r5, #4
 80026a4:	e656      	b.n	8002354 <__aeabi_dsub+0x4b0>
 80026a6:	0007      	movs	r7, r0
 80026a8:	e5a4      	b.n	80021f4 <__aeabi_dsub+0x350>
 80026aa:	0038      	movs	r0, r7
 80026ac:	e48f      	b.n	8001fce <__aeabi_dsub+0x12a>
 80026ae:	46c0      	nop			@ (mov r8, r8)
 80026b0:	ff7fffff 	.word	0xff7fffff
 80026b4:	000007fe 	.word	0x000007fe

080026b8 <__aeabi_dcmpun>:
 80026b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ba:	46c6      	mov	lr, r8
 80026bc:	031e      	lsls	r6, r3, #12
 80026be:	0b36      	lsrs	r6, r6, #12
 80026c0:	46b0      	mov	r8, r6
 80026c2:	4e0d      	ldr	r6, [pc, #52]	@ (80026f8 <__aeabi_dcmpun+0x40>)
 80026c4:	030c      	lsls	r4, r1, #12
 80026c6:	004d      	lsls	r5, r1, #1
 80026c8:	005f      	lsls	r7, r3, #1
 80026ca:	b500      	push	{lr}
 80026cc:	0b24      	lsrs	r4, r4, #12
 80026ce:	0d6d      	lsrs	r5, r5, #21
 80026d0:	0d7f      	lsrs	r7, r7, #21
 80026d2:	42b5      	cmp	r5, r6
 80026d4:	d00b      	beq.n	80026ee <__aeabi_dcmpun+0x36>
 80026d6:	4908      	ldr	r1, [pc, #32]	@ (80026f8 <__aeabi_dcmpun+0x40>)
 80026d8:	2000      	movs	r0, #0
 80026da:	428f      	cmp	r7, r1
 80026dc:	d104      	bne.n	80026e8 <__aeabi_dcmpun+0x30>
 80026de:	4646      	mov	r6, r8
 80026e0:	4316      	orrs	r6, r2
 80026e2:	0030      	movs	r0, r6
 80026e4:	1e43      	subs	r3, r0, #1
 80026e6:	4198      	sbcs	r0, r3
 80026e8:	bc80      	pop	{r7}
 80026ea:	46b8      	mov	r8, r7
 80026ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ee:	4304      	orrs	r4, r0
 80026f0:	2001      	movs	r0, #1
 80026f2:	2c00      	cmp	r4, #0
 80026f4:	d1f8      	bne.n	80026e8 <__aeabi_dcmpun+0x30>
 80026f6:	e7ee      	b.n	80026d6 <__aeabi_dcmpun+0x1e>
 80026f8:	000007ff 	.word	0x000007ff

080026fc <__aeabi_d2iz>:
 80026fc:	000b      	movs	r3, r1
 80026fe:	0002      	movs	r2, r0
 8002700:	b570      	push	{r4, r5, r6, lr}
 8002702:	4d16      	ldr	r5, [pc, #88]	@ (800275c <__aeabi_d2iz+0x60>)
 8002704:	030c      	lsls	r4, r1, #12
 8002706:	b082      	sub	sp, #8
 8002708:	0049      	lsls	r1, r1, #1
 800270a:	2000      	movs	r0, #0
 800270c:	9200      	str	r2, [sp, #0]
 800270e:	9301      	str	r3, [sp, #4]
 8002710:	0b24      	lsrs	r4, r4, #12
 8002712:	0d49      	lsrs	r1, r1, #21
 8002714:	0fde      	lsrs	r6, r3, #31
 8002716:	42a9      	cmp	r1, r5
 8002718:	dd04      	ble.n	8002724 <__aeabi_d2iz+0x28>
 800271a:	4811      	ldr	r0, [pc, #68]	@ (8002760 <__aeabi_d2iz+0x64>)
 800271c:	4281      	cmp	r1, r0
 800271e:	dd03      	ble.n	8002728 <__aeabi_d2iz+0x2c>
 8002720:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <__aeabi_d2iz+0x68>)
 8002722:	18f0      	adds	r0, r6, r3
 8002724:	b002      	add	sp, #8
 8002726:	bd70      	pop	{r4, r5, r6, pc}
 8002728:	2080      	movs	r0, #128	@ 0x80
 800272a:	0340      	lsls	r0, r0, #13
 800272c:	4320      	orrs	r0, r4
 800272e:	4c0e      	ldr	r4, [pc, #56]	@ (8002768 <__aeabi_d2iz+0x6c>)
 8002730:	1a64      	subs	r4, r4, r1
 8002732:	2c1f      	cmp	r4, #31
 8002734:	dd08      	ble.n	8002748 <__aeabi_d2iz+0x4c>
 8002736:	4b0d      	ldr	r3, [pc, #52]	@ (800276c <__aeabi_d2iz+0x70>)
 8002738:	1a5b      	subs	r3, r3, r1
 800273a:	40d8      	lsrs	r0, r3
 800273c:	0003      	movs	r3, r0
 800273e:	4258      	negs	r0, r3
 8002740:	2e00      	cmp	r6, #0
 8002742:	d1ef      	bne.n	8002724 <__aeabi_d2iz+0x28>
 8002744:	0018      	movs	r0, r3
 8002746:	e7ed      	b.n	8002724 <__aeabi_d2iz+0x28>
 8002748:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <__aeabi_d2iz+0x74>)
 800274a:	9a00      	ldr	r2, [sp, #0]
 800274c:	469c      	mov	ip, r3
 800274e:	0003      	movs	r3, r0
 8002750:	4461      	add	r1, ip
 8002752:	408b      	lsls	r3, r1
 8002754:	40e2      	lsrs	r2, r4
 8002756:	4313      	orrs	r3, r2
 8002758:	e7f1      	b.n	800273e <__aeabi_d2iz+0x42>
 800275a:	46c0      	nop			@ (mov r8, r8)
 800275c:	000003fe 	.word	0x000003fe
 8002760:	0000041d 	.word	0x0000041d
 8002764:	7fffffff 	.word	0x7fffffff
 8002768:	00000433 	.word	0x00000433
 800276c:	00000413 	.word	0x00000413
 8002770:	fffffbed 	.word	0xfffffbed

08002774 <__aeabi_i2d>:
 8002774:	b570      	push	{r4, r5, r6, lr}
 8002776:	2800      	cmp	r0, #0
 8002778:	d016      	beq.n	80027a8 <__aeabi_i2d+0x34>
 800277a:	17c3      	asrs	r3, r0, #31
 800277c:	18c5      	adds	r5, r0, r3
 800277e:	405d      	eors	r5, r3
 8002780:	0fc4      	lsrs	r4, r0, #31
 8002782:	0028      	movs	r0, r5
 8002784:	f000 f912 	bl	80029ac <__clzsi2>
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <__aeabi_i2d+0x58>)
 800278a:	1a1b      	subs	r3, r3, r0
 800278c:	055b      	lsls	r3, r3, #21
 800278e:	0d5b      	lsrs	r3, r3, #21
 8002790:	280a      	cmp	r0, #10
 8002792:	dc14      	bgt.n	80027be <__aeabi_i2d+0x4a>
 8002794:	0002      	movs	r2, r0
 8002796:	002e      	movs	r6, r5
 8002798:	3215      	adds	r2, #21
 800279a:	4096      	lsls	r6, r2
 800279c:	220b      	movs	r2, #11
 800279e:	1a12      	subs	r2, r2, r0
 80027a0:	40d5      	lsrs	r5, r2
 80027a2:	032d      	lsls	r5, r5, #12
 80027a4:	0b2d      	lsrs	r5, r5, #12
 80027a6:	e003      	b.n	80027b0 <__aeabi_i2d+0x3c>
 80027a8:	2400      	movs	r4, #0
 80027aa:	2300      	movs	r3, #0
 80027ac:	2500      	movs	r5, #0
 80027ae:	2600      	movs	r6, #0
 80027b0:	051b      	lsls	r3, r3, #20
 80027b2:	432b      	orrs	r3, r5
 80027b4:	07e4      	lsls	r4, r4, #31
 80027b6:	4323      	orrs	r3, r4
 80027b8:	0030      	movs	r0, r6
 80027ba:	0019      	movs	r1, r3
 80027bc:	bd70      	pop	{r4, r5, r6, pc}
 80027be:	380b      	subs	r0, #11
 80027c0:	4085      	lsls	r5, r0
 80027c2:	032d      	lsls	r5, r5, #12
 80027c4:	2600      	movs	r6, #0
 80027c6:	0b2d      	lsrs	r5, r5, #12
 80027c8:	e7f2      	b.n	80027b0 <__aeabi_i2d+0x3c>
 80027ca:	46c0      	nop			@ (mov r8, r8)
 80027cc:	0000041e 	.word	0x0000041e

080027d0 <__aeabi_ui2d>:
 80027d0:	b510      	push	{r4, lr}
 80027d2:	1e04      	subs	r4, r0, #0
 80027d4:	d010      	beq.n	80027f8 <__aeabi_ui2d+0x28>
 80027d6:	f000 f8e9 	bl	80029ac <__clzsi2>
 80027da:	4b0e      	ldr	r3, [pc, #56]	@ (8002814 <__aeabi_ui2d+0x44>)
 80027dc:	1a1b      	subs	r3, r3, r0
 80027de:	055b      	lsls	r3, r3, #21
 80027e0:	0d5b      	lsrs	r3, r3, #21
 80027e2:	280a      	cmp	r0, #10
 80027e4:	dc0f      	bgt.n	8002806 <__aeabi_ui2d+0x36>
 80027e6:	220b      	movs	r2, #11
 80027e8:	0021      	movs	r1, r4
 80027ea:	1a12      	subs	r2, r2, r0
 80027ec:	40d1      	lsrs	r1, r2
 80027ee:	3015      	adds	r0, #21
 80027f0:	030a      	lsls	r2, r1, #12
 80027f2:	4084      	lsls	r4, r0
 80027f4:	0b12      	lsrs	r2, r2, #12
 80027f6:	e001      	b.n	80027fc <__aeabi_ui2d+0x2c>
 80027f8:	2300      	movs	r3, #0
 80027fa:	2200      	movs	r2, #0
 80027fc:	051b      	lsls	r3, r3, #20
 80027fe:	4313      	orrs	r3, r2
 8002800:	0020      	movs	r0, r4
 8002802:	0019      	movs	r1, r3
 8002804:	bd10      	pop	{r4, pc}
 8002806:	0022      	movs	r2, r4
 8002808:	380b      	subs	r0, #11
 800280a:	4082      	lsls	r2, r0
 800280c:	0312      	lsls	r2, r2, #12
 800280e:	2400      	movs	r4, #0
 8002810:	0b12      	lsrs	r2, r2, #12
 8002812:	e7f3      	b.n	80027fc <__aeabi_ui2d+0x2c>
 8002814:	0000041e 	.word	0x0000041e

08002818 <__aeabi_f2d>:
 8002818:	b570      	push	{r4, r5, r6, lr}
 800281a:	0242      	lsls	r2, r0, #9
 800281c:	0043      	lsls	r3, r0, #1
 800281e:	0fc4      	lsrs	r4, r0, #31
 8002820:	20fe      	movs	r0, #254	@ 0xfe
 8002822:	0e1b      	lsrs	r3, r3, #24
 8002824:	1c59      	adds	r1, r3, #1
 8002826:	0a55      	lsrs	r5, r2, #9
 8002828:	4208      	tst	r0, r1
 800282a:	d00c      	beq.n	8002846 <__aeabi_f2d+0x2e>
 800282c:	21e0      	movs	r1, #224	@ 0xe0
 800282e:	0089      	lsls	r1, r1, #2
 8002830:	468c      	mov	ip, r1
 8002832:	076d      	lsls	r5, r5, #29
 8002834:	0b12      	lsrs	r2, r2, #12
 8002836:	4463      	add	r3, ip
 8002838:	051b      	lsls	r3, r3, #20
 800283a:	4313      	orrs	r3, r2
 800283c:	07e4      	lsls	r4, r4, #31
 800283e:	4323      	orrs	r3, r4
 8002840:	0028      	movs	r0, r5
 8002842:	0019      	movs	r1, r3
 8002844:	bd70      	pop	{r4, r5, r6, pc}
 8002846:	2b00      	cmp	r3, #0
 8002848:	d114      	bne.n	8002874 <__aeabi_f2d+0x5c>
 800284a:	2d00      	cmp	r5, #0
 800284c:	d01b      	beq.n	8002886 <__aeabi_f2d+0x6e>
 800284e:	0028      	movs	r0, r5
 8002850:	f000 f8ac 	bl	80029ac <__clzsi2>
 8002854:	280a      	cmp	r0, #10
 8002856:	dc1c      	bgt.n	8002892 <__aeabi_f2d+0x7a>
 8002858:	230b      	movs	r3, #11
 800285a:	002a      	movs	r2, r5
 800285c:	1a1b      	subs	r3, r3, r0
 800285e:	40da      	lsrs	r2, r3
 8002860:	0003      	movs	r3, r0
 8002862:	3315      	adds	r3, #21
 8002864:	409d      	lsls	r5, r3
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <__aeabi_f2d+0x88>)
 8002868:	0312      	lsls	r2, r2, #12
 800286a:	1a1b      	subs	r3, r3, r0
 800286c:	055b      	lsls	r3, r3, #21
 800286e:	0b12      	lsrs	r2, r2, #12
 8002870:	0d5b      	lsrs	r3, r3, #21
 8002872:	e7e1      	b.n	8002838 <__aeabi_f2d+0x20>
 8002874:	2d00      	cmp	r5, #0
 8002876:	d009      	beq.n	800288c <__aeabi_f2d+0x74>
 8002878:	0b13      	lsrs	r3, r2, #12
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0312      	lsls	r2, r2, #12
 800287e:	431a      	orrs	r2, r3
 8002880:	076d      	lsls	r5, r5, #29
 8002882:	4b08      	ldr	r3, [pc, #32]	@ (80028a4 <__aeabi_f2d+0x8c>)
 8002884:	e7d8      	b.n	8002838 <__aeabi_f2d+0x20>
 8002886:	2300      	movs	r3, #0
 8002888:	2200      	movs	r2, #0
 800288a:	e7d5      	b.n	8002838 <__aeabi_f2d+0x20>
 800288c:	2200      	movs	r2, #0
 800288e:	4b05      	ldr	r3, [pc, #20]	@ (80028a4 <__aeabi_f2d+0x8c>)
 8002890:	e7d2      	b.n	8002838 <__aeabi_f2d+0x20>
 8002892:	0003      	movs	r3, r0
 8002894:	002a      	movs	r2, r5
 8002896:	3b0b      	subs	r3, #11
 8002898:	409a      	lsls	r2, r3
 800289a:	2500      	movs	r5, #0
 800289c:	e7e3      	b.n	8002866 <__aeabi_f2d+0x4e>
 800289e:	46c0      	nop			@ (mov r8, r8)
 80028a0:	00000389 	.word	0x00000389
 80028a4:	000007ff 	.word	0x000007ff

080028a8 <__aeabi_d2f>:
 80028a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028aa:	004b      	lsls	r3, r1, #1
 80028ac:	030f      	lsls	r7, r1, #12
 80028ae:	0d5b      	lsrs	r3, r3, #21
 80028b0:	4c3a      	ldr	r4, [pc, #232]	@ (800299c <__aeabi_d2f+0xf4>)
 80028b2:	0f45      	lsrs	r5, r0, #29
 80028b4:	b083      	sub	sp, #12
 80028b6:	0a7f      	lsrs	r7, r7, #9
 80028b8:	1c5e      	adds	r6, r3, #1
 80028ba:	432f      	orrs	r7, r5
 80028bc:	9000      	str	r0, [sp, #0]
 80028be:	9101      	str	r1, [sp, #4]
 80028c0:	0fca      	lsrs	r2, r1, #31
 80028c2:	00c5      	lsls	r5, r0, #3
 80028c4:	4226      	tst	r6, r4
 80028c6:	d00b      	beq.n	80028e0 <__aeabi_d2f+0x38>
 80028c8:	4935      	ldr	r1, [pc, #212]	@ (80029a0 <__aeabi_d2f+0xf8>)
 80028ca:	185c      	adds	r4, r3, r1
 80028cc:	2cfe      	cmp	r4, #254	@ 0xfe
 80028ce:	dd13      	ble.n	80028f8 <__aeabi_d2f+0x50>
 80028d0:	20ff      	movs	r0, #255	@ 0xff
 80028d2:	2300      	movs	r3, #0
 80028d4:	05c0      	lsls	r0, r0, #23
 80028d6:	4318      	orrs	r0, r3
 80028d8:	07d2      	lsls	r2, r2, #31
 80028da:	4310      	orrs	r0, r2
 80028dc:	b003      	add	sp, #12
 80028de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028e0:	433d      	orrs	r5, r7
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <__aeabi_d2f+0x42>
 80028e6:	2000      	movs	r0, #0
 80028e8:	e7f4      	b.n	80028d4 <__aeabi_d2f+0x2c>
 80028ea:	2d00      	cmp	r5, #0
 80028ec:	d0f0      	beq.n	80028d0 <__aeabi_d2f+0x28>
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	03db      	lsls	r3, r3, #15
 80028f2:	20ff      	movs	r0, #255	@ 0xff
 80028f4:	433b      	orrs	r3, r7
 80028f6:	e7ed      	b.n	80028d4 <__aeabi_d2f+0x2c>
 80028f8:	2c00      	cmp	r4, #0
 80028fa:	dd0c      	ble.n	8002916 <__aeabi_d2f+0x6e>
 80028fc:	9b00      	ldr	r3, [sp, #0]
 80028fe:	00ff      	lsls	r7, r7, #3
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	1e58      	subs	r0, r3, #1
 8002904:	4183      	sbcs	r3, r0
 8002906:	0f69      	lsrs	r1, r5, #29
 8002908:	433b      	orrs	r3, r7
 800290a:	430b      	orrs	r3, r1
 800290c:	0759      	lsls	r1, r3, #29
 800290e:	d127      	bne.n	8002960 <__aeabi_d2f+0xb8>
 8002910:	08db      	lsrs	r3, r3, #3
 8002912:	b2e0      	uxtb	r0, r4
 8002914:	e7de      	b.n	80028d4 <__aeabi_d2f+0x2c>
 8002916:	0021      	movs	r1, r4
 8002918:	3117      	adds	r1, #23
 800291a:	db31      	blt.n	8002980 <__aeabi_d2f+0xd8>
 800291c:	2180      	movs	r1, #128	@ 0x80
 800291e:	201e      	movs	r0, #30
 8002920:	0409      	lsls	r1, r1, #16
 8002922:	4339      	orrs	r1, r7
 8002924:	1b00      	subs	r0, r0, r4
 8002926:	281f      	cmp	r0, #31
 8002928:	dd2d      	ble.n	8002986 <__aeabi_d2f+0xde>
 800292a:	2602      	movs	r6, #2
 800292c:	4276      	negs	r6, r6
 800292e:	1b34      	subs	r4, r6, r4
 8002930:	000e      	movs	r6, r1
 8002932:	40e6      	lsrs	r6, r4
 8002934:	0034      	movs	r4, r6
 8002936:	2820      	cmp	r0, #32
 8002938:	d004      	beq.n	8002944 <__aeabi_d2f+0x9c>
 800293a:	481a      	ldr	r0, [pc, #104]	@ (80029a4 <__aeabi_d2f+0xfc>)
 800293c:	4684      	mov	ip, r0
 800293e:	4463      	add	r3, ip
 8002940:	4099      	lsls	r1, r3
 8002942:	430d      	orrs	r5, r1
 8002944:	002b      	movs	r3, r5
 8002946:	1e59      	subs	r1, r3, #1
 8002948:	418b      	sbcs	r3, r1
 800294a:	4323      	orrs	r3, r4
 800294c:	0759      	lsls	r1, r3, #29
 800294e:	d003      	beq.n	8002958 <__aeabi_d2f+0xb0>
 8002950:	210f      	movs	r1, #15
 8002952:	4019      	ands	r1, r3
 8002954:	2904      	cmp	r1, #4
 8002956:	d10b      	bne.n	8002970 <__aeabi_d2f+0xc8>
 8002958:	019b      	lsls	r3, r3, #6
 800295a:	2000      	movs	r0, #0
 800295c:	0a5b      	lsrs	r3, r3, #9
 800295e:	e7b9      	b.n	80028d4 <__aeabi_d2f+0x2c>
 8002960:	210f      	movs	r1, #15
 8002962:	4019      	ands	r1, r3
 8002964:	2904      	cmp	r1, #4
 8002966:	d104      	bne.n	8002972 <__aeabi_d2f+0xca>
 8002968:	019b      	lsls	r3, r3, #6
 800296a:	0a5b      	lsrs	r3, r3, #9
 800296c:	b2e0      	uxtb	r0, r4
 800296e:	e7b1      	b.n	80028d4 <__aeabi_d2f+0x2c>
 8002970:	2400      	movs	r4, #0
 8002972:	3304      	adds	r3, #4
 8002974:	0159      	lsls	r1, r3, #5
 8002976:	d5f7      	bpl.n	8002968 <__aeabi_d2f+0xc0>
 8002978:	3401      	adds	r4, #1
 800297a:	2300      	movs	r3, #0
 800297c:	b2e0      	uxtb	r0, r4
 800297e:	e7a9      	b.n	80028d4 <__aeabi_d2f+0x2c>
 8002980:	2000      	movs	r0, #0
 8002982:	2300      	movs	r3, #0
 8002984:	e7a6      	b.n	80028d4 <__aeabi_d2f+0x2c>
 8002986:	4c08      	ldr	r4, [pc, #32]	@ (80029a8 <__aeabi_d2f+0x100>)
 8002988:	191c      	adds	r4, r3, r4
 800298a:	002b      	movs	r3, r5
 800298c:	40a5      	lsls	r5, r4
 800298e:	40c3      	lsrs	r3, r0
 8002990:	40a1      	lsls	r1, r4
 8002992:	1e68      	subs	r0, r5, #1
 8002994:	4185      	sbcs	r5, r0
 8002996:	4329      	orrs	r1, r5
 8002998:	430b      	orrs	r3, r1
 800299a:	e7d7      	b.n	800294c <__aeabi_d2f+0xa4>
 800299c:	000007fe 	.word	0x000007fe
 80029a0:	fffffc80 	.word	0xfffffc80
 80029a4:	fffffca2 	.word	0xfffffca2
 80029a8:	fffffc82 	.word	0xfffffc82

080029ac <__clzsi2>:
 80029ac:	211c      	movs	r1, #28
 80029ae:	2301      	movs	r3, #1
 80029b0:	041b      	lsls	r3, r3, #16
 80029b2:	4298      	cmp	r0, r3
 80029b4:	d301      	bcc.n	80029ba <__clzsi2+0xe>
 80029b6:	0c00      	lsrs	r0, r0, #16
 80029b8:	3910      	subs	r1, #16
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	4298      	cmp	r0, r3
 80029be:	d301      	bcc.n	80029c4 <__clzsi2+0x18>
 80029c0:	0a00      	lsrs	r0, r0, #8
 80029c2:	3908      	subs	r1, #8
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	4298      	cmp	r0, r3
 80029c8:	d301      	bcc.n	80029ce <__clzsi2+0x22>
 80029ca:	0900      	lsrs	r0, r0, #4
 80029cc:	3904      	subs	r1, #4
 80029ce:	a202      	add	r2, pc, #8	@ (adr r2, 80029d8 <__clzsi2+0x2c>)
 80029d0:	5c10      	ldrb	r0, [r2, r0]
 80029d2:	1840      	adds	r0, r0, r1
 80029d4:	4770      	bx	lr
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	02020304 	.word	0x02020304
 80029dc:	01010101 	.word	0x01010101
	...

080029e8 <BlockTillConversionComplete>:
static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt);
//static bool IsAllZeros(const uint8_t * const scratchPad, const size_t length);

// Continue to check if the IC has responded with a temperature
static void BlockTillConversionComplete(DallasTemperature_HandleTypeDef* dt, uint8_t bitResolution)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	000a      	movs	r2, r1
 80029f2:	1cfb      	adds	r3, r7, #3
 80029f4:	701a      	strb	r2, [r3, #0]
	int delms = DT_MillisToWaitForConversion(bitResolution);
 80029f6:	1cfb      	adds	r3, r7, #3
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 fbd2 	bl	80031a4 <DT_MillisToWaitForConversion>
 8002a00:	0003      	movs	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

	if (dt->checkForConversion && !dt->parasite)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7a9b      	ldrb	r3, [r3, #10]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d020      	beq.n	8002a4e <BlockTillConversionComplete+0x66>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	799b      	ldrb	r3, [r3, #6]
 8002a10:	2201      	movs	r2, #1
 8002a12:	4053      	eors	r3, r2
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d019      	beq.n	8002a4e <BlockTillConversionComplete+0x66>
	{
		unsigned long now = HAL_GetTick();
 8002a1a:	f001 fd3d 	bl	8004498 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	60bb      	str	r3, [r7, #8]
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8002a22:	e000      	b.n	8002a26 <BlockTillConversionComplete+0x3e>
		{
			__NOP();
 8002a24:	46c0      	nop			@ (mov r8, r8)
		while (!DT_IsConversionComplete(dt) && (HAL_GetTick() - delms < now))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 fb7d 	bl	8003128 <DT_IsConversionComplete>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	001a      	movs	r2, r3
 8002a32:	2301      	movs	r3, #1
 8002a34:	4053      	eors	r3, r2
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d015      	beq.n	8002a68 <BlockTillConversionComplete+0x80>
 8002a3c:	f001 fd2c 	bl	8004498 <HAL_GetTick>
 8002a40:	0002      	movs	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d8eb      	bhi.n	8002a24 <BlockTillConversionComplete+0x3c>
	{
 8002a4c:	e00c      	b.n	8002a68 <BlockTillConversionComplete+0x80>
		}
	}
	else
	{
		ActivateExternalPullup(dt);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f80f 	bl	8002a74 <ActivateExternalPullup>
		HAL_Delay(delms);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	0018      	movs	r0, r3
 8002a5a:	f001 fd27 	bl	80044ac <HAL_Delay>
		DeactivateExternalPullup(dt);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	0018      	movs	r0, r3
 8002a62:	f000 f81d 	bl	8002aa0 <DeactivateExternalPullup>
	}
}
 8002a66:	e000      	b.n	8002a6a <BlockTillConversionComplete+0x82>
	{
 8002a68:	46c0      	nop			@ (mov r8, r8)
}
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	b004      	add	sp, #16
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <ActivateExternalPullup>:

static void ActivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	79db      	ldrb	r3, [r3, #7]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <ActivateExternalPullup+0x1e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8002a84:	2380      	movs	r3, #128	@ 0x80
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4804      	ldr	r0, [pc, #16]	@ (8002a9c <ActivateExternalPullup+0x28>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	0019      	movs	r1, r3
 8002a8e:	f002 f95d 	bl	8004d4c <HAL_GPIO_WritePin>
	}
}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	46bd      	mov	sp, r7
 8002a96:	b002      	add	sp, #8
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	46c0      	nop			@ (mov r8, r8)
 8002a9c:	48000800 	.word	0x48000800

08002aa0 <DeactivateExternalPullup>:

static void DeactivateExternalPullup(DallasTemperature_HandleTypeDef* dt)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
	if(dt->useExternalPullup)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	79db      	ldrb	r3, [r3, #7]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d006      	beq.n	8002abe <DeactivateExternalPullup+0x1e>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8002ab0:	2380      	movs	r3, #128	@ 0x80
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4804      	ldr	r0, [pc, #16]	@ (8002ac8 <DeactivateExternalPullup+0x28>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	0019      	movs	r1, r3
 8002aba:	f002 f947 	bl	8004d4c <HAL_GPIO_WritePin>
	}
}
 8002abe:	46c0      	nop			@ (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b002      	add	sp, #8
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	48000800 	.word	0x48000800

08002acc <DT_SetOneWire>:

	DeactivateExternalPullup(dt);
}

void DT_SetOneWire(DallasTemperature_HandleTypeDef* dt, OneWire_HandleTypeDef* ow)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
	dt->ow 					= ow;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	601a      	str	r2, [r3, #0]
	dt->devices 			= 0;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	711a      	strb	r2, [r3, #4]
	dt->ds18Count 			= 0;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	715a      	strb	r2, [r3, #5]
	dt->parasite 			= false;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	719a      	strb	r2, [r3, #6]
	dt->bitResolution 		= 9;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2209      	movs	r2, #9
 8002af2:	721a      	strb	r2, [r3, #8]
	dt->waitForConversion 	= true;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	725a      	strb	r2, [r3, #9]
	dt->checkForConversion 	= true;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	729a      	strb	r2, [r3, #10]
	dt->autoSaveScratchPad 	= true;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2201      	movs	r2, #1
 8002b04:	72da      	strb	r2, [r3, #11]
	dt->useExternalPullup 	= false;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	71da      	strb	r2, [r3, #7]
}
 8002b0c:	46c0      	nop			@ (mov r8, r8)
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <DT_Begin>:

void DT_Begin(DallasTemperature_HandleTypeDef* dt)
{
 8002b14:	b5b0      	push	{r4, r5, r7, lr}
 8002b16:	b08e      	sub	sp, #56	@ 0x38
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
	AllDeviceAddress deviceAddress;

	OW_ResetSearch(dt->ow);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	0018      	movs	r0, r3
 8002b22:	f000 fe02 	bl	800372a <OW_ResetSearch>
	dt->devices = 0; 	// Reset the number of devices when we enumerate wire devices
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	711a      	strb	r2, [r3, #4]
	dt->ds18Count = 0; 	// Reset number of DS18xxx Family devices
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	715a      	strb	r2, [r3, #5]

	dt->devices = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	220c      	movs	r2, #12
 8002b38:	18b9      	adds	r1, r7, r2
 8002b3a:	2205      	movs	r2, #5
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 fe15 	bl	800376c <OW_Search>
 8002b42:	0003      	movs	r3, r0
 8002b44:	001a      	movs	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	711a      	strb	r2, [r3, #4]

	for(uint8_t i = 0; i < dt->devices; i++)
 8002b4a:	2337      	movs	r3, #55	@ 0x37
 8002b4c:	18fb      	adds	r3, r7, r3
 8002b4e:	2200      	movs	r2, #0
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e05d      	b.n	8002c10 <DT_Begin+0xfc>
	{
		if (DT_ValidAddress(&deviceAddress[i * 8]))
 8002b54:	2437      	movs	r4, #55	@ 0x37
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	250c      	movs	r5, #12
 8002b5e:	197a      	adds	r2, r7, r5
 8002b60:	18d3      	adds	r3, r2, r3
 8002b62:	0018      	movs	r0, r3
 8002b64:	f000 f86a 	bl	8002c3c <DT_ValidAddress>
 8002b68:	1e03      	subs	r3, r0, #0
 8002b6a:	d04b      	beq.n	8002c04 <DT_Begin+0xf0>
		{

			if (!dt->parasite && DT_ReadPowerSupply(dt, &deviceAddress[i * 8]))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	799b      	ldrb	r3, [r3, #6]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4053      	eors	r3, r2
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d00e      	beq.n	8002b98 <DT_Begin+0x84>
 8002b7a:	193b      	adds	r3, r7, r4
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	197a      	adds	r2, r7, r5
 8002b82:	18d2      	adds	r2, r2, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0011      	movs	r1, r2
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f99b 	bl	8002ec4 <DT_ReadPowerSupply>
 8002b8e:	1e03      	subs	r3, r0, #0
 8002b90:	d002      	beq.n	8002b98 <DT_Begin+0x84>
				dt->parasite = true;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	719a      	strb	r2, [r3, #6]

			dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, &deviceAddress[i * 8]));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7a1c      	ldrb	r4, [r3, #8]
 8002b9c:	2337      	movs	r3, #55	@ 0x37
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	220c      	movs	r2, #12
 8002ba6:	18ba      	adds	r2, r7, r2
 8002ba8:	18d2      	adds	r2, r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	0011      	movs	r1, r2
 8002bae:	0018      	movs	r0, r3
 8002bb0:	f000 fa8c 	bl	80030cc <DT_GetResolution>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	429c      	cmp	r4, r3
 8002bb8:	d902      	bls.n	8002bc0 <DT_Begin+0xac>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	7a1a      	ldrb	r2, [r3, #8]
 8002bbe:	e00d      	b.n	8002bdc <DT_Begin+0xc8>
 8002bc0:	2337      	movs	r3, #55	@ 0x37
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	00db      	lsls	r3, r3, #3
 8002bc8:	220c      	movs	r2, #12
 8002bca:	18ba      	adds	r2, r7, r2
 8002bcc:	18d2      	adds	r2, r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	0011      	movs	r1, r2
 8002bd2:	0018      	movs	r0, r3
 8002bd4:	f000 fa7a 	bl	80030cc <DT_GetResolution>
 8002bd8:	0003      	movs	r3, r0
 8002bda:	001a      	movs	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	721a      	strb	r2, [r3, #8]

			if (DT_ValidFamily(&deviceAddress[i * 8]))
 8002be0:	2337      	movs	r3, #55	@ 0x37
 8002be2:	18fb      	adds	r3, r7, r3
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	220c      	movs	r2, #12
 8002bea:	18ba      	adds	r2, r7, r2
 8002bec:	18d3      	adds	r3, r2, r3
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f000 f83a 	bl	8002c68 <DT_ValidFamily>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d005      	beq.n	8002c04 <DT_Begin+0xf0>
			{
				dt->ds18Count++;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	795b      	ldrb	r3, [r3, #5]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	715a      	strb	r2, [r3, #5]
	for(uint8_t i = 0; i < dt->devices; i++)
 8002c04:	2137      	movs	r1, #55	@ 0x37
 8002c06:	187b      	adds	r3, r7, r1
 8002c08:	781a      	ldrb	r2, [r3, #0]
 8002c0a:	187b      	adds	r3, r7, r1
 8002c0c:	3201      	adds	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	791b      	ldrb	r3, [r3, #4]
 8002c14:	2237      	movs	r2, #55	@ 0x37
 8002c16:	18ba      	adds	r2, r7, r2
 8002c18:	7812      	ldrb	r2, [r2, #0]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d39a      	bcc.n	8002b54 <DT_Begin+0x40>
			}
		}
	}
}
 8002c1e:	46c0      	nop			@ (mov r8, r8)
 8002c20:	46c0      	nop			@ (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b00e      	add	sp, #56	@ 0x38
 8002c26:	bdb0      	pop	{r4, r5, r7, pc}

08002c28 <DT_GetDeviceCount>:

// returns the number of devices found on the bus
uint8_t DT_GetDeviceCount(DallasTemperature_HandleTypeDef* dt)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	return dt->devices;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	791b      	ldrb	r3, [r3, #4]
}
 8002c34:	0018      	movs	r0, r3
 8002c36:	46bd      	mov	sp, r7
 8002c38:	b002      	add	sp, #8
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <DT_ValidAddress>:
	return dt->ds18Count;
}

// returns true if address is valid
bool DT_ValidAddress(const uint8_t* deviceAddress)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
	return (OW_Crc8(deviceAddress, 7) == deviceAddress[7]);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2107      	movs	r1, #7
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f000 feb5 	bl	80039b8 <OW_Crc8>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	001a      	movs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3307      	adds	r3, #7
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	425a      	negs	r2, r3
 8002c5c:	4153      	adcs	r3, r2
 8002c5e:	b2db      	uxtb	r3, r3
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b002      	add	sp, #8
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <DT_ValidFamily>:

bool DT_ValidFamily(const uint8_t* deviceAddress)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
	switch (deviceAddress[DSROM_FAMILY])
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b42      	cmp	r3, #66	@ 0x42
 8002c76:	dc13      	bgt.n	8002ca0 <DT_ValidFamily+0x38>
 8002c78:	2b28      	cmp	r3, #40	@ 0x28
 8002c7a:	da04      	bge.n	8002c86 <DT_ValidFamily+0x1e>
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d00d      	beq.n	8002c9c <DT_ValidFamily+0x34>
 8002c80:	2b22      	cmp	r3, #34	@ 0x22
 8002c82:	d00b      	beq.n	8002c9c <DT_ValidFamily+0x34>
 8002c84:	e00c      	b.n	8002ca0 <DT_ValidFamily+0x38>
 8002c86:	3b28      	subs	r3, #40	@ 0x28
 8002c88:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <DT_ValidFamily+0x44>)
 8002c8a:	40da      	lsrs	r2, r3
 8002c8c:	0013      	movs	r3, r2
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4013      	ands	r3, r2
 8002c92:	1e5a      	subs	r2, r3, #1
 8002c94:	4193      	sbcs	r3, r2
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d001      	beq.n	8002ca0 <DT_ValidFamily+0x38>
	case DS18S20MODEL:
	case DS18B20MODEL:
	case DS1822MODEL:
	case DS1825MODEL:
	case DS28EA00MODEL:
		return true;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <DT_ValidFamily+0x3a>
	default:
		return false;
 8002ca0:	2300      	movs	r3, #0
	}
}
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	04080001 	.word	0x04080001

08002cb0 <DT_GetAddress>:

// finds an address at a given index on the bus
// returns true if the device was found
bool DT_GetAddress(DallasTemperature_HandleTypeDef* dt, uint8_t* currentDeviceAddress, uint8_t index)
{
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	b091      	sub	sp, #68	@ 0x44
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	1dfb      	adds	r3, r7, #7
 8002cbc:	701a      	strb	r2, [r3, #0]
	AllDeviceAddress deviceAddress;

	uint8_t depth = 0;
 8002cbe:	253f      	movs	r5, #63	@ 0x3f
 8002cc0:	197b      	adds	r3, r7, r5
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]

	depth = OW_Search(dt->ow, deviceAddress, ONEWIRE_MAX_DEVICES);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	197c      	adds	r4, r7, r5
 8002ccc:	2614      	movs	r6, #20
 8002cce:	19b9      	adds	r1, r7, r6
 8002cd0:	2205      	movs	r2, #5
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	f000 fd4a 	bl	800376c <OW_Search>
 8002cd8:	0003      	movs	r3, r0
 8002cda:	7023      	strb	r3, [r4, #0]

	if(index < depth && DT_ValidAddress(&deviceAddress[index * 8]))
 8002cdc:	1dfa      	adds	r2, r7, #7
 8002cde:	197b      	adds	r3, r7, r5
 8002ce0:	7812      	ldrb	r2, [r2, #0]
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d215      	bcs.n	8002d14 <DT_GetAddress+0x64>
 8002ce8:	1dfb      	adds	r3, r7, #7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	19ba      	adds	r2, r7, r6
 8002cf0:	18d3      	adds	r3, r2, r3
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	f7ff ffa2 	bl	8002c3c <DT_ValidAddress>
 8002cf8:	1e03      	subs	r3, r0, #0
 8002cfa:	d00b      	beq.n	8002d14 <DT_GetAddress+0x64>
	{
		memcpy(currentDeviceAddress, &deviceAddress[index * 8], 8);
 8002cfc:	1dfb      	adds	r3, r7, #7
 8002cfe:	781b      	ldrb	r3, [r3, #0]
 8002d00:	00db      	lsls	r3, r3, #3
 8002d02:	19ba      	adds	r2, r7, r6
 8002d04:	18d1      	adds	r1, r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2208      	movs	r2, #8
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f004 feac 	bl	8007a68 <memcpy>
		return true;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e000      	b.n	8002d16 <DT_GetAddress+0x66>
	}

	return false;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	0018      	movs	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b011      	add	sp, #68	@ 0x44
 8002d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d1e <DT_IsConnected_ScratchPad>:
}

// attempt to determine if the device at the given address is connected to the bus
// also allows for updating the read scratchpad
bool DT_IsConnected_ScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8002d1e:	b5b0      	push	{r4, r5, r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
	bool b = DT_ReadScratchPad(dt, deviceAddress, scratchPad);
 8002d2a:	2517      	movs	r5, #23
 8002d2c:	197c      	adds	r4, r7, r5
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	68b9      	ldr	r1, [r7, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f000 f81d 	bl	8002d74 <DT_ReadScratchPad>
 8002d3a:	0003      	movs	r3, r0
 8002d3c:	7023      	strb	r3, [r4, #0]
	return (b /*&& IsAllZeros(scratchPad, 8)*/ && (OW_Crc8(scratchPad, 8) == scratchPad[SCRATCHPAD_CRC]));
 8002d3e:	197b      	adds	r3, r7, r5
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00d      	beq.n	8002d62 <DT_IsConnected_ScratchPad+0x44>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2108      	movs	r1, #8
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f000 fe34 	bl	80039b8 <OW_Crc8>
 8002d50:	0003      	movs	r3, r0
 8002d52:	001a      	movs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3308      	adds	r3, #8
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d101      	bne.n	8002d62 <DT_IsConnected_ScratchPad+0x44>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <DT_IsConnected_ScratchPad+0x46>
 8002d62:	2300      	movs	r3, #0
 8002d64:	1c1a      	adds	r2, r3, #0
 8002d66:	2301      	movs	r3, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	b2db      	uxtb	r3, r3
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b006      	add	sp, #24
 8002d72:	bdb0      	pop	{r4, r5, r7, pc}

08002d74 <DT_ReadScratchPad>:

bool DT_ReadScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b08c      	sub	sp, #48	@ 0x30
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
	// send the reset command and fail fast
	int b = OW_Reset(dt->ow);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f000 fbf9 	bl	800357c <OW_Reset>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (b == 0)
 8002d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d101      	bne.n	8002d98 <DT_ReadScratchPad+0x24>
		return false;
 8002d94:	2300      	movs	r3, #0
 8002d96:	e023      	b.n	8002de0 <DT_ReadScratchPad+0x6c>

	uint8_t query[19]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READSCRATCH, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8002d98:	2510      	movs	r5, #16
 8002d9a:	197b      	adds	r3, r7, r5
 8002d9c:	4a12      	ldr	r2, [pc, #72]	@ (8002de8 <DT_ReadScratchPad+0x74>)
 8002d9e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002da0:	c313      	stmia	r3!, {r0, r1, r4}
 8002da2:	6811      	ldr	r1, [r2, #0]
 8002da4:	6019      	str	r1, [r3, #0]
 8002da6:	8891      	ldrh	r1, [r2, #4]
 8002da8:	8099      	strh	r1, [r3, #4]
 8002daa:	7992      	ldrb	r2, [r2, #6]
 8002dac:	719a      	strb	r2, [r3, #6]
	memcpy(&query[1], deviceAddress, 8);
 8002dae:	68b9      	ldr	r1, [r7, #8]
 8002db0:	197b      	adds	r3, r7, r5
 8002db2:	3301      	adds	r3, #1
 8002db4:	2208      	movs	r2, #8
 8002db6:	0018      	movs	r0, r3
 8002db8:	f004 fe56 	bl	8007a68 <memcpy>
	//         DS18B20 & DS1822: store for crc
	// byte 7: DS18S20: COUNT_PER_C
	//         DS18B20 & DS1822: store for crc
	// byte 8: SCRATCHPAD_CRC

	b = OW_Send(dt->ow, query, 19, scratchPad, 9, 10);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	1979      	adds	r1, r7, r5
 8002dc4:	220a      	movs	r2, #10
 8002dc6:	9201      	str	r2, [sp, #4]
 8002dc8:	2209      	movs	r2, #9
 8002dca:	9200      	str	r2, [sp, #0]
 8002dcc:	2213      	movs	r2, #19
 8002dce:	f000 fc0f 	bl	80035f0 <OW_Send>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	627b      	str	r3, [r7, #36]	@ 0x24

	return (b == OW_OK);
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	425a      	negs	r2, r3
 8002ddc:	4153      	adcs	r3, r2
 8002dde:	b2db      	uxtb	r3, r3
}
 8002de0:	0018      	movs	r0, r3
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b00a      	add	sp, #40	@ 0x28
 8002de6:	bdb0      	pop	{r4, r5, r7, pc}
 8002de8:	0800b168 	.word	0x0800b168

08002dec <DT_WriteScratchPad>:

void DT_WriteScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, const uint8_t* scratchPad)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	b08b      	sub	sp, #44	@ 0x2c
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
	uint8_t query[13]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, WRITESCRATCH, scratchPad[HIGH_ALARM_TEMP], scratchPad[LOW_ALARM_TEMP], scratchPad[CONFIGURATION]};
 8002df8:	2410      	movs	r4, #16
 8002dfa:	193b      	adds	r3, r7, r4
 8002dfc:	2255      	movs	r2, #85	@ 0x55
 8002dfe:	701a      	strb	r2, [r3, #0]
 8002e00:	193b      	adds	r3, r7, r4
 8002e02:	2200      	movs	r2, #0
 8002e04:	705a      	strb	r2, [r3, #1]
 8002e06:	193b      	adds	r3, r7, r4
 8002e08:	2200      	movs	r2, #0
 8002e0a:	709a      	strb	r2, [r3, #2]
 8002e0c:	193b      	adds	r3, r7, r4
 8002e0e:	2200      	movs	r2, #0
 8002e10:	70da      	strb	r2, [r3, #3]
 8002e12:	193b      	adds	r3, r7, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	711a      	strb	r2, [r3, #4]
 8002e18:	193b      	adds	r3, r7, r4
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	715a      	strb	r2, [r3, #5]
 8002e1e:	193b      	adds	r3, r7, r4
 8002e20:	2200      	movs	r2, #0
 8002e22:	719a      	strb	r2, [r3, #6]
 8002e24:	193b      	adds	r3, r7, r4
 8002e26:	2200      	movs	r2, #0
 8002e28:	71da      	strb	r2, [r3, #7]
 8002e2a:	193b      	adds	r3, r7, r4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	721a      	strb	r2, [r3, #8]
 8002e30:	193b      	adds	r3, r7, r4
 8002e32:	224e      	movs	r2, #78	@ 0x4e
 8002e34:	725a      	strb	r2, [r3, #9]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	3302      	adds	r3, #2
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	193b      	adds	r3, r7, r4
 8002e3e:	729a      	strb	r2, [r3, #10]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3303      	adds	r3, #3
 8002e44:	781a      	ldrb	r2, [r3, #0]
 8002e46:	193b      	adds	r3, r7, r4
 8002e48:	72da      	strb	r2, [r3, #11]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	3304      	adds	r3, #4
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	193b      	adds	r3, r7, r4
 8002e52:	731a      	strb	r2, [r3, #12]
	memcpy(&query[1], deviceAddress, 8);
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	193b      	adds	r3, r7, r4
 8002e58:	3301      	adds	r3, #1
 8002e5a:	2208      	movs	r2, #8
 8002e5c:	0018      	movs	r0, r3
 8002e5e:	f004 fe03 	bl	8007a68 <memcpy>

	// DS1820 and DS18S20 have no configuration register
	if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b10      	cmp	r3, #16
 8002e68:	d00b      	beq.n	8002e82 <DT_WriteScratchPad+0x96>
	{
		OW_Send(dt->ow, query, 13, NULL, 0, OW_NO_READ);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	1939      	adds	r1, r7, r4
 8002e70:	23ff      	movs	r3, #255	@ 0xff
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	2300      	movs	r3, #0
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	220d      	movs	r2, #13
 8002e7c:	f000 fbb8 	bl	80035f0 <OW_Send>
 8002e80:	e00b      	b.n	8002e9a <DT_WriteScratchPad+0xae>
	}
	else
	{
		OW_Send(dt->ow, query, 12, NULL, 0, OW_NO_READ);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6818      	ldr	r0, [r3, #0]
 8002e86:	2310      	movs	r3, #16
 8002e88:	18f9      	adds	r1, r7, r3
 8002e8a:	23ff      	movs	r3, #255	@ 0xff
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	2300      	movs	r3, #0
 8002e94:	220c      	movs	r2, #12
 8002e96:	f000 fbab 	bl	80035f0 <OW_Send>
	}

	if (dt->autoSaveScratchPad)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	7adb      	ldrb	r3, [r3, #11]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d006      	beq.n	8002eb0 <DT_WriteScratchPad+0xc4>
	{
		DT_SaveScratchPad(dt, deviceAddress);
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	0011      	movs	r1, r2
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	f000 f999 	bl	80031e0 <DT_SaveScratchPad>
	}
	else
	{
		OW_Reset(dt->ow);
	}
}
 8002eae:	e004      	b.n	8002eba <DT_WriteScratchPad+0xce>
		OW_Reset(dt->ow);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f000 fb61 	bl	800357c <OW_Reset>
}
 8002eba:	46c0      	nop			@ (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b009      	add	sp, #36	@ 0x24
 8002ec0:	bd90      	pop	{r4, r7, pc}
	...

08002ec4 <DT_ReadPowerSupply>:
// returns true if parasite mode is used (2 wire)
// returns false if normal mode is used (3 wire)
// if no address is given (or nullptr) it checks if any device on the bus
// uses parasite mode.
bool DT_ReadPowerSupply(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8002ec4:	b5b0      	push	{r4, r5, r7, lr}
 8002ec6:	b088      	sub	sp, #32
 8002ec8:	af02      	add	r7, sp, #8
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
	uint8_t parasiteMode = 0;
 8002ece:	2517      	movs	r5, #23
 8002ed0:	197b      	adds	r3, r7, r5
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]

	OW_Reset(dt->ow);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0018      	movs	r0, r3
 8002edc:	f000 fb4e 	bl	800357c <OW_Reset>

	uint8_t query[11]={0x55, 0, 0, 0, 0, 0, 0, 0, 0, READPOWERSUPPLY, 0xFF};
 8002ee0:	240c      	movs	r4, #12
 8002ee2:	193b      	adds	r3, r7, r4
 8002ee4:	4a21      	ldr	r2, [pc, #132]	@ (8002f6c <DT_ReadPowerSupply+0xa8>)
 8002ee6:	ca03      	ldmia	r2!, {r0, r1}
 8002ee8:	c303      	stmia	r3!, {r0, r1}
 8002eea:	8811      	ldrh	r1, [r2, #0]
 8002eec:	8019      	strh	r1, [r3, #0]
 8002eee:	7892      	ldrb	r2, [r2, #2]
 8002ef0:	709a      	strb	r2, [r3, #2]

	if (deviceAddress == NULL)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <DT_ReadPowerSupply+0x58>
	{
	  query[0] = 0xCC;
 8002ef8:	193b      	adds	r3, r7, r4
 8002efa:	22cc      	movs	r2, #204	@ 0xcc
 8002efc:	701a      	strb	r2, [r3, #0]
	  query[1] = READPOWERSUPPLY;
 8002efe:	193b      	adds	r3, r7, r4
 8002f00:	22b4      	movs	r2, #180	@ 0xb4
 8002f02:	705a      	strb	r2, [r3, #1]
	  OW_Send(dt->ow, query, 3, &parasiteMode, 1, 2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6818      	ldr	r0, [r3, #0]
 8002f08:	197b      	adds	r3, r7, r5
 8002f0a:	1939      	adds	r1, r7, r4
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	9201      	str	r2, [sp, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	2203      	movs	r2, #3
 8002f16:	f000 fb6b 	bl	80035f0 <OW_Send>
 8002f1a:	e016      	b.n	8002f4a <DT_ReadPowerSupply+0x86>
	}
	else
	{
	  query[0] = 0x55;
 8002f1c:	240c      	movs	r4, #12
 8002f1e:	193b      	adds	r3, r7, r4
 8002f20:	2255      	movs	r2, #85	@ 0x55
 8002f22:	701a      	strb	r2, [r3, #0]
	  memcpy(&query[1], deviceAddress, 8);
 8002f24:	6839      	ldr	r1, [r7, #0]
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	3301      	adds	r3, #1
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f004 fd9b 	bl	8007a68 <memcpy>
	  OW_Send(dt->ow, query, 10, &parasiteMode, 1, 10);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6818      	ldr	r0, [r3, #0]
 8002f36:	2317      	movs	r3, #23
 8002f38:	18fb      	adds	r3, r7, r3
 8002f3a:	1939      	adds	r1, r7, r4
 8002f3c:	220a      	movs	r2, #10
 8002f3e:	9201      	str	r2, [sp, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	9200      	str	r2, [sp, #0]
 8002f44:	220a      	movs	r2, #10
 8002f46:	f000 fb53 	bl	80035f0 <OW_Send>
	}

	OW_Reset(dt->ow);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 fb14 	bl	800357c <OW_Reset>

	if (parasiteMode == 0)
 8002f54:	2317      	movs	r3, #23
 8002f56:	18fb      	adds	r3, r7, r3
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <DT_ReadPowerSupply+0x9e>
	{
		return true;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <DT_ReadPowerSupply+0xa0>
	}
	else
	{
		return false;
 8002f62:	2300      	movs	r3, #0
	}
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b006      	add	sp, #24
 8002f6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f6c:	0800b17c 	.word	0x0800b17c

08002f70 <DT_SetResolution>:
}

// set resolution of a device to 9, 10, 11, or 12 bits
// if new resolution is out of range, 9 bits is used.
bool DT_SetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress, uint8_t newResolution, bool skipGlobalBitResolutionCalculation)
{
 8002f70:	b5b0      	push	{r4, r5, r7, lr}
 8002f72:	b08a      	sub	sp, #40	@ 0x28
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	1dfb      	adds	r3, r7, #7
 8002f7e:	701a      	strb	r2, [r3, #0]
 8002f80:	1dbb      	adds	r3, r7, #6
 8002f82:	1c0a      	adds	r2, r1, #0
 8002f84:	701a      	strb	r2, [r3, #0]
	// ensure same behavior as setResolution(uint8_t newResolution)
	newResolution = constrain(newResolution, 9, 12);
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b08      	cmp	r3, #8
 8002f8c:	d907      	bls.n	8002f9e <DT_SetResolution+0x2e>
 8002f8e:	1dfb      	adds	r3, r7, #7
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	2a0c      	cmp	r2, #12
 8002f96:	d900      	bls.n	8002f9a <DT_SetResolution+0x2a>
 8002f98:	230c      	movs	r3, #12
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	e000      	b.n	8002fa0 <DT_SetResolution+0x30>
 8002f9e:	2209      	movs	r2, #9
 8002fa0:	1dfb      	adds	r3, r7, #7
 8002fa2:	701a      	strb	r2, [r3, #0]

	// return when stored value == new value
	if (DT_GetResolution(dt, deviceAddress) == newResolution)
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	0011      	movs	r1, r2
 8002faa:	0018      	movs	r0, r3
 8002fac:	f000 f88e 	bl	80030cc <DT_GetResolution>
 8002fb0:	0003      	movs	r3, r0
 8002fb2:	001a      	movs	r2, r3
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <DT_SetResolution+0x50>
		return true;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e081      	b.n	80030c4 <DT_SetResolution+0x154>

	ScratchPad scratchPad;

	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 8002fc0:	2318      	movs	r3, #24
 8002fc2:	18fa      	adds	r2, r7, r3
 8002fc4:	68b9      	ldr	r1, [r7, #8]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f7ff fea8 	bl	8002d1e <DT_IsConnected_ScratchPad>
 8002fce:	1e03      	subs	r3, r0, #0
 8002fd0:	d100      	bne.n	8002fd4 <DT_SetResolution+0x64>
 8002fd2:	e076      	b.n	80030c2 <DT_SetResolution+0x152>
	{
		// DS1820 and DS18S20 have no resolution configuration register
		if (deviceAddress[DSROM_FAMILY] != DS18S20MODEL)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d100      	bne.n	8002fde <DT_SetResolution+0x6e>
 8002fdc:	e06f      	b.n	80030be <DT_SetResolution+0x14e>
		{
			switch (newResolution)
 8002fde:	1dfb      	adds	r3, r7, #7
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b0c      	cmp	r3, #12
 8002fe4:	d005      	beq.n	8002ff2 <DT_SetResolution+0x82>
 8002fe6:	dc13      	bgt.n	8003010 <DT_SetResolution+0xa0>
 8002fe8:	2b0a      	cmp	r3, #10
 8002fea:	d00c      	beq.n	8003006 <DT_SetResolution+0x96>
 8002fec:	2b0b      	cmp	r3, #11
 8002fee:	d005      	beq.n	8002ffc <DT_SetResolution+0x8c>
 8002ff0:	e00e      	b.n	8003010 <DT_SetResolution+0xa0>
			{
			case 12:
				scratchPad[CONFIGURATION] = TEMP_12_BIT;
 8002ff2:	2318      	movs	r3, #24
 8002ff4:	18fb      	adds	r3, r7, r3
 8002ff6:	227f      	movs	r2, #127	@ 0x7f
 8002ff8:	711a      	strb	r2, [r3, #4]
				break;
 8002ffa:	e00e      	b.n	800301a <DT_SetResolution+0xaa>
			case 11:
				scratchPad[CONFIGURATION] = TEMP_11_BIT;
 8002ffc:	2318      	movs	r3, #24
 8002ffe:	18fb      	adds	r3, r7, r3
 8003000:	225f      	movs	r2, #95	@ 0x5f
 8003002:	711a      	strb	r2, [r3, #4]
				break;
 8003004:	e009      	b.n	800301a <DT_SetResolution+0xaa>
			case 10:
				scratchPad[CONFIGURATION] = TEMP_10_BIT;
 8003006:	2318      	movs	r3, #24
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	223f      	movs	r2, #63	@ 0x3f
 800300c:	711a      	strb	r2, [r3, #4]
				break;
 800300e:	e004      	b.n	800301a <DT_SetResolution+0xaa>
			case 9:
			default:
				scratchPad[CONFIGURATION] = TEMP_9_BIT;
 8003010:	2318      	movs	r3, #24
 8003012:	18fb      	adds	r3, r7, r3
 8003014:	221f      	movs	r2, #31
 8003016:	711a      	strb	r2, [r3, #4]
				break;
 8003018:	46c0      	nop			@ (mov r8, r8)
			}

			DT_WriteScratchPad(dt, deviceAddress, scratchPad);
 800301a:	2318      	movs	r3, #24
 800301c:	18fa      	adds	r2, r7, r3
 800301e:	68b9      	ldr	r1, [r7, #8]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	0018      	movs	r0, r3
 8003024:	f7ff fee2 	bl	8002dec <DT_WriteScratchPad>

			// without calculation we can always set it to max
			dt->bitResolution = max(dt->bitResolution, newResolution);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	7a1a      	ldrb	r2, [r3, #8]
 800302c:	1dfb      	adds	r3, r7, #7
 800302e:	1c10      	adds	r0, r2, #0
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	b2d9      	uxtb	r1, r3
 8003034:	b2c2      	uxtb	r2, r0
 8003036:	4291      	cmp	r1, r2
 8003038:	d200      	bcs.n	800303c <DT_SetResolution+0xcc>
 800303a:	1c03      	adds	r3, r0, #0
 800303c:	b2da      	uxtb	r2, r3
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	721a      	strb	r2, [r3, #8]

			if (!skipGlobalBitResolutionCalculation && (dt->bitResolution > newResolution))
 8003042:	1dbb      	adds	r3, r7, #6
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2201      	movs	r2, #1
 8003048:	4053      	eors	r3, r2
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d036      	beq.n	80030be <DT_SetResolution+0x14e>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	7a1b      	ldrb	r3, [r3, #8]
 8003054:	1dfa      	adds	r2, r7, #7
 8003056:	7812      	ldrb	r2, [r2, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d230      	bcs.n	80030be <DT_SetResolution+0x14e>
			{
				dt->bitResolution = newResolution;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	1dfa      	adds	r2, r7, #7
 8003060:	7812      	ldrb	r2, [r2, #0]
 8003062:	721a      	strb	r2, [r3, #8]

				CurrentDeviceAddress deviceAddr;

				for (int i = 0; i < dt->devices; i++)
 8003064:	2300      	movs	r3, #0
 8003066:	627b      	str	r3, [r7, #36]	@ 0x24
 8003068:	e023      	b.n	80030b2 <DT_SetResolution+0x142>
				{
					DT_GetAddress(dt, deviceAddr, i);
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	b2da      	uxtb	r2, r3
 800306e:	2510      	movs	r5, #16
 8003070:	1979      	adds	r1, r7, r5
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff fe1b 	bl	8002cb0 <DT_GetAddress>
					dt->bitResolution = max(dt->bitResolution, DT_GetResolution(dt, deviceAddr));
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	7a1c      	ldrb	r4, [r3, #8]
 800307e:	197a      	adds	r2, r7, r5
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	0011      	movs	r1, r2
 8003084:	0018      	movs	r0, r3
 8003086:	f000 f821 	bl	80030cc <DT_GetResolution>
 800308a:	0003      	movs	r3, r0
 800308c:	429c      	cmp	r4, r3
 800308e:	d902      	bls.n	8003096 <DT_SetResolution+0x126>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	7a1a      	ldrb	r2, [r3, #8]
 8003094:	e008      	b.n	80030a8 <DT_SetResolution+0x138>
 8003096:	2310      	movs	r3, #16
 8003098:	18fa      	adds	r2, r7, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	0011      	movs	r1, r2
 800309e:	0018      	movs	r0, r3
 80030a0:	f000 f814 	bl	80030cc <DT_GetResolution>
 80030a4:	0003      	movs	r3, r0
 80030a6:	001a      	movs	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	721a      	strb	r2, [r3, #8]
				for (int i = 0; i < dt->devices; i++)
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	3301      	adds	r3, #1
 80030b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	001a      	movs	r2, r3
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	4293      	cmp	r3, r2
 80030bc:	dbd5      	blt.n	800306a <DT_SetResolution+0xfa>
				}
			}
		}
		return true;  // new value set
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <DT_SetResolution+0x154>
	}
	return false;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	0018      	movs	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	b00a      	add	sp, #40	@ 0x28
 80030ca:	bdb0      	pop	{r4, r5, r7, pc}

080030cc <DT_GetResolution>:
}

// returns the current resolution of the device, 9-12
// returns 0 if device not found
uint8_t DT_GetResolution(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80030cc:	b590      	push	{r4, r7, lr}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
	// DS1820 and DS18S20 have no resolution configuration register
	if (deviceAddress[0] == DS18S20MODEL)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d101      	bne.n	80030e2 <DT_GetResolution+0x16>
		return 12;
 80030de:	230c      	movs	r3, #12
 80030e0:	e01e      	b.n	8003120 <DT_GetResolution+0x54>

	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 80030e2:	240c      	movs	r4, #12
 80030e4:	193a      	adds	r2, r7, r4
 80030e6:	6839      	ldr	r1, [r7, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0018      	movs	r0, r3
 80030ec:	f7ff fe17 	bl	8002d1e <DT_IsConnected_ScratchPad>
 80030f0:	1e03      	subs	r3, r0, #0
 80030f2:	d014      	beq.n	800311e <DT_GetResolution+0x52>
	{
		switch (scratchPad[CONFIGURATION])
 80030f4:	193b      	adds	r3, r7, r4
 80030f6:	791b      	ldrb	r3, [r3, #4]
 80030f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80030fa:	d008      	beq.n	800310e <DT_GetResolution+0x42>
 80030fc:	dc0f      	bgt.n	800311e <DT_GetResolution+0x52>
 80030fe:	2b5f      	cmp	r3, #95	@ 0x5f
 8003100:	d007      	beq.n	8003112 <DT_GetResolution+0x46>
 8003102:	dc0c      	bgt.n	800311e <DT_GetResolution+0x52>
 8003104:	2b1f      	cmp	r3, #31
 8003106:	d008      	beq.n	800311a <DT_GetResolution+0x4e>
 8003108:	2b3f      	cmp	r3, #63	@ 0x3f
 800310a:	d004      	beq.n	8003116 <DT_GetResolution+0x4a>
 800310c:	e007      	b.n	800311e <DT_GetResolution+0x52>
		{
		case TEMP_12_BIT:
			return 12;
 800310e:	230c      	movs	r3, #12
 8003110:	e006      	b.n	8003120 <DT_GetResolution+0x54>

		case TEMP_11_BIT:
			return 11;
 8003112:	230b      	movs	r3, #11
 8003114:	e004      	b.n	8003120 <DT_GetResolution+0x54>

		case TEMP_10_BIT:
			return 10;
 8003116:	230a      	movs	r3, #10
 8003118:	e002      	b.n	8003120 <DT_GetResolution+0x54>

		case TEMP_9_BIT:
			return 9;
 800311a:	2309      	movs	r3, #9
 800311c:	e000      	b.n	8003120 <DT_GetResolution+0x54>
		}
	}
	return 0;
 800311e:	2300      	movs	r3, #0
}
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b007      	add	sp, #28
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <DT_IsConversionComplete>:
{
	return dt->checkForConversion;
}

bool DT_IsConversionComplete(DallasTemperature_HandleTypeDef* dt)
{
 8003128:	b590      	push	{r4, r7, lr}
 800312a:	b087      	sub	sp, #28
 800312c:	af02      	add	r7, sp, #8
 800312e:	6078      	str	r0, [r7, #4]
	uint8_t b;
	OW_Send(dt->ow, (uint8_t *) OW_READ_SLOT, 0, &b, 1, 0);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	240f      	movs	r4, #15
 8003136:	193b      	adds	r3, r7, r4
 8003138:	2200      	movs	r2, #0
 800313a:	9201      	str	r2, [sp, #4]
 800313c:	2201      	movs	r2, #1
 800313e:	9200      	str	r2, [sp, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	21ff      	movs	r1, #255	@ 0xff
 8003144:	f000 fa54 	bl	80035f0 <OW_Send>

	return (b == 1);
 8003148:	193b      	adds	r3, r7, r4
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	425a      	negs	r2, r3
 8003150:	4153      	adcs	r3, r2
 8003152:	b2db      	uxtb	r3, r3
}
 8003154:	0018      	movs	r0, r3
 8003156:	46bd      	mov	sp, r7
 8003158:	b005      	add	sp, #20
 800315a:	bd90      	pop	{r4, r7, pc}

0800315c <DT_RequestTemperatures>:

// sends command for all devices on the bus to perform a temperature conversion
void DT_RequestTemperatures(DallasTemperature_HandleTypeDef* dt)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b084      	sub	sp, #16
 8003160:	af02      	add	r7, sp, #8
 8003162:	6078      	str	r0, [r7, #4]
	OW_Send(dt->ow, (uint8_t *) "\xcc\x44", 2, (uint8_t *) NULL, 0, OW_NO_READ);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	490d      	ldr	r1, [pc, #52]	@ (80031a0 <DT_RequestTemperatures+0x44>)
 800316a:	23ff      	movs	r3, #255	@ 0xff
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	2300      	movs	r3, #0
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	2300      	movs	r3, #0
 8003174:	2202      	movs	r2, #2
 8003176:	f000 fa3b 	bl	80035f0 <OW_Send>

	// ASYNC mode?
	if (!dt->waitForConversion)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	7a5b      	ldrb	r3, [r3, #9]
 800317e:	2201      	movs	r2, #1
 8003180:	4053      	eors	r3, r2
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d107      	bne.n	8003198 <DT_RequestTemperatures+0x3c>
		return;

	BlockTillConversionComplete(dt, dt->bitResolution);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	7a1a      	ldrb	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	0011      	movs	r1, r2
 8003190:	0018      	movs	r0, r3
 8003192:	f7ff fc29 	bl	80029e8 <BlockTillConversionComplete>
 8003196:	e000      	b.n	800319a <DT_RequestTemperatures+0x3e>
		return;
 8003198:	46c0      	nop			@ (mov r8, r8)
}
 800319a:	46bd      	mov	sp, r7
 800319c:	b002      	add	sp, #8
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	0800b188 	.word	0x0800b188

080031a4 <DT_MillisToWaitForConversion>:
	return DT_RequestTemperaturesByAddress(dt, deviceAddress);
}

// returns number of milliseconds to wait till conversion is complete (based on IC datasheet)
int16_t DT_MillisToWaitForConversion(uint8_t bitResolution)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	0002      	movs	r2, r0
 80031ac:	1dfb      	adds	r3, r7, #7
 80031ae:	701a      	strb	r2, [r3, #0]
	switch (bitResolution)
 80031b0:	1dfb      	adds	r3, r7, #7
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b0b      	cmp	r3, #11
 80031b6:	d009      	beq.n	80031cc <DT_MillisToWaitForConversion+0x28>
 80031b8:	dc0b      	bgt.n	80031d2 <DT_MillisToWaitForConversion+0x2e>
 80031ba:	2b09      	cmp	r3, #9
 80031bc:	d002      	beq.n	80031c4 <DT_MillisToWaitForConversion+0x20>
 80031be:	2b0a      	cmp	r3, #10
 80031c0:	d002      	beq.n	80031c8 <DT_MillisToWaitForConversion+0x24>
 80031c2:	e006      	b.n	80031d2 <DT_MillisToWaitForConversion+0x2e>
	{
	case 9:
		return 94;
 80031c4:	235e      	movs	r3, #94	@ 0x5e
 80031c6:	e005      	b.n	80031d4 <DT_MillisToWaitForConversion+0x30>
	case 10:
		return 188;
 80031c8:	23bc      	movs	r3, #188	@ 0xbc
 80031ca:	e003      	b.n	80031d4 <DT_MillisToWaitForConversion+0x30>
	case 11:
		return 375;
 80031cc:	2378      	movs	r3, #120	@ 0x78
 80031ce:	33ff      	adds	r3, #255	@ 0xff
 80031d0:	e000      	b.n	80031d4 <DT_MillisToWaitForConversion+0x30>
	default:
		return 750;
 80031d2:	4b02      	ldr	r3, [pc, #8]	@ (80031dc <DT_MillisToWaitForConversion+0x38>)
	}
}
 80031d4:	0018      	movs	r0, r3
 80031d6:	46bd      	mov	sp, r7
 80031d8:	b002      	add	sp, #8
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	000002ee 	.word	0x000002ee

080031e0 <DT_SaveScratchPad>:

// Sends command to one or more devices to save values from scratchpad to EEPROM
// If optional argument deviceAddress is omitted the command is send to all devices
// Returns true if no errors were encountered, false indicates failure
bool DT_SaveScratchPad(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80031e0:	b590      	push	{r4, r7, lr}
 80031e2:	b089      	sub	sp, #36	@ 0x24
 80031e4:	af02      	add	r7, sp, #8
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
	uint8_t query[10]={0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
 80031ea:	230c      	movs	r3, #12
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	0018      	movs	r0, r3
 80031f0:	230a      	movs	r3, #10
 80031f2:	001a      	movs	r2, r3
 80031f4:	2100      	movs	r1, #0
 80031f6:	f004 fba5 	bl	8007944 <memset>

	if (OW_Reset(dt->ow) == 0)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	0018      	movs	r0, r3
 8003200:	f000 f9bc 	bl	800357c <OW_Reset>
 8003204:	1e03      	subs	r3, r0, #0
 8003206:	d101      	bne.n	800320c <DT_SaveScratchPad+0x2c>
		return false;
 8003208:	2300      	movs	r3, #0
 800320a:	e050      	b.n	80032ae <DT_SaveScratchPad+0xce>

  if (deviceAddress == NULL)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d112      	bne.n	8003238 <DT_SaveScratchPad+0x58>
  {
	  query[0] = 0xCC;
 8003212:	210c      	movs	r1, #12
 8003214:	187b      	adds	r3, r7, r1
 8003216:	22cc      	movs	r2, #204	@ 0xcc
 8003218:	701a      	strb	r2, [r3, #0]
	  query[1] = COPYSCRATCH;
 800321a:	187b      	adds	r3, r7, r1
 800321c:	2248      	movs	r2, #72	@ 0x48
 800321e:	705a      	strb	r2, [r3, #1]
	  OW_Send(dt->ow, query, 2, NULL, 0, OW_NO_READ);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6818      	ldr	r0, [r3, #0]
 8003224:	1879      	adds	r1, r7, r1
 8003226:	23ff      	movs	r3, #255	@ 0xff
 8003228:	9301      	str	r3, [sp, #4]
 800322a:	2300      	movs	r3, #0
 800322c:	9300      	str	r3, [sp, #0]
 800322e:	2300      	movs	r3, #0
 8003230:	2202      	movs	r2, #2
 8003232:	f000 f9dd 	bl	80035f0 <OW_Send>
 8003236:	e01a      	b.n	800326e <DT_SaveScratchPad+0x8e>
  }
  else
  {
	  query[0] = 0x55;
 8003238:	200c      	movs	r0, #12
 800323a:	183b      	adds	r3, r7, r0
 800323c:	2255      	movs	r2, #85	@ 0x55
 800323e:	701a      	strb	r2, [r3, #0]
	  memcpy(&query[1], deviceAddress, 8);
 8003240:	6839      	ldr	r1, [r7, #0]
 8003242:	0004      	movs	r4, r0
 8003244:	183b      	adds	r3, r7, r0
 8003246:	3301      	adds	r3, #1
 8003248:	2208      	movs	r2, #8
 800324a:	0018      	movs	r0, r3
 800324c:	f004 fc0c 	bl	8007a68 <memcpy>
	  query[9] = COPYSCRATCH;
 8003250:	0021      	movs	r1, r4
 8003252:	187b      	adds	r3, r7, r1
 8003254:	2248      	movs	r2, #72	@ 0x48
 8003256:	725a      	strb	r2, [r3, #9]
	  OW_Send(dt->ow, query, 10, NULL, 0, OW_NO_READ);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	1879      	adds	r1, r7, r1
 800325e:	23ff      	movs	r3, #255	@ 0xff
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	2300      	movs	r3, #0
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	2300      	movs	r3, #0
 8003268:	220a      	movs	r2, #10
 800326a:	f000 f9c1 	bl	80035f0 <OW_Send>
  }

  // Specification: NV Write Cycle Time is typically 2ms, max 10ms
  // Waiting 20ms to allow for sensors that take longer in practice
  if (!dt->parasite)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	799b      	ldrb	r3, [r3, #6]
 8003272:	2201      	movs	r2, #1
 8003274:	4053      	eors	r3, r2
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d003      	beq.n	8003284 <DT_SaveScratchPad+0xa4>
  {
    HAL_Delay(20);
 800327c:	2014      	movs	r0, #20
 800327e:	f001 f915 	bl	80044ac <HAL_Delay>
 8003282:	e00a      	b.n	800329a <DT_SaveScratchPad+0xba>
  }
  else
  {

	ActivateExternalPullup(dt);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f7ff fbf4 	bl	8002a74 <ActivateExternalPullup>
    HAL_Delay(20);
 800328c:	2014      	movs	r0, #20
 800328e:	f001 f90d 	bl	80044ac <HAL_Delay>
    DeactivateExternalPullup(dt);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	0018      	movs	r0, r3
 8003296:	f7ff fc03 	bl	8002aa0 <DeactivateExternalPullup>
  }

  return OW_Reset(dt->ow) == 1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f96c 	bl	800357c <OW_Reset>
 80032a4:	0003      	movs	r3, r0
 80032a6:	3b01      	subs	r3, #1
 80032a8:	425a      	negs	r2, r3
 80032aa:	4153      	adcs	r3, r2
 80032ac:	b2db      	uxtb	r3, r3
}
 80032ae:	0018      	movs	r0, r3
 80032b0:	46bd      	mov	sp, r7
 80032b2:	b007      	add	sp, #28
 80032b4:	bd90      	pop	{r4, r7, pc}
	...

080032b8 <DT_GetTempCByIndex>:
  return dt->autoSaveScratchPad;
}

// Fetch temperature for device index
float DT_GetTempCByIndex(DallasTemperature_HandleTypeDef* dt, uint8_t deviceIndex)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	000a      	movs	r2, r1
 80032c2:	1cfb      	adds	r3, r7, #3
 80032c4:	701a      	strb	r2, [r3, #0]
	CurrentDeviceAddress deviceAddress;

	if (!DT_GetAddress(dt, deviceAddress, deviceIndex))
 80032c6:	1cfb      	adds	r3, r7, #3
 80032c8:	781a      	ldrb	r2, [r3, #0]
 80032ca:	2308      	movs	r3, #8
 80032cc:	18f9      	adds	r1, r7, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	0018      	movs	r0, r3
 80032d2:	f7ff fced 	bl	8002cb0 <DT_GetAddress>
 80032d6:	0003      	movs	r3, r0
 80032d8:	001a      	movs	r2, r3
 80032da:	2301      	movs	r3, #1
 80032dc:	4053      	eors	r3, r2
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <DT_GetTempCByIndex+0x30>
	{
		return DEVICE_DISCONNECTED_C;
 80032e4:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <DT_GetTempCByIndex+0x48>)
 80032e6:	e007      	b.n	80032f8 <DT_GetTempCByIndex+0x40>
	}

	return DT_GetTempC(dt, (uint8_t*) deviceAddress);
 80032e8:	2308      	movs	r3, #8
 80032ea:	18fa      	adds	r2, r7, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	0011      	movs	r1, r2
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 f865 	bl	80033c0 <DT_GetTempC>
 80032f6:	1c03      	adds	r3, r0, #0
}
 80032f8:	1c18      	adds	r0, r3, #0
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b004      	add	sp, #16
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	c2fe0000 	.word	0xc2fe0000

08003304 <DT_CalculateTemperature>:
	return DT_GetTempF(dt, (uint8_t*) deviceAddress);
}

// reads scratchpad and returns fixed-point temperature, scaling factor 2^-7
int16_t DT_CalculateTemperature(const uint8_t* deviceAddress, uint8_t* scratchPad)
{
 8003304:	b5b0      	push	{r4, r5, r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
	int16_t fpTemperature = (((int16_t) scratchPad[TEMP_MSB]) << 11) | (((int16_t) scratchPad[TEMP_LSB]) << 3);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	3301      	adds	r3, #1
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	b21b      	sxth	r3, r3
 8003316:	02db      	lsls	r3, r3, #11
 8003318:	b219      	sxth	r1, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	b21b      	sxth	r3, r3
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	b21a      	sxth	r2, r3
 8003324:	250e      	movs	r5, #14
 8003326:	197b      	adds	r3, r7, r5
 8003328:	430a      	orrs	r2, r1
 800332a:	801a      	strh	r2, [r3, #0]
	 value for a DS18S20, and James Cameron added legacy DS1820 support.

	 See - http://myarduinotoy.blogspot.co.uk/2013/02/12bit-result-from-ds18s20.html
	 */

	if (deviceAddress[0] == DS18S20MODEL)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b10      	cmp	r3, #16
 8003332:	d11e      	bne.n	8003372 <DT_CalculateTemperature+0x6e>
	{
		fpTemperature = ((fpTemperature & 0xfff0) << 3) - 16 + (((scratchPad[COUNT_PER_C] - scratchPad[COUNT_REMAIN]) << 7) / scratchPad[COUNT_PER_C]);
 8003334:	197b      	adds	r3, r7, r5
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	b29b      	uxth	r3, r3
 800333c:	227f      	movs	r2, #127	@ 0x7f
 800333e:	4393      	bics	r3, r2
 8003340:	b29c      	uxth	r4, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	3307      	adds	r3, #7
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	001a      	movs	r2, r3
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	3306      	adds	r3, #6
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	01da      	lsls	r2, r3, #7
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	3307      	adds	r3, #7
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	0019      	movs	r1, r3
 800335c:	0010      	movs	r0, r2
 800335e:	f7fc ff79 	bl	8000254 <__divsi3>
 8003362:	0003      	movs	r3, r0
 8003364:	b29b      	uxth	r3, r3
 8003366:	18e3      	adds	r3, r4, r3
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b10      	subs	r3, #16
 800336c:	b29a      	uxth	r2, r3
 800336e:	197b      	adds	r3, r7, r5
 8003370:	801a      	strh	r2, [r3, #0]
	}

	return fpTemperature;
 8003372:	230e      	movs	r3, #14
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	2200      	movs	r2, #0
 8003378:	5e9b      	ldrsh	r3, [r3, r2]
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b004      	add	sp, #16
 8003380:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003384 <DT_GetTemp>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_RAW is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
int16_t DT_GetTemp(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 8003384:	b590      	push	{r4, r7, lr}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
	ScratchPad scratchPad;
	if (DT_IsConnected_ScratchPad(dt, deviceAddress, scratchPad))
 800338e:	240c      	movs	r4, #12
 8003390:	193a      	adds	r2, r7, r4
 8003392:	6839      	ldr	r1, [r7, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f7ff fcc1 	bl	8002d1e <DT_IsConnected_ScratchPad>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d007      	beq.n	80033b0 <DT_GetTemp+0x2c>
		return DT_CalculateTemperature(deviceAddress, scratchPad);
 80033a0:	193a      	adds	r2, r7, r4
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	0011      	movs	r1, r2
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7ff ffac 	bl	8003304 <DT_CalculateTemperature>
 80033ac:	0003      	movs	r3, r0
 80033ae:	e000      	b.n	80033b2 <DT_GetTemp+0x2e>
	return DEVICE_DISCONNECTED_RAW;
 80033b0:	4b02      	ldr	r3, [pc, #8]	@ (80033bc <DT_GetTemp+0x38>)
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b007      	add	sp, #28
 80033b8:	bd90      	pop	{r4, r7, pc}
 80033ba:	46c0      	nop			@ (mov r8, r8)
 80033bc:	ffffe480 	.word	0xffffe480

080033c0 <DT_GetTempC>:
// device's scratch pad cannot be read successfully.
// the numeric value of DEVICE_DISCONNECTED_C is defined in
// DallasTemperature.h. It is a large negative number outside the
// operating range of the device
float DT_GetTempC(DallasTemperature_HandleTypeDef* dt, const uint8_t* deviceAddress)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
	return DT_RawToCelsius(DT_GetTemp(dt, deviceAddress));
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff ffd7 	bl	8003384 <DT_GetTemp>
 80033d6:	0003      	movs	r3, r0
 80033d8:	0018      	movs	r0, r3
 80033da:	f000 f805 	bl	80033e8 <DT_RawToCelsius>
 80033de:	1c03      	adds	r3, r0, #0
}
 80033e0:	1c18      	adds	r0, r3, #0
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <DT_RawToCelsius>:
	return (fahrenheit - 32) * 0.555555556;
}

// convert from raw to Celsius
float DT_RawToCelsius(int16_t raw)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	0002      	movs	r2, r0
 80033f0:	1dbb      	adds	r3, r7, #6
 80033f2:	801a      	strh	r2, [r3, #0]
	if (raw <= DEVICE_DISCONNECTED_RAW)
 80033f4:	1dbb      	adds	r3, r7, #6
 80033f6:	2200      	movs	r2, #0
 80033f8:	5e9b      	ldrsh	r3, [r3, r2]
 80033fa:	4a0b      	ldr	r2, [pc, #44]	@ (8003428 <DT_RawToCelsius+0x40>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	da01      	bge.n	8003404 <DT_RawToCelsius+0x1c>
		return DEVICE_DISCONNECTED_C;
 8003400:	4b0a      	ldr	r3, [pc, #40]	@ (800342c <DT_RawToCelsius+0x44>)
 8003402:	e00c      	b.n	800341e <DT_RawToCelsius+0x36>
	// C = RAW/128
	return (float) raw * 0.0078125;
 8003404:	1dbb      	adds	r3, r7, #6
 8003406:	2200      	movs	r2, #0
 8003408:	5e9b      	ldrsh	r3, [r3, r2]
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fa14 	bl	8000838 <__aeabi_i2f>
 8003410:	1c03      	adds	r3, r0, #0
 8003412:	21f0      	movs	r1, #240	@ 0xf0
 8003414:	0589      	lsls	r1, r1, #22
 8003416:	1c18      	adds	r0, r3, #0
 8003418:	f7fd f8b4 	bl	8000584 <__aeabi_fmul>
 800341c:	1c03      	adds	r3, r0, #0
}
 800341e:	1c18      	adds	r0, r3, #0
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	ffffe481 	.word	0xffffe481
 800342c:	c2fe0000 	.word	0xc2fe0000

08003430 <OW_UART_Init>:
#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t num_bits);
#endif

static HAL_StatusTypeDef OW_UART_Init(OneWire_HandleTypeDef* ow, uint32_t baudRate)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
	UART_HandleTypeDef* HUARTx = ow->huart;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	60fb      	str	r3, [r7, #12]
//	GPIO_InitStruct.Pin = GPIO_PIN_10;
//	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
//	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
//	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

    HUARTx->Init.BaudRate = baudRate;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	605a      	str	r2, [r3, #4]
    HUARTx->Init.WordLength = UART_WORDLENGTH_8B;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
    HUARTx->Init.StopBits = UART_STOPBITS_1;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
    HUARTx->Init.Parity = UART_PARITY_NONE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2200      	movs	r2, #0
 8003456:	611a      	str	r2, [r3, #16]
    HUARTx->Init.Mode = UART_MODE_TX_RX;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	220c      	movs	r2, #12
 800345c:	615a      	str	r2, [r3, #20]
    HUARTx->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	619a      	str	r2, [r3, #24]
    HUARTx->Init.OverSampling = UART_OVERSAMPLING_16;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	61da      	str	r2, [r3, #28]
	return HAL_HalfDuplex_Init(HUARTx);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	0018      	movs	r0, r3
 800346e:	f002 fa19 	bl	80058a4 <HAL_HalfDuplex_Init>
 8003472:	0003      	movs	r3, r0
}
 8003474:	0018      	movs	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}

0800347c <OW_ToBits>:

static void OW_ToBits(uint8_t owByte, uint8_t *owBits)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	0002      	movs	r2, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for (i = 0; i < 8; i++)
 800348a:	230f      	movs	r3, #15
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e019      	b.n	80034c8 <OW_ToBits+0x4c>
	{
		if (owByte & 0x01)
 8003494:	1dfb      	adds	r3, r7, #7
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2201      	movs	r2, #1
 800349a:	4013      	ands	r3, r2
 800349c:	d003      	beq.n	80034a6 <OW_ToBits+0x2a>
		{
			*owBits = OW_1;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	22ff      	movs	r2, #255	@ 0xff
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e002      	b.n	80034ac <OW_ToBits+0x30>
		}
		else
		{
			*owBits = OW_0;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]
		}
		owBits++;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	3301      	adds	r3, #1
 80034b0:	603b      	str	r3, [r7, #0]
		owByte = owByte >> 1;
 80034b2:	1dfb      	adds	r3, r7, #7
 80034b4:	1dfa      	adds	r2, r7, #7
 80034b6:	7812      	ldrb	r2, [r2, #0]
 80034b8:	0852      	lsrs	r2, r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++)
 80034bc:	210f      	movs	r1, #15
 80034be:	187b      	adds	r3, r7, r1
 80034c0:	781a      	ldrb	r2, [r3, #0]
 80034c2:	187b      	adds	r3, r7, r1
 80034c4:	3201      	adds	r2, #1
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	230f      	movs	r3, #15
 80034ca:	18fb      	adds	r3, r7, r3
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b07      	cmp	r3, #7
 80034d0:	d9e0      	bls.n	8003494 <OW_ToBits+0x18>
	}
}
 80034d2:	46c0      	nop			@ (mov r8, r8)
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}

080034dc <OW_ToByte>:

static uint8_t OW_ToByte(uint8_t *owBits)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
	uint8_t owByte, i;
	owByte = 0;
 80034e4:	230f      	movs	r3, #15
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++)
 80034ec:	230e      	movs	r3, #14
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2200      	movs	r2, #0
 80034f2:	701a      	strb	r2, [r3, #0]
 80034f4:	e019      	b.n	800352a <OW_ToByte+0x4e>
	{
		owByte = owByte >> 1;
 80034f6:	210f      	movs	r1, #15
 80034f8:	187b      	adds	r3, r7, r1
 80034fa:	187a      	adds	r2, r7, r1
 80034fc:	7812      	ldrb	r2, [r2, #0]
 80034fe:	0852      	lsrs	r2, r2, #1
 8003500:	701a      	strb	r2, [r3, #0]
		if (*owBits == OW_R_1)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2bff      	cmp	r3, #255	@ 0xff
 8003508:	d106      	bne.n	8003518 <OW_ToByte+0x3c>
		{
			owByte |= 0x80;
 800350a:	187b      	adds	r3, r7, r1
 800350c:	187a      	adds	r2, r7, r1
 800350e:	7812      	ldrb	r2, [r2, #0]
 8003510:	2180      	movs	r1, #128	@ 0x80
 8003512:	4249      	negs	r1, r1
 8003514:	430a      	orrs	r2, r1
 8003516:	701a      	strb	r2, [r3, #0]
		}
		owBits++;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3301      	adds	r3, #1
 800351c:	607b      	str	r3, [r7, #4]
	for (i = 0; i < 8; i++)
 800351e:	210e      	movs	r1, #14
 8003520:	187b      	adds	r3, r7, r1
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	187b      	adds	r3, r7, r1
 8003526:	3201      	adds	r2, #1
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	230e      	movs	r3, #14
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b07      	cmp	r3, #7
 8003532:	d9e0      	bls.n	80034f6 <OW_ToByte+0x1a>
	}

	return owByte;
 8003534:	230f      	movs	r3, #15
 8003536:	18fb      	adds	r3, r7, r3
 8003538:	781b      	ldrb	r3, [r3, #0]
}
 800353a:	0018      	movs	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	b004      	add	sp, #16
 8003540:	bd80      	pop	{r7, pc}

08003542 <OW_Begin>:
{
	return OW_Begin(ow, huart);
}

HAL_StatusTypeDef OW_Begin(OneWire_HandleTypeDef* ow, UART_HandleTypeDef* huart)
{
 8003542:	b5b0      	push	{r4, r5, r7, lr}
 8003544:	b084      	sub	sp, #16
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
	ow->huart = huart;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	601a      	str	r2, [r3, #0]
	HAL_StatusTypeDef status = OW_UART_Init(ow, 9600);
 8003552:	250f      	movs	r5, #15
 8003554:	197c      	adds	r4, r7, r5
 8003556:	2396      	movs	r3, #150	@ 0x96
 8003558:	019a      	lsls	r2, r3, #6
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0011      	movs	r1, r2
 800355e:	0018      	movs	r0, r3
 8003560:	f7ff ff66 	bl	8003430 <OW_UART_Init>
 8003564:	0003      	movs	r3, r0
 8003566:	7023      	strb	r3, [r4, #0]
#if ONEWIRE_SEARCH
	OW_ResetSearch(ow);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	0018      	movs	r0, r3
 800356c:	f000 f8dd 	bl	800372a <OW_ResetSearch>
#endif
	return status;
 8003570:	197b      	adds	r3, r7, r5
 8003572:	781b      	ldrb	r3, [r3, #0]
}
 8003574:	0018      	movs	r0, r3
 8003576:	46bd      	mov	sp, r7
 8003578:	b004      	add	sp, #16
 800357a:	bdb0      	pop	{r4, r5, r7, pc}

0800357c <OW_Reset>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OW_Reset(OneWire_HandleTypeDef* ow)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
	uint8_t owPresence = 0xf0;
 8003584:	240f      	movs	r4, #15
 8003586:	193b      	adds	r3, r7, r4
 8003588:	22f0      	movs	r2, #240	@ 0xf0
 800358a:	701a      	strb	r2, [r3, #0]

	OW_UART_Init(ow, 9600);
 800358c:	2396      	movs	r3, #150	@ 0x96
 800358e:	019a      	lsls	r2, r3, #6
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0011      	movs	r1, r2
 8003594:	0018      	movs	r0, r3
 8003596:	f7ff ff4b 	bl	8003430 <OW_UART_Init>

	HAL_UART_Receive_DMA(ow->huart, &owPresence, 1);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	1939      	adds	r1, r7, r4
 80035a0:	2201      	movs	r2, #1
 80035a2:	0018      	movs	r0, r3
 80035a4:	f002 fb0a 	bl	8005bbc <HAL_UART_Receive_DMA>
	//HAL_UART_Transmit(ow->huart, &owPresence, 1, HAL_MAX_DELAY);
	HAL_UART_Transmit_DMA(ow->huart, &owPresence, 1);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	1939      	adds	r1, r7, r4
 80035ae:	2201      	movs	r2, #1
 80035b0:	0018      	movs	r0, r3
 80035b2:	f002 fa73 	bl	8005a9c <HAL_UART_Transmit_DMA>

	/*## Wait for the end of the transfer ###################################*/
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 80035b6:	e000      	b.n	80035ba <OW_Reset+0x3e>
	{
		__NOP();
 80035b8:	46c0      	nop			@ (mov r8, r8)
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	0018      	movs	r0, r3
 80035c0:	f002 fce4 	bl	8005f8c <HAL_UART_GetState>
 80035c4:	0003      	movs	r3, r0
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d1f6      	bne.n	80035b8 <OW_Reset+0x3c>
	}

	OW_UART_Init(ow, 115200);
 80035ca:	23e1      	movs	r3, #225	@ 0xe1
 80035cc:	025a      	lsls	r2, r3, #9
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0011      	movs	r1, r2
 80035d2:	0018      	movs	r0, r3
 80035d4:	f7ff ff2c 	bl	8003430 <OW_UART_Init>

	if (owPresence != 0xf0)
 80035d8:	230f      	movs	r3, #15
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2bf0      	cmp	r3, #240	@ 0xf0
 80035e0:	d001      	beq.n	80035e6 <OW_Reset+0x6a>
	{
		return OW_OK;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <OW_Reset+0x6c>
	}

	return OW_NO_DEVICE;
 80035e6:	2303      	movs	r3, #3
}
 80035e8:	0018      	movs	r0, r3
 80035ea:	46bd      	mov	sp, r7
 80035ec:	b005      	add	sp, #20
 80035ee:	bd90      	pop	{r4, r7, pc}

080035f0 <OW_Send>:
// dLen - the length of the read buffer. Read no more than this length
// readStart - which transmission character to start reading from (numbered from 0)
// you can specify OW_NO_READ, then you don't need to specify data and dLen
//-----------------------------------------------------------------------------
uint8_t OW_Send(OneWire_HandleTypeDef* ow, uint8_t *command, uint8_t cLen, uint8_t *data, uint8_t dLen, uint8_t readStart)
{
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	603b      	str	r3, [r7, #0]
 80035fc:	1dfb      	adds	r3, r7, #7
 80035fe:	701a      	strb	r2, [r3, #0]
	if (OW_Reset(ow) == OW_NO_DEVICE)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	0018      	movs	r0, r3
 8003604:	f7ff ffba 	bl	800357c <OW_Reset>
 8003608:	0003      	movs	r3, r0
 800360a:	2b03      	cmp	r3, #3
 800360c:	d15a      	bne.n	80036c4 <OW_Send+0xd4>
	{
		return OW_NO_DEVICE;
 800360e:	2303      	movs	r3, #3
 8003610:	e05d      	b.n	80036ce <OW_Send+0xde>
	}

	while (cLen > 0)
	{

		OW_ToBits(*command, ow->ROM_NO);
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3304      	adds	r3, #4
 800361a:	0019      	movs	r1, r3
 800361c:	0010      	movs	r0, r2
 800361e:	f7ff ff2d 	bl	800347c <OW_ToBits>
		command++;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
		cLen--;
 8003628:	1dfb      	adds	r3, r7, #7
 800362a:	781a      	ldrb	r2, [r3, #0]
 800362c:	1dfb      	adds	r3, r7, #7
 800362e:	3a01      	subs	r2, #1
 8003630:	701a      	strb	r2, [r3, #0]

		HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6818      	ldr	r0, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3304      	adds	r3, #4
 800363a:	2208      	movs	r2, #8
 800363c:	0019      	movs	r1, r3
 800363e:	f002 fabd 	bl	8005bbc <HAL_UART_Receive_DMA>
		HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, sizeof(ow->ROM_NO) / sizeof(ow->ROM_NO[0]));
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3304      	adds	r3, #4
 800364a:	2208      	movs	r2, #8
 800364c:	0019      	movs	r1, r3
 800364e:	f002 fa25 	bl	8005a9c <HAL_UART_Transmit_DMA>

		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8003652:	e000      	b.n	8003656 <OW_Send+0x66>
		{
			__NOP();
 8003654:	46c0      	nop			@ (mov r8, r8)
		while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0018      	movs	r0, r3
 800365c:	f002 fc96 	bl	8005f8c <HAL_UART_GetState>
 8003660:	0003      	movs	r3, r0
 8003662:	2b20      	cmp	r3, #32
 8003664:	d1f6      	bne.n	8003654 <OW_Send+0x64>
		}

		if (readStart == 0 && dLen > 0)
 8003666:	231c      	movs	r3, #28
 8003668:	2508      	movs	r5, #8
 800366a:	195b      	adds	r3, r3, r5
 800366c:	19db      	adds	r3, r3, r7
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d119      	bne.n	80036a8 <OW_Send+0xb8>
 8003674:	2418      	movs	r4, #24
 8003676:	1963      	adds	r3, r4, r5
 8003678:	19db      	adds	r3, r3, r7
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d013      	beq.n	80036a8 <OW_Send+0xb8>
		{
			*data = OW_ToByte(ow->ROM_NO);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	3304      	adds	r3, #4
 8003684:	0018      	movs	r0, r3
 8003686:	f7ff ff29 	bl	80034dc <OW_ToByte>
 800368a:	0003      	movs	r3, r0
 800368c:	001a      	movs	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	701a      	strb	r2, [r3, #0]
			data++;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	3301      	adds	r3, #1
 8003696:	603b      	str	r3, [r7, #0]
			dLen--;
 8003698:	1963      	adds	r3, r4, r5
 800369a:	19db      	adds	r3, r3, r7
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	1963      	adds	r3, r4, r5
 80036a0:	19db      	adds	r3, r3, r7
 80036a2:	3a01      	subs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
 80036a6:	e00d      	b.n	80036c4 <OW_Send+0xd4>
		}
		else
		{
			if (readStart != OW_NO_READ)
 80036a8:	211c      	movs	r1, #28
 80036aa:	2008      	movs	r0, #8
 80036ac:	180b      	adds	r3, r1, r0
 80036ae:	19db      	adds	r3, r3, r7
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d006      	beq.n	80036c4 <OW_Send+0xd4>
			{
				readStart--;
 80036b6:	180b      	adds	r3, r1, r0
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	781a      	ldrb	r2, [r3, #0]
 80036bc:	180b      	adds	r3, r1, r0
 80036be:	19db      	adds	r3, r3, r7
 80036c0:	3a01      	subs	r2, #1
 80036c2:	701a      	strb	r2, [r3, #0]
	while (cLen > 0)
 80036c4:	1dfb      	adds	r3, r7, #7
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1a2      	bne.n	8003612 <OW_Send+0x22>
			}
		}
	}

	return OW_OK;
 80036cc:	2301      	movs	r3, #1
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b004      	add	sp, #16
 80036d4:	bdb0      	pop	{r4, r5, r7, pc}

080036d6 <OW_SendBits>:

#if ONEWIRE_SEARCH
static void OW_SendBits(OneWire_HandleTypeDef* ow, uint8_t numBits)
{
 80036d6:	b580      	push	{r7, lr}
 80036d8:	b082      	sub	sp, #8
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	000a      	movs	r2, r1
 80036e0:	1cfb      	adds	r3, r7, #3
 80036e2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(ow->huart, ow->ROM_NO, numBits);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6818      	ldr	r0, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	1d19      	adds	r1, r3, #4
 80036ec:	1cfb      	adds	r3, r7, #3
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	001a      	movs	r2, r3
 80036f4:	f002 fa62 	bl	8005bbc <HAL_UART_Receive_DMA>
	HAL_UART_Transmit_DMA(ow->huart, ow->ROM_NO, numBits);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	1d19      	adds	r1, r3, #4
 8003700:	1cfb      	adds	r3, r7, #3
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	b29b      	uxth	r3, r3
 8003706:	001a      	movs	r2, r3
 8003708:	f002 f9c8 	bl	8005a9c <HAL_UART_Transmit_DMA>

	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 800370c:	e000      	b.n	8003710 <OW_SendBits+0x3a>
	{
		__NOP();
 800370e:	46c0      	nop			@ (mov r8, r8)
	while (HAL_UART_GetState(ow->huart) != HAL_UART_STATE_READY)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	0018      	movs	r0, r3
 8003716:	f002 fc39 	bl	8005f8c <HAL_UART_GetState>
 800371a:	0003      	movs	r3, r0
 800371c:	2b20      	cmp	r3, #32
 800371e:	d1f6      	bne.n	800370e <OW_SendBits+0x38>
	}
}
 8003720:	46c0      	nop			@ (mov r8, r8)
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b002      	add	sp, #8
 8003728:	bd80      	pop	{r7, pc}

0800372a <OW_ResetSearch>:
//
// You need to use this function to start a search again from the beginning.
// You do not need to do it for the first search, though you could.
//
void OW_ResetSearch(OneWire_HandleTypeDef* ow)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  // reset the search state
  ow->LastDiscrepancy = 0;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	731a      	strb	r2, [r3, #12]
  ow->LastDeviceFlag = false;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	739a      	strb	r2, [r3, #14]
  ow->LastFamilyDiscrepancy = 0;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	735a      	strb	r2, [r3, #13]
  for(int i = 7; ; i--)
 8003744:	2307      	movs	r3, #7
 8003746:	60fb      	str	r3, [r7, #12]
  {
    ow->ROM_NO[i] = 0;
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	18d3      	adds	r3, r2, r3
 800374e:	3304      	adds	r3, #4
 8003750:	2200      	movs	r2, #0
 8003752:	701a      	strb	r2, [r3, #0]
    if ( i == 0) break;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d003      	beq.n	8003762 <OW_ResetSearch+0x38>
  for(int i = 7; ; i--)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	3b01      	subs	r3, #1
 800375e:	60fb      	str	r3, [r7, #12]
    ow->ROM_NO[i] = 0;
 8003760:	e7f2      	b.n	8003748 <OW_ResetSearch+0x1e>
    if ( i == 0) break;
 8003762:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}

0800376c <OW_Search>:
   ow->LastFamilyDiscrepancy = 0;
   ow->LastDeviceFlag = false;
}

uint8_t OW_Search(OneWire_HandleTypeDef* ow, uint8_t *buf, uint8_t num)
{
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b08b      	sub	sp, #44	@ 0x2c
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	1dfb      	adds	r3, r7, #7
 8003778:	701a      	strb	r2, [r3, #0]

	uint8_t found = 0;
 800377a:	231f      	movs	r3, #31
 800377c:	18fb      	adds	r3, r7, r3
 800377e:	2200      	movs	r2, #0
 8003780:	701a      	strb	r2, [r3, #0]
	uint8_t *lastDevice = NULL;
 8003782:	2300      	movs	r3, #0
 8003784:	61bb      	str	r3, [r7, #24]
	uint8_t *curDevice = buf;
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	617b      	str	r3, [r7, #20]
	uint8_t numBit, lastCollision, currentCollision, currentSelection;

	lastCollision = 0;
 800378a:	2312      	movs	r3, #18
 800378c:	18fb      	adds	r3, r7, r3
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]

	while (found < num)
 8003792:	e101      	b.n	8003998 <OW_Search+0x22c>
	{
		numBit = 1;
 8003794:	2413      	movs	r4, #19
 8003796:	193b      	adds	r3, r7, r4
 8003798:	2201      	movs	r2, #1
 800379a:	701a      	strb	r2, [r3, #0]
		currentCollision = 0;
 800379c:	2311      	movs	r3, #17
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2200      	movs	r2, #0
 80037a2:	701a      	strb	r2, [r3, #0]

		OW_Send(ow, (uint8_t*)"\xf0", 1, NULL, 0, OW_NO_READ);
 80037a4:	4983      	ldr	r1, [pc, #524]	@ (80039b4 <OW_Search+0x248>)
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	23ff      	movs	r3, #255	@ 0xff
 80037aa:	9301      	str	r3, [sp, #4]
 80037ac:	2300      	movs	r3, #0
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	2300      	movs	r3, #0
 80037b2:	2201      	movs	r2, #1
 80037b4:	f7ff ff1c 	bl	80035f0 <OW_Send>

		for (numBit = 1; numBit <= 64; numBit++)
 80037b8:	193b      	adds	r3, r7, r4
 80037ba:	2201      	movs	r2, #1
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e0cc      	b.n	800395a <OW_Search+0x1ee>
		{
			OW_ToBits(OW_READ_SLOT, ow->ROM_NO);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	3304      	adds	r3, #4
 80037c4:	0019      	movs	r1, r3
 80037c6:	20ff      	movs	r0, #255	@ 0xff
 80037c8:	f7ff fe58 	bl	800347c <OW_ToBits>
			OW_SendBits(ow, 2);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2102      	movs	r1, #2
 80037d0:	0018      	movs	r0, r3
 80037d2:	f7ff ff80 	bl	80036d6 <OW_SendBits>

			if (ow->ROM_NO[0] == OW_R_1)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	791b      	ldrb	r3, [r3, #4]
 80037da:	2bff      	cmp	r3, #255	@ 0xff
 80037dc:	d10c      	bne.n	80037f8 <OW_Search+0x8c>
			{
				if (ow->ROM_NO[1] == OW_R_1)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	795b      	ldrb	r3, [r3, #5]
 80037e2:	2bff      	cmp	r3, #255	@ 0xff
 80037e4:	d103      	bne.n	80037ee <OW_Search+0x82>
				{
					return found;
 80037e6:	231f      	movs	r3, #31
 80037e8:	18fb      	adds	r3, r7, r3
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	e0de      	b.n	80039ac <OW_Search+0x240>
				}
				else
				{
					currentSelection = 1;
 80037ee:	2310      	movs	r3, #16
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	2201      	movs	r2, #1
 80037f4:	701a      	strb	r2, [r3, #0]
 80037f6:	e055      	b.n	80038a4 <OW_Search+0x138>
				}
			}
			else
			{
				if (ow->ROM_NO[1] == OW_R_1)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	795b      	ldrb	r3, [r3, #5]
 80037fc:	2bff      	cmp	r3, #255	@ 0xff
 80037fe:	d104      	bne.n	800380a <OW_Search+0x9e>
				{
					currentSelection = 0;
 8003800:	2310      	movs	r3, #16
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e04c      	b.n	80038a4 <OW_Search+0x138>
				}
				else
				{
					if (numBit < lastCollision)
 800380a:	2013      	movs	r0, #19
 800380c:	183a      	adds	r2, r7, r0
 800380e:	2312      	movs	r3, #18
 8003810:	18fb      	adds	r3, r7, r3
 8003812:	7812      	ldrb	r2, [r2, #0]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d227      	bcs.n	800386a <OW_Search+0xfe>
					{
							if (lastDevice[(numBit - 1) >> 3] & 1 << ((numBit - 1) & 0x07))
 800381a:	183b      	adds	r3, r7, r0
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	3b01      	subs	r3, #1
 8003820:	10db      	asrs	r3, r3, #3
 8003822:	001a      	movs	r2, r3
 8003824:	69bb      	ldr	r3, [r7, #24]
 8003826:	189b      	adds	r3, r3, r2
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	0019      	movs	r1, r3
 800382c:	183b      	adds	r3, r7, r0
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	3b01      	subs	r3, #1
 8003832:	2207      	movs	r2, #7
 8003834:	4013      	ands	r3, r2
 8003836:	4119      	asrs	r1, r3
 8003838:	000b      	movs	r3, r1
 800383a:	2201      	movs	r2, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d00f      	beq.n	8003860 <OW_Search+0xf4>
							{
							currentSelection = 1;
 8003840:	2310      	movs	r3, #16
 8003842:	18fb      	adds	r3, r7, r3
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]

								if (currentCollision < numBit)
 8003848:	2111      	movs	r1, #17
 800384a:	187a      	adds	r2, r7, r1
 800384c:	183b      	adds	r3, r7, r0
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d226      	bcs.n	80038a4 <OW_Search+0x138>
								{
										currentCollision = numBit;
 8003856:	187b      	adds	r3, r7, r1
 8003858:	183a      	adds	r2, r7, r0
 800385a:	7812      	ldrb	r2, [r2, #0]
 800385c:	701a      	strb	r2, [r3, #0]
 800385e:	e021      	b.n	80038a4 <OW_Search+0x138>
								}
							}
							else
							{
								currentSelection = 0;
 8003860:	2310      	movs	r3, #16
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e01c      	b.n	80038a4 <OW_Search+0x138>
							}
					}
					else
					{
						if (numBit == lastCollision)
 800386a:	2313      	movs	r3, #19
 800386c:	18fa      	adds	r2, r7, r3
 800386e:	2312      	movs	r3, #18
 8003870:	18fb      	adds	r3, r7, r3
 8003872:	7812      	ldrb	r2, [r2, #0]
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d104      	bne.n	8003884 <OW_Search+0x118>
						{
								currentSelection = 0;
 800387a:	2310      	movs	r3, #16
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	2200      	movs	r2, #0
 8003880:	701a      	strb	r2, [r3, #0]
 8003882:	e00f      	b.n	80038a4 <OW_Search+0x138>
						}
						else
						{
							currentSelection = 1;
 8003884:	2310      	movs	r3, #16
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]

							if (currentCollision < numBit)
 800388c:	2111      	movs	r1, #17
 800388e:	187a      	adds	r2, r7, r1
 8003890:	2013      	movs	r0, #19
 8003892:	183b      	adds	r3, r7, r0
 8003894:	7812      	ldrb	r2, [r2, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	429a      	cmp	r2, r3
 800389a:	d203      	bcs.n	80038a4 <OW_Search+0x138>
							{
									currentCollision = numBit;
 800389c:	187b      	adds	r3, r7, r1
 800389e:	183a      	adds	r2, r7, r0
 80038a0:	7812      	ldrb	r2, [r2, #0]
 80038a2:	701a      	strb	r2, [r3, #0]
						}
					}
				}
			}

			if (currentSelection == 1)
 80038a4:	2310      	movs	r3, #16
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d124      	bne.n	80038f8 <OW_Search+0x18c>
			{
				curDevice[(numBit - 1) >> 3] |= 1 << ((numBit - 1) & 0x07);
 80038ae:	2013      	movs	r0, #19
 80038b0:	183b      	adds	r3, r7, r0
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	10db      	asrs	r3, r3, #3
 80038b8:	001a      	movs	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	189b      	adds	r3, r3, r2
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	b25a      	sxtb	r2, r3
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	2107      	movs	r1, #7
 80038ca:	400b      	ands	r3, r1
 80038cc:	2101      	movs	r1, #1
 80038ce:	4099      	lsls	r1, r3
 80038d0:	000b      	movs	r3, r1
 80038d2:	b25b      	sxtb	r3, r3
 80038d4:	4313      	orrs	r3, r2
 80038d6:	b25a      	sxtb	r2, r3
 80038d8:	183b      	adds	r3, r7, r0
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	3b01      	subs	r3, #1
 80038de:	10db      	asrs	r3, r3, #3
 80038e0:	0019      	movs	r1, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	185b      	adds	r3, r3, r1
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x01, ow->ROM_NO);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	3304      	adds	r3, #4
 80038ee:	0019      	movs	r1, r3
 80038f0:	2001      	movs	r0, #1
 80038f2:	f7ff fdc3 	bl	800347c <OW_ToBits>
 80038f6:	e025      	b.n	8003944 <OW_Search+0x1d8>
			}
			else
			{
				curDevice[(numBit - 1) >> 3] &= ~(1 << ((numBit - 1) & 0x07));
 80038f8:	2013      	movs	r0, #19
 80038fa:	183b      	adds	r3, r7, r0
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	3b01      	subs	r3, #1
 8003900:	10db      	asrs	r3, r3, #3
 8003902:	001a      	movs	r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	189b      	adds	r3, r3, r2
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	b25b      	sxtb	r3, r3
 800390c:	183a      	adds	r2, r7, r0
 800390e:	7812      	ldrb	r2, [r2, #0]
 8003910:	3a01      	subs	r2, #1
 8003912:	2107      	movs	r1, #7
 8003914:	400a      	ands	r2, r1
 8003916:	2101      	movs	r1, #1
 8003918:	4091      	lsls	r1, r2
 800391a:	000a      	movs	r2, r1
 800391c:	b252      	sxtb	r2, r2
 800391e:	43d2      	mvns	r2, r2
 8003920:	b252      	sxtb	r2, r2
 8003922:	4013      	ands	r3, r2
 8003924:	b25a      	sxtb	r2, r3
 8003926:	183b      	adds	r3, r7, r0
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	3b01      	subs	r3, #1
 800392c:	10db      	asrs	r3, r3, #3
 800392e:	0019      	movs	r1, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	185b      	adds	r3, r3, r1
 8003934:	b2d2      	uxtb	r2, r2
 8003936:	701a      	strb	r2, [r3, #0]
				OW_ToBits(0x00, ow->ROM_NO);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	3304      	adds	r3, #4
 800393c:	0019      	movs	r1, r3
 800393e:	2000      	movs	r0, #0
 8003940:	f7ff fd9c 	bl	800347c <OW_ToBits>
			}

			OW_SendBits(ow, 1);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2101      	movs	r1, #1
 8003948:	0018      	movs	r0, r3
 800394a:	f7ff fec4 	bl	80036d6 <OW_SendBits>
		for (numBit = 1; numBit <= 64; numBit++)
 800394e:	2113      	movs	r1, #19
 8003950:	187b      	adds	r3, r7, r1
 8003952:	781a      	ldrb	r2, [r3, #0]
 8003954:	187b      	adds	r3, r7, r1
 8003956:	3201      	adds	r2, #1
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	2313      	movs	r3, #19
 800395c:	18fb      	adds	r3, r7, r3
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b40      	cmp	r3, #64	@ 0x40
 8003962:	d800      	bhi.n	8003966 <OW_Search+0x1fa>
 8003964:	e72c      	b.n	80037c0 <OW_Search+0x54>
		}

		found++;
 8003966:	211f      	movs	r1, #31
 8003968:	187b      	adds	r3, r7, r1
 800396a:	781a      	ldrb	r2, [r3, #0]
 800396c:	187b      	adds	r3, r7, r1
 800396e:	3201      	adds	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
		lastDevice = curDevice;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	61bb      	str	r3, [r7, #24]
		curDevice += 8;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3308      	adds	r3, #8
 800397a:	617b      	str	r3, [r7, #20]
		if (currentCollision == 0)
 800397c:	2311      	movs	r3, #17
 800397e:	18fb      	adds	r3, r7, r3
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d102      	bne.n	800398c <OW_Search+0x220>
		{
			return found;
 8003986:	187b      	adds	r3, r7, r1
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	e00f      	b.n	80039ac <OW_Search+0x240>
		}

		lastCollision = currentCollision;
 800398c:	2312      	movs	r3, #18
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	2211      	movs	r2, #17
 8003992:	18ba      	adds	r2, r7, r2
 8003994:	7812      	ldrb	r2, [r2, #0]
 8003996:	701a      	strb	r2, [r3, #0]
	while (found < num)
 8003998:	211f      	movs	r1, #31
 800399a:	187a      	adds	r2, r7, r1
 800399c:	1dfb      	adds	r3, r7, #7
 800399e:	7812      	ldrb	r2, [r2, #0]
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d200      	bcs.n	80039a8 <OW_Search+0x23c>
 80039a6:	e6f5      	b.n	8003794 <OW_Search+0x28>
	}

        return found;
 80039a8:	187b      	adds	r3, r7, r1
 80039aa:	781b      	ldrb	r3, [r3, #0]
}
 80039ac:	0018      	movs	r0, r3
 80039ae:	46bd      	mov	sp, r7
 80039b0:	b009      	add	sp, #36	@ 0x24
 80039b2:	bd90      	pop	{r4, r7, pc}
 80039b4:	0800b198 	.word	0x0800b198

080039b8 <OW_Crc8>:
};

// Compute a Dallas Semiconductor 8 bit CRC. These show up in the ROM
// and the registers.  (Use tiny 2x16 entry CRC table)
uint8_t OW_Crc8(const uint8_t *addr, uint8_t len)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
 80039c0:	000a      	movs	r2, r1
 80039c2:	1cfb      	adds	r3, r7, #3
 80039c4:	701a      	strb	r2, [r3, #0]
	uint8_t crc = 0;
 80039c6:	230f      	movs	r3, #15
 80039c8:	18fb      	adds	r3, r7, r3
 80039ca:	2200      	movs	r2, #0
 80039cc:	701a      	strb	r2, [r3, #0]

	while (len--)
 80039ce:	e01c      	b.n	8003a0a <OW_Crc8+0x52>
	{
		crc = *addr++ ^ crc;  // just re-using crc as intermediate
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	7819      	ldrb	r1, [r3, #0]
 80039d8:	200f      	movs	r0, #15
 80039da:	183b      	adds	r3, r7, r0
 80039dc:	183a      	adds	r2, r7, r0
 80039de:	7812      	ldrb	r2, [r2, #0]
 80039e0:	404a      	eors	r2, r1
 80039e2:	701a      	strb	r2, [r3, #0]
		crc = dscrc2x16_table[crc & 0x0f] ^ dscrc2x16_table[16 + ((crc >> 4) & 0x0f)];
 80039e4:	183b      	adds	r3, r7, r0
 80039e6:	781b      	ldrb	r3, [r3, #0]
 80039e8:	220f      	movs	r2, #15
 80039ea:	4013      	ands	r3, r2
 80039ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003a28 <OW_Crc8+0x70>)
 80039ee:	5cd1      	ldrb	r1, [r2, r3]
 80039f0:	183b      	adds	r3, r7, r0
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	091b      	lsrs	r3, r3, #4
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	001a      	movs	r2, r3
 80039fa:	230f      	movs	r3, #15
 80039fc:	4013      	ands	r3, r2
 80039fe:	3310      	adds	r3, #16
 8003a00:	4a09      	ldr	r2, [pc, #36]	@ (8003a28 <OW_Crc8+0x70>)
 8003a02:	5cd2      	ldrb	r2, [r2, r3]
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	404a      	eors	r2, r1
 8003a08:	701a      	strb	r2, [r3, #0]
	while (len--)
 8003a0a:	1cfb      	adds	r3, r7, #3
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	1cfa      	adds	r2, r7, #3
 8003a10:	1e59      	subs	r1, r3, #1
 8003a12:	7011      	strb	r1, [r2, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1db      	bne.n	80039d0 <OW_Crc8+0x18>
	}

	return crc;
 8003a18:	230f      	movs	r3, #15
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	0018      	movs	r0, r3
 8003a20:	46bd      	mov	sp, r7
 8003a22:	b004      	add	sp, #16
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	46c0      	nop			@ (mov r8, r8)
 8003a28:	0800b454 	.word	0x0800b454

08003a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003a32:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <MX_DMA_Init+0x38>)
 8003a34:	695a      	ldr	r2, [r3, #20]
 8003a36:	4b0b      	ldr	r3, [pc, #44]	@ (8003a64 <MX_DMA_Init+0x38>)
 8003a38:	2101      	movs	r1, #1
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	615a      	str	r2, [r3, #20]
 8003a3e:	4b09      	ldr	r3, [pc, #36]	@ (8003a64 <MX_DMA_Init+0x38>)
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	2201      	movs	r2, #1
 8003a44:	4013      	ands	r3, r2
 8003a46:	607b      	str	r3, [r7, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	200a      	movs	r0, #10
 8003a50:	f000 fdfc 	bl	800464c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003a54:	200a      	movs	r0, #10
 8003a56:	f000 fe0e 	bl	8004676 <HAL_NVIC_EnableIRQ>

}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	40021000 	.word	0x40021000

08003a68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b089      	sub	sp, #36	@ 0x24
 8003a6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a6e:	240c      	movs	r4, #12
 8003a70:	193b      	adds	r3, r7, r4
 8003a72:	0018      	movs	r0, r3
 8003a74:	2314      	movs	r3, #20
 8003a76:	001a      	movs	r2, r3
 8003a78:	2100      	movs	r1, #0
 8003a7a:	f003 ff63 	bl	8007944 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003a80:	695a      	ldr	r2, [r3, #20]
 8003a82:	4b2b      	ldr	r3, [pc, #172]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003a84:	2180      	movs	r1, #128	@ 0x80
 8003a86:	0309      	lsls	r1, r1, #12
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	615a      	str	r2, [r3, #20]
 8003a8c:	4b28      	ldr	r3, [pc, #160]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003a8e:	695a      	ldr	r2, [r3, #20]
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	031b      	lsls	r3, r3, #12
 8003a94:	4013      	ands	r3, r2
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a9a:	4b25      	ldr	r3, [pc, #148]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003a9c:	695a      	ldr	r2, [r3, #20]
 8003a9e:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003aa0:	2180      	movs	r1, #128	@ 0x80
 8003aa2:	03c9      	lsls	r1, r1, #15
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	615a      	str	r2, [r3, #20]
 8003aa8:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003aaa:	695a      	ldr	r2, [r3, #20]
 8003aac:	2380      	movs	r3, #128	@ 0x80
 8003aae:	03db      	lsls	r3, r3, #15
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003ab8:	695a      	ldr	r2, [r3, #20]
 8003aba:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003abc:	2180      	movs	r1, #128	@ 0x80
 8003abe:	0289      	lsls	r1, r1, #10
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	615a      	str	r2, [r3, #20]
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8003b30 <MX_GPIO_Init+0xc8>)
 8003ac6:	695a      	ldr	r2, [r3, #20]
 8003ac8:	2380      	movs	r3, #128	@ 0x80
 8003aca:	029b      	lsls	r3, r3, #10
 8003acc:	4013      	ands	r3, r2
 8003ace:	603b      	str	r3, [r7, #0]
 8003ad0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003ad2:	2390      	movs	r3, #144	@ 0x90
 8003ad4:	05db      	lsls	r3, r3, #23
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	2120      	movs	r1, #32
 8003ada:	0018      	movs	r0, r3
 8003adc:	f001 f936 	bl	8004d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	2280      	movs	r2, #128	@ 0x80
 8003ae4:	0192      	lsls	r2, r2, #6
 8003ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003ae8:	193b      	adds	r3, r7, r4
 8003aea:	4a12      	ldr	r2, [pc, #72]	@ (8003b34 <MX_GPIO_Init+0xcc>)
 8003aec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aee:	193b      	adds	r3, r7, r4
 8003af0:	2200      	movs	r2, #0
 8003af2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	4a10      	ldr	r2, [pc, #64]	@ (8003b38 <MX_GPIO_Init+0xd0>)
 8003af8:	0019      	movs	r1, r3
 8003afa:	0010      	movs	r0, r2
 8003afc:	f000 ffb6 	bl	8004a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003b00:	0021      	movs	r1, r4
 8003b02:	187b      	adds	r3, r7, r1
 8003b04:	2220      	movs	r2, #32
 8003b06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	187b      	adds	r3, r7, r1
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0e:	187b      	adds	r3, r7, r1
 8003b10:	2200      	movs	r2, #0
 8003b12:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b14:	187b      	adds	r3, r7, r1
 8003b16:	2200      	movs	r2, #0
 8003b18:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003b1a:	187a      	adds	r2, r7, r1
 8003b1c:	2390      	movs	r3, #144	@ 0x90
 8003b1e:	05db      	lsls	r3, r3, #23
 8003b20:	0011      	movs	r1, r2
 8003b22:	0018      	movs	r0, r3
 8003b24:	f000 ffa2 	bl	8004a6c <HAL_GPIO_Init>

}
 8003b28:	46c0      	nop			@ (mov r8, r8)
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b009      	add	sp, #36	@ 0x24
 8003b2e:	bd90      	pop	{r4, r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	10210000 	.word	0x10210000
 8003b38:	48000800 	.word	0x48000800

08003b3c <_write>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

// redirect output of fprint() to UART2
int _write(int file, char *ptr, int len)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b084      	sub	sp, #16
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	425b      	negs	r3, r3
 8003b50:	68b9      	ldr	r1, [r7, #8]
 8003b52:	4804      	ldr	r0, [pc, #16]	@ (8003b64 <_write+0x28>)
 8003b54:	f001 fefa 	bl	800594c <HAL_UART_Transmit>
	return len;
 8003b58:	687b      	ldr	r3, [r7, #4]
}
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			@ (mov r8, r8)
 8003b64:	20000290 	.word	0x20000290

08003b68 <printAddress>:

// print device address
void printAddress(CurrentDeviceAddress deviceAddress)
{
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 8003b70:	230f      	movs	r3, #15
 8003b72:	18fb      	adds	r3, r7, r3
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
 8003b78:	e010      	b.n	8003b9c <printAddress+0x34>
	{
		printf("0x%02X", deviceAddress[i]);
 8003b7a:	240f      	movs	r4, #15
 8003b7c:	193b      	adds	r3, r7, r4
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	18d3      	adds	r3, r2, r3
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	001a      	movs	r2, r3
 8003b88:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <printAddress+0x48>)
 8003b8a:	0011      	movs	r1, r2
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f003 fd5b 	bl	8007648 <iprintf>
	for(uint8_t i = 0; i < 8; i++)
 8003b92:	193b      	adds	r3, r7, r4
 8003b94:	781a      	ldrb	r2, [r3, #0]
 8003b96:	193b      	adds	r3, r7, r4
 8003b98:	3201      	adds	r2, #1
 8003b9a:	701a      	strb	r2, [r3, #0]
 8003b9c:	230f      	movs	r3, #15
 8003b9e:	18fb      	adds	r3, r7, r3
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2b07      	cmp	r3, #7
 8003ba4:	d9e9      	bls.n	8003b7a <printAddress+0x12>
	}
}
 8003ba6:	46c0      	nop			@ (mov r8, r8)
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b005      	add	sp, #20
 8003bae:	bd90      	pop	{r4, r7, pc}
 8003bb0:	0800b19c 	.word	0x0800b19c

08003bb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003bb4:	b590      	push	{r4, r7, lr}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003bba:	f000 fc13 	bl	80043e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003bbe:	f000 f935 	bl	8003e2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003bc2:	f7ff ff51 	bl	8003a68 <MX_GPIO_Init>
  MX_DMA_Init();
 8003bc6:	f7ff ff31 	bl	8003a2c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003bca:	f000 facb 	bl	8004164 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8003bce:	f000 fa99 	bl	8004104 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	  // now printf prints to Serial via UART2 because we redefine _write()
	printf("Serial started at %d baud rate.\r\n", huart2.Init.BaudRate);
 8003bd2:	4b81      	ldr	r3, [pc, #516]	@ (8003dd8 <main+0x224>)
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	4b81      	ldr	r3, [pc, #516]	@ (8003ddc <main+0x228>)
 8003bd8:	0011      	movs	r1, r2
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f003 fd34 	bl	8007648 <iprintf>

	printf("[%8lu] Debug UART2 is OK!\r\n", HAL_GetTick());
 8003be0:	f000 fc5a 	bl	8004498 <HAL_GetTick>
 8003be4:	0002      	movs	r2, r0
 8003be6:	4b7e      	ldr	r3, [pc, #504]	@ (8003de0 <main+0x22c>)
 8003be8:	0011      	movs	r1, r2
 8003bea:	0018      	movs	r0, r3
 8003bec:	f003 fd2c 	bl	8007648 <iprintf>

	// start One Wire on UATR1
	OW_Begin(&ow, &huart1);
 8003bf0:	4a7c      	ldr	r2, [pc, #496]	@ (8003de4 <main+0x230>)
 8003bf2:	4b7d      	ldr	r3, [pc, #500]	@ (8003de8 <main+0x234>)
 8003bf4:	0011      	movs	r1, r2
 8003bf6:	0018      	movs	r0, r3
 8003bf8:	f7ff fca3 	bl	8003542 <OW_Begin>
	if(OW_Reset(&ow) == OW_OK)
 8003bfc:	4b7a      	ldr	r3, [pc, #488]	@ (8003de8 <main+0x234>)
 8003bfe:	0018      	movs	r0, r3
 8003c00:	f7ff fcbc 	bl	800357c <OW_Reset>
 8003c04:	0003      	movs	r3, r0
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d108      	bne.n	8003c1c <main+0x68>
	{
	  printf("[%8lu] OneWire devices are present :)\r\n", HAL_GetTick());
 8003c0a:	f000 fc45 	bl	8004498 <HAL_GetTick>
 8003c0e:	0002      	movs	r2, r0
 8003c10:	4b76      	ldr	r3, [pc, #472]	@ (8003dec <main+0x238>)
 8003c12:	0011      	movs	r1, r2
 8003c14:	0018      	movs	r0, r3
 8003c16:	f003 fd17 	bl	8007648 <iprintf>
 8003c1a:	e007      	b.n	8003c2c <main+0x78>
	}
	else
	{
	  printf("[%8lu] OneWire no devices :(\r\n", HAL_GetTick());
 8003c1c:	f000 fc3c 	bl	8004498 <HAL_GetTick>
 8003c20:	0002      	movs	r2, r0
 8003c22:	4b73      	ldr	r3, [pc, #460]	@ (8003df0 <main+0x23c>)
 8003c24:	0011      	movs	r1, r2
 8003c26:	0018      	movs	r0, r3
 8003c28:	f003 fd0e 	bl	8007648 <iprintf>
	}

	DT_SetOneWire(&dt, &ow);
 8003c2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003de8 <main+0x234>)
 8003c2e:	4b71      	ldr	r3, [pc, #452]	@ (8003df4 <main+0x240>)
 8003c30:	0011      	movs	r1, r2
 8003c32:	0018      	movs	r0, r3
 8003c34:	f7fe ff4a 	bl	8002acc <DT_SetOneWire>

	// arrays to hold device address
	CurrentDeviceAddress insideThermometer;

	// locate devices on the bus
	printf("[%8lu] Locating devices...", HAL_GetTick());
 8003c38:	f000 fc2e 	bl	8004498 <HAL_GetTick>
 8003c3c:	0002      	movs	r2, r0
 8003c3e:	4b6e      	ldr	r3, [pc, #440]	@ (8003df8 <main+0x244>)
 8003c40:	0011      	movs	r1, r2
 8003c42:	0018      	movs	r0, r3
 8003c44:	f003 fd00 	bl	8007648 <iprintf>

	DT_Begin(&dt);
 8003c48:	4b6a      	ldr	r3, [pc, #424]	@ (8003df4 <main+0x240>)
 8003c4a:	0018      	movs	r0, r3
 8003c4c:	f7fe ff62 	bl	8002b14 <DT_Begin>

	printf("[%8lu] Found %d devices.\r\n", HAL_GetTick(), DT_GetDeviceCount(&dt));
 8003c50:	f000 fc22 	bl	8004498 <HAL_GetTick>
 8003c54:	0004      	movs	r4, r0
 8003c56:	4b67      	ldr	r3, [pc, #412]	@ (8003df4 <main+0x240>)
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7fe ffe5 	bl	8002c28 <DT_GetDeviceCount>
 8003c5e:	0003      	movs	r3, r0
 8003c60:	001a      	movs	r2, r3
 8003c62:	4b66      	ldr	r3, [pc, #408]	@ (8003dfc <main+0x248>)
 8003c64:	0021      	movs	r1, r4
 8003c66:	0018      	movs	r0, r3
 8003c68:	f003 fcee 	bl	8007648 <iprintf>

	if (!DT_GetAddress(&dt, insideThermometer, 0))
 8003c6c:	0039      	movs	r1, r7
 8003c6e:	4b61      	ldr	r3, [pc, #388]	@ (8003df4 <main+0x240>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	0018      	movs	r0, r3
 8003c74:	f7ff f81c 	bl	8002cb0 <DT_GetAddress>
 8003c78:	0003      	movs	r3, r0
 8003c7a:	001a      	movs	r2, r3
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	4053      	eors	r3, r2
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <main+0xe2>
	  printf("[%8lu] Unable to find address for Device 0\r\n", HAL_GetTick());
 8003c86:	f000 fc07 	bl	8004498 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	4b5c      	ldr	r3, [pc, #368]	@ (8003e00 <main+0x24c>)
 8003c8e:	0011      	movs	r1, r2
 8003c90:	0018      	movs	r0, r3
 8003c92:	f003 fcd9 	bl	8007648 <iprintf>

	printf("[%8lu] Device 0 Address: ", HAL_GetTick());
 8003c96:	f000 fbff 	bl	8004498 <HAL_GetTick>
 8003c9a:	0002      	movs	r2, r0
 8003c9c:	4b59      	ldr	r3, [pc, #356]	@ (8003e04 <main+0x250>)
 8003c9e:	0011      	movs	r1, r2
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f003 fcd1 	bl	8007648 <iprintf>
	printAddress(insideThermometer);
 8003ca6:	003b      	movs	r3, r7
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff ff5d 	bl	8003b68 <printAddress>
	printf("\r\n");
 8003cae:	4b56      	ldr	r3, [pc, #344]	@ (8003e08 <main+0x254>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f003 fd2f 	bl	8007714 <puts>

	// set the resolution to 12 bit (Each Dallas/Maxim device is capable of several different resolutions)
	DT_SetResolution(&dt, insideThermometer, 12, true);
 8003cb6:	0039      	movs	r1, r7
 8003cb8:	484e      	ldr	r0, [pc, #312]	@ (8003df4 <main+0x240>)
 8003cba:	2301      	movs	r3, #1
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	f7ff f957 	bl	8002f70 <DT_SetResolution>

	printf("[%8lu] Device 0 Resolution: %d\r\n", HAL_GetTick(), DT_GetResolution(&dt, insideThermometer));
 8003cc2:	f000 fbe9 	bl	8004498 <HAL_GetTick>
 8003cc6:	0004      	movs	r4, r0
 8003cc8:	003a      	movs	r2, r7
 8003cca:	4b4a      	ldr	r3, [pc, #296]	@ (8003df4 <main+0x240>)
 8003ccc:	0011      	movs	r1, r2
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff f9fc 	bl	80030cc <DT_GetResolution>
 8003cd4:	0003      	movs	r3, r0
 8003cd6:	001a      	movs	r2, r3
 8003cd8:	4b4c      	ldr	r3, [pc, #304]	@ (8003e0c <main+0x258>)
 8003cda:	0021      	movs	r1, r4
 8003cdc:	0018      	movs	r0, r3
 8003cde:	f003 fcb3 	bl	8007648 <iprintf>

	if (!DT_GetAddress(&dt, insideThermometer, 1))
 8003ce2:	0039      	movs	r1, r7
 8003ce4:	4b43      	ldr	r3, [pc, #268]	@ (8003df4 <main+0x240>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7fe ffe1 	bl	8002cb0 <DT_GetAddress>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	4053      	eors	r3, r2
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <main+0x158>
	  printf("[%8lu] Unable to find address for Device 1\r\n", HAL_GetTick());
 8003cfc:	f000 fbcc 	bl	8004498 <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	4b43      	ldr	r3, [pc, #268]	@ (8003e10 <main+0x25c>)
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f003 fc9e 	bl	8007648 <iprintf>

	printf("[%8lu] Device 1 Address: ", HAL_GetTick());
 8003d0c:	f000 fbc4 	bl	8004498 <HAL_GetTick>
 8003d10:	0002      	movs	r2, r0
 8003d12:	4b40      	ldr	r3, [pc, #256]	@ (8003e14 <main+0x260>)
 8003d14:	0011      	movs	r1, r2
 8003d16:	0018      	movs	r0, r3
 8003d18:	f003 fc96 	bl	8007648 <iprintf>
	printAddress(insideThermometer);
 8003d1c:	003b      	movs	r3, r7
 8003d1e:	0018      	movs	r0, r3
 8003d20:	f7ff ff22 	bl	8003b68 <printAddress>
	printf("\r\n");
 8003d24:	4b38      	ldr	r3, [pc, #224]	@ (8003e08 <main+0x254>)
 8003d26:	0018      	movs	r0, r3
 8003d28:	f003 fcf4 	bl	8007714 <puts>

	// set the resolution to 12 bit (Each Dallas/Maxim device is capable of several different resolutions)
	DT_SetResolution(&dt, insideThermometer, 12, true);
 8003d2c:	0039      	movs	r1, r7
 8003d2e:	4831      	ldr	r0, [pc, #196]	@ (8003df4 <main+0x240>)
 8003d30:	2301      	movs	r3, #1
 8003d32:	220c      	movs	r2, #12
 8003d34:	f7ff f91c 	bl	8002f70 <DT_SetResolution>

	printf("[%8lu] Device 1 Resolution: %d\r\n", HAL_GetTick(), DT_GetResolution(&dt, insideThermometer));
 8003d38:	f000 fbae 	bl	8004498 <HAL_GetTick>
 8003d3c:	0004      	movs	r4, r0
 8003d3e:	003a      	movs	r2, r7
 8003d40:	4b2c      	ldr	r3, [pc, #176]	@ (8003df4 <main+0x240>)
 8003d42:	0011      	movs	r1, r2
 8003d44:	0018      	movs	r0, r3
 8003d46:	f7ff f9c1 	bl	80030cc <DT_GetResolution>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	001a      	movs	r2, r3
 8003d4e:	4b32      	ldr	r3, [pc, #200]	@ (8003e18 <main+0x264>)
 8003d50:	0021      	movs	r1, r4
 8003d52:	0018      	movs	r0, r3
 8003d54:	f003 fc78 	bl	8007648 <iprintf>

    /* USER CODE BEGIN 3 */

	// call DT_RequestTemperatures(&dt) to issue a global temperature
	// request to all devices on the bus
	printf("[%8lu] Requesting temperatures...", HAL_GetTick());
 8003d58:	f000 fb9e 	bl	8004498 <HAL_GetTick>
 8003d5c:	0002      	movs	r2, r0
 8003d5e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e1c <main+0x268>)
 8003d60:	0011      	movs	r1, r2
 8003d62:	0018      	movs	r0, r3
 8003d64:	f003 fc70 	bl	8007648 <iprintf>
	DT_RequestTemperatures(&dt); // Send the command to get temperatures
 8003d68:	4b22      	ldr	r3, [pc, #136]	@ (8003df4 <main+0x240>)
 8003d6a:	0018      	movs	r0, r3
 8003d6c:	f7ff f9f6 	bl	800315c <DT_RequestTemperatures>
	printf("\r\n[%8lu] DONE\r\n", HAL_GetTick());
 8003d70:	f000 fb92 	bl	8004498 <HAL_GetTick>
 8003d74:	0002      	movs	r2, r0
 8003d76:	4b2a      	ldr	r3, [pc, #168]	@ (8003e20 <main+0x26c>)
 8003d78:	0011      	movs	r1, r2
 8003d7a:	0018      	movs	r0, r3
 8003d7c:	f003 fc64 	bl	8007648 <iprintf>
	// After we got the temperatures, we can print them here.
	// We use the function ByIndex, and as an example get the temperature from the first sensor only.
	printf("[%8lu] Temperature for the device 1 (index 0) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 0));
 8003d80:	f000 fb8a 	bl	8004498 <HAL_GetTick>
 8003d84:	0004      	movs	r4, r0
 8003d86:	4b1b      	ldr	r3, [pc, #108]	@ (8003df4 <main+0x240>)
 8003d88:	2100      	movs	r1, #0
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f7ff fa94 	bl	80032b8 <DT_GetTempCByIndex>
 8003d90:	1c03      	adds	r3, r0, #0
 8003d92:	1c18      	adds	r0, r3, #0
 8003d94:	f7fe fd40 	bl	8002818 <__aeabi_f2d>
 8003d98:	0002      	movs	r2, r0
 8003d9a:	000b      	movs	r3, r1
 8003d9c:	4821      	ldr	r0, [pc, #132]	@ (8003e24 <main+0x270>)
 8003d9e:	0021      	movs	r1, r4
 8003da0:	f003 fc52 	bl	8007648 <iprintf>
	printf("[%8lu] Temperature for the device 2 (index 1) is: %.2f\r\n", HAL_GetTick(), DT_GetTempCByIndex(&dt, 1));
 8003da4:	f000 fb78 	bl	8004498 <HAL_GetTick>
 8003da8:	0004      	movs	r4, r0
 8003daa:	4b12      	ldr	r3, [pc, #72]	@ (8003df4 <main+0x240>)
 8003dac:	2101      	movs	r1, #1
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7ff fa82 	bl	80032b8 <DT_GetTempCByIndex>
 8003db4:	1c03      	adds	r3, r0, #0
 8003db6:	1c18      	adds	r0, r3, #0
 8003db8:	f7fe fd2e 	bl	8002818 <__aeabi_f2d>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	000b      	movs	r3, r1
 8003dc0:	4819      	ldr	r0, [pc, #100]	@ (8003e28 <main+0x274>)
 8003dc2:	0021      	movs	r1, r4
 8003dc4:	f003 fc40 	bl	8007648 <iprintf>
	HAL_Delay(2000);
 8003dc8:	23fa      	movs	r3, #250	@ 0xfa
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 fb6d 	bl	80044ac <HAL_Delay>
	printf("[%8lu] Requesting temperatures...", HAL_GetTick());
 8003dd2:	46c0      	nop			@ (mov r8, r8)
 8003dd4:	e7c0      	b.n	8003d58 <main+0x1a4>
 8003dd6:	46c0      	nop			@ (mov r8, r8)
 8003dd8:	20000290 	.word	0x20000290
 8003ddc:	0800b1a4 	.word	0x0800b1a4
 8003de0:	0800b1c8 	.word	0x0800b1c8
 8003de4:	20000210 	.word	0x20000210
 8003de8:	200001f0 	.word	0x200001f0
 8003dec:	0800b1e4 	.word	0x0800b1e4
 8003df0:	0800b20c 	.word	0x0800b20c
 8003df4:	20000200 	.word	0x20000200
 8003df8:	0800b22c 	.word	0x0800b22c
 8003dfc:	0800b248 	.word	0x0800b248
 8003e00:	0800b264 	.word	0x0800b264
 8003e04:	0800b294 	.word	0x0800b294
 8003e08:	0800b2b0 	.word	0x0800b2b0
 8003e0c:	0800b2b4 	.word	0x0800b2b4
 8003e10:	0800b2d8 	.word	0x0800b2d8
 8003e14:	0800b308 	.word	0x0800b308
 8003e18:	0800b324 	.word	0x0800b324
 8003e1c:	0800b348 	.word	0x0800b348
 8003e20:	0800b36c 	.word	0x0800b36c
 8003e24:	0800b37c 	.word	0x0800b37c
 8003e28:	0800b3b8 	.word	0x0800b3b8

08003e2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003e2c:	b590      	push	{r4, r7, lr}
 8003e2e:	b095      	sub	sp, #84	@ 0x54
 8003e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003e32:	2420      	movs	r4, #32
 8003e34:	193b      	adds	r3, r7, r4
 8003e36:	0018      	movs	r0, r3
 8003e38:	2330      	movs	r3, #48	@ 0x30
 8003e3a:	001a      	movs	r2, r3
 8003e3c:	2100      	movs	r1, #0
 8003e3e:	f003 fd81 	bl	8007944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003e42:	2310      	movs	r3, #16
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	0018      	movs	r0, r3
 8003e48:	2310      	movs	r3, #16
 8003e4a:	001a      	movs	r2, r3
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	f003 fd79 	bl	8007944 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003e52:	003b      	movs	r3, r7
 8003e54:	0018      	movs	r0, r3
 8003e56:	2310      	movs	r3, #16
 8003e58:	001a      	movs	r2, r3
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	f003 fd72 	bl	8007944 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003e60:	0021      	movs	r1, r4
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2202      	movs	r2, #2
 8003e66:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2210      	movs	r2, #16
 8003e72:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2202      	movs	r2, #2
 8003e78:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003e80:	187b      	adds	r3, r7, r1
 8003e82:	22a0      	movs	r2, #160	@ 0xa0
 8003e84:	0392      	lsls	r2, r2, #14
 8003e86:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003e88:	187b      	adds	r3, r7, r1
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003e8e:	187b      	adds	r3, r7, r1
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 ff79 	bl	8004d88 <HAL_RCC_OscConfig>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d001      	beq.n	8003e9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8003e9a:	f000 f828 	bl	8003eee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003e9e:	2110      	movs	r1, #16
 8003ea0:	187b      	adds	r3, r7, r1
 8003ea2:	2207      	movs	r2, #7
 8003ea4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003eac:	187b      	adds	r3, r7, r1
 8003eae:	2200      	movs	r2, #0
 8003eb0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003eb2:	187b      	adds	r3, r7, r1
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003eb8:	187b      	adds	r3, r7, r1
 8003eba:	2101      	movs	r1, #1
 8003ebc:	0018      	movs	r0, r3
 8003ebe:	f001 fa7d 	bl	80053bc <HAL_RCC_ClockConfig>
 8003ec2:	1e03      	subs	r3, r0, #0
 8003ec4:	d001      	beq.n	8003eca <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8003ec6:	f000 f812 	bl	8003eee <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003eca:	003b      	movs	r3, r7
 8003ecc:	2201      	movs	r2, #1
 8003ece:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003ed0:	003b      	movs	r3, r7
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ed6:	003b      	movs	r3, r7
 8003ed8:	0018      	movs	r0, r3
 8003eda:	f001 fbc1 	bl	8005660 <HAL_RCCEx_PeriphCLKConfig>
 8003ede:	1e03      	subs	r3, r0, #0
 8003ee0:	d001      	beq.n	8003ee6 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8003ee2:	f000 f804 	bl	8003eee <Error_Handler>
  }
}
 8003ee6:	46c0      	nop			@ (mov r8, r8)
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	b015      	add	sp, #84	@ 0x54
 8003eec:	bd90      	pop	{r4, r7, pc}

08003eee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ef2:	b672      	cpsid	i
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ef6:	46c0      	nop			@ (mov r8, r8)
 8003ef8:	e7fd      	b.n	8003ef6 <Error_Handler+0x8>
	...

08003efc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f02:	4b0f      	ldr	r3, [pc, #60]	@ (8003f40 <HAL_MspInit+0x44>)
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	4b0e      	ldr	r3, [pc, #56]	@ (8003f40 <HAL_MspInit+0x44>)
 8003f08:	2101      	movs	r1, #1
 8003f0a:	430a      	orrs	r2, r1
 8003f0c:	619a      	str	r2, [r3, #24]
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003f40 <HAL_MspInit+0x44>)
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2201      	movs	r2, #1
 8003f14:	4013      	ands	r3, r2
 8003f16:	607b      	str	r3, [r7, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f1a:	4b09      	ldr	r3, [pc, #36]	@ (8003f40 <HAL_MspInit+0x44>)
 8003f1c:	69da      	ldr	r2, [r3, #28]
 8003f1e:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <HAL_MspInit+0x44>)
 8003f20:	2180      	movs	r1, #128	@ 0x80
 8003f22:	0549      	lsls	r1, r1, #21
 8003f24:	430a      	orrs	r2, r1
 8003f26:	61da      	str	r2, [r3, #28]
 8003f28:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <HAL_MspInit+0x44>)
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	2380      	movs	r3, #128	@ 0x80
 8003f2e:	055b      	lsls	r3, r3, #21
 8003f30:	4013      	ands	r3, r2
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f36:	46c0      	nop			@ (mov r8, r8)
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b002      	add	sp, #8
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			@ (mov r8, r8)
 8003f40:	40021000 	.word	0x40021000

08003f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f48:	46c0      	nop			@ (mov r8, r8)
 8003f4a:	e7fd      	b.n	8003f48 <NMI_Handler+0x4>

08003f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f50:	46c0      	nop			@ (mov r8, r8)
 8003f52:	e7fd      	b.n	8003f50 <HardFault_Handler+0x4>

08003f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003f58:	46c0      	nop			@ (mov r8, r8)
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f6c:	f000 fa82 	bl	8004474 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f70:	46c0      	nop			@ (mov r8, r8)
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
	...

08003f78 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <DMA1_Channel2_3_IRQHandler+0x1c>)
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f000 fc89 	bl	8004896 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003f84:	4b04      	ldr	r3, [pc, #16]	@ (8003f98 <DMA1_Channel2_3_IRQHandler+0x20>)
 8003f86:	0018      	movs	r0, r3
 8003f88:	f000 fc85 	bl	8004896 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			@ (mov r8, r8)
 8003f94:	20000354 	.word	0x20000354
 8003f98:	20000310 	.word	0x20000310

08003f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <USART1_IRQHandler+0x14>)
 8003fa2:	0018      	movs	r0, r3
 8003fa4:	f001 fea2 	bl	8005cec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003fa8:	46c0      	nop			@ (mov r8, r8)
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	46c0      	nop			@ (mov r8, r8)
 8003fb0:	20000210 	.word	0x20000210

08003fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  return 1;
 8003fb8:	2301      	movs	r3, #1
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}

08003fc0 <_kill>:

int _kill(int pid, int sig)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fca:	f003 fd15 	bl	80079f8 <__errno>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	2216      	movs	r2, #22
 8003fd2:	601a      	str	r2, [r3, #0]
  return -1;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	425b      	negs	r3, r3
}
 8003fd8:	0018      	movs	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	b002      	add	sp, #8
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <_exit>:

void _exit (int status)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b082      	sub	sp, #8
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fe8:	2301      	movs	r3, #1
 8003fea:	425a      	negs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	0011      	movs	r1, r2
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff ffe5 	bl	8003fc0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ff6:	46c0      	nop			@ (mov r8, r8)
 8003ff8:	e7fd      	b.n	8003ff6 <_exit+0x16>

08003ffa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]
 800400a:	e00a      	b.n	8004022 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800400c:	e000      	b.n	8004010 <_read+0x16>
 800400e:	bf00      	nop
 8004010:	0001      	movs	r1, r0
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	60ba      	str	r2, [r7, #8]
 8004018:	b2ca      	uxtb	r2, r1
 800401a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3301      	adds	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	dbf0      	blt.n	800400c <_read+0x12>
  }

  return len;
 800402a:	687b      	ldr	r3, [r7, #4]
}
 800402c:	0018      	movs	r0, r3
 800402e:	46bd      	mov	sp, r7
 8004030:	b006      	add	sp, #24
 8004032:	bd80      	pop	{r7, pc}

08004034 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800403c:	2301      	movs	r3, #1
 800403e:	425b      	negs	r3, r3
}
 8004040:	0018      	movs	r0, r3
 8004042:	46bd      	mov	sp, r7
 8004044:	b002      	add	sp, #8
 8004046:	bd80      	pop	{r7, pc}

08004048 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2280      	movs	r2, #128	@ 0x80
 8004056:	0192      	lsls	r2, r2, #6
 8004058:	605a      	str	r2, [r3, #4]
  return 0;
 800405a:	2300      	movs	r3, #0
}
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <_isatty>:

int _isatty(int file)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800406c:	2301      	movs	r3, #1
}
 800406e:	0018      	movs	r0, r3
 8004070:	46bd      	mov	sp, r7
 8004072:	b002      	add	sp, #8
 8004074:	bd80      	pop	{r7, pc}

08004076 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004076:	b580      	push	{r7, lr}
 8004078:	b084      	sub	sp, #16
 800407a:	af00      	add	r7, sp, #0
 800407c:	60f8      	str	r0, [r7, #12]
 800407e:	60b9      	str	r1, [r7, #8]
 8004080:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004082:	2300      	movs	r3, #0
}
 8004084:	0018      	movs	r0, r3
 8004086:	46bd      	mov	sp, r7
 8004088:	b004      	add	sp, #16
 800408a:	bd80      	pop	{r7, pc}

0800408c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004094:	4a14      	ldr	r2, [pc, #80]	@ (80040e8 <_sbrk+0x5c>)
 8004096:	4b15      	ldr	r3, [pc, #84]	@ (80040ec <_sbrk+0x60>)
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a0:	4b13      	ldr	r3, [pc, #76]	@ (80040f0 <_sbrk+0x64>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d102      	bne.n	80040ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a8:	4b11      	ldr	r3, [pc, #68]	@ (80040f0 <_sbrk+0x64>)
 80040aa:	4a12      	ldr	r2, [pc, #72]	@ (80040f4 <_sbrk+0x68>)
 80040ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040ae:	4b10      	ldr	r3, [pc, #64]	@ (80040f0 <_sbrk+0x64>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	18d3      	adds	r3, r2, r3
 80040b6:	693a      	ldr	r2, [r7, #16]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d207      	bcs.n	80040cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040bc:	f003 fc9c 	bl	80079f8 <__errno>
 80040c0:	0003      	movs	r3, r0
 80040c2:	220c      	movs	r2, #12
 80040c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040c6:	2301      	movs	r3, #1
 80040c8:	425b      	negs	r3, r3
 80040ca:	e009      	b.n	80040e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040cc:	4b08      	ldr	r3, [pc, #32]	@ (80040f0 <_sbrk+0x64>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040d2:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <_sbrk+0x64>)
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	18d2      	adds	r2, r2, r3
 80040da:	4b05      	ldr	r3, [pc, #20]	@ (80040f0 <_sbrk+0x64>)
 80040dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80040de:	68fb      	ldr	r3, [r7, #12]
}
 80040e0:	0018      	movs	r0, r3
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b006      	add	sp, #24
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	20002000 	.word	0x20002000
 80040ec:	00000400 	.word	0x00000400
 80040f0:	2000020c 	.word	0x2000020c
 80040f4:	200004e8 	.word	0x200004e8

080040f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80040fc:	46c0      	nop			@ (mov r8, r8)
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004108:	4b14      	ldr	r3, [pc, #80]	@ (800415c <MX_USART1_UART_Init+0x58>)
 800410a:	4a15      	ldr	r2, [pc, #84]	@ (8004160 <MX_USART1_UART_Init+0x5c>)
 800410c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800410e:	4b13      	ldr	r3, [pc, #76]	@ (800415c <MX_USART1_UART_Init+0x58>)
 8004110:	2296      	movs	r2, #150	@ 0x96
 8004112:	0212      	lsls	r2, r2, #8
 8004114:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <MX_USART1_UART_Init+0x58>)
 8004118:	2200      	movs	r2, #0
 800411a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800411c:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <MX_USART1_UART_Init+0x58>)
 800411e:	2200      	movs	r2, #0
 8004120:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004122:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <MX_USART1_UART_Init+0x58>)
 8004124:	2200      	movs	r2, #0
 8004126:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004128:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <MX_USART1_UART_Init+0x58>)
 800412a:	220c      	movs	r2, #12
 800412c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800412e:	4b0b      	ldr	r3, [pc, #44]	@ (800415c <MX_USART1_UART_Init+0x58>)
 8004130:	2200      	movs	r2, #0
 8004132:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004134:	4b09      	ldr	r3, [pc, #36]	@ (800415c <MX_USART1_UART_Init+0x58>)
 8004136:	2200      	movs	r2, #0
 8004138:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800413a:	4b08      	ldr	r3, [pc, #32]	@ (800415c <MX_USART1_UART_Init+0x58>)
 800413c:	2200      	movs	r2, #0
 800413e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004140:	4b06      	ldr	r3, [pc, #24]	@ (800415c <MX_USART1_UART_Init+0x58>)
 8004142:	2200      	movs	r2, #0
 8004144:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8004146:	4b05      	ldr	r3, [pc, #20]	@ (800415c <MX_USART1_UART_Init+0x58>)
 8004148:	0018      	movs	r0, r3
 800414a:	f001 fbab 	bl	80058a4 <HAL_HalfDuplex_Init>
 800414e:	1e03      	subs	r3, r0, #0
 8004150:	d001      	beq.n	8004156 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004152:	f7ff fecc 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004156:	46c0      	nop			@ (mov r8, r8)
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000210 	.word	0x20000210
 8004160:	40013800 	.word	0x40013800

08004164 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004168:	4b14      	ldr	r3, [pc, #80]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 800416a:	4a15      	ldr	r2, [pc, #84]	@ (80041c0 <MX_USART2_UART_Init+0x5c>)
 800416c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800416e:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 8004170:	2296      	movs	r2, #150	@ 0x96
 8004172:	0212      	lsls	r2, r2, #8
 8004174:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004176:	4b11      	ldr	r3, [pc, #68]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800417c:	4b0f      	ldr	r3, [pc, #60]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004182:	4b0e      	ldr	r3, [pc, #56]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 8004184:	2200      	movs	r2, #0
 8004186:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004188:	4b0c      	ldr	r3, [pc, #48]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 800418a:	220c      	movs	r2, #12
 800418c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800418e:	4b0b      	ldr	r3, [pc, #44]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 8004190:	2200      	movs	r2, #0
 8004192:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004194:	4b09      	ldr	r3, [pc, #36]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 8004196:	2200      	movs	r2, #0
 8004198:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800419a:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 800419c:	2200      	movs	r2, #0
 800419e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80041a0:	4b06      	ldr	r3, [pc, #24]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80041a6:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <MX_USART2_UART_Init+0x58>)
 80041a8:	0018      	movs	r0, r3
 80041aa:	f001 fb27 	bl	80057fc <HAL_UART_Init>
 80041ae:	1e03      	subs	r3, r0, #0
 80041b0:	d001      	beq.n	80041b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80041b2:	f7ff fe9c 	bl	8003eee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80041b6:	46c0      	nop			@ (mov r8, r8)
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000290 	.word	0x20000290
 80041c0:	40004400 	.word	0x40004400

080041c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b08d      	sub	sp, #52	@ 0x34
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041cc:	241c      	movs	r4, #28
 80041ce:	193b      	adds	r3, r7, r4
 80041d0:	0018      	movs	r0, r3
 80041d2:	2314      	movs	r3, #20
 80041d4:	001a      	movs	r2, r3
 80041d6:	2100      	movs	r1, #0
 80041d8:	f003 fbb4 	bl	8007944 <memset>
  if(uartHandle->Instance==USART1)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a64      	ldr	r2, [pc, #400]	@ (8004374 <HAL_UART_MspInit+0x1b0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d000      	beq.n	80041e8 <HAL_UART_MspInit+0x24>
 80041e6:	e088      	b.n	80042fa <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041e8:	4b63      	ldr	r3, [pc, #396]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 80041ea:	699a      	ldr	r2, [r3, #24]
 80041ec:	4b62      	ldr	r3, [pc, #392]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 80041ee:	2180      	movs	r1, #128	@ 0x80
 80041f0:	01c9      	lsls	r1, r1, #7
 80041f2:	430a      	orrs	r2, r1
 80041f4:	619a      	str	r2, [r3, #24]
 80041f6:	4b60      	ldr	r3, [pc, #384]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	01db      	lsls	r3, r3, #7
 80041fe:	4013      	ands	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
 8004202:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004204:	4b5c      	ldr	r3, [pc, #368]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 8004206:	695a      	ldr	r2, [r3, #20]
 8004208:	4b5b      	ldr	r3, [pc, #364]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	0289      	lsls	r1, r1, #10
 800420e:	430a      	orrs	r2, r1
 8004210:	615a      	str	r2, [r3, #20]
 8004212:	4b59      	ldr	r3, [pc, #356]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	2380      	movs	r3, #128	@ 0x80
 8004218:	029b      	lsls	r3, r3, #10
 800421a:	4013      	ands	r3, r2
 800421c:	617b      	str	r3, [r7, #20]
 800421e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004220:	193b      	adds	r3, r7, r4
 8004222:	2280      	movs	r2, #128	@ 0x80
 8004224:	0092      	lsls	r2, r2, #2
 8004226:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004228:	0021      	movs	r1, r4
 800422a:	187b      	adds	r3, r7, r1
 800422c:	2212      	movs	r2, #18
 800422e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004230:	187b      	adds	r3, r7, r1
 8004232:	2201      	movs	r2, #1
 8004234:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004236:	187b      	adds	r3, r7, r1
 8004238:	2203      	movs	r2, #3
 800423a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800423c:	187b      	adds	r3, r7, r1
 800423e:	2201      	movs	r2, #1
 8004240:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004242:	187a      	adds	r2, r7, r1
 8004244:	2390      	movs	r3, #144	@ 0x90
 8004246:	05db      	lsls	r3, r3, #23
 8004248:	0011      	movs	r1, r2
 800424a:	0018      	movs	r0, r3
 800424c:	f000 fc0e 	bl	8004a6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8004250:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004252:	4a4b      	ldr	r2, [pc, #300]	@ (8004380 <HAL_UART_MspInit+0x1bc>)
 8004254:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004256:	4b49      	ldr	r3, [pc, #292]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004258:	2200      	movs	r2, #0
 800425a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800425c:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 800425e:	2200      	movs	r2, #0
 8004260:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004262:	4b46      	ldr	r3, [pc, #280]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004264:	2280      	movs	r2, #128	@ 0x80
 8004266:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004268:	4b44      	ldr	r3, [pc, #272]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 800426a:	2200      	movs	r2, #0
 800426c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800426e:	4b43      	ldr	r3, [pc, #268]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004270:	2200      	movs	r2, #0
 8004272:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004274:	4b41      	ldr	r3, [pc, #260]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004276:	2200      	movs	r2, #0
 8004278:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800427a:	4b40      	ldr	r3, [pc, #256]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 800427c:	2200      	movs	r2, #0
 800427e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004280:	4b3e      	ldr	r3, [pc, #248]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004282:	0018      	movs	r0, r3
 8004284:	f000 fa14 	bl	80046b0 <HAL_DMA_Init>
 8004288:	1e03      	subs	r3, r0, #0
 800428a:	d001      	beq.n	8004290 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800428c:	f7ff fe2f 	bl	8003eee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a3a      	ldr	r2, [pc, #232]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004294:	66da      	str	r2, [r3, #108]	@ 0x6c
 8004296:	4b39      	ldr	r3, [pc, #228]	@ (800437c <HAL_UART_MspInit+0x1b8>)
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800429c:	4b39      	ldr	r3, [pc, #228]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 800429e:	4a3a      	ldr	r2, [pc, #232]	@ (8004388 <HAL_UART_MspInit+0x1c4>)
 80042a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042a2:	4b38      	ldr	r3, [pc, #224]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042a4:	2210      	movs	r2, #16
 80042a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80042a8:	4b36      	ldr	r3, [pc, #216]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042ae:	4b35      	ldr	r3, [pc, #212]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042b0:	2280      	movs	r2, #128	@ 0x80
 80042b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80042b4:	4b33      	ldr	r3, [pc, #204]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042b6:	2200      	movs	r2, #0
 80042b8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80042ba:	4b32      	ldr	r3, [pc, #200]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042bc:	2200      	movs	r2, #0
 80042be:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80042c0:	4b30      	ldr	r3, [pc, #192]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80042c6:	4b2f      	ldr	r3, [pc, #188]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042c8:	2200      	movs	r2, #0
 80042ca:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80042cc:	4b2d      	ldr	r3, [pc, #180]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042ce:	0018      	movs	r0, r3
 80042d0:	f000 f9ee 	bl	80046b0 <HAL_DMA_Init>
 80042d4:	1e03      	subs	r3, r0, #0
 80042d6:	d001      	beq.n	80042dc <HAL_UART_MspInit+0x118>
    {
      Error_Handler();
 80042d8:	f7ff fe09 	bl	8003eee <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a29      	ldr	r2, [pc, #164]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042e0:	669a      	str	r2, [r3, #104]	@ 0x68
 80042e2:	4b28      	ldr	r3, [pc, #160]	@ (8004384 <HAL_UART_MspInit+0x1c0>)
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80042e8:	2200      	movs	r2, #0
 80042ea:	2100      	movs	r1, #0
 80042ec:	201b      	movs	r0, #27
 80042ee:	f000 f9ad 	bl	800464c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80042f2:	201b      	movs	r0, #27
 80042f4:	f000 f9bf 	bl	8004676 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80042f8:	e037      	b.n	800436a <HAL_UART_MspInit+0x1a6>
  else if(uartHandle->Instance==USART2)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a23      	ldr	r2, [pc, #140]	@ (800438c <HAL_UART_MspInit+0x1c8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d132      	bne.n	800436a <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004304:	4b1c      	ldr	r3, [pc, #112]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 8004306:	69da      	ldr	r2, [r3, #28]
 8004308:	4b1b      	ldr	r3, [pc, #108]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 800430a:	2180      	movs	r1, #128	@ 0x80
 800430c:	0289      	lsls	r1, r1, #10
 800430e:	430a      	orrs	r2, r1
 8004310:	61da      	str	r2, [r3, #28]
 8004312:	4b19      	ldr	r3, [pc, #100]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	2380      	movs	r3, #128	@ 0x80
 8004318:	029b      	lsls	r3, r3, #10
 800431a:	4013      	ands	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
 800431e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004320:	4b15      	ldr	r3, [pc, #84]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 8004326:	2180      	movs	r1, #128	@ 0x80
 8004328:	0289      	lsls	r1, r1, #10
 800432a:	430a      	orrs	r2, r1
 800432c:	615a      	str	r2, [r3, #20]
 800432e:	4b12      	ldr	r3, [pc, #72]	@ (8004378 <HAL_UART_MspInit+0x1b4>)
 8004330:	695a      	ldr	r2, [r3, #20]
 8004332:	2380      	movs	r3, #128	@ 0x80
 8004334:	029b      	lsls	r3, r3, #10
 8004336:	4013      	ands	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]
 800433a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800433c:	211c      	movs	r1, #28
 800433e:	187b      	adds	r3, r7, r1
 8004340:	220c      	movs	r2, #12
 8004342:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004344:	187b      	adds	r3, r7, r1
 8004346:	2202      	movs	r2, #2
 8004348:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	187b      	adds	r3, r7, r1
 800434c:	2200      	movs	r2, #0
 800434e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004350:	187b      	adds	r3, r7, r1
 8004352:	2200      	movs	r2, #0
 8004354:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004356:	187b      	adds	r3, r7, r1
 8004358:	2201      	movs	r2, #1
 800435a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800435c:	187a      	adds	r2, r7, r1
 800435e:	2390      	movs	r3, #144	@ 0x90
 8004360:	05db      	lsls	r3, r3, #23
 8004362:	0011      	movs	r1, r2
 8004364:	0018      	movs	r0, r3
 8004366:	f000 fb81 	bl	8004a6c <HAL_GPIO_Init>
}
 800436a:	46c0      	nop			@ (mov r8, r8)
 800436c:	46bd      	mov	sp, r7
 800436e:	b00d      	add	sp, #52	@ 0x34
 8004370:	bd90      	pop	{r4, r7, pc}
 8004372:	46c0      	nop			@ (mov r8, r8)
 8004374:	40013800 	.word	0x40013800
 8004378:	40021000 	.word	0x40021000
 800437c:	20000310 	.word	0x20000310
 8004380:	40020030 	.word	0x40020030
 8004384:	20000354 	.word	0x20000354
 8004388:	4002001c 	.word	0x4002001c
 800438c:	40004400 	.word	0x40004400

08004390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004390:	480d      	ldr	r0, [pc, #52]	@ (80043c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004392:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004394:	480d      	ldr	r0, [pc, #52]	@ (80043cc <LoopForever+0x6>)
  ldr r1, =_edata
 8004396:	490e      	ldr	r1, [pc, #56]	@ (80043d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004398:	4a0e      	ldr	r2, [pc, #56]	@ (80043d4 <LoopForever+0xe>)
  movs r3, #0
 800439a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800439c:	e002      	b.n	80043a4 <LoopCopyDataInit>

0800439e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800439e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043a2:	3304      	adds	r3, #4

080043a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043a8:	d3f9      	bcc.n	800439e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043aa:	4a0b      	ldr	r2, [pc, #44]	@ (80043d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80043ac:	4c0b      	ldr	r4, [pc, #44]	@ (80043dc <LoopForever+0x16>)
  movs r3, #0
 80043ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043b0:	e001      	b.n	80043b6 <LoopFillZerobss>

080043b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043b4:	3204      	adds	r2, #4

080043b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043b8:	d3fb      	bcc.n	80043b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80043ba:	f7ff fe9d 	bl	80040f8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80043be:	f003 fb21 	bl	8007a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80043c2:	f7ff fbf7 	bl	8003bb4 <main>

080043c6 <LoopForever>:

LoopForever:
    b LoopForever
 80043c6:	e7fe      	b.n	80043c6 <LoopForever>
  ldr   r0, =_estack
 80043c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80043cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80043d4:	0800b8bc 	.word	0x0800b8bc
  ldr r2, =_sbss
 80043d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80043dc:	200004e8 	.word	0x200004e8

080043e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80043e0:	e7fe      	b.n	80043e0 <ADC1_IRQHandler>
	...

080043e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043e8:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <HAL_Init+0x24>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <HAL_Init+0x24>)
 80043ee:	2110      	movs	r1, #16
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80043f4:	2000      	movs	r0, #0
 80043f6:	f000 f809 	bl	800440c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043fa:	f7ff fd7f 	bl	8003efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043fe:	2300      	movs	r3, #0
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	46c0      	nop			@ (mov r8, r8)
 8004408:	40022000 	.word	0x40022000

0800440c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004414:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <HAL_InitTick+0x5c>)
 8004416:	681c      	ldr	r4, [r3, #0]
 8004418:	4b14      	ldr	r3, [pc, #80]	@ (800446c <HAL_InitTick+0x60>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	0019      	movs	r1, r3
 800441e:	23fa      	movs	r3, #250	@ 0xfa
 8004420:	0098      	lsls	r0, r3, #2
 8004422:	f7fb fe8d 	bl	8000140 <__udivsi3>
 8004426:	0003      	movs	r3, r0
 8004428:	0019      	movs	r1, r3
 800442a:	0020      	movs	r0, r4
 800442c:	f7fb fe88 	bl	8000140 <__udivsi3>
 8004430:	0003      	movs	r3, r0
 8004432:	0018      	movs	r0, r3
 8004434:	f000 f92f 	bl	8004696 <HAL_SYSTICK_Config>
 8004438:	1e03      	subs	r3, r0, #0
 800443a:	d001      	beq.n	8004440 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e00f      	b.n	8004460 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d80b      	bhi.n	800445e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	2301      	movs	r3, #1
 800444a:	425b      	negs	r3, r3
 800444c:	2200      	movs	r2, #0
 800444e:	0018      	movs	r0, r3
 8004450:	f000 f8fc 	bl	800464c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004454:	4b06      	ldr	r3, [pc, #24]	@ (8004470 <HAL_InitTick+0x64>)
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	e000      	b.n	8004460 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
}
 8004460:	0018      	movs	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	b003      	add	sp, #12
 8004466:	bd90      	pop	{r4, r7, pc}
 8004468:	20000000 	.word	0x20000000
 800446c:	20000008 	.word	0x20000008
 8004470:	20000004 	.word	0x20000004

08004474 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004478:	4b05      	ldr	r3, [pc, #20]	@ (8004490 <HAL_IncTick+0x1c>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	001a      	movs	r2, r3
 800447e:	4b05      	ldr	r3, [pc, #20]	@ (8004494 <HAL_IncTick+0x20>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	18d2      	adds	r2, r2, r3
 8004484:	4b03      	ldr	r3, [pc, #12]	@ (8004494 <HAL_IncTick+0x20>)
 8004486:	601a      	str	r2, [r3, #0]
}
 8004488:	46c0      	nop			@ (mov r8, r8)
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	46c0      	nop			@ (mov r8, r8)
 8004490:	20000008 	.word	0x20000008
 8004494:	20000398 	.word	0x20000398

08004498 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  return uwTick;
 800449c:	4b02      	ldr	r3, [pc, #8]	@ (80044a8 <HAL_GetTick+0x10>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	0018      	movs	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	46c0      	nop			@ (mov r8, r8)
 80044a8:	20000398 	.word	0x20000398

080044ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044b4:	f7ff fff0 	bl	8004498 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	d005      	beq.n	80044d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044c6:	4b0a      	ldr	r3, [pc, #40]	@ (80044f0 <HAL_Delay+0x44>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	001a      	movs	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	189b      	adds	r3, r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80044d2:	46c0      	nop			@ (mov r8, r8)
 80044d4:	f7ff ffe0 	bl	8004498 <HAL_GetTick>
 80044d8:	0002      	movs	r2, r0
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d8f7      	bhi.n	80044d4 <HAL_Delay+0x28>
  {
  }
}
 80044e4:	46c0      	nop			@ (mov r8, r8)
 80044e6:	46c0      	nop			@ (mov r8, r8)
 80044e8:	46bd      	mov	sp, r7
 80044ea:	b004      	add	sp, #16
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	46c0      	nop			@ (mov r8, r8)
 80044f0:	20000008 	.word	0x20000008

080044f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	0002      	movs	r2, r0
 80044fc:	1dfb      	adds	r3, r7, #7
 80044fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004500:	1dfb      	adds	r3, r7, #7
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	2b7f      	cmp	r3, #127	@ 0x7f
 8004506:	d809      	bhi.n	800451c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004508:	1dfb      	adds	r3, r7, #7
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	001a      	movs	r2, r3
 800450e:	231f      	movs	r3, #31
 8004510:	401a      	ands	r2, r3
 8004512:	4b04      	ldr	r3, [pc, #16]	@ (8004524 <__NVIC_EnableIRQ+0x30>)
 8004514:	2101      	movs	r1, #1
 8004516:	4091      	lsls	r1, r2
 8004518:	000a      	movs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
  }
}
 800451c:	46c0      	nop			@ (mov r8, r8)
 800451e:	46bd      	mov	sp, r7
 8004520:	b002      	add	sp, #8
 8004522:	bd80      	pop	{r7, pc}
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004528:	b590      	push	{r4, r7, lr}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	0002      	movs	r2, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	1dfb      	adds	r3, r7, #7
 8004534:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004536:	1dfb      	adds	r3, r7, #7
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b7f      	cmp	r3, #127	@ 0x7f
 800453c:	d828      	bhi.n	8004590 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800453e:	4a2f      	ldr	r2, [pc, #188]	@ (80045fc <__NVIC_SetPriority+0xd4>)
 8004540:	1dfb      	adds	r3, r7, #7
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	b25b      	sxtb	r3, r3
 8004546:	089b      	lsrs	r3, r3, #2
 8004548:	33c0      	adds	r3, #192	@ 0xc0
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	589b      	ldr	r3, [r3, r2]
 800454e:	1dfa      	adds	r2, r7, #7
 8004550:	7812      	ldrb	r2, [r2, #0]
 8004552:	0011      	movs	r1, r2
 8004554:	2203      	movs	r2, #3
 8004556:	400a      	ands	r2, r1
 8004558:	00d2      	lsls	r2, r2, #3
 800455a:	21ff      	movs	r1, #255	@ 0xff
 800455c:	4091      	lsls	r1, r2
 800455e:	000a      	movs	r2, r1
 8004560:	43d2      	mvns	r2, r2
 8004562:	401a      	ands	r2, r3
 8004564:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	019b      	lsls	r3, r3, #6
 800456a:	22ff      	movs	r2, #255	@ 0xff
 800456c:	401a      	ands	r2, r3
 800456e:	1dfb      	adds	r3, r7, #7
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	0018      	movs	r0, r3
 8004574:	2303      	movs	r3, #3
 8004576:	4003      	ands	r3, r0
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800457c:	481f      	ldr	r0, [pc, #124]	@ (80045fc <__NVIC_SetPriority+0xd4>)
 800457e:	1dfb      	adds	r3, r7, #7
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	b25b      	sxtb	r3, r3
 8004584:	089b      	lsrs	r3, r3, #2
 8004586:	430a      	orrs	r2, r1
 8004588:	33c0      	adds	r3, #192	@ 0xc0
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800458e:	e031      	b.n	80045f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004590:	4a1b      	ldr	r2, [pc, #108]	@ (8004600 <__NVIC_SetPriority+0xd8>)
 8004592:	1dfb      	adds	r3, r7, #7
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	0019      	movs	r1, r3
 8004598:	230f      	movs	r3, #15
 800459a:	400b      	ands	r3, r1
 800459c:	3b08      	subs	r3, #8
 800459e:	089b      	lsrs	r3, r3, #2
 80045a0:	3306      	adds	r3, #6
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	18d3      	adds	r3, r2, r3
 80045a6:	3304      	adds	r3, #4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	1dfa      	adds	r2, r7, #7
 80045ac:	7812      	ldrb	r2, [r2, #0]
 80045ae:	0011      	movs	r1, r2
 80045b0:	2203      	movs	r2, #3
 80045b2:	400a      	ands	r2, r1
 80045b4:	00d2      	lsls	r2, r2, #3
 80045b6:	21ff      	movs	r1, #255	@ 0xff
 80045b8:	4091      	lsls	r1, r2
 80045ba:	000a      	movs	r2, r1
 80045bc:	43d2      	mvns	r2, r2
 80045be:	401a      	ands	r2, r3
 80045c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	019b      	lsls	r3, r3, #6
 80045c6:	22ff      	movs	r2, #255	@ 0xff
 80045c8:	401a      	ands	r2, r3
 80045ca:	1dfb      	adds	r3, r7, #7
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	0018      	movs	r0, r3
 80045d0:	2303      	movs	r3, #3
 80045d2:	4003      	ands	r3, r0
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80045d8:	4809      	ldr	r0, [pc, #36]	@ (8004600 <__NVIC_SetPriority+0xd8>)
 80045da:	1dfb      	adds	r3, r7, #7
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	001c      	movs	r4, r3
 80045e0:	230f      	movs	r3, #15
 80045e2:	4023      	ands	r3, r4
 80045e4:	3b08      	subs	r3, #8
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	430a      	orrs	r2, r1
 80045ea:	3306      	adds	r3, #6
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	18c3      	adds	r3, r0, r3
 80045f0:	3304      	adds	r3, #4
 80045f2:	601a      	str	r2, [r3, #0]
}
 80045f4:	46c0      	nop			@ (mov r8, r8)
 80045f6:	46bd      	mov	sp, r7
 80045f8:	b003      	add	sp, #12
 80045fa:	bd90      	pop	{r4, r7, pc}
 80045fc:	e000e100 	.word	0xe000e100
 8004600:	e000ed00 	.word	0xe000ed00

08004604 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	1e5a      	subs	r2, r3, #1
 8004610:	2380      	movs	r3, #128	@ 0x80
 8004612:	045b      	lsls	r3, r3, #17
 8004614:	429a      	cmp	r2, r3
 8004616:	d301      	bcc.n	800461c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004618:	2301      	movs	r3, #1
 800461a:	e010      	b.n	800463e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800461c:	4b0a      	ldr	r3, [pc, #40]	@ (8004648 <SysTick_Config+0x44>)
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	3a01      	subs	r2, #1
 8004622:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004624:	2301      	movs	r3, #1
 8004626:	425b      	negs	r3, r3
 8004628:	2103      	movs	r1, #3
 800462a:	0018      	movs	r0, r3
 800462c:	f7ff ff7c 	bl	8004528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004630:	4b05      	ldr	r3, [pc, #20]	@ (8004648 <SysTick_Config+0x44>)
 8004632:	2200      	movs	r2, #0
 8004634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004636:	4b04      	ldr	r3, [pc, #16]	@ (8004648 <SysTick_Config+0x44>)
 8004638:	2207      	movs	r2, #7
 800463a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800463c:	2300      	movs	r3, #0
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	e000e010 	.word	0xe000e010

0800464c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	210f      	movs	r1, #15
 8004658:	187b      	adds	r3, r7, r1
 800465a:	1c02      	adds	r2, r0, #0
 800465c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	187b      	adds	r3, r7, r1
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	b25b      	sxtb	r3, r3
 8004666:	0011      	movs	r1, r2
 8004668:	0018      	movs	r0, r3
 800466a:	f7ff ff5d 	bl	8004528 <__NVIC_SetPriority>
}
 800466e:	46c0      	nop			@ (mov r8, r8)
 8004670:	46bd      	mov	sp, r7
 8004672:	b004      	add	sp, #16
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	0002      	movs	r2, r0
 800467e:	1dfb      	adds	r3, r7, #7
 8004680:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004682:	1dfb      	adds	r3, r7, #7
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	b25b      	sxtb	r3, r3
 8004688:	0018      	movs	r0, r3
 800468a:	f7ff ff33 	bl	80044f4 <__NVIC_EnableIRQ>
}
 800468e:	46c0      	nop			@ (mov r8, r8)
 8004690:	46bd      	mov	sp, r7
 8004692:	b002      	add	sp, #8
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b082      	sub	sp, #8
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff ffaf 	bl	8004604 <SysTick_Config>
 80046a6:	0003      	movs	r3, r0
}
 80046a8:	0018      	movs	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b002      	add	sp, #8
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e036      	b.n	8004734 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2221      	movs	r2, #33	@ 0x21
 80046ca:	2102      	movs	r1, #2
 80046cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4a18      	ldr	r2, [pc, #96]	@ (800473c <HAL_DMA_Init+0x8c>)
 80046da:	4013      	ands	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80046e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004706:	68fa      	ldr	r2, [r7, #12]
 8004708:	4313      	orrs	r3, r2
 800470a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	0018      	movs	r0, r3
 8004718:	f000 f98c 	bl	8004a34 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2221      	movs	r2, #33	@ 0x21
 8004726:	2101      	movs	r1, #1
 8004728:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	2100      	movs	r1, #0
 8004730:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}  
 8004734:	0018      	movs	r0, r3
 8004736:	46bd      	mov	sp, r7
 8004738:	b004      	add	sp, #16
 800473a:	bd80      	pop	{r7, pc}
 800473c:	ffffc00f 	.word	0xffffc00f

08004740 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
 800474c:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800474e:	2317      	movs	r3, #23
 8004750:	18fb      	adds	r3, r7, r3
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2220      	movs	r2, #32
 800475a:	5c9b      	ldrb	r3, [r3, r2]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_DMA_Start_IT+0x24>
 8004760:	2302      	movs	r3, #2
 8004762:	e04f      	b.n	8004804 <HAL_DMA_Start_IT+0xc4>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2220      	movs	r2, #32
 8004768:	2101      	movs	r1, #1
 800476a:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2221      	movs	r2, #33	@ 0x21
 8004770:	5c9b      	ldrb	r3, [r3, r2]
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	d13a      	bne.n	80047ee <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2221      	movs	r2, #33	@ 0x21
 800477c:	2102      	movs	r1, #2
 800477e:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2200      	movs	r2, #0
 8004784:	639a      	str	r2, [r3, #56]	@ 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2101      	movs	r1, #1
 8004792:	438a      	bics	r2, r1
 8004794:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	68b9      	ldr	r1, [r7, #8]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 f91c 	bl	80049da <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d008      	beq.n	80047bc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	210e      	movs	r1, #14
 80047b6:	430a      	orrs	r2, r1
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e00f      	b.n	80047dc <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	210a      	movs	r1, #10
 80047c8:	430a      	orrs	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2104      	movs	r1, #4
 80047d8:	438a      	bics	r2, r1
 80047da:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	2101      	movs	r1, #1
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	2100      	movs	r1, #0
 80047f4:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80047f6:	2317      	movs	r3, #23
 80047f8:	18fb      	adds	r3, r7, r3
 80047fa:	2202      	movs	r2, #2
 80047fc:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80047fe:	2317      	movs	r3, #23
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	781b      	ldrb	r3, [r3, #0]
} 
 8004804:	0018      	movs	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	b006      	add	sp, #24
 800480a:	bd80      	pop	{r7, pc}

0800480c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004814:	210f      	movs	r1, #15
 8004816:	187b      	adds	r3, r7, r1
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2221      	movs	r2, #33	@ 0x21
 8004820:	5c9b      	ldrb	r3, [r3, r2]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d006      	beq.n	8004836 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2204      	movs	r2, #4
 800482c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800482e:	187b      	adds	r3, r7, r1
 8004830:	2201      	movs	r2, #1
 8004832:	701a      	strb	r2, [r3, #0]
 8004834:	e028      	b.n	8004888 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	210e      	movs	r1, #14
 8004842:	438a      	bics	r2, r1
 8004844:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2101      	movs	r1, #1
 8004852:	438a      	bics	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	2101      	movs	r1, #1
 8004860:	4091      	lsls	r1, r2
 8004862:	000a      	movs	r2, r1
 8004864:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2221      	movs	r2, #33	@ 0x21
 800486a:	2101      	movs	r1, #1
 800486c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	2100      	movs	r1, #0
 8004874:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800487a:	2b00      	cmp	r3, #0
 800487c:	d004      	beq.n	8004888 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	0010      	movs	r0, r2
 8004886:	4798      	blx	r3
    } 
  }
  return status;
 8004888:	230f      	movs	r3, #15
 800488a:	18fb      	adds	r3, r7, r3
 800488c:	781b      	ldrb	r3, [r3, #0]
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b004      	add	sp, #16
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b084      	sub	sp, #16
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	2204      	movs	r2, #4
 80048b4:	409a      	lsls	r2, r3
 80048b6:	0013      	movs	r3, r2
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	4013      	ands	r3, r2
 80048bc:	d024      	beq.n	8004908 <HAL_DMA_IRQHandler+0x72>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2204      	movs	r2, #4
 80048c2:	4013      	ands	r3, r2
 80048c4:	d020      	beq.n	8004908 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2220      	movs	r2, #32
 80048ce:	4013      	ands	r3, r2
 80048d0:	d107      	bne.n	80048e2 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	2104      	movs	r1, #4
 80048de:	438a      	bics	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ea:	2104      	movs	r1, #4
 80048ec:	4091      	lsls	r1, r2
 80048ee:	000a      	movs	r2, r1
 80048f0:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d100      	bne.n	80048fc <HAL_DMA_IRQHandler+0x66>
 80048fa:	e06a      	b.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	0010      	movs	r0, r2
 8004904:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8004906:	e064      	b.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490c:	2202      	movs	r2, #2
 800490e:	409a      	lsls	r2, r3
 8004910:	0013      	movs	r3, r2
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	4013      	ands	r3, r2
 8004916:	d02b      	beq.n	8004970 <HAL_DMA_IRQHandler+0xda>
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	2202      	movs	r2, #2
 800491c:	4013      	ands	r3, r2
 800491e:	d027      	beq.n	8004970 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2220      	movs	r2, #32
 8004928:	4013      	ands	r3, r2
 800492a:	d10b      	bne.n	8004944 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	210a      	movs	r1, #10
 8004938:	438a      	bics	r2, r1
 800493a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2221      	movs	r2, #33	@ 0x21
 8004940:	2101      	movs	r1, #1
 8004942:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494c:	2102      	movs	r1, #2
 800494e:	4091      	lsls	r1, r2
 8004950:	000a      	movs	r2, r1
 8004952:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	2100      	movs	r1, #0
 800495a:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	d036      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	0010      	movs	r0, r2
 800496c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800496e:	e030      	b.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004974:	2208      	movs	r2, #8
 8004976:	409a      	lsls	r2, r3
 8004978:	0013      	movs	r3, r2
 800497a:	68fa      	ldr	r2, [r7, #12]
 800497c:	4013      	ands	r3, r2
 800497e:	d028      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2208      	movs	r2, #8
 8004984:	4013      	ands	r3, r2
 8004986:	d024      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	210e      	movs	r1, #14
 8004994:	438a      	bics	r2, r1
 8004996:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049a0:	2101      	movs	r1, #1
 80049a2:	4091      	lsls	r1, r2
 80049a4:	000a      	movs	r2, r1
 80049a6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2221      	movs	r2, #33	@ 0x21
 80049b2:	2101      	movs	r1, #1
 80049b4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2220      	movs	r2, #32
 80049ba:	2100      	movs	r1, #0
 80049bc:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d005      	beq.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	0010      	movs	r0, r2
 80049ce:	4798      	blx	r3
    }
   }
}  
 80049d0:	e7ff      	b.n	80049d2 <HAL_DMA_IRQHandler+0x13c>
 80049d2:	46c0      	nop			@ (mov r8, r8)
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}

080049da <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b084      	sub	sp, #16
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
 80049e6:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f0:	2101      	movs	r1, #1
 80049f2:	4091      	lsls	r1, r2
 80049f4:	000a      	movs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b10      	cmp	r3, #16
 8004a06:	d108      	bne.n	8004a1a <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004a18:	e007      	b.n	8004a2a <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	60da      	str	r2, [r3, #12]
}
 8004a2a:	46c0      	nop			@ (mov r8, r8)
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	b004      	add	sp, #16
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a08      	ldr	r2, [pc, #32]	@ (8004a64 <DMA_CalcBaseAndBitshift+0x30>)
 8004a42:	4694      	mov	ip, r2
 8004a44:	4463      	add	r3, ip
 8004a46:	2114      	movs	r1, #20
 8004a48:	0018      	movs	r0, r3
 8004a4a:	f7fb fb79 	bl	8000140 <__udivsi3>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	009a      	lsls	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a03      	ldr	r2, [pc, #12]	@ (8004a68 <DMA_CalcBaseAndBitshift+0x34>)
 8004a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8004a5c:	46c0      	nop			@ (mov r8, r8)
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	b002      	add	sp, #8
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	bffdfff8 	.word	0xbffdfff8
 8004a68:	40020000 	.word	0x40020000

08004a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b086      	sub	sp, #24
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004a76:	2300      	movs	r3, #0
 8004a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a7a:	e14f      	b.n	8004d1c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2101      	movs	r1, #1
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4091      	lsls	r1, r2
 8004a86:	000a      	movs	r2, r1
 8004a88:	4013      	ands	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <HAL_GPIO_Init+0x28>
 8004a92:	e140      	b.n	8004d16 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d003      	beq.n	8004aa4 <HAL_GPIO_Init+0x38>
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b12      	cmp	r3, #18
 8004aa2:	d123      	bne.n	8004aec <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	08da      	lsrs	r2, r3, #3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	3208      	adds	r2, #8
 8004aac:	0092      	lsls	r2, r2, #2
 8004aae:	58d3      	ldr	r3, [r2, r3]
 8004ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	220f      	movs	r2, #15
 8004abc:	409a      	lsls	r2, r3
 8004abe:	0013      	movs	r3, r2
 8004ac0:	43da      	mvns	r2, r3
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	691a      	ldr	r2, [r3, #16]
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	2107      	movs	r1, #7
 8004ad0:	400b      	ands	r3, r1
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	409a      	lsls	r2, r3
 8004ad6:	0013      	movs	r3, r2
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	08da      	lsrs	r2, r3, #3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3208      	adds	r2, #8
 8004ae6:	0092      	lsls	r2, r2, #2
 8004ae8:	6939      	ldr	r1, [r7, #16]
 8004aea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	005b      	lsls	r3, r3, #1
 8004af6:	2203      	movs	r2, #3
 8004af8:	409a      	lsls	r2, r3
 8004afa:	0013      	movs	r3, r2
 8004afc:	43da      	mvns	r2, r3
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	401a      	ands	r2, r3
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	409a      	lsls	r2, r3
 8004b12:	0013      	movs	r3, r2
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d00b      	beq.n	8004b40 <HAL_GPIO_Init+0xd4>
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d007      	beq.n	8004b40 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004b34:	2b11      	cmp	r3, #17
 8004b36:	d003      	beq.n	8004b40 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b12      	cmp	r3, #18
 8004b3e:	d130      	bne.n	8004ba2 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	2203      	movs	r2, #3
 8004b4c:	409a      	lsls	r2, r3
 8004b4e:	0013      	movs	r3, r2
 8004b50:	43da      	mvns	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4013      	ands	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	409a      	lsls	r2, r3
 8004b62:	0013      	movs	r3, r2
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b76:	2201      	movs	r2, #1
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	409a      	lsls	r2, r3
 8004b7c:	0013      	movs	r3, r2
 8004b7e:	43da      	mvns	r2, r3
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4013      	ands	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	091b      	lsrs	r3, r3, #4
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	401a      	ands	r2, r3
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	409a      	lsls	r2, r3
 8004b94:	0013      	movs	r3, r2
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	005b      	lsls	r3, r3, #1
 8004bac:	2203      	movs	r2, #3
 8004bae:	409a      	lsls	r2, r3
 8004bb0:	0013      	movs	r3, r2
 8004bb2:	43da      	mvns	r2, r3
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4013      	ands	r3, r2
 8004bb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	689a      	ldr	r2, [r3, #8]
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	409a      	lsls	r2, r3
 8004bc4:	0013      	movs	r3, r2
 8004bc6:	693a      	ldr	r2, [r7, #16]
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	055b      	lsls	r3, r3, #21
 8004bda:	4013      	ands	r3, r2
 8004bdc:	d100      	bne.n	8004be0 <HAL_GPIO_Init+0x174>
 8004bde:	e09a      	b.n	8004d16 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004be0:	4b54      	ldr	r3, [pc, #336]	@ (8004d34 <HAL_GPIO_Init+0x2c8>)
 8004be2:	699a      	ldr	r2, [r3, #24]
 8004be4:	4b53      	ldr	r3, [pc, #332]	@ (8004d34 <HAL_GPIO_Init+0x2c8>)
 8004be6:	2101      	movs	r1, #1
 8004be8:	430a      	orrs	r2, r1
 8004bea:	619a      	str	r2, [r3, #24]
 8004bec:	4b51      	ldr	r3, [pc, #324]	@ (8004d34 <HAL_GPIO_Init+0x2c8>)
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	60bb      	str	r3, [r7, #8]
 8004bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8004d38 <HAL_GPIO_Init+0x2cc>)
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	089b      	lsrs	r3, r3, #2
 8004bfe:	3302      	adds	r3, #2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	589b      	ldr	r3, [r3, r2]
 8004c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2203      	movs	r2, #3
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	220f      	movs	r2, #15
 8004c10:	409a      	lsls	r2, r3
 8004c12:	0013      	movs	r3, r2
 8004c14:	43da      	mvns	r2, r3
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	4013      	ands	r3, r2
 8004c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	2390      	movs	r3, #144	@ 0x90
 8004c20:	05db      	lsls	r3, r3, #23
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d013      	beq.n	8004c4e <HAL_GPIO_Init+0x1e2>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a44      	ldr	r2, [pc, #272]	@ (8004d3c <HAL_GPIO_Init+0x2d0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00d      	beq.n	8004c4a <HAL_GPIO_Init+0x1de>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a43      	ldr	r2, [pc, #268]	@ (8004d40 <HAL_GPIO_Init+0x2d4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d007      	beq.n	8004c46 <HAL_GPIO_Init+0x1da>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a42      	ldr	r2, [pc, #264]	@ (8004d44 <HAL_GPIO_Init+0x2d8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d101      	bne.n	8004c42 <HAL_GPIO_Init+0x1d6>
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e006      	b.n	8004c50 <HAL_GPIO_Init+0x1e4>
 8004c42:	2305      	movs	r3, #5
 8004c44:	e004      	b.n	8004c50 <HAL_GPIO_Init+0x1e4>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e002      	b.n	8004c50 <HAL_GPIO_Init+0x1e4>
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e000      	b.n	8004c50 <HAL_GPIO_Init+0x1e4>
 8004c4e:	2300      	movs	r3, #0
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	2103      	movs	r1, #3
 8004c54:	400a      	ands	r2, r1
 8004c56:	0092      	lsls	r2, r2, #2
 8004c58:	4093      	lsls	r3, r2
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004c60:	4935      	ldr	r1, [pc, #212]	@ (8004d38 <HAL_GPIO_Init+0x2cc>)
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	089b      	lsrs	r3, r3, #2
 8004c66:	3302      	adds	r3, #2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	693a      	ldr	r2, [r7, #16]
 8004c6c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c6e:	4b36      	ldr	r3, [pc, #216]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	43da      	mvns	r2, r3
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	025b      	lsls	r3, r3, #9
 8004c86:	4013      	ands	r3, r2
 8004c88:	d003      	beq.n	8004c92 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8004c8a:	693a      	ldr	r2, [r7, #16]
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004c92:	4b2d      	ldr	r3, [pc, #180]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004c98:	4b2b      	ldr	r3, [pc, #172]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	43da      	mvns	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	2380      	movs	r3, #128	@ 0x80
 8004cae:	029b      	lsls	r3, r3, #10
 8004cb0:	4013      	ands	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004cbc:	4b22      	ldr	r3, [pc, #136]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cc2:	4b21      	ldr	r3, [pc, #132]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	43da      	mvns	r2, r3
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	685a      	ldr	r2, [r3, #4]
 8004cd6:	2380      	movs	r3, #128	@ 0x80
 8004cd8:	035b      	lsls	r3, r3, #13
 8004cda:	4013      	ands	r3, r2
 8004cdc:	d003      	beq.n	8004ce6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8004cde:	693a      	ldr	r2, [r7, #16]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004ce6:	4b18      	ldr	r3, [pc, #96]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004cec:	4b16      	ldr	r3, [pc, #88]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	43da      	mvns	r2, r3
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	2380      	movs	r3, #128	@ 0x80
 8004d02:	039b      	lsls	r3, r3, #14
 8004d04:	4013      	ands	r3, r2
 8004d06:	d003      	beq.n	8004d10 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004d08:	693a      	ldr	r2, [r7, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004d10:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <HAL_GPIO_Init+0x2dc>)
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	40da      	lsrs	r2, r3
 8004d24:	1e13      	subs	r3, r2, #0
 8004d26:	d000      	beq.n	8004d2a <HAL_GPIO_Init+0x2be>
 8004d28:	e6a8      	b.n	8004a7c <HAL_GPIO_Init+0x10>
  } 
}
 8004d2a:	46c0      	nop			@ (mov r8, r8)
 8004d2c:	46c0      	nop			@ (mov r8, r8)
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	b006      	add	sp, #24
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	40010000 	.word	0x40010000
 8004d3c:	48000400 	.word	0x48000400
 8004d40:	48000800 	.word	0x48000800
 8004d44:	48000c00 	.word	0x48000c00
 8004d48:	40010400 	.word	0x40010400

08004d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	0008      	movs	r0, r1
 8004d56:	0011      	movs	r1, r2
 8004d58:	1cbb      	adds	r3, r7, #2
 8004d5a:	1c02      	adds	r2, r0, #0
 8004d5c:	801a      	strh	r2, [r3, #0]
 8004d5e:	1c7b      	adds	r3, r7, #1
 8004d60:	1c0a      	adds	r2, r1, #0
 8004d62:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004d64:	1c7b      	adds	r3, r7, #1
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004d6c:	1cbb      	adds	r3, r7, #2
 8004d6e:	881a      	ldrh	r2, [r3, #0]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004d74:	e003      	b.n	8004d7e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004d76:	1cbb      	adds	r3, r7, #2
 8004d78:	881a      	ldrh	r2, [r3, #0]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	46bd      	mov	sp, r7
 8004d82:	b002      	add	sp, #8
 8004d84:	bd80      	pop	{r7, pc}
	...

08004d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b088      	sub	sp, #32
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e301      	b.n	800539e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4013      	ands	r3, r2
 8004da2:	d100      	bne.n	8004da6 <HAL_RCC_OscConfig+0x1e>
 8004da4:	e08d      	b.n	8004ec2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004da6:	4bc3      	ldr	r3, [pc, #780]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	220c      	movs	r2, #12
 8004dac:	4013      	ands	r3, r2
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d00e      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004db2:	4bc0      	ldr	r3, [pc, #768]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	220c      	movs	r2, #12
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d116      	bne.n	8004dec <HAL_RCC_OscConfig+0x64>
 8004dbe:	4bbd      	ldr	r3, [pc, #756]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	2380      	movs	r3, #128	@ 0x80
 8004dc4:	025b      	lsls	r3, r3, #9
 8004dc6:	401a      	ands	r2, r3
 8004dc8:	2380      	movs	r3, #128	@ 0x80
 8004dca:	025b      	lsls	r3, r3, #9
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d10d      	bne.n	8004dec <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd0:	4bb8      	ldr	r3, [pc, #736]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	2380      	movs	r3, #128	@ 0x80
 8004dd6:	029b      	lsls	r3, r3, #10
 8004dd8:	4013      	ands	r3, r2
 8004dda:	d100      	bne.n	8004dde <HAL_RCC_OscConfig+0x56>
 8004ddc:	e070      	b.n	8004ec0 <HAL_RCC_OscConfig+0x138>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d000      	beq.n	8004de8 <HAL_RCC_OscConfig+0x60>
 8004de6:	e06b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e2d8      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d107      	bne.n	8004e04 <HAL_RCC_OscConfig+0x7c>
 8004df4:	4baf      	ldr	r3, [pc, #700]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4bae      	ldr	r3, [pc, #696]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004dfa:	2180      	movs	r1, #128	@ 0x80
 8004dfc:	0249      	lsls	r1, r1, #9
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	e02f      	b.n	8004e64 <HAL_RCC_OscConfig+0xdc>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10c      	bne.n	8004e26 <HAL_RCC_OscConfig+0x9e>
 8004e0c:	4ba9      	ldr	r3, [pc, #676]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	4ba8      	ldr	r3, [pc, #672]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e12:	49a9      	ldr	r1, [pc, #676]	@ (80050b8 <HAL_RCC_OscConfig+0x330>)
 8004e14:	400a      	ands	r2, r1
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	4ba6      	ldr	r3, [pc, #664]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	4ba5      	ldr	r3, [pc, #660]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e1e:	49a7      	ldr	r1, [pc, #668]	@ (80050bc <HAL_RCC_OscConfig+0x334>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	e01e      	b.n	8004e64 <HAL_RCC_OscConfig+0xdc>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d10e      	bne.n	8004e4c <HAL_RCC_OscConfig+0xc4>
 8004e2e:	4ba1      	ldr	r3, [pc, #644]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4ba0      	ldr	r3, [pc, #640]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e34:	2180      	movs	r1, #128	@ 0x80
 8004e36:	02c9      	lsls	r1, r1, #11
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	4b9d      	ldr	r3, [pc, #628]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b9c      	ldr	r3, [pc, #624]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e42:	2180      	movs	r1, #128	@ 0x80
 8004e44:	0249      	lsls	r1, r1, #9
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	e00b      	b.n	8004e64 <HAL_RCC_OscConfig+0xdc>
 8004e4c:	4b99      	ldr	r3, [pc, #612]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	4b98      	ldr	r3, [pc, #608]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e52:	4999      	ldr	r1, [pc, #612]	@ (80050b8 <HAL_RCC_OscConfig+0x330>)
 8004e54:	400a      	ands	r2, r1
 8004e56:	601a      	str	r2, [r3, #0]
 8004e58:	4b96      	ldr	r3, [pc, #600]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	4b95      	ldr	r3, [pc, #596]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e5e:	4997      	ldr	r1, [pc, #604]	@ (80050bc <HAL_RCC_OscConfig+0x334>)
 8004e60:	400a      	ands	r2, r1
 8004e62:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d014      	beq.n	8004e96 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e6c:	f7ff fb14 	bl	8004498 <HAL_GetTick>
 8004e70:	0003      	movs	r3, r0
 8004e72:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e76:	f7ff fb0f 	bl	8004498 <HAL_GetTick>
 8004e7a:	0002      	movs	r2, r0
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b64      	cmp	r3, #100	@ 0x64
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e28a      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e88:	4b8a      	ldr	r3, [pc, #552]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	2380      	movs	r3, #128	@ 0x80
 8004e8e:	029b      	lsls	r3, r3, #10
 8004e90:	4013      	ands	r3, r2
 8004e92:	d0f0      	beq.n	8004e76 <HAL_RCC_OscConfig+0xee>
 8004e94:	e015      	b.n	8004ec2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e96:	f7ff faff 	bl	8004498 <HAL_GetTick>
 8004e9a:	0003      	movs	r3, r0
 8004e9c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ea0:	f7ff fafa 	bl	8004498 <HAL_GetTick>
 8004ea4:	0002      	movs	r2, r0
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b64      	cmp	r3, #100	@ 0x64
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e275      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eb2:	4b80      	ldr	r3, [pc, #512]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	2380      	movs	r3, #128	@ 0x80
 8004eb8:	029b      	lsls	r3, r3, #10
 8004eba:	4013      	ands	r3, r2
 8004ebc:	d1f0      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x118>
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d100      	bne.n	8004ece <HAL_RCC_OscConfig+0x146>
 8004ecc:	e069      	b.n	8004fa2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004ece:	4b79      	ldr	r3, [pc, #484]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	220c      	movs	r2, #12
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	d00b      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004ed8:	4b76      	ldr	r3, [pc, #472]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	220c      	movs	r2, #12
 8004ede:	4013      	ands	r3, r2
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d11c      	bne.n	8004f1e <HAL_RCC_OscConfig+0x196>
 8004ee4:	4b73      	ldr	r3, [pc, #460]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	2380      	movs	r3, #128	@ 0x80
 8004eea:	025b      	lsls	r3, r3, #9
 8004eec:	4013      	ands	r3, r2
 8004eee:	d116      	bne.n	8004f1e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ef0:	4b70      	ldr	r3, [pc, #448]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2202      	movs	r2, #2
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	d005      	beq.n	8004f06 <HAL_RCC_OscConfig+0x17e>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d001      	beq.n	8004f06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e24b      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f06:	4b6b      	ldr	r3, [pc, #428]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	22f8      	movs	r2, #248	@ 0xf8
 8004f0c:	4393      	bics	r3, r2
 8004f0e:	0019      	movs	r1, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	00da      	lsls	r2, r3, #3
 8004f16:	4b67      	ldr	r3, [pc, #412]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1c:	e041      	b.n	8004fa2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d024      	beq.n	8004f70 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f26:	4b63      	ldr	r3, [pc, #396]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4b62      	ldr	r3, [pc, #392]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7ff fab1 	bl	8004498 <HAL_GetTick>
 8004f36:	0003      	movs	r3, r0
 8004f38:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f3c:	f7ff faac 	bl	8004498 <HAL_GetTick>
 8004f40:	0002      	movs	r2, r0
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e227      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b59      	ldr	r3, [pc, #356]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2202      	movs	r2, #2
 8004f54:	4013      	ands	r3, r2
 8004f56:	d0f1      	beq.n	8004f3c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f58:	4b56      	ldr	r3, [pc, #344]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	22f8      	movs	r2, #248	@ 0xf8
 8004f5e:	4393      	bics	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	00da      	lsls	r2, r3, #3
 8004f68:	4b52      	ldr	r3, [pc, #328]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e018      	b.n	8004fa2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f70:	4b50      	ldr	r3, [pc, #320]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b4f      	ldr	r3, [pc, #316]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f76:	2101      	movs	r1, #1
 8004f78:	438a      	bics	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7c:	f7ff fa8c 	bl	8004498 <HAL_GetTick>
 8004f80:	0003      	movs	r3, r0
 8004f82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f84:	e008      	b.n	8004f98 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f86:	f7ff fa87 	bl	8004498 <HAL_GetTick>
 8004f8a:	0002      	movs	r2, r0
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e202      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f98:	4b46      	ldr	r3, [pc, #280]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d1f1      	bne.n	8004f86 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2208      	movs	r2, #8
 8004fa8:	4013      	ands	r3, r2
 8004faa:	d036      	beq.n	800501a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d019      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004fb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fb8:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004fba:	2101      	movs	r1, #1
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fc0:	f7ff fa6a 	bl	8004498 <HAL_GetTick>
 8004fc4:	0003      	movs	r3, r0
 8004fc6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc8:	e008      	b.n	8004fdc <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fca:	f7ff fa65 	bl	8004498 <HAL_GetTick>
 8004fce:	0002      	movs	r2, r0
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e1e0      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fdc:	4b35      	ldr	r3, [pc, #212]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	d0f1      	beq.n	8004fca <HAL_RCC_OscConfig+0x242>
 8004fe6:	e018      	b.n	800501a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe8:	4b32      	ldr	r3, [pc, #200]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004fea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fec:	4b31      	ldr	r3, [pc, #196]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8004fee:	2101      	movs	r1, #1
 8004ff0:	438a      	bics	r2, r1
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ff4:	f7ff fa50 	bl	8004498 <HAL_GetTick>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ffe:	f7ff fa4b 	bl	8004498 <HAL_GetTick>
 8005002:	0002      	movs	r2, r0
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e1c6      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005010:	4b28      	ldr	r3, [pc, #160]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8005012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005014:	2202      	movs	r2, #2
 8005016:	4013      	ands	r3, r2
 8005018:	d1f1      	bne.n	8004ffe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2204      	movs	r2, #4
 8005020:	4013      	ands	r3, r2
 8005022:	d100      	bne.n	8005026 <HAL_RCC_OscConfig+0x29e>
 8005024:	e0b4      	b.n	8005190 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005026:	201f      	movs	r0, #31
 8005028:	183b      	adds	r3, r7, r0
 800502a:	2200      	movs	r2, #0
 800502c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800502e:	4b21      	ldr	r3, [pc, #132]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8005030:	69da      	ldr	r2, [r3, #28]
 8005032:	2380      	movs	r3, #128	@ 0x80
 8005034:	055b      	lsls	r3, r3, #21
 8005036:	4013      	ands	r3, r2
 8005038:	d110      	bne.n	800505c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800503a:	4b1e      	ldr	r3, [pc, #120]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	4b1d      	ldr	r3, [pc, #116]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 8005040:	2180      	movs	r1, #128	@ 0x80
 8005042:	0549      	lsls	r1, r1, #21
 8005044:	430a      	orrs	r2, r1
 8005046:	61da      	str	r2, [r3, #28]
 8005048:	4b1a      	ldr	r3, [pc, #104]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 800504a:	69da      	ldr	r2, [r3, #28]
 800504c:	2380      	movs	r3, #128	@ 0x80
 800504e:	055b      	lsls	r3, r3, #21
 8005050:	4013      	ands	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005056:	183b      	adds	r3, r7, r0
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <HAL_RCC_OscConfig+0x338>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	2380      	movs	r3, #128	@ 0x80
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	4013      	ands	r3, r2
 8005066:	d11a      	bne.n	800509e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005068:	4b15      	ldr	r3, [pc, #84]	@ (80050c0 <HAL_RCC_OscConfig+0x338>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	4b14      	ldr	r3, [pc, #80]	@ (80050c0 <HAL_RCC_OscConfig+0x338>)
 800506e:	2180      	movs	r1, #128	@ 0x80
 8005070:	0049      	lsls	r1, r1, #1
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005076:	f7ff fa0f 	bl	8004498 <HAL_GetTick>
 800507a:	0003      	movs	r3, r0
 800507c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005080:	f7ff fa0a 	bl	8004498 <HAL_GetTick>
 8005084:	0002      	movs	r2, r0
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b64      	cmp	r3, #100	@ 0x64
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e185      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005092:	4b0b      	ldr	r3, [pc, #44]	@ (80050c0 <HAL_RCC_OscConfig+0x338>)
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	2380      	movs	r3, #128	@ 0x80
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	4013      	ands	r3, r2
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2b01      	cmp	r3, #1
 80050a4:	d10e      	bne.n	80050c4 <HAL_RCC_OscConfig+0x33c>
 80050a6:	4b03      	ldr	r3, [pc, #12]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	4b02      	ldr	r3, [pc, #8]	@ (80050b4 <HAL_RCC_OscConfig+0x32c>)
 80050ac:	2101      	movs	r1, #1
 80050ae:	430a      	orrs	r2, r1
 80050b0:	621a      	str	r2, [r3, #32]
 80050b2:	e035      	b.n	8005120 <HAL_RCC_OscConfig+0x398>
 80050b4:	40021000 	.word	0x40021000
 80050b8:	fffeffff 	.word	0xfffeffff
 80050bc:	fffbffff 	.word	0xfffbffff
 80050c0:	40007000 	.word	0x40007000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10c      	bne.n	80050e6 <HAL_RCC_OscConfig+0x35e>
 80050cc:	4bb6      	ldr	r3, [pc, #728]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	4bb5      	ldr	r3, [pc, #724]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80050d2:	2101      	movs	r1, #1
 80050d4:	438a      	bics	r2, r1
 80050d6:	621a      	str	r2, [r3, #32]
 80050d8:	4bb3      	ldr	r3, [pc, #716]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80050da:	6a1a      	ldr	r2, [r3, #32]
 80050dc:	4bb2      	ldr	r3, [pc, #712]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80050de:	2104      	movs	r1, #4
 80050e0:	438a      	bics	r2, r1
 80050e2:	621a      	str	r2, [r3, #32]
 80050e4:	e01c      	b.n	8005120 <HAL_RCC_OscConfig+0x398>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	2b05      	cmp	r3, #5
 80050ec:	d10c      	bne.n	8005108 <HAL_RCC_OscConfig+0x380>
 80050ee:	4bae      	ldr	r3, [pc, #696]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80050f0:	6a1a      	ldr	r2, [r3, #32]
 80050f2:	4bad      	ldr	r3, [pc, #692]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80050f4:	2104      	movs	r1, #4
 80050f6:	430a      	orrs	r2, r1
 80050f8:	621a      	str	r2, [r3, #32]
 80050fa:	4bab      	ldr	r3, [pc, #684]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80050fc:	6a1a      	ldr	r2, [r3, #32]
 80050fe:	4baa      	ldr	r3, [pc, #680]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005100:	2101      	movs	r1, #1
 8005102:	430a      	orrs	r2, r1
 8005104:	621a      	str	r2, [r3, #32]
 8005106:	e00b      	b.n	8005120 <HAL_RCC_OscConfig+0x398>
 8005108:	4ba7      	ldr	r3, [pc, #668]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800510a:	6a1a      	ldr	r2, [r3, #32]
 800510c:	4ba6      	ldr	r3, [pc, #664]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800510e:	2101      	movs	r1, #1
 8005110:	438a      	bics	r2, r1
 8005112:	621a      	str	r2, [r3, #32]
 8005114:	4ba4      	ldr	r3, [pc, #656]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005116:	6a1a      	ldr	r2, [r3, #32]
 8005118:	4ba3      	ldr	r3, [pc, #652]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800511a:	2104      	movs	r1, #4
 800511c:	438a      	bics	r2, r1
 800511e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d014      	beq.n	8005152 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005128:	f7ff f9b6 	bl	8004498 <HAL_GetTick>
 800512c:	0003      	movs	r3, r0
 800512e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	e009      	b.n	8005146 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7ff f9b1 	bl	8004498 <HAL_GetTick>
 8005136:	0002      	movs	r2, r0
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	4a9b      	ldr	r2, [pc, #620]	@ (80053ac <HAL_RCC_OscConfig+0x624>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d901      	bls.n	8005146 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8005142:	2303      	movs	r3, #3
 8005144:	e12b      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005146:	4b98      	ldr	r3, [pc, #608]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	2202      	movs	r2, #2
 800514c:	4013      	ands	r3, r2
 800514e:	d0f0      	beq.n	8005132 <HAL_RCC_OscConfig+0x3aa>
 8005150:	e013      	b.n	800517a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005152:	f7ff f9a1 	bl	8004498 <HAL_GetTick>
 8005156:	0003      	movs	r3, r0
 8005158:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515a:	e009      	b.n	8005170 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515c:	f7ff f99c 	bl	8004498 <HAL_GetTick>
 8005160:	0002      	movs	r2, r0
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	4a91      	ldr	r2, [pc, #580]	@ (80053ac <HAL_RCC_OscConfig+0x624>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e116      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005170:	4b8d      	ldr	r3, [pc, #564]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	2202      	movs	r2, #2
 8005176:	4013      	ands	r3, r2
 8005178:	d1f0      	bne.n	800515c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800517a:	231f      	movs	r3, #31
 800517c:	18fb      	adds	r3, r7, r3
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d105      	bne.n	8005190 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005184:	4b88      	ldr	r3, [pc, #544]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	4b87      	ldr	r3, [pc, #540]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800518a:	4989      	ldr	r1, [pc, #548]	@ (80053b0 <HAL_RCC_OscConfig+0x628>)
 800518c:	400a      	ands	r2, r1
 800518e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2210      	movs	r2, #16
 8005196:	4013      	ands	r3, r2
 8005198:	d063      	beq.n	8005262 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d12a      	bne.n	80051f8 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80051a2:	4b81      	ldr	r3, [pc, #516]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80051a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051a6:	4b80      	ldr	r3, [pc, #512]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80051a8:	2104      	movs	r1, #4
 80051aa:	430a      	orrs	r2, r1
 80051ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80051ae:	4b7e      	ldr	r3, [pc, #504]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80051b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051b2:	4b7d      	ldr	r3, [pc, #500]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80051b4:	2101      	movs	r1, #1
 80051b6:	430a      	orrs	r2, r1
 80051b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ba:	f7ff f96d 	bl	8004498 <HAL_GetTick>
 80051be:	0003      	movs	r3, r0
 80051c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051c2:	e008      	b.n	80051d6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80051c4:	f7ff f968 	bl	8004498 <HAL_GetTick>
 80051c8:	0002      	movs	r2, r0
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e0e3      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80051d6:	4b74      	ldr	r3, [pc, #464]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80051d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051da:	2202      	movs	r2, #2
 80051dc:	4013      	ands	r3, r2
 80051de:	d0f1      	beq.n	80051c4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80051e0:	4b71      	ldr	r3, [pc, #452]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80051e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051e4:	22f8      	movs	r2, #248	@ 0xf8
 80051e6:	4393      	bics	r3, r2
 80051e8:	0019      	movs	r1, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	00da      	lsls	r2, r3, #3
 80051f0:	4b6d      	ldr	r3, [pc, #436]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80051f2:	430a      	orrs	r2, r1
 80051f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80051f6:	e034      	b.n	8005262 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	695b      	ldr	r3, [r3, #20]
 80051fc:	3305      	adds	r3, #5
 80051fe:	d111      	bne.n	8005224 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8005200:	4b69      	ldr	r3, [pc, #420]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005202:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005204:	4b68      	ldr	r3, [pc, #416]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005206:	2104      	movs	r1, #4
 8005208:	438a      	bics	r2, r1
 800520a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800520c:	4b66      	ldr	r3, [pc, #408]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800520e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005210:	22f8      	movs	r2, #248	@ 0xf8
 8005212:	4393      	bics	r3, r2
 8005214:	0019      	movs	r1, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	00da      	lsls	r2, r3, #3
 800521c:	4b62      	ldr	r3, [pc, #392]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800521e:	430a      	orrs	r2, r1
 8005220:	635a      	str	r2, [r3, #52]	@ 0x34
 8005222:	e01e      	b.n	8005262 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8005224:	4b60      	ldr	r3, [pc, #384]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005228:	4b5f      	ldr	r3, [pc, #380]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800522a:	2104      	movs	r1, #4
 800522c:	430a      	orrs	r2, r1
 800522e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005230:	4b5d      	ldr	r3, [pc, #372]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005232:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005234:	4b5c      	ldr	r3, [pc, #368]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005236:	2101      	movs	r1, #1
 8005238:	438a      	bics	r2, r1
 800523a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800523c:	f7ff f92c 	bl	8004498 <HAL_GetTick>
 8005240:	0003      	movs	r3, r0
 8005242:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005244:	e008      	b.n	8005258 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8005246:	f7ff f927 	bl	8004498 <HAL_GetTick>
 800524a:	0002      	movs	r2, r0
 800524c:	69bb      	ldr	r3, [r7, #24]
 800524e:	1ad3      	subs	r3, r2, r3
 8005250:	2b02      	cmp	r3, #2
 8005252:	d901      	bls.n	8005258 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e0a2      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005258:	4b53      	ldr	r3, [pc, #332]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800525a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800525c:	2202      	movs	r2, #2
 800525e:	4013      	ands	r3, r2
 8005260:	d1f1      	bne.n	8005246 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d100      	bne.n	800526c <HAL_RCC_OscConfig+0x4e4>
 800526a:	e097      	b.n	800539c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800526c:	4b4e      	ldr	r3, [pc, #312]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	220c      	movs	r2, #12
 8005272:	4013      	ands	r3, r2
 8005274:	2b08      	cmp	r3, #8
 8005276:	d100      	bne.n	800527a <HAL_RCC_OscConfig+0x4f2>
 8005278:	e06b      	b.n	8005352 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a1b      	ldr	r3, [r3, #32]
 800527e:	2b02      	cmp	r3, #2
 8005280:	d14c      	bne.n	800531c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005282:	4b49      	ldr	r3, [pc, #292]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	4b48      	ldr	r3, [pc, #288]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005288:	494a      	ldr	r1, [pc, #296]	@ (80053b4 <HAL_RCC_OscConfig+0x62c>)
 800528a:	400a      	ands	r2, r1
 800528c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800528e:	f7ff f903 	bl	8004498 <HAL_GetTick>
 8005292:	0003      	movs	r3, r0
 8005294:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005298:	f7ff f8fe 	bl	8004498 <HAL_GetTick>
 800529c:	0002      	movs	r2, r0
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e079      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052aa:	4b3f      	ldr	r3, [pc, #252]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	2380      	movs	r3, #128	@ 0x80
 80052b0:	049b      	lsls	r3, r3, #18
 80052b2:	4013      	ands	r3, r2
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80052b6:	4b3c      	ldr	r3, [pc, #240]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80052b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ba:	220f      	movs	r2, #15
 80052bc:	4393      	bics	r3, r2
 80052be:	0019      	movs	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c4:	4b38      	ldr	r3, [pc, #224]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80052c6:	430a      	orrs	r2, r1
 80052c8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80052ca:	4b37      	ldr	r3, [pc, #220]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4a3a      	ldr	r2, [pc, #232]	@ (80053b8 <HAL_RCC_OscConfig+0x630>)
 80052d0:	4013      	ands	r3, r2
 80052d2:	0019      	movs	r1, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052dc:	431a      	orrs	r2, r3
 80052de:	4b32      	ldr	r3, [pc, #200]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052e4:	4b30      	ldr	r3, [pc, #192]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	4b2f      	ldr	r3, [pc, #188]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 80052ea:	2180      	movs	r1, #128	@ 0x80
 80052ec:	0449      	lsls	r1, r1, #17
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052f2:	f7ff f8d1 	bl	8004498 <HAL_GetTick>
 80052f6:	0003      	movs	r3, r0
 80052f8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052fa:	e008      	b.n	800530e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052fc:	f7ff f8cc 	bl	8004498 <HAL_GetTick>
 8005300:	0002      	movs	r2, r0
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	1ad3      	subs	r3, r2, r3
 8005306:	2b02      	cmp	r3, #2
 8005308:	d901      	bls.n	800530e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e047      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800530e:	4b26      	ldr	r3, [pc, #152]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	2380      	movs	r3, #128	@ 0x80
 8005314:	049b      	lsls	r3, r3, #18
 8005316:	4013      	ands	r3, r2
 8005318:	d0f0      	beq.n	80052fc <HAL_RCC_OscConfig+0x574>
 800531a:	e03f      	b.n	800539c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800531c:	4b22      	ldr	r3, [pc, #136]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	4b21      	ldr	r3, [pc, #132]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005322:	4924      	ldr	r1, [pc, #144]	@ (80053b4 <HAL_RCC_OscConfig+0x62c>)
 8005324:	400a      	ands	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005328:	f7ff f8b6 	bl	8004498 <HAL_GetTick>
 800532c:	0003      	movs	r3, r0
 800532e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005332:	f7ff f8b1 	bl	8004498 <HAL_GetTick>
 8005336:	0002      	movs	r2, r0
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e02c      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005344:	4b18      	ldr	r3, [pc, #96]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	049b      	lsls	r3, r3, #18
 800534c:	4013      	ands	r3, r2
 800534e:	d1f0      	bne.n	8005332 <HAL_RCC_OscConfig+0x5aa>
 8005350:	e024      	b.n	800539c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d101      	bne.n	800535e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e01f      	b.n	800539e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800535e:	4b12      	ldr	r3, [pc, #72]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8005364:	4b10      	ldr	r3, [pc, #64]	@ (80053a8 <HAL_RCC_OscConfig+0x620>)
 8005366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005368:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	2380      	movs	r3, #128	@ 0x80
 800536e:	025b      	lsls	r3, r3, #9
 8005370:	401a      	ands	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	429a      	cmp	r2, r3
 8005378:	d10e      	bne.n	8005398 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	220f      	movs	r2, #15
 800537e:	401a      	ands	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005384:	429a      	cmp	r2, r3
 8005386:	d107      	bne.n	8005398 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005388:	697a      	ldr	r2, [r7, #20]
 800538a:	23f0      	movs	r3, #240	@ 0xf0
 800538c:	039b      	lsls	r3, r3, #14
 800538e:	401a      	ands	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e000      	b.n	800539e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	0018      	movs	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b008      	add	sp, #32
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			@ (mov r8, r8)
 80053a8:	40021000 	.word	0x40021000
 80053ac:	00001388 	.word	0x00001388
 80053b0:	efffffff 	.word	0xefffffff
 80053b4:	feffffff 	.word	0xfeffffff
 80053b8:	ffc2ffff 	.word	0xffc2ffff

080053bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0b3      	b.n	8005538 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	2201      	movs	r2, #1
 80053d6:	4013      	ands	r3, r2
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d911      	bls.n	8005402 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053de:	4b58      	ldr	r3, [pc, #352]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2201      	movs	r2, #1
 80053e4:	4393      	bics	r3, r2
 80053e6:	0019      	movs	r1, r3
 80053e8:	4b55      	ldr	r3, [pc, #340]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f0:	4b53      	ldr	r3, [pc, #332]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	4013      	ands	r3, r2
 80053f8:	683a      	ldr	r2, [r7, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d001      	beq.n	8005402 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e09a      	b.n	8005538 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2202      	movs	r2, #2
 8005408:	4013      	ands	r3, r2
 800540a:	d015      	beq.n	8005438 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2204      	movs	r2, #4
 8005412:	4013      	ands	r3, r2
 8005414:	d006      	beq.n	8005424 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005416:	4b4b      	ldr	r3, [pc, #300]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	4b4a      	ldr	r3, [pc, #296]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 800541c:	21e0      	movs	r1, #224	@ 0xe0
 800541e:	00c9      	lsls	r1, r1, #3
 8005420:	430a      	orrs	r2, r1
 8005422:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005424:	4b47      	ldr	r3, [pc, #284]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	22f0      	movs	r2, #240	@ 0xf0
 800542a:	4393      	bics	r3, r2
 800542c:	0019      	movs	r1, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	4b44      	ldr	r3, [pc, #272]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005434:	430a      	orrs	r2, r1
 8005436:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2201      	movs	r2, #1
 800543e:	4013      	ands	r3, r2
 8005440:	d040      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d107      	bne.n	800545a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800544a:	4b3e      	ldr	r3, [pc, #248]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	2380      	movs	r3, #128	@ 0x80
 8005450:	029b      	lsls	r3, r3, #10
 8005452:	4013      	ands	r3, r2
 8005454:	d114      	bne.n	8005480 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e06e      	b.n	8005538 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d107      	bne.n	8005472 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005462:	4b38      	ldr	r3, [pc, #224]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	2380      	movs	r3, #128	@ 0x80
 8005468:	049b      	lsls	r3, r3, #18
 800546a:	4013      	ands	r3, r2
 800546c:	d108      	bne.n	8005480 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e062      	b.n	8005538 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005472:	4b34      	ldr	r3, [pc, #208]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	2202      	movs	r2, #2
 8005478:	4013      	ands	r3, r2
 800547a:	d101      	bne.n	8005480 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e05b      	b.n	8005538 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005480:	4b30      	ldr	r3, [pc, #192]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2203      	movs	r2, #3
 8005486:	4393      	bics	r3, r2
 8005488:	0019      	movs	r1, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685a      	ldr	r2, [r3, #4]
 800548e:	4b2d      	ldr	r3, [pc, #180]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005490:	430a      	orrs	r2, r1
 8005492:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005494:	f7ff f800 	bl	8004498 <HAL_GetTick>
 8005498:	0003      	movs	r3, r0
 800549a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800549c:	e009      	b.n	80054b2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800549e:	f7fe fffb 	bl	8004498 <HAL_GetTick>
 80054a2:	0002      	movs	r2, r0
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	4a27      	ldr	r2, [pc, #156]	@ (8005548 <HAL_RCC_ClockConfig+0x18c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e042      	b.n	8005538 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054b2:	4b24      	ldr	r3, [pc, #144]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	220c      	movs	r2, #12
 80054b8:	401a      	ands	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d1ec      	bne.n	800549e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054c4:	4b1e      	ldr	r3, [pc, #120]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d211      	bcs.n	80054f6 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	4393      	bics	r3, r2
 80054da:	0019      	movs	r1, r3
 80054dc:	4b18      	ldr	r3, [pc, #96]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e4:	4b16      	ldr	r3, [pc, #88]	@ (8005540 <HAL_RCC_ClockConfig+0x184>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2201      	movs	r2, #1
 80054ea:	4013      	ands	r3, r2
 80054ec:	683a      	ldr	r2, [r7, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e020      	b.n	8005538 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2204      	movs	r2, #4
 80054fc:	4013      	ands	r3, r2
 80054fe:	d009      	beq.n	8005514 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005500:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4a11      	ldr	r2, [pc, #68]	@ (800554c <HAL_RCC_ClockConfig+0x190>)
 8005506:	4013      	ands	r3, r2
 8005508:	0019      	movs	r1, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68da      	ldr	r2, [r3, #12]
 800550e:	4b0d      	ldr	r3, [pc, #52]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 8005510:	430a      	orrs	r2, r1
 8005512:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005514:	f000 f820 	bl	8005558 <HAL_RCC_GetSysClockFreq>
 8005518:	0001      	movs	r1, r0
 800551a:	4b0a      	ldr	r3, [pc, #40]	@ (8005544 <HAL_RCC_ClockConfig+0x188>)
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	091b      	lsrs	r3, r3, #4
 8005520:	220f      	movs	r2, #15
 8005522:	4013      	ands	r3, r2
 8005524:	4a0a      	ldr	r2, [pc, #40]	@ (8005550 <HAL_RCC_ClockConfig+0x194>)
 8005526:	5cd3      	ldrb	r3, [r2, r3]
 8005528:	000a      	movs	r2, r1
 800552a:	40da      	lsrs	r2, r3
 800552c:	4b09      	ldr	r3, [pc, #36]	@ (8005554 <HAL_RCC_ClockConfig+0x198>)
 800552e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005530:	2000      	movs	r0, #0
 8005532:	f7fe ff6b 	bl	800440c <HAL_InitTick>
  
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
}
 8005538:	0018      	movs	r0, r3
 800553a:	46bd      	mov	sp, r7
 800553c:	b004      	add	sp, #16
 800553e:	bd80      	pop	{r7, pc}
 8005540:	40022000 	.word	0x40022000
 8005544:	40021000 	.word	0x40021000
 8005548:	00001388 	.word	0x00001388
 800554c:	fffff8ff 	.word	0xfffff8ff
 8005550:	0800b474 	.word	0x0800b474
 8005554:	20000000 	.word	0x20000000

08005558 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005558:	b590      	push	{r4, r7, lr}
 800555a:	b08f      	sub	sp, #60	@ 0x3c
 800555c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800555e:	2314      	movs	r3, #20
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	4a2b      	ldr	r2, [pc, #172]	@ (8005610 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005564:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005566:	c313      	stmia	r3!, {r0, r1, r4}
 8005568:	6812      	ldr	r2, [r2, #0]
 800556a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	4a29      	ldr	r2, [pc, #164]	@ (8005614 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005570:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005572:	c313      	stmia	r3!, {r0, r1, r4}
 8005574:	6812      	ldr	r2, [r2, #0]
 8005576:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800557c:	2300      	movs	r3, #0
 800557e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005580:	2300      	movs	r3, #0
 8005582:	637b      	str	r3, [r7, #52]	@ 0x34
 8005584:	2300      	movs	r3, #0
 8005586:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 800558c:	4b22      	ldr	r3, [pc, #136]	@ (8005618 <HAL_RCC_GetSysClockFreq+0xc0>)
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005594:	220c      	movs	r2, #12
 8005596:	4013      	ands	r3, r2
 8005598:	2b04      	cmp	r3, #4
 800559a:	d002      	beq.n	80055a2 <HAL_RCC_GetSysClockFreq+0x4a>
 800559c:	2b08      	cmp	r3, #8
 800559e:	d003      	beq.n	80055a8 <HAL_RCC_GetSysClockFreq+0x50>
 80055a0:	e02d      	b.n	80055fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80055a2:	4b1e      	ldr	r3, [pc, #120]	@ (800561c <HAL_RCC_GetSysClockFreq+0xc4>)
 80055a4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80055a6:	e02d      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80055a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055aa:	0c9b      	lsrs	r3, r3, #18
 80055ac:	220f      	movs	r2, #15
 80055ae:	4013      	ands	r3, r2
 80055b0:	2214      	movs	r2, #20
 80055b2:	18ba      	adds	r2, r7, r2
 80055b4:	5cd3      	ldrb	r3, [r2, r3]
 80055b6:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80055b8:	4b17      	ldr	r3, [pc, #92]	@ (8005618 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055bc:	220f      	movs	r2, #15
 80055be:	4013      	ands	r3, r2
 80055c0:	1d3a      	adds	r2, r7, #4
 80055c2:	5cd3      	ldrb	r3, [r2, r3]
 80055c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055c8:	2380      	movs	r3, #128	@ 0x80
 80055ca:	025b      	lsls	r3, r3, #9
 80055cc:	4013      	ands	r3, r2
 80055ce:	d009      	beq.n	80055e4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80055d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055d2:	4812      	ldr	r0, [pc, #72]	@ (800561c <HAL_RCC_GetSysClockFreq+0xc4>)
 80055d4:	f7fa fdb4 	bl	8000140 <__udivsi3>
 80055d8:	0003      	movs	r3, r0
 80055da:	001a      	movs	r2, r3
 80055dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055de:	4353      	muls	r3, r2
 80055e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80055e2:	e009      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80055e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055e6:	000a      	movs	r2, r1
 80055e8:	0152      	lsls	r2, r2, #5
 80055ea:	1a52      	subs	r2, r2, r1
 80055ec:	0193      	lsls	r3, r2, #6
 80055ee:	1a9b      	subs	r3, r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	185b      	adds	r3, r3, r1
 80055f4:	021b      	lsls	r3, r3, #8
 80055f6:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
      }
      sysclockfreq = pllclk;
 80055f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fa:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80055fc:	e002      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80055fe:	4b07      	ldr	r3, [pc, #28]	@ (800561c <HAL_RCC_GetSysClockFreq+0xc4>)
 8005600:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8005602:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8005606:	0018      	movs	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	b00f      	add	sp, #60	@ 0x3c
 800560c:	bd90      	pop	{r4, r7, pc}
 800560e:	46c0      	nop			@ (mov r8, r8)
 8005610:	0800b3f4 	.word	0x0800b3f4
 8005614:	0800b404 	.word	0x0800b404
 8005618:	40021000 	.word	0x40021000
 800561c:	007a1200 	.word	0x007a1200

08005620 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005624:	4b02      	ldr	r3, [pc, #8]	@ (8005630 <HAL_RCC_GetHCLKFreq+0x10>)
 8005626:	681b      	ldr	r3, [r3, #0]
}
 8005628:	0018      	movs	r0, r3
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	46c0      	nop			@ (mov r8, r8)
 8005630:	20000000 	.word	0x20000000

08005634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005638:	f7ff fff2 	bl	8005620 <HAL_RCC_GetHCLKFreq>
 800563c:	0001      	movs	r1, r0
 800563e:	4b06      	ldr	r3, [pc, #24]	@ (8005658 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	2207      	movs	r2, #7
 8005646:	4013      	ands	r3, r2
 8005648:	4a04      	ldr	r2, [pc, #16]	@ (800565c <HAL_RCC_GetPCLK1Freq+0x28>)
 800564a:	5cd3      	ldrb	r3, [r2, r3]
 800564c:	40d9      	lsrs	r1, r3
 800564e:	000b      	movs	r3, r1
}    
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	46c0      	nop			@ (mov r8, r8)
 8005658:	40021000 	.word	0x40021000
 800565c:	0800b484 	.word	0x0800b484

08005660 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	025b      	lsls	r3, r3, #9
 8005678:	4013      	ands	r3, r2
 800567a:	d100      	bne.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800567c:	e08e      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800567e:	2017      	movs	r0, #23
 8005680:	183b      	adds	r3, r7, r0
 8005682:	2200      	movs	r2, #0
 8005684:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005686:	4b57      	ldr	r3, [pc, #348]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005688:	69da      	ldr	r2, [r3, #28]
 800568a:	2380      	movs	r3, #128	@ 0x80
 800568c:	055b      	lsls	r3, r3, #21
 800568e:	4013      	ands	r3, r2
 8005690:	d110      	bne.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005692:	4b54      	ldr	r3, [pc, #336]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005694:	69da      	ldr	r2, [r3, #28]
 8005696:	4b53      	ldr	r3, [pc, #332]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005698:	2180      	movs	r1, #128	@ 0x80
 800569a:	0549      	lsls	r1, r1, #21
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
 80056a0:	4b50      	ldr	r3, [pc, #320]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056a2:	69da      	ldr	r2, [r3, #28]
 80056a4:	2380      	movs	r3, #128	@ 0x80
 80056a6:	055b      	lsls	r3, r3, #21
 80056a8:	4013      	ands	r3, r2
 80056aa:	60bb      	str	r3, [r7, #8]
 80056ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056ae:	183b      	adds	r3, r7, r0
 80056b0:	2201      	movs	r2, #1
 80056b2:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b4:	4b4c      	ldr	r3, [pc, #304]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	2380      	movs	r3, #128	@ 0x80
 80056ba:	005b      	lsls	r3, r3, #1
 80056bc:	4013      	ands	r3, r2
 80056be:	d11a      	bne.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056c0:	4b49      	ldr	r3, [pc, #292]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b48      	ldr	r3, [pc, #288]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056c6:	2180      	movs	r1, #128	@ 0x80
 80056c8:	0049      	lsls	r1, r1, #1
 80056ca:	430a      	orrs	r2, r1
 80056cc:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ce:	f7fe fee3 	bl	8004498 <HAL_GetTick>
 80056d2:	0003      	movs	r3, r0
 80056d4:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056d6:	e008      	b.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056d8:	f7fe fede 	bl	8004498 <HAL_GetTick>
 80056dc:	0002      	movs	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	2b64      	cmp	r3, #100	@ 0x64
 80056e4:	d901      	bls.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80056e6:	2303      	movs	r3, #3
 80056e8:	e077      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ea:	4b3f      	ldr	r3, [pc, #252]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	2380      	movs	r3, #128	@ 0x80
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	4013      	ands	r3, r2
 80056f4:	d0f0      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056f6:	4b3b      	ldr	r3, [pc, #236]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	23c0      	movs	r3, #192	@ 0xc0
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d034      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	23c0      	movs	r3, #192	@ 0xc0
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4013      	ands	r3, r2
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	429a      	cmp	r2, r3
 8005716:	d02c      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005718:	4b32      	ldr	r3, [pc, #200]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	4a33      	ldr	r2, [pc, #204]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800571e:	4013      	ands	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005722:	4b30      	ldr	r3, [pc, #192]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005724:	6a1a      	ldr	r2, [r3, #32]
 8005726:	4b2f      	ldr	r3, [pc, #188]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005728:	2180      	movs	r1, #128	@ 0x80
 800572a:	0249      	lsls	r1, r1, #9
 800572c:	430a      	orrs	r2, r1
 800572e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005730:	4b2c      	ldr	r3, [pc, #176]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	4b2b      	ldr	r3, [pc, #172]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005736:	492e      	ldr	r1, [pc, #184]	@ (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8005738:	400a      	ands	r2, r1
 800573a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800573c:	4b29      	ldr	r3, [pc, #164]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2201      	movs	r2, #1
 8005746:	4013      	ands	r3, r2
 8005748:	d013      	beq.n	8005772 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574a:	f7fe fea5 	bl	8004498 <HAL_GetTick>
 800574e:	0003      	movs	r3, r0
 8005750:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005752:	e009      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005754:	f7fe fea0 	bl	8004498 <HAL_GetTick>
 8005758:	0002      	movs	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	4a25      	ldr	r2, [pc, #148]	@ (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e038      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005768:	4b1e      	ldr	r3, [pc, #120]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	2202      	movs	r2, #2
 800576e:	4013      	ands	r3, r2
 8005770:	d0f0      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005772:	4b1c      	ldr	r3, [pc, #112]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	4a1d      	ldr	r2, [pc, #116]	@ (80057ec <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8005778:	4013      	ands	r3, r2
 800577a:	0019      	movs	r1, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b18      	ldr	r3, [pc, #96]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005782:	430a      	orrs	r2, r1
 8005784:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005786:	2317      	movs	r3, #23
 8005788:	18fb      	adds	r3, r7, r3
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d105      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005790:	4b14      	ldr	r3, [pc, #80]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005792:	69da      	ldr	r2, [r3, #28]
 8005794:	4b13      	ldr	r3, [pc, #76]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8005796:	4918      	ldr	r1, [pc, #96]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8005798:	400a      	ands	r2, r1
 800579a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2201      	movs	r2, #1
 80057a2:	4013      	ands	r3, r2
 80057a4:	d009      	beq.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80057a6:	4b0f      	ldr	r3, [pc, #60]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057aa:	2203      	movs	r2, #3
 80057ac:	4393      	bics	r3, r2
 80057ae:	0019      	movs	r1, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	4b0b      	ldr	r3, [pc, #44]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057b6:	430a      	orrs	r2, r1
 80057b8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2220      	movs	r2, #32
 80057c0:	4013      	ands	r3, r2
 80057c2:	d009      	beq.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057c4:	4b07      	ldr	r3, [pc, #28]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057c8:	2210      	movs	r2, #16
 80057ca:	4393      	bics	r3, r2
 80057cc:	0019      	movs	r1, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	4b04      	ldr	r3, [pc, #16]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80057d4:	430a      	orrs	r2, r1
 80057d6:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	0018      	movs	r0, r3
 80057dc:	46bd      	mov	sp, r7
 80057de:	b006      	add	sp, #24
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	46c0      	nop			@ (mov r8, r8)
 80057e4:	40021000 	.word	0x40021000
 80057e8:	40007000 	.word	0x40007000
 80057ec:	fffffcff 	.word	0xfffffcff
 80057f0:	fffeffff 	.word	0xfffeffff
 80057f4:	00001388 	.word	0x00001388
 80057f8:	efffffff 	.word	0xefffffff

080057fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e044      	b.n	8005898 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2270      	movs	r2, #112	@ 0x70
 800581a:	2100      	movs	r1, #0
 800581c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	0018      	movs	r0, r3
 8005822:	f7fe fccf 	bl	80041c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2224      	movs	r2, #36	@ 0x24
 800582a:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2101      	movs	r1, #1
 8005838:	438a      	bics	r2, r1
 800583a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	0018      	movs	r0, r3
 8005840:	f000 fbb6 	bl	8005fb0 <UART_SetConfig>
 8005844:	0003      	movs	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e024      	b.n	8005898 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	0018      	movs	r0, r3
 800585a:	f000 fd31 	bl	80062c0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	490d      	ldr	r1, [pc, #52]	@ (80058a0 <HAL_UART_Init+0xa4>)
 800586a:	400a      	ands	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	2108      	movs	r1, #8
 800587a:	438a      	bics	r2, r1
 800587c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	2101      	movs	r1, #1
 800588a:	430a      	orrs	r2, r1
 800588c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	0018      	movs	r0, r3
 8005892:	f000 fdc9 	bl	8006428 <UART_CheckIdleState>
 8005896:	0003      	movs	r3, r0
}
 8005898:	0018      	movs	r0, r3
 800589a:	46bd      	mov	sp, r7
 800589c:	b002      	add	sp, #8
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	fffff7ff 	.word	0xfffff7ff

080058a4 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d101      	bne.n	80058b6 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e044      	b.n	8005940 <HAL_HalfDuplex_Init+0x9c>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2270      	movs	r2, #112	@ 0x70
 80058c2:	2100      	movs	r1, #0
 80058c4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7fe fc7b 	bl	80041c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2224      	movs	r2, #36	@ 0x24
 80058d2:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2101      	movs	r1, #1
 80058e0:	438a      	bics	r2, r1
 80058e2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	0018      	movs	r0, r3
 80058e8:	f000 fb62 	bl	8005fb0 <UART_SetConfig>
 80058ec:	0003      	movs	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d101      	bne.n	80058f6 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e024      	b.n	8005940 <HAL_HalfDuplex_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0018      	movs	r0, r3
 8005902:	f000 fcdd 	bl	80062c0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported) and IREN (if IrDA is supported) bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	685a      	ldr	r2, [r3, #4]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	490d      	ldr	r1, [pc, #52]	@ (8005948 <HAL_HalfDuplex_Init+0xa4>)
 8005912:	400a      	ands	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_IREN);
#endif /* USART_CR3_IREN */
#endif /* USART_CR3_SCEN */

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689a      	ldr	r2, [r3, #8]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2108      	movs	r1, #8
 8005922:	430a      	orrs	r2, r1
 8005924:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2101      	movs	r1, #1
 8005932:	430a      	orrs	r2, r1
 8005934:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	0018      	movs	r0, r3
 800593a:	f000 fd75 	bl	8006428 <UART_CheckIdleState>
 800593e:	0003      	movs	r3, r0
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	b002      	add	sp, #8
 8005946:	bd80      	pop	{r7, pc}
 8005948:	fffff7ff 	.word	0xfffff7ff

0800594c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	@ 0x28
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	1dbb      	adds	r3, r7, #6
 800595a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005960:	2b20      	cmp	r3, #32
 8005962:	d000      	beq.n	8005966 <HAL_UART_Transmit+0x1a>
 8005964:	e094      	b.n	8005a90 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d003      	beq.n	8005974 <HAL_UART_Transmit+0x28>
 800596c:	1dbb      	adds	r3, r7, #6
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e08c      	b.n	8005a92 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	015b      	lsls	r3, r3, #5
 8005980:	429a      	cmp	r2, r3
 8005982:	d109      	bne.n	8005998 <HAL_UART_Transmit+0x4c>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d105      	bne.n	8005998 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2201      	movs	r2, #1
 8005990:	4013      	ands	r3, r2
 8005992:	d001      	beq.n	8005998 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	e07c      	b.n	8005a92 <HAL_UART_Transmit+0x146>
      }
    }

    __HAL_LOCK(huart);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2270      	movs	r2, #112	@ 0x70
 800599c:	5c9b      	ldrb	r3, [r3, r2]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_UART_Transmit+0x5a>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e075      	b.n	8005a92 <HAL_UART_Transmit+0x146>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2270      	movs	r2, #112	@ 0x70
 80059aa:	2101      	movs	r1, #1
 80059ac:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2221      	movs	r2, #33	@ 0x21
 80059b8:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80059ba:	f7fe fd6d 	bl	8004498 <HAL_GetTick>
 80059be:	0003      	movs	r3, r0
 80059c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	1dba      	adds	r2, r7, #6
 80059c6:	2150      	movs	r1, #80	@ 0x50
 80059c8:	8812      	ldrh	r2, [r2, #0]
 80059ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	1dba      	adds	r2, r7, #6
 80059d0:	2152      	movs	r1, #82	@ 0x52
 80059d2:	8812      	ldrh	r2, [r2, #0]
 80059d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	689a      	ldr	r2, [r3, #8]
 80059da:	2380      	movs	r3, #128	@ 0x80
 80059dc:	015b      	lsls	r3, r3, #5
 80059de:	429a      	cmp	r2, r3
 80059e0:	d108      	bne.n	80059f4 <HAL_UART_Transmit+0xa8>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e003      	b.n	80059fc <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059fc:	e02c      	b.n	8005a58 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	68f8      	ldr	r0, [r7, #12]
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	9300      	str	r3, [sp, #0]
 8005a06:	0013      	movs	r3, r2
 8005a08:	2200      	movs	r2, #0
 8005a0a:	2180      	movs	r1, #128	@ 0x80
 8005a0c:	f000 fd50 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 8005a10:	1e03      	subs	r3, r0, #0
 8005a12:	d001      	beq.n	8005a18 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	e03c      	b.n	8005a92 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10b      	bne.n	8005a36 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	881a      	ldrh	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	05d2      	lsls	r2, r2, #23
 8005a28:	0dd2      	lsrs	r2, r2, #23
 8005a2a:	b292      	uxth	r2, r2
 8005a2c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	3302      	adds	r3, #2
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	e007      	b.n	8005a46 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	781a      	ldrb	r2, [r3, #0]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	3301      	adds	r3, #1
 8005a44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2252      	movs	r2, #82	@ 0x52
 8005a4a:	5a9b      	ldrh	r3, [r3, r2]
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b299      	uxth	r1, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2252      	movs	r2, #82	@ 0x52
 8005a56:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2252      	movs	r2, #82	@ 0x52
 8005a5c:	5a9b      	ldrh	r3, [r3, r2]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d1cc      	bne.n	80059fe <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	9300      	str	r3, [sp, #0]
 8005a6c:	0013      	movs	r3, r2
 8005a6e:	2200      	movs	r2, #0
 8005a70:	2140      	movs	r1, #64	@ 0x40
 8005a72:	f000 fd1d 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 8005a76:	1e03      	subs	r3, r0, #0
 8005a78:	d001      	beq.n	8005a7e <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e009      	b.n	8005a92 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2220      	movs	r2, #32
 8005a82:	675a      	str	r2, [r3, #116]	@ 0x74

    __HAL_UNLOCK(huart);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2270      	movs	r2, #112	@ 0x70
 8005a88:	2100      	movs	r1, #0
 8005a8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	e000      	b.n	8005a92 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8005a90:	2302      	movs	r3, #2
  }
}
 8005a92:	0018      	movs	r0, r3
 8005a94:	46bd      	mov	sp, r7
 8005a96:	b008      	add	sp, #32
 8005a98:	bd80      	pop	{r7, pc}
	...

08005a9c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	1dbb      	adds	r3, r7, #6
 8005aa8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d000      	beq.n	8005ab4 <HAL_UART_Transmit_DMA+0x18>
 8005ab2:	e077      	b.n	8005ba4 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_UART_Transmit_DMA+0x26>
 8005aba:	1dbb      	adds	r3, r7, #6
 8005abc:	881b      	ldrh	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e06f      	b.n	8005ba6 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	2380      	movs	r3, #128	@ 0x80
 8005acc:	015b      	lsls	r3, r3, #5
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d109      	bne.n	8005ae6 <HAL_UART_Transmit_DMA+0x4a>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d105      	bne.n	8005ae6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2201      	movs	r2, #1
 8005ade:	4013      	ands	r3, r2
 8005ae0:	d001      	beq.n	8005ae6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e05f      	b.n	8005ba6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    __HAL_LOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2270      	movs	r2, #112	@ 0x70
 8005aea:	5c9b      	ldrb	r3, [r3, r2]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_UART_Transmit_DMA+0x58>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e058      	b.n	8005ba6 <HAL_UART_Transmit_DMA+0x10a>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2270      	movs	r2, #112	@ 0x70
 8005af8:	2101      	movs	r1, #1
 8005afa:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	1dba      	adds	r2, r7, #6
 8005b06:	2150      	movs	r1, #80	@ 0x50
 8005b08:	8812      	ldrh	r2, [r2, #0]
 8005b0a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	1dba      	adds	r2, r7, #6
 8005b10:	2152      	movs	r1, #82	@ 0x52
 8005b12:	8812      	ldrh	r2, [r2, #0]
 8005b14:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2221      	movs	r2, #33	@ 0x21
 8005b20:	675a      	str	r2, [r3, #116]	@ 0x74

    if (huart->hdmatx != NULL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d02a      	beq.n	8005b80 <HAL_UART_Transmit_DMA+0xe4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b2e:	4a20      	ldr	r2, [pc, #128]	@ (8005bb0 <HAL_UART_Transmit_DMA+0x114>)
 8005b30:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b36:	4a1f      	ldr	r2, [pc, #124]	@ (8005bb4 <HAL_UART_Transmit_DMA+0x118>)
 8005b38:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8005bb8 <HAL_UART_Transmit_DMA+0x11c>)
 8005b40:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b46:	2200      	movs	r2, #0
 8005b48:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b52:	0019      	movs	r1, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3328      	adds	r3, #40	@ 0x28
 8005b5a:	001a      	movs	r2, r3
 8005b5c:	1dbb      	adds	r3, r7, #6
 8005b5e:	881b      	ldrh	r3, [r3, #0]
 8005b60:	f7fe fdee 	bl	8004740 <HAL_DMA_Start_IT>
 8005b64:	1e03      	subs	r3, r0, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_UART_Transmit_DMA+0xe4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2270      	movs	r2, #112	@ 0x70
 8005b72:	2100      	movs	r1, #0
 8005b74:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2220      	movs	r2, #32
 8005b7a:	675a      	str	r2, [r3, #116]	@ 0x74

        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e012      	b.n	8005ba6 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2240      	movs	r2, #64	@ 0x40
 8005b86:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2270      	movs	r2, #112	@ 0x70
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	5499      	strb	r1, [r3, r2]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689a      	ldr	r2, [r3, #8]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	2180      	movs	r1, #128	@ 0x80
 8005b9c:	430a      	orrs	r2, r1
 8005b9e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e000      	b.n	8005ba6 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005ba4:	2302      	movs	r3, #2
  }
}
 8005ba6:	0018      	movs	r0, r3
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b004      	add	sp, #16
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	46c0      	nop			@ (mov r8, r8)
 8005bb0:	08006615 	.word	0x08006615
 8005bb4:	08006665 	.word	0x08006665
 8005bb8:	0800670b 	.word	0x0800670b

08005bbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	1dbb      	adds	r3, r7, #6
 8005bc8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d000      	beq.n	8005bd4 <HAL_UART_Receive_DMA+0x18>
 8005bd2:	e07f      	b.n	8005cd4 <HAL_UART_Receive_DMA+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_UART_Receive_DMA+0x26>
 8005bda:	1dbb      	adds	r3, r7, #6
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e077      	b.n	8005cd6 <HAL_UART_Receive_DMA+0x11a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	2380      	movs	r3, #128	@ 0x80
 8005bec:	015b      	lsls	r3, r3, #5
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d109      	bne.n	8005c06 <HAL_UART_Receive_DMA+0x4a>
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d105      	bne.n	8005c06 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2201      	movs	r2, #1
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d001      	beq.n	8005c06 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e067      	b.n	8005cd6 <HAL_UART_Receive_DMA+0x11a>
      }
    }

    __HAL_LOCK(huart);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2270      	movs	r2, #112	@ 0x70
 8005c0a:	5c9b      	ldrb	r3, [r3, r2]
 8005c0c:	2b01      	cmp	r3, #1
 8005c0e:	d101      	bne.n	8005c14 <HAL_UART_Receive_DMA+0x58>
 8005c10:	2302      	movs	r3, #2
 8005c12:	e060      	b.n	8005cd6 <HAL_UART_Receive_DMA+0x11a>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2270      	movs	r2, #112	@ 0x70
 8005c18:	2101      	movs	r1, #1
 8005c1a:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr = pData;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	68ba      	ldr	r2, [r7, #8]
 8005c20:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferSize = Size;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	1dba      	adds	r2, r7, #6
 8005c26:	2158      	movs	r1, #88	@ 0x58
 8005c28:	8812      	ldrh	r2, [r2, #0]
 8005c2a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2222      	movs	r2, #34	@ 0x22
 8005c36:	679a      	str	r2, [r3, #120]	@ 0x78

    if (huart->hdmarx != NULL)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d02a      	beq.n	8005c96 <HAL_UART_Receive_DMA+0xda>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c44:	4a26      	ldr	r2, [pc, #152]	@ (8005ce0 <HAL_UART_Receive_DMA+0x124>)
 8005c46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c4c:	4a25      	ldr	r2, [pc, #148]	@ (8005ce4 <HAL_UART_Receive_DMA+0x128>)
 8005c4e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c54:	4a24      	ldr	r2, [pc, #144]	@ (8005ce8 <HAL_UART_Receive_DMA+0x12c>)
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3324      	adds	r3, #36	@ 0x24
 8005c6a:	0019      	movs	r1, r3
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c70:	001a      	movs	r2, r3
 8005c72:	1dbb      	adds	r3, r7, #6
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	f7fe fd63 	bl	8004740 <HAL_DMA_Start_IT>
 8005c7a:	1e03      	subs	r3, r0, #0
 8005c7c:	d00b      	beq.n	8005c96 <HAL_UART_Receive_DMA+0xda>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2210      	movs	r2, #16
 8005c82:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2270      	movs	r2, #112	@ 0x70
 8005c88:	2100      	movs	r1, #0
 8005c8a:	5499      	strb	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2220      	movs	r2, #32
 8005c90:	675a      	str	r2, [r3, #116]	@ 0x74

        return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e01f      	b.n	8005cd6 <HAL_UART_Receive_DMA+0x11a>
      }
    }
    __HAL_UNLOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2270      	movs	r2, #112	@ 0x70
 8005c9a:	2100      	movs	r1, #0
 8005c9c:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	681a      	ldr	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2180      	movs	r1, #128	@ 0x80
 8005caa:	0049      	lsls	r1, r1, #1
 8005cac:	430a      	orrs	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689a      	ldr	r2, [r3, #8]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2101      	movs	r1, #1
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689a      	ldr	r2, [r3, #8]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2140      	movs	r1, #64	@ 0x40
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e000      	b.n	8005cd6 <HAL_UART_Receive_DMA+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8005cd4:	2302      	movs	r3, #2
  }
}
 8005cd6:	0018      	movs	r0, r3
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	b004      	add	sp, #16
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	46c0      	nop			@ (mov r8, r8)
 8005ce0:	08006685 	.word	0x08006685
 8005ce4:	080066ed 	.word	0x080066ed
 8005ce8:	0800670b 	.word	0x0800670b

08005cec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b088      	sub	sp, #32
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69db      	ldr	r3, [r3, #28]
 8005cfa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	4a89      	ldr	r2, [pc, #548]	@ (8005f34 <HAL_UART_IRQHandler+0x248>)
 8005d10:	4013      	ands	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d112      	bne.n	8005d40 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d00e      	beq.n	8005d40 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2220      	movs	r2, #32
 8005d26:	4013      	ands	r3, r2
 8005d28:	d00a      	beq.n	8005d40 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d100      	bne.n	8005d34 <HAL_UART_IRQHandler+0x48>
 8005d32:	e0f6      	b.n	8005f22 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	0010      	movs	r0, r2
 8005d3c:	4798      	blx	r3
      }
      return;
 8005d3e:	e0f0      	b.n	8005f22 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d100      	bne.n	8005d48 <HAL_UART_IRQHandler+0x5c>
 8005d46:	e0cd      	b.n	8005ee4 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	d105      	bne.n	8005d5c <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8005d50:	69ba      	ldr	r2, [r7, #24]
 8005d52:	2390      	movs	r3, #144	@ 0x90
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	4013      	ands	r3, r2
 8005d58:	d100      	bne.n	8005d5c <HAL_UART_IRQHandler+0x70>
 8005d5a:	e0c3      	b.n	8005ee4 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	4013      	ands	r3, r2
 8005d62:	d00e      	beq.n	8005d82 <HAL_UART_IRQHandler+0x96>
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	2380      	movs	r3, #128	@ 0x80
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	4013      	ands	r3, r2
 8005d6c:	d009      	beq.n	8005d82 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2201      	movs	r2, #1
 8005d74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2202      	movs	r2, #2
 8005d86:	4013      	ands	r3, r2
 8005d88:	d00d      	beq.n	8005da6 <HAL_UART_IRQHandler+0xba>
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	4013      	ands	r3, r2
 8005d90:	d009      	beq.n	8005da6 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2202      	movs	r2, #2
 8005d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005d9e:	2204      	movs	r2, #4
 8005da0:	431a      	orrs	r2, r3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	2204      	movs	r2, #4
 8005daa:	4013      	ands	r3, r2
 8005dac:	d00d      	beq.n	8005dca <HAL_UART_IRQHandler+0xde>
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2201      	movs	r2, #1
 8005db2:	4013      	ands	r3, r2
 8005db4:	d009      	beq.n	8005dca <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dc2:	2202      	movs	r2, #2
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	4013      	ands	r3, r2
 8005dd0:	d011      	beq.n	8005df6 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	2220      	movs	r2, #32
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d103      	bne.n	8005de2 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005de0:	d009      	beq.n	8005df6 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	2208      	movs	r2, #8
 8005de8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005dee:	2208      	movs	r2, #8
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005df6:	69fa      	ldr	r2, [r7, #28]
 8005df8:	2380      	movs	r3, #128	@ 0x80
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	d00f      	beq.n	8005e20 <HAL_UART_IRQHandler+0x134>
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	2380      	movs	r3, #128	@ 0x80
 8005e04:	04db      	lsls	r3, r3, #19
 8005e06:	4013      	ands	r3, r2
 8005e08:	d00a      	beq.n	8005e20 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2280      	movs	r2, #128	@ 0x80
 8005e10:	0112      	lsls	r2, r2, #4
 8005e12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e18:	2220      	movs	r2, #32
 8005e1a:	431a      	orrs	r2, r3
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d100      	bne.n	8005e2a <HAL_UART_IRQHandler+0x13e>
 8005e28:	e07d      	b.n	8005f26 <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2220      	movs	r2, #32
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d00c      	beq.n	8005e4c <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	2220      	movs	r2, #32
 8005e36:	4013      	ands	r3, r2
 8005e38:	d008      	beq.n	8005e4c <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d004      	beq.n	8005e4c <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	0010      	movs	r0, r2
 8005e4a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e50:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	2240      	movs	r2, #64	@ 0x40
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b40      	cmp	r3, #64	@ 0x40
 8005e5e:	d003      	beq.n	8005e68 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2228      	movs	r2, #40	@ 0x28
 8005e64:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e66:	d033      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f000 fbb2 	bl	80065d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2240      	movs	r2, #64	@ 0x40
 8005e78:	4013      	ands	r3, r2
 8005e7a:	2b40      	cmp	r3, #64	@ 0x40
 8005e7c:	d123      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	2140      	movs	r1, #64	@ 0x40
 8005e8a:	438a      	bics	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d012      	beq.n	8005ebc <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e9a:	4a27      	ldr	r2, [pc, #156]	@ (8005f38 <HAL_UART_IRQHandler+0x24c>)
 8005e9c:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ea2:	0018      	movs	r0, r3
 8005ea4:	f7fe fcb2 	bl	800480c <HAL_DMA_Abort_IT>
 8005ea8:	1e03      	subs	r3, r0, #0
 8005eaa:	d019      	beq.n	8005ee0 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb6:	0018      	movs	r0, r3
 8005eb8:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eba:	e011      	b.n	8005ee0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	0018      	movs	r0, r3
 8005ec0:	f000 f85c 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e00c      	b.n	8005ee0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	0018      	movs	r0, r3
 8005eca:	f000 f857 	bl	8005f7c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ece:	e007      	b.n	8005ee0 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 f852 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2200      	movs	r2, #0
 8005edc:	67da      	str	r2, [r3, #124]	@ 0x7c
      }
    }
    return;
 8005ede:	e022      	b.n	8005f26 <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee0:	46c0      	nop			@ (mov r8, r8)
    return;
 8005ee2:	e020      	b.n	8005f26 <HAL_UART_IRQHandler+0x23a>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	2280      	movs	r2, #128	@ 0x80
 8005ee8:	4013      	ands	r3, r2
 8005eea:	d00d      	beq.n	8005f08 <HAL_UART_IRQHandler+0x21c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	2280      	movs	r2, #128	@ 0x80
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_UART_IRQHandler+0x21c>
  {
    if (huart->TxISR != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d016      	beq.n	8005f2a <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	0010      	movs	r0, r2
 8005f04:	4798      	blx	r3
    }
    return;
 8005f06:	e010      	b.n	8005f2a <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	2240      	movs	r2, #64	@ 0x40
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d00d      	beq.n	8005f2c <HAL_UART_IRQHandler+0x240>
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2240      	movs	r2, #64	@ 0x40
 8005f14:	4013      	ands	r3, r2
 8005f16:	d009      	beq.n	8005f2c <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0018      	movs	r0, r3
 8005f1c:	f000 fc4b 	bl	80067b6 <UART_EndTransmit_IT>
    return;
 8005f20:	e004      	b.n	8005f2c <HAL_UART_IRQHandler+0x240>
      return;
 8005f22:	46c0      	nop			@ (mov r8, r8)
 8005f24:	e002      	b.n	8005f2c <HAL_UART_IRQHandler+0x240>
    return;
 8005f26:	46c0      	nop			@ (mov r8, r8)
 8005f28:	e000      	b.n	8005f2c <HAL_UART_IRQHandler+0x240>
    return;
 8005f2a:	46c0      	nop			@ (mov r8, r8)
  }

}
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	b008      	add	sp, #32
 8005f30:	bd80      	pop	{r7, pc}
 8005f32:	46c0      	nop			@ (mov r8, r8)
 8005f34:	0000080f 	.word	0x0000080f
 8005f38:	08006789 	.word	0x08006789

08005f3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f44:	46c0      	nop			@ (mov r8, r8)
 8005f46:	46bd      	mov	sp, r7
 8005f48:	b002      	add	sp, #8
 8005f4a:	bd80      	pop	{r7, pc}

08005f4c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b082      	sub	sp, #8
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f54:	46c0      	nop			@ (mov r8, r8)
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005f64:	46c0      	nop			@ (mov r8, r8)
 8005f66:	46bd      	mov	sp, r7
 8005f68:	b002      	add	sp, #8
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f74:	46c0      	nop			@ (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	b002      	add	sp, #8
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f84:	46c0      	nop			@ (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	b002      	add	sp, #8
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f98:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f9e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	4313      	orrs	r3, r2
}
 8005fa6:	0018      	movs	r0, r3
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	b004      	add	sp, #16
 8005fac:	bd80      	pop	{r7, pc}
	...

08005fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fbc:	2317      	movs	r3, #23
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4aaf      	ldr	r2, [pc, #700]	@ (80062a0 <UART_SetConfig+0x2f0>)
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	0019      	movs	r1, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	4aaa      	ldr	r2, [pc, #680]	@ (80062a4 <UART_SetConfig+0x2f4>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	0019      	movs	r1, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	693a      	ldr	r2, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4aa1      	ldr	r2, [pc, #644]	@ (80062a8 <UART_SetConfig+0x2f8>)
 8006022:	4013      	ands	r3, r2
 8006024:	0019      	movs	r1, r3
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	430a      	orrs	r2, r1
 800602e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a9d      	ldr	r2, [pc, #628]	@ (80062ac <UART_SetConfig+0x2fc>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d127      	bne.n	800608a <UART_SetConfig+0xda>
 800603a:	4b9d      	ldr	r3, [pc, #628]	@ (80062b0 <UART_SetConfig+0x300>)
 800603c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800603e:	2203      	movs	r2, #3
 8006040:	4013      	ands	r3, r2
 8006042:	2b03      	cmp	r3, #3
 8006044:	d00d      	beq.n	8006062 <UART_SetConfig+0xb2>
 8006046:	d81b      	bhi.n	8006080 <UART_SetConfig+0xd0>
 8006048:	2b02      	cmp	r3, #2
 800604a:	d014      	beq.n	8006076 <UART_SetConfig+0xc6>
 800604c:	d818      	bhi.n	8006080 <UART_SetConfig+0xd0>
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <UART_SetConfig+0xa8>
 8006052:	2b01      	cmp	r3, #1
 8006054:	d00a      	beq.n	800606c <UART_SetConfig+0xbc>
 8006056:	e013      	b.n	8006080 <UART_SetConfig+0xd0>
 8006058:	231f      	movs	r3, #31
 800605a:	18fb      	adds	r3, r7, r3
 800605c:	2200      	movs	r2, #0
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	e021      	b.n	80060a6 <UART_SetConfig+0xf6>
 8006062:	231f      	movs	r3, #31
 8006064:	18fb      	adds	r3, r7, r3
 8006066:	2202      	movs	r2, #2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e01c      	b.n	80060a6 <UART_SetConfig+0xf6>
 800606c:	231f      	movs	r3, #31
 800606e:	18fb      	adds	r3, r7, r3
 8006070:	2204      	movs	r2, #4
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	e017      	b.n	80060a6 <UART_SetConfig+0xf6>
 8006076:	231f      	movs	r3, #31
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	2208      	movs	r2, #8
 800607c:	701a      	strb	r2, [r3, #0]
 800607e:	e012      	b.n	80060a6 <UART_SetConfig+0xf6>
 8006080:	231f      	movs	r3, #31
 8006082:	18fb      	adds	r3, r7, r3
 8006084:	2210      	movs	r2, #16
 8006086:	701a      	strb	r2, [r3, #0]
 8006088:	e00d      	b.n	80060a6 <UART_SetConfig+0xf6>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a89      	ldr	r2, [pc, #548]	@ (80062b4 <UART_SetConfig+0x304>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d104      	bne.n	800609e <UART_SetConfig+0xee>
 8006094:	231f      	movs	r3, #31
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	e003      	b.n	80060a6 <UART_SetConfig+0xf6>
 800609e:	231f      	movs	r3, #31
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	2210      	movs	r2, #16
 80060a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	69da      	ldr	r2, [r3, #28]
 80060aa:	2380      	movs	r3, #128	@ 0x80
 80060ac:	021b      	lsls	r3, r3, #8
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d000      	beq.n	80060b4 <UART_SetConfig+0x104>
 80060b2:	e07e      	b.n	80061b2 <UART_SetConfig+0x202>
  {
    switch (clocksource)
 80060b4:	231f      	movs	r3, #31
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d03f      	beq.n	800613e <UART_SetConfig+0x18e>
 80060be:	dc4e      	bgt.n	800615e <UART_SetConfig+0x1ae>
 80060c0:	2b04      	cmp	r3, #4
 80060c2:	d028      	beq.n	8006116 <UART_SetConfig+0x166>
 80060c4:	dc4b      	bgt.n	800615e <UART_SetConfig+0x1ae>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <UART_SetConfig+0x120>
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d014      	beq.n	80060f8 <UART_SetConfig+0x148>
 80060ce:	e046      	b.n	800615e <UART_SetConfig+0x1ae>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d0:	f7ff fab0 	bl	8005634 <HAL_RCC_GetPCLK1Freq>
 80060d4:	0003      	movs	r3, r0
 80060d6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	005a      	lsls	r2, r3, #1
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	085b      	lsrs	r3, r3, #1
 80060e2:	18d2      	adds	r2, r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	0019      	movs	r1, r3
 80060ea:	0010      	movs	r0, r2
 80060ec:	f7fa f828 	bl	8000140 <__udivsi3>
 80060f0:	0003      	movs	r3, r0
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	61bb      	str	r3, [r7, #24]
        break;
 80060f6:	e037      	b.n	8006168 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	085b      	lsrs	r3, r3, #1
 80060fe:	4a6e      	ldr	r2, [pc, #440]	@ (80062b8 <UART_SetConfig+0x308>)
 8006100:	189a      	adds	r2, r3, r2
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	0019      	movs	r1, r3
 8006108:	0010      	movs	r0, r2
 800610a:	f7fa f819 	bl	8000140 <__udivsi3>
 800610e:	0003      	movs	r3, r0
 8006110:	b29b      	uxth	r3, r3
 8006112:	61bb      	str	r3, [r7, #24]
        break;
 8006114:	e028      	b.n	8006168 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006116:	f7ff fa1f 	bl	8005558 <HAL_RCC_GetSysClockFreq>
 800611a:	0003      	movs	r3, r0
 800611c:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	005a      	lsls	r2, r3, #1
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	085b      	lsrs	r3, r3, #1
 8006128:	18d2      	adds	r2, r2, r3
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	0019      	movs	r1, r3
 8006130:	0010      	movs	r0, r2
 8006132:	f7fa f805 	bl	8000140 <__udivsi3>
 8006136:	0003      	movs	r3, r0
 8006138:	b29b      	uxth	r3, r3
 800613a:	61bb      	str	r3, [r7, #24]
        break;
 800613c:	e014      	b.n	8006168 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	085b      	lsrs	r3, r3, #1
 8006144:	2280      	movs	r2, #128	@ 0x80
 8006146:	0252      	lsls	r2, r2, #9
 8006148:	189a      	adds	r2, r3, r2
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	0019      	movs	r1, r3
 8006150:	0010      	movs	r0, r2
 8006152:	f7f9 fff5 	bl	8000140 <__udivsi3>
 8006156:	0003      	movs	r3, r0
 8006158:	b29b      	uxth	r3, r3
 800615a:	61bb      	str	r3, [r7, #24]
        break;
 800615c:	e004      	b.n	8006168 <UART_SetConfig+0x1b8>
      default:
        ret = HAL_ERROR;
 800615e:	2317      	movs	r3, #23
 8006160:	18fb      	adds	r3, r7, r3
 8006162:	2201      	movs	r2, #1
 8006164:	701a      	strb	r2, [r3, #0]
        break;
 8006166:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	d91c      	bls.n	80061a8 <UART_SetConfig+0x1f8>
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	2380      	movs	r3, #128	@ 0x80
 8006172:	025b      	lsls	r3, r3, #9
 8006174:	429a      	cmp	r2, r3
 8006176:	d217      	bcs.n	80061a8 <UART_SetConfig+0x1f8>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	b29a      	uxth	r2, r3
 800617c:	200a      	movs	r0, #10
 800617e:	183b      	adds	r3, r7, r0
 8006180:	210f      	movs	r1, #15
 8006182:	438a      	bics	r2, r1
 8006184:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	085b      	lsrs	r3, r3, #1
 800618a:	b29b      	uxth	r3, r3
 800618c:	2207      	movs	r2, #7
 800618e:	4013      	ands	r3, r2
 8006190:	b299      	uxth	r1, r3
 8006192:	183b      	adds	r3, r7, r0
 8006194:	183a      	adds	r2, r7, r0
 8006196:	8812      	ldrh	r2, [r2, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	183a      	adds	r2, r7, r0
 80061a2:	8812      	ldrh	r2, [r2, #0]
 80061a4:	60da      	str	r2, [r3, #12]
 80061a6:	e06d      	b.n	8006284 <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 80061a8:	2317      	movs	r3, #23
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	2201      	movs	r2, #1
 80061ae:	701a      	strb	r2, [r3, #0]
 80061b0:	e068      	b.n	8006284 <UART_SetConfig+0x2d4>
    }
  }
  else
  {
    switch (clocksource)
 80061b2:	231f      	movs	r3, #31
 80061b4:	18fb      	adds	r3, r7, r3
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d03d      	beq.n	8006238 <UART_SetConfig+0x288>
 80061bc:	dc4c      	bgt.n	8006258 <UART_SetConfig+0x2a8>
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d027      	beq.n	8006212 <UART_SetConfig+0x262>
 80061c2:	dc49      	bgt.n	8006258 <UART_SetConfig+0x2a8>
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <UART_SetConfig+0x21e>
 80061c8:	2b02      	cmp	r3, #2
 80061ca:	d013      	beq.n	80061f4 <UART_SetConfig+0x244>
 80061cc:	e044      	b.n	8006258 <UART_SetConfig+0x2a8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ce:	f7ff fa31 	bl	8005634 <HAL_RCC_GetPCLK1Freq>
 80061d2:	0003      	movs	r3, r0
 80061d4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	085a      	lsrs	r2, r3, #1
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	18d2      	adds	r2, r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	0019      	movs	r1, r3
 80061e6:	0010      	movs	r0, r2
 80061e8:	f7f9 ffaa 	bl	8000140 <__udivsi3>
 80061ec:	0003      	movs	r3, r0
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	61bb      	str	r3, [r7, #24]
        break;
 80061f2:	e036      	b.n	8006262 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	085b      	lsrs	r3, r3, #1
 80061fa:	4a30      	ldr	r2, [pc, #192]	@ (80062bc <UART_SetConfig+0x30c>)
 80061fc:	189a      	adds	r2, r3, r2
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	0019      	movs	r1, r3
 8006204:	0010      	movs	r0, r2
 8006206:	f7f9 ff9b 	bl	8000140 <__udivsi3>
 800620a:	0003      	movs	r3, r0
 800620c:	b29b      	uxth	r3, r3
 800620e:	61bb      	str	r3, [r7, #24]
        break;
 8006210:	e027      	b.n	8006262 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006212:	f7ff f9a1 	bl	8005558 <HAL_RCC_GetSysClockFreq>
 8006216:	0003      	movs	r3, r0
 8006218:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	085a      	lsrs	r2, r3, #1
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	18d2      	adds	r2, r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	0019      	movs	r1, r3
 800622a:	0010      	movs	r0, r2
 800622c:	f7f9 ff88 	bl	8000140 <__udivsi3>
 8006230:	0003      	movs	r3, r0
 8006232:	b29b      	uxth	r3, r3
 8006234:	61bb      	str	r3, [r7, #24]
        break;
 8006236:	e014      	b.n	8006262 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	085b      	lsrs	r3, r3, #1
 800623e:	2280      	movs	r2, #128	@ 0x80
 8006240:	0212      	lsls	r2, r2, #8
 8006242:	189a      	adds	r2, r3, r2
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	0019      	movs	r1, r3
 800624a:	0010      	movs	r0, r2
 800624c:	f7f9 ff78 	bl	8000140 <__udivsi3>
 8006250:	0003      	movs	r3, r0
 8006252:	b29b      	uxth	r3, r3
 8006254:	61bb      	str	r3, [r7, #24]
        break;
 8006256:	e004      	b.n	8006262 <UART_SetConfig+0x2b2>
      default:
        ret = HAL_ERROR;
 8006258:	2317      	movs	r3, #23
 800625a:	18fb      	adds	r3, r7, r3
 800625c:	2201      	movs	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
        break;
 8006260:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	2b0f      	cmp	r3, #15
 8006266:	d909      	bls.n	800627c <UART_SetConfig+0x2cc>
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	2380      	movs	r3, #128	@ 0x80
 800626c:	025b      	lsls	r3, r3, #9
 800626e:	429a      	cmp	r2, r3
 8006270:	d204      	bcs.n	800627c <UART_SetConfig+0x2cc>
    {
      huart->Instance->BRR = usartdiv;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	69ba      	ldr	r2, [r7, #24]
 8006278:	60da      	str	r2, [r3, #12]
 800627a:	e003      	b.n	8006284 <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 800627c:	2317      	movs	r3, #23
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	2201      	movs	r2, #1
 8006282:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2200      	movs	r2, #0
 8006288:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8006290:	2317      	movs	r3, #23
 8006292:	18fb      	adds	r3, r7, r3
 8006294:	781b      	ldrb	r3, [r3, #0]
}
 8006296:	0018      	movs	r0, r3
 8006298:	46bd      	mov	sp, r7
 800629a:	b008      	add	sp, #32
 800629c:	bd80      	pop	{r7, pc}
 800629e:	46c0      	nop			@ (mov r8, r8)
 80062a0:	ffff69f3 	.word	0xffff69f3
 80062a4:	ffffcfff 	.word	0xffffcfff
 80062a8:	fffff4ff 	.word	0xfffff4ff
 80062ac:	40013800 	.word	0x40013800
 80062b0:	40021000 	.word	0x40021000
 80062b4:	40004400 	.word	0x40004400
 80062b8:	00f42400 	.word	0x00f42400
 80062bc:	007a1200 	.word	0x007a1200

080062c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062cc:	2201      	movs	r2, #1
 80062ce:	4013      	ands	r3, r2
 80062d0:	d00b      	beq.n	80062ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	4a4a      	ldr	r2, [pc, #296]	@ (8006404 <UART_AdvFeatureConfig+0x144>)
 80062da:	4013      	ands	r3, r2
 80062dc:	0019      	movs	r1, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ee:	2202      	movs	r2, #2
 80062f0:	4013      	ands	r3, r2
 80062f2:	d00b      	beq.n	800630c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	4a43      	ldr	r2, [pc, #268]	@ (8006408 <UART_AdvFeatureConfig+0x148>)
 80062fc:	4013      	ands	r3, r2
 80062fe:	0019      	movs	r1, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	430a      	orrs	r2, r1
 800630a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	2204      	movs	r2, #4
 8006312:	4013      	ands	r3, r2
 8006314:	d00b      	beq.n	800632e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	4a3b      	ldr	r2, [pc, #236]	@ (800640c <UART_AdvFeatureConfig+0x14c>)
 800631e:	4013      	ands	r3, r2
 8006320:	0019      	movs	r1, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006332:	2208      	movs	r2, #8
 8006334:	4013      	ands	r3, r2
 8006336:	d00b      	beq.n	8006350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	4a34      	ldr	r2, [pc, #208]	@ (8006410 <UART_AdvFeatureConfig+0x150>)
 8006340:	4013      	ands	r3, r2
 8006342:	0019      	movs	r1, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	2210      	movs	r2, #16
 8006356:	4013      	ands	r3, r2
 8006358:	d00b      	beq.n	8006372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	4a2c      	ldr	r2, [pc, #176]	@ (8006414 <UART_AdvFeatureConfig+0x154>)
 8006362:	4013      	ands	r3, r2
 8006364:	0019      	movs	r1, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006376:	2220      	movs	r2, #32
 8006378:	4013      	ands	r3, r2
 800637a:	d00b      	beq.n	8006394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	4a25      	ldr	r2, [pc, #148]	@ (8006418 <UART_AdvFeatureConfig+0x158>)
 8006384:	4013      	ands	r3, r2
 8006386:	0019      	movs	r1, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006398:	2240      	movs	r2, #64	@ 0x40
 800639a:	4013      	ands	r3, r2
 800639c:	d01d      	beq.n	80063da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a1d      	ldr	r2, [pc, #116]	@ (800641c <UART_AdvFeatureConfig+0x15c>)
 80063a6:	4013      	ands	r3, r2
 80063a8:	0019      	movs	r1, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80063ba:	2380      	movs	r3, #128	@ 0x80
 80063bc:	035b      	lsls	r3, r3, #13
 80063be:	429a      	cmp	r2, r3
 80063c0:	d10b      	bne.n	80063da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	4a15      	ldr	r2, [pc, #84]	@ (8006420 <UART_AdvFeatureConfig+0x160>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	0019      	movs	r1, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063de:	2280      	movs	r2, #128	@ 0x80
 80063e0:	4013      	ands	r3, r2
 80063e2:	d00b      	beq.n	80063fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4a0e      	ldr	r2, [pc, #56]	@ (8006424 <UART_AdvFeatureConfig+0x164>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	0019      	movs	r1, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	605a      	str	r2, [r3, #4]
  }
}
 80063fc:	46c0      	nop			@ (mov r8, r8)
 80063fe:	46bd      	mov	sp, r7
 8006400:	b002      	add	sp, #8
 8006402:	bd80      	pop	{r7, pc}
 8006404:	fffdffff 	.word	0xfffdffff
 8006408:	fffeffff 	.word	0xfffeffff
 800640c:	fffbffff 	.word	0xfffbffff
 8006410:	ffff7fff 	.word	0xffff7fff
 8006414:	ffffefff 	.word	0xffffefff
 8006418:	ffffdfff 	.word	0xffffdfff
 800641c:	ffefffff 	.word	0xffefffff
 8006420:	ff9fffff 	.word	0xff9fffff
 8006424:	fff7ffff 	.word	0xfff7ffff

08006428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af02      	add	r7, sp, #8
 800642e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006436:	f7fe f82f 	bl	8004498 <HAL_GetTick>
 800643a:	0003      	movs	r3, r0
 800643c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	2208      	movs	r2, #8
 8006446:	4013      	ands	r3, r2
 8006448:	2b08      	cmp	r3, #8
 800644a:	d10c      	bne.n	8006466 <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2280      	movs	r2, #128	@ 0x80
 8006450:	0391      	lsls	r1, r2, #14
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	4a15      	ldr	r2, [pc, #84]	@ (80064ac <UART_CheckIdleState+0x84>)
 8006456:	9200      	str	r2, [sp, #0]
 8006458:	2200      	movs	r2, #0
 800645a:	f000 f829 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 800645e:	1e03      	subs	r3, r0, #0
 8006460:	d001      	beq.n	8006466 <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e01e      	b.n	80064a4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2204      	movs	r2, #4
 800646e:	4013      	ands	r3, r2
 8006470:	2b04      	cmp	r3, #4
 8006472:	d10c      	bne.n	800648e <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2280      	movs	r2, #128	@ 0x80
 8006478:	03d1      	lsls	r1, r2, #15
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4a0b      	ldr	r2, [pc, #44]	@ (80064ac <UART_CheckIdleState+0x84>)
 800647e:	9200      	str	r2, [sp, #0]
 8006480:	2200      	movs	r2, #0
 8006482:	f000 f815 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 8006486:	1e03      	subs	r3, r0, #0
 8006488:	d001      	beq.n	800648e <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e00a      	b.n	80064a4 <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2220      	movs	r2, #32
 8006492:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2270      	movs	r2, #112	@ 0x70
 800649e:	2100      	movs	r1, #0
 80064a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	0018      	movs	r0, r3
 80064a6:	46bd      	mov	sp, r7
 80064a8:	b004      	add	sp, #16
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	01ffffff 	.word	0x01ffffff

080064b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	1dfb      	adds	r3, r7, #7
 80064be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c0:	e05d      	b.n	800657e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	3301      	adds	r3, #1
 80064c6:	d05a      	beq.n	800657e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c8:	f7fd ffe6 	bl	8004498 <HAL_GetTick>
 80064cc:	0002      	movs	r2, r0
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d302      	bcc.n	80064de <UART_WaitOnFlagUntilTimeout+0x2e>
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d11b      	bne.n	8006516 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	681a      	ldr	r2, [r3, #0]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	492f      	ldr	r1, [pc, #188]	@ (80065a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80064ea:	400a      	ands	r2, r1
 80064ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2101      	movs	r1, #1
 80064fa:	438a      	bics	r2, r1
 80064fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2220      	movs	r2, #32
 8006502:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2220      	movs	r2, #32
 8006508:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2270      	movs	r2, #112	@ 0x70
 800650e:	2100      	movs	r1, #0
 8006510:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e043      	b.n	800659e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2204      	movs	r2, #4
 800651e:	4013      	ands	r3, r2
 8006520:	d02d      	beq.n	800657e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	69da      	ldr	r2, [r3, #28]
 8006528:	2380      	movs	r3, #128	@ 0x80
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	401a      	ands	r2, r3
 800652e:	2380      	movs	r3, #128	@ 0x80
 8006530:	011b      	lsls	r3, r3, #4
 8006532:	429a      	cmp	r2, r3
 8006534:	d123      	bne.n	800657e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	2280      	movs	r2, #128	@ 0x80
 800653c:	0112      	lsls	r2, r2, #4
 800653e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4917      	ldr	r1, [pc, #92]	@ (80065a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800654c:	400a      	ands	r2, r1
 800654e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2101      	movs	r1, #1
 800655c:	438a      	bics	r2, r1
 800655e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2220      	movs	r2, #32
 8006570:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2270      	movs	r2, #112	@ 0x70
 8006576:	2100      	movs	r1, #0
 8006578:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	e00f      	b.n	800659e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	69db      	ldr	r3, [r3, #28]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	4013      	ands	r3, r2
 8006588:	68ba      	ldr	r2, [r7, #8]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	425a      	negs	r2, r3
 800658e:	4153      	adcs	r3, r2
 8006590:	b2db      	uxtb	r3, r3
 8006592:	001a      	movs	r2, r3
 8006594:	1dfb      	adds	r3, r7, #7
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	429a      	cmp	r2, r3
 800659a:	d092      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	0018      	movs	r0, r3
 80065a0:	46bd      	mov	sp, r7
 80065a2:	b004      	add	sp, #16
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	fffffe5f 	.word	0xfffffe5f

080065ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	21c0      	movs	r1, #192	@ 0xc0
 80065c0:	438a      	bics	r2, r1
 80065c2:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2220      	movs	r2, #32
 80065c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	46bd      	mov	sp, r7
 80065ce:	b002      	add	sp, #8
 80065d0:	bd80      	pop	{r7, pc}
	...

080065d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	490a      	ldr	r1, [pc, #40]	@ (8006610 <UART_EndRxTransfer+0x3c>)
 80065e8:	400a      	ands	r2, r1
 80065ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	689a      	ldr	r2, [r3, #8]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2101      	movs	r1, #1
 80065f8:	438a      	bics	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	679a      	str	r2, [r3, #120]	@ 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8006608:	46c0      	nop			@ (mov r8, r8)
 800660a:	46bd      	mov	sp, r7
 800660c:	b002      	add	sp, #8
 800660e:	bd80      	pop	{r7, pc}
 8006610:	fffffedf 	.word	0xfffffedf

08006614 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006620:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	2b20      	cmp	r3, #32
 8006628:	d014      	beq.n	8006654 <UART_DMATransmitCplt+0x40>
  {
    huart->TxXferCount = 0U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2252      	movs	r2, #82	@ 0x52
 800662e:	2100      	movs	r1, #0
 8006630:	5299      	strh	r1, [r3, r2]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689a      	ldr	r2, [r3, #8]
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	2180      	movs	r1, #128	@ 0x80
 800663e:	438a      	bics	r2, r1
 8006640:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2140      	movs	r1, #64	@ 0x40
 800664e:	430a      	orrs	r2, r1
 8006650:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006652:	e003      	b.n	800665c <UART_DMATransmitCplt+0x48>
    HAL_UART_TxCpltCallback(huart);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	0018      	movs	r0, r3
 8006658:	f7ff fc70 	bl	8005f3c <HAL_UART_TxCpltCallback>
}
 800665c:	46c0      	nop			@ (mov r8, r8)
 800665e:	46bd      	mov	sp, r7
 8006660:	b004      	add	sp, #16
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006670:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	0018      	movs	r0, r3
 8006676:	f7ff fc69 	bl	8005f4c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800667a:	46c0      	nop			@ (mov r8, r8)
 800667c:	46bd      	mov	sp, r7
 800667e:	b004      	add	sp, #16
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b20      	cmp	r3, #32
 8006698:	d01e      	beq.n	80066d8 <UART_DMAReceiveCplt+0x54>
  {
    huart->RxXferCount = 0U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	225a      	movs	r2, #90	@ 0x5a
 800669e:	2100      	movs	r1, #0
 80066a0:	5299      	strh	r1, [r3, r2]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	490e      	ldr	r1, [pc, #56]	@ (80066e8 <UART_DMAReceiveCplt+0x64>)
 80066ae:	400a      	ands	r2, r1
 80066b0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2101      	movs	r1, #1
 80066be:	438a      	bics	r2, r1
 80066c0:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689a      	ldr	r2, [r3, #8]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2140      	movs	r1, #64	@ 0x40
 80066ce:	438a      	bics	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2220      	movs	r2, #32
 80066d6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	0018      	movs	r0, r3
 80066dc:	f7ff fc3e 	bl	8005f5c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066e0:	46c0      	nop			@ (mov r8, r8)
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b004      	add	sp, #16
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	fffffeff 	.word	0xfffffeff

080066ec <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	0018      	movs	r0, r3
 80066fe:	f7ff fc35 	bl	8005f6c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006702:	46c0      	nop			@ (mov r8, r8)
 8006704:	46bd      	mov	sp, r7
 8006706:	b004      	add	sp, #16
 8006708:	bd80      	pop	{r7, pc}

0800670a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800670a:	b580      	push	{r7, lr}
 800670c:	b086      	sub	sp, #24
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006716:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800671c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006722:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2280      	movs	r2, #128	@ 0x80
 800672c:	4013      	ands	r3, r2
 800672e:	2b80      	cmp	r3, #128	@ 0x80
 8006730:	d10a      	bne.n	8006748 <UART_DMAError+0x3e>
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	2b21      	cmp	r3, #33	@ 0x21
 8006736:	d107      	bne.n	8006748 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	2252      	movs	r2, #82	@ 0x52
 800673c:	2100      	movs	r1, #0
 800673e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	0018      	movs	r0, r3
 8006744:	f7ff ff32 	bl	80065ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	2240      	movs	r2, #64	@ 0x40
 8006750:	4013      	ands	r3, r2
 8006752:	2b40      	cmp	r3, #64	@ 0x40
 8006754:	d10a      	bne.n	800676c <UART_DMAError+0x62>
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2b22      	cmp	r3, #34	@ 0x22
 800675a:	d107      	bne.n	800676c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	225a      	movs	r2, #90	@ 0x5a
 8006760:	2100      	movs	r1, #0
 8006762:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	0018      	movs	r0, r3
 8006768:	f7ff ff34 	bl	80065d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006770:	2210      	movs	r2, #16
 8006772:	431a      	orrs	r2, r3
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	67da      	str	r2, [r3, #124]	@ 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	0018      	movs	r0, r3
 800677c:	f7ff fbfe 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006780:	46c0      	nop			@ (mov r8, r8)
 8006782:	46bd      	mov	sp, r7
 8006784:	b006      	add	sp, #24
 8006786:	bd80      	pop	{r7, pc}

08006788 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006794:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	225a      	movs	r2, #90	@ 0x5a
 800679a:	2100      	movs	r1, #0
 800679c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2252      	movs	r2, #82	@ 0x52
 80067a2:	2100      	movs	r1, #0
 80067a4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	0018      	movs	r0, r3
 80067aa:	f7ff fbe7 	bl	8005f7c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067ae:	46c0      	nop			@ (mov r8, r8)
 80067b0:	46bd      	mov	sp, r7
 80067b2:	b004      	add	sp, #16
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b082      	sub	sp, #8
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2140      	movs	r1, #64	@ 0x40
 80067ca:	438a      	bics	r2, r1
 80067cc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	0018      	movs	r0, r3
 80067de:	f7ff fbad 	bl	8005f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e2:	46c0      	nop			@ (mov r8, r8)
 80067e4:	46bd      	mov	sp, r7
 80067e6:	b002      	add	sp, #8
 80067e8:	bd80      	pop	{r7, pc}

080067ea <__cvt>:
 80067ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067ec:	001f      	movs	r7, r3
 80067ee:	2300      	movs	r3, #0
 80067f0:	0016      	movs	r6, r2
 80067f2:	b08b      	sub	sp, #44	@ 0x2c
 80067f4:	429f      	cmp	r7, r3
 80067f6:	da04      	bge.n	8006802 <__cvt+0x18>
 80067f8:	2180      	movs	r1, #128	@ 0x80
 80067fa:	0609      	lsls	r1, r1, #24
 80067fc:	187b      	adds	r3, r7, r1
 80067fe:	001f      	movs	r7, r3
 8006800:	232d      	movs	r3, #45	@ 0x2d
 8006802:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006804:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8006806:	7013      	strb	r3, [r2, #0]
 8006808:	2320      	movs	r3, #32
 800680a:	2203      	movs	r2, #3
 800680c:	439d      	bics	r5, r3
 800680e:	2d46      	cmp	r5, #70	@ 0x46
 8006810:	d007      	beq.n	8006822 <__cvt+0x38>
 8006812:	002b      	movs	r3, r5
 8006814:	3b45      	subs	r3, #69	@ 0x45
 8006816:	4259      	negs	r1, r3
 8006818:	414b      	adcs	r3, r1
 800681a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800681c:	3a01      	subs	r2, #1
 800681e:	18cb      	adds	r3, r1, r3
 8006820:	9310      	str	r3, [sp, #64]	@ 0x40
 8006822:	ab09      	add	r3, sp, #36	@ 0x24
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	ab08      	add	r3, sp, #32
 8006828:	9303      	str	r3, [sp, #12]
 800682a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800682c:	9200      	str	r2, [sp, #0]
 800682e:	9302      	str	r3, [sp, #8]
 8006830:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006832:	0032      	movs	r2, r6
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	003b      	movs	r3, r7
 8006838:	f001 f9aa 	bl	8007b90 <_dtoa_r>
 800683c:	0004      	movs	r4, r0
 800683e:	2d47      	cmp	r5, #71	@ 0x47
 8006840:	d11b      	bne.n	800687a <__cvt+0x90>
 8006842:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006844:	07db      	lsls	r3, r3, #31
 8006846:	d511      	bpl.n	800686c <__cvt+0x82>
 8006848:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800684a:	18c3      	adds	r3, r0, r3
 800684c:	9307      	str	r3, [sp, #28]
 800684e:	2200      	movs	r2, #0
 8006850:	2300      	movs	r3, #0
 8006852:	0030      	movs	r0, r6
 8006854:	0039      	movs	r1, r7
 8006856:	f7f9 fdf9 	bl	800044c <__aeabi_dcmpeq>
 800685a:	2800      	cmp	r0, #0
 800685c:	d001      	beq.n	8006862 <__cvt+0x78>
 800685e:	9b07      	ldr	r3, [sp, #28]
 8006860:	9309      	str	r3, [sp, #36]	@ 0x24
 8006862:	2230      	movs	r2, #48	@ 0x30
 8006864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006866:	9907      	ldr	r1, [sp, #28]
 8006868:	428b      	cmp	r3, r1
 800686a:	d320      	bcc.n	80068ae <__cvt+0xc4>
 800686c:	0020      	movs	r0, r4
 800686e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006870:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006872:	1b1b      	subs	r3, r3, r4
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	b00b      	add	sp, #44	@ 0x2c
 8006878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800687a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800687c:	18c3      	adds	r3, r0, r3
 800687e:	9307      	str	r3, [sp, #28]
 8006880:	2d46      	cmp	r5, #70	@ 0x46
 8006882:	d1e4      	bne.n	800684e <__cvt+0x64>
 8006884:	7803      	ldrb	r3, [r0, #0]
 8006886:	2b30      	cmp	r3, #48	@ 0x30
 8006888:	d10c      	bne.n	80068a4 <__cvt+0xba>
 800688a:	2200      	movs	r2, #0
 800688c:	2300      	movs	r3, #0
 800688e:	0030      	movs	r0, r6
 8006890:	0039      	movs	r1, r7
 8006892:	f7f9 fddb 	bl	800044c <__aeabi_dcmpeq>
 8006896:	2800      	cmp	r0, #0
 8006898:	d104      	bne.n	80068a4 <__cvt+0xba>
 800689a:	2301      	movs	r3, #1
 800689c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800689e:	1a9b      	subs	r3, r3, r2
 80068a0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068a2:	6013      	str	r3, [r2, #0]
 80068a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80068a6:	9a07      	ldr	r2, [sp, #28]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	18d3      	adds	r3, r2, r3
 80068ac:	e7ce      	b.n	800684c <__cvt+0x62>
 80068ae:	1c59      	adds	r1, r3, #1
 80068b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	e7d6      	b.n	8006864 <__cvt+0x7a>

080068b6 <__exponent>:
 80068b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068b8:	232b      	movs	r3, #43	@ 0x2b
 80068ba:	b085      	sub	sp, #20
 80068bc:	0005      	movs	r5, r0
 80068be:	1e0c      	subs	r4, r1, #0
 80068c0:	7002      	strb	r2, [r0, #0]
 80068c2:	da01      	bge.n	80068c8 <__exponent+0x12>
 80068c4:	424c      	negs	r4, r1
 80068c6:	3302      	adds	r3, #2
 80068c8:	706b      	strb	r3, [r5, #1]
 80068ca:	2c09      	cmp	r4, #9
 80068cc:	dd2c      	ble.n	8006928 <__exponent+0x72>
 80068ce:	ab02      	add	r3, sp, #8
 80068d0:	1dde      	adds	r6, r3, #7
 80068d2:	0020      	movs	r0, r4
 80068d4:	210a      	movs	r1, #10
 80068d6:	f7f9 fda3 	bl	8000420 <__aeabi_idivmod>
 80068da:	0037      	movs	r7, r6
 80068dc:	3130      	adds	r1, #48	@ 0x30
 80068de:	3e01      	subs	r6, #1
 80068e0:	0020      	movs	r0, r4
 80068e2:	7031      	strb	r1, [r6, #0]
 80068e4:	210a      	movs	r1, #10
 80068e6:	9401      	str	r4, [sp, #4]
 80068e8:	f7f9 fcb4 	bl	8000254 <__divsi3>
 80068ec:	9b01      	ldr	r3, [sp, #4]
 80068ee:	0004      	movs	r4, r0
 80068f0:	2b63      	cmp	r3, #99	@ 0x63
 80068f2:	dcee      	bgt.n	80068d2 <__exponent+0x1c>
 80068f4:	1eba      	subs	r2, r7, #2
 80068f6:	1ca8      	adds	r0, r5, #2
 80068f8:	0001      	movs	r1, r0
 80068fa:	0013      	movs	r3, r2
 80068fc:	3430      	adds	r4, #48	@ 0x30
 80068fe:	7014      	strb	r4, [r2, #0]
 8006900:	ac02      	add	r4, sp, #8
 8006902:	3407      	adds	r4, #7
 8006904:	429c      	cmp	r4, r3
 8006906:	d80a      	bhi.n	800691e <__exponent+0x68>
 8006908:	2300      	movs	r3, #0
 800690a:	4294      	cmp	r4, r2
 800690c:	d303      	bcc.n	8006916 <__exponent+0x60>
 800690e:	3309      	adds	r3, #9
 8006910:	aa02      	add	r2, sp, #8
 8006912:	189b      	adds	r3, r3, r2
 8006914:	1bdb      	subs	r3, r3, r7
 8006916:	18c0      	adds	r0, r0, r3
 8006918:	1b40      	subs	r0, r0, r5
 800691a:	b005      	add	sp, #20
 800691c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800691e:	781c      	ldrb	r4, [r3, #0]
 8006920:	3301      	adds	r3, #1
 8006922:	700c      	strb	r4, [r1, #0]
 8006924:	3101      	adds	r1, #1
 8006926:	e7eb      	b.n	8006900 <__exponent+0x4a>
 8006928:	2330      	movs	r3, #48	@ 0x30
 800692a:	18e4      	adds	r4, r4, r3
 800692c:	70ab      	strb	r3, [r5, #2]
 800692e:	1d28      	adds	r0, r5, #4
 8006930:	70ec      	strb	r4, [r5, #3]
 8006932:	e7f1      	b.n	8006918 <__exponent+0x62>

08006934 <_printf_float>:
 8006934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006936:	b097      	sub	sp, #92	@ 0x5c
 8006938:	000d      	movs	r5, r1
 800693a:	920a      	str	r2, [sp, #40]	@ 0x28
 800693c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800693e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006940:	9009      	str	r0, [sp, #36]	@ 0x24
 8006942:	f001 f807 	bl	8007954 <_localeconv_r>
 8006946:	6803      	ldr	r3, [r0, #0]
 8006948:	0018      	movs	r0, r3
 800694a:	930d      	str	r3, [sp, #52]	@ 0x34
 800694c:	f7f9 fbdc 	bl	8000108 <strlen>
 8006950:	2300      	movs	r3, #0
 8006952:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006954:	9314      	str	r3, [sp, #80]	@ 0x50
 8006956:	7e2b      	ldrb	r3, [r5, #24]
 8006958:	2207      	movs	r2, #7
 800695a:	930c      	str	r3, [sp, #48]	@ 0x30
 800695c:	682b      	ldr	r3, [r5, #0]
 800695e:	930e      	str	r3, [sp, #56]	@ 0x38
 8006960:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	05c9      	lsls	r1, r1, #23
 8006966:	d545      	bpl.n	80069f4 <_printf_float+0xc0>
 8006968:	189b      	adds	r3, r3, r2
 800696a:	4393      	bics	r3, r2
 800696c:	001a      	movs	r2, r3
 800696e:	3208      	adds	r2, #8
 8006970:	6022      	str	r2, [r4, #0]
 8006972:	2201      	movs	r2, #1
 8006974:	681e      	ldr	r6, [r3, #0]
 8006976:	685f      	ldr	r7, [r3, #4]
 8006978:	007b      	lsls	r3, r7, #1
 800697a:	085b      	lsrs	r3, r3, #1
 800697c:	9311      	str	r3, [sp, #68]	@ 0x44
 800697e:	9610      	str	r6, [sp, #64]	@ 0x40
 8006980:	64ae      	str	r6, [r5, #72]	@ 0x48
 8006982:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8006984:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006986:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006988:	4ba7      	ldr	r3, [pc, #668]	@ (8006c28 <_printf_float+0x2f4>)
 800698a:	4252      	negs	r2, r2
 800698c:	f7fb fe94 	bl	80026b8 <__aeabi_dcmpun>
 8006990:	2800      	cmp	r0, #0
 8006992:	d131      	bne.n	80069f8 <_printf_float+0xc4>
 8006994:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8006996:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8006998:	2201      	movs	r2, #1
 800699a:	4ba3      	ldr	r3, [pc, #652]	@ (8006c28 <_printf_float+0x2f4>)
 800699c:	4252      	negs	r2, r2
 800699e:	f7f9 fd65 	bl	800046c <__aeabi_dcmple>
 80069a2:	2800      	cmp	r0, #0
 80069a4:	d128      	bne.n	80069f8 <_printf_float+0xc4>
 80069a6:	2200      	movs	r2, #0
 80069a8:	2300      	movs	r3, #0
 80069aa:	0030      	movs	r0, r6
 80069ac:	0039      	movs	r1, r7
 80069ae:	f7f9 fd53 	bl	8000458 <__aeabi_dcmplt>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d003      	beq.n	80069be <_printf_float+0x8a>
 80069b6:	002b      	movs	r3, r5
 80069b8:	222d      	movs	r2, #45	@ 0x2d
 80069ba:	3343      	adds	r3, #67	@ 0x43
 80069bc:	701a      	strb	r2, [r3, #0]
 80069be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069c0:	4f9a      	ldr	r7, [pc, #616]	@ (8006c2c <_printf_float+0x2f8>)
 80069c2:	2b47      	cmp	r3, #71	@ 0x47
 80069c4:	d800      	bhi.n	80069c8 <_printf_float+0x94>
 80069c6:	4f9a      	ldr	r7, [pc, #616]	@ (8006c30 <_printf_float+0x2fc>)
 80069c8:	2303      	movs	r3, #3
 80069ca:	2400      	movs	r4, #0
 80069cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80069ce:	612b      	str	r3, [r5, #16]
 80069d0:	3301      	adds	r3, #1
 80069d2:	439a      	bics	r2, r3
 80069d4:	602a      	str	r2, [r5, #0]
 80069d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069d8:	0029      	movs	r1, r5
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069e0:	aa15      	add	r2, sp, #84	@ 0x54
 80069e2:	f000 f9e5 	bl	8006db0 <_printf_common>
 80069e6:	3001      	adds	r0, #1
 80069e8:	d000      	beq.n	80069ec <_printf_float+0xb8>
 80069ea:	e09e      	b.n	8006b2a <_printf_float+0x1f6>
 80069ec:	2001      	movs	r0, #1
 80069ee:	4240      	negs	r0, r0
 80069f0:	b017      	add	sp, #92	@ 0x5c
 80069f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f4:	3307      	adds	r3, #7
 80069f6:	e7b8      	b.n	800696a <_printf_float+0x36>
 80069f8:	0032      	movs	r2, r6
 80069fa:	003b      	movs	r3, r7
 80069fc:	0030      	movs	r0, r6
 80069fe:	0039      	movs	r1, r7
 8006a00:	f7fb fe5a 	bl	80026b8 <__aeabi_dcmpun>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d00b      	beq.n	8006a20 <_printf_float+0xec>
 8006a08:	2f00      	cmp	r7, #0
 8006a0a:	da03      	bge.n	8006a14 <_printf_float+0xe0>
 8006a0c:	002b      	movs	r3, r5
 8006a0e:	222d      	movs	r2, #45	@ 0x2d
 8006a10:	3343      	adds	r3, #67	@ 0x43
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a16:	4f87      	ldr	r7, [pc, #540]	@ (8006c34 <_printf_float+0x300>)
 8006a18:	2b47      	cmp	r3, #71	@ 0x47
 8006a1a:	d8d5      	bhi.n	80069c8 <_printf_float+0x94>
 8006a1c:	4f86      	ldr	r7, [pc, #536]	@ (8006c38 <_printf_float+0x304>)
 8006a1e:	e7d3      	b.n	80069c8 <_printf_float+0x94>
 8006a20:	2220      	movs	r2, #32
 8006a22:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8006a24:	686b      	ldr	r3, [r5, #4]
 8006a26:	4394      	bics	r4, r2
 8006a28:	1c5a      	adds	r2, r3, #1
 8006a2a:	d146      	bne.n	8006aba <_printf_float+0x186>
 8006a2c:	3307      	adds	r3, #7
 8006a2e:	606b      	str	r3, [r5, #4]
 8006a30:	2380      	movs	r3, #128	@ 0x80
 8006a32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006a34:	00db      	lsls	r3, r3, #3
 8006a36:	4313      	orrs	r3, r2
 8006a38:	2200      	movs	r2, #0
 8006a3a:	602b      	str	r3, [r5, #0]
 8006a3c:	9206      	str	r2, [sp, #24]
 8006a3e:	aa14      	add	r2, sp, #80	@ 0x50
 8006a40:	9205      	str	r2, [sp, #20]
 8006a42:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a44:	a90a      	add	r1, sp, #40	@ 0x28
 8006a46:	9204      	str	r2, [sp, #16]
 8006a48:	aa13      	add	r2, sp, #76	@ 0x4c
 8006a4a:	9203      	str	r2, [sp, #12]
 8006a4c:	2223      	movs	r2, #35	@ 0x23
 8006a4e:	1852      	adds	r2, r2, r1
 8006a50:	9202      	str	r2, [sp, #8]
 8006a52:	9301      	str	r3, [sp, #4]
 8006a54:	686b      	ldr	r3, [r5, #4]
 8006a56:	0032      	movs	r2, r6
 8006a58:	9300      	str	r3, [sp, #0]
 8006a5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a5c:	003b      	movs	r3, r7
 8006a5e:	f7ff fec4 	bl	80067ea <__cvt>
 8006a62:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006a64:	0007      	movs	r7, r0
 8006a66:	2c47      	cmp	r4, #71	@ 0x47
 8006a68:	d12d      	bne.n	8006ac6 <_printf_float+0x192>
 8006a6a:	1cd3      	adds	r3, r2, #3
 8006a6c:	db02      	blt.n	8006a74 <_printf_float+0x140>
 8006a6e:	686b      	ldr	r3, [r5, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	dd47      	ble.n	8006b04 <_printf_float+0x1d0>
 8006a74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006a76:	3b02      	subs	r3, #2
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a7c:	0028      	movs	r0, r5
 8006a7e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006a80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006a82:	3901      	subs	r1, #1
 8006a84:	3050      	adds	r0, #80	@ 0x50
 8006a86:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006a88:	f7ff ff15 	bl	80068b6 <__exponent>
 8006a8c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006a8e:	0004      	movs	r4, r0
 8006a90:	1813      	adds	r3, r2, r0
 8006a92:	612b      	str	r3, [r5, #16]
 8006a94:	2a01      	cmp	r2, #1
 8006a96:	dc02      	bgt.n	8006a9e <_printf_float+0x16a>
 8006a98:	682a      	ldr	r2, [r5, #0]
 8006a9a:	07d2      	lsls	r2, r2, #31
 8006a9c:	d501      	bpl.n	8006aa2 <_printf_float+0x16e>
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	612b      	str	r3, [r5, #16]
 8006aa2:	2323      	movs	r3, #35	@ 0x23
 8006aa4:	aa0a      	add	r2, sp, #40	@ 0x28
 8006aa6:	189b      	adds	r3, r3, r2
 8006aa8:	781b      	ldrb	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d100      	bne.n	8006ab0 <_printf_float+0x17c>
 8006aae:	e792      	b.n	80069d6 <_printf_float+0xa2>
 8006ab0:	002b      	movs	r3, r5
 8006ab2:	222d      	movs	r2, #45	@ 0x2d
 8006ab4:	3343      	adds	r3, #67	@ 0x43
 8006ab6:	701a      	strb	r2, [r3, #0]
 8006ab8:	e78d      	b.n	80069d6 <_printf_float+0xa2>
 8006aba:	2c47      	cmp	r4, #71	@ 0x47
 8006abc:	d1b8      	bne.n	8006a30 <_printf_float+0xfc>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1b6      	bne.n	8006a30 <_printf_float+0xfc>
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	e7b3      	b.n	8006a2e <_printf_float+0xfa>
 8006ac6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ac8:	2b65      	cmp	r3, #101	@ 0x65
 8006aca:	d9d7      	bls.n	8006a7c <_printf_float+0x148>
 8006acc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006ace:	2b66      	cmp	r3, #102	@ 0x66
 8006ad0:	d11a      	bne.n	8006b08 <_printf_float+0x1d4>
 8006ad2:	686b      	ldr	r3, [r5, #4]
 8006ad4:	2a00      	cmp	r2, #0
 8006ad6:	dd09      	ble.n	8006aec <_printf_float+0x1b8>
 8006ad8:	612a      	str	r2, [r5, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d102      	bne.n	8006ae4 <_printf_float+0x1b0>
 8006ade:	6829      	ldr	r1, [r5, #0]
 8006ae0:	07c9      	lsls	r1, r1, #31
 8006ae2:	d50b      	bpl.n	8006afc <_printf_float+0x1c8>
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	189b      	adds	r3, r3, r2
 8006ae8:	612b      	str	r3, [r5, #16]
 8006aea:	e007      	b.n	8006afc <_printf_float+0x1c8>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d103      	bne.n	8006af8 <_printf_float+0x1c4>
 8006af0:	2201      	movs	r2, #1
 8006af2:	6829      	ldr	r1, [r5, #0]
 8006af4:	4211      	tst	r1, r2
 8006af6:	d000      	beq.n	8006afa <_printf_float+0x1c6>
 8006af8:	1c9a      	adds	r2, r3, #2
 8006afa:	612a      	str	r2, [r5, #16]
 8006afc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006afe:	2400      	movs	r4, #0
 8006b00:	65ab      	str	r3, [r5, #88]	@ 0x58
 8006b02:	e7ce      	b.n	8006aa2 <_printf_float+0x16e>
 8006b04:	2367      	movs	r3, #103	@ 0x67
 8006b06:	930c      	str	r3, [sp, #48]	@ 0x30
 8006b08:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8006b0a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006b0c:	4299      	cmp	r1, r3
 8006b0e:	db06      	blt.n	8006b1e <_printf_float+0x1ea>
 8006b10:	682b      	ldr	r3, [r5, #0]
 8006b12:	6129      	str	r1, [r5, #16]
 8006b14:	07db      	lsls	r3, r3, #31
 8006b16:	d5f1      	bpl.n	8006afc <_printf_float+0x1c8>
 8006b18:	3101      	adds	r1, #1
 8006b1a:	6129      	str	r1, [r5, #16]
 8006b1c:	e7ee      	b.n	8006afc <_printf_float+0x1c8>
 8006b1e:	2201      	movs	r2, #1
 8006b20:	2900      	cmp	r1, #0
 8006b22:	dce0      	bgt.n	8006ae6 <_printf_float+0x1b2>
 8006b24:	1892      	adds	r2, r2, r2
 8006b26:	1a52      	subs	r2, r2, r1
 8006b28:	e7dd      	b.n	8006ae6 <_printf_float+0x1b2>
 8006b2a:	682a      	ldr	r2, [r5, #0]
 8006b2c:	0553      	lsls	r3, r2, #21
 8006b2e:	d408      	bmi.n	8006b42 <_printf_float+0x20e>
 8006b30:	692b      	ldr	r3, [r5, #16]
 8006b32:	003a      	movs	r2, r7
 8006b34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b38:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006b3a:	47a0      	blx	r4
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d129      	bne.n	8006b94 <_printf_float+0x260>
 8006b40:	e754      	b.n	80069ec <_printf_float+0xb8>
 8006b42:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006b44:	2b65      	cmp	r3, #101	@ 0x65
 8006b46:	d800      	bhi.n	8006b4a <_printf_float+0x216>
 8006b48:	e0db      	b.n	8006d02 <_printf_float+0x3ce>
 8006b4a:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006b4c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	f7f9 fc7b 	bl	800044c <__aeabi_dcmpeq>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	d033      	beq.n	8006bc2 <_printf_float+0x28e>
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	4a37      	ldr	r2, [pc, #220]	@ (8006c3c <_printf_float+0x308>)
 8006b5e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b62:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006b64:	47a0      	blx	r4
 8006b66:	3001      	adds	r0, #1
 8006b68:	d100      	bne.n	8006b6c <_printf_float+0x238>
 8006b6a:	e73f      	b.n	80069ec <_printf_float+0xb8>
 8006b6c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006b6e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b70:	42b3      	cmp	r3, r6
 8006b72:	db02      	blt.n	8006b7a <_printf_float+0x246>
 8006b74:	682b      	ldr	r3, [r5, #0]
 8006b76:	07db      	lsls	r3, r3, #31
 8006b78:	d50c      	bpl.n	8006b94 <_printf_float+0x260>
 8006b7a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b7e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006b80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006b84:	47a0      	blx	r4
 8006b86:	2400      	movs	r4, #0
 8006b88:	3001      	adds	r0, #1
 8006b8a:	d100      	bne.n	8006b8e <_printf_float+0x25a>
 8006b8c:	e72e      	b.n	80069ec <_printf_float+0xb8>
 8006b8e:	1e73      	subs	r3, r6, #1
 8006b90:	42a3      	cmp	r3, r4
 8006b92:	dc0a      	bgt.n	8006baa <_printf_float+0x276>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	079b      	lsls	r3, r3, #30
 8006b98:	d500      	bpl.n	8006b9c <_printf_float+0x268>
 8006b9a:	e106      	b.n	8006daa <_printf_float+0x476>
 8006b9c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006b9e:	68e8      	ldr	r0, [r5, #12]
 8006ba0:	4298      	cmp	r0, r3
 8006ba2:	db00      	blt.n	8006ba6 <_printf_float+0x272>
 8006ba4:	e724      	b.n	80069f0 <_printf_float+0xbc>
 8006ba6:	0018      	movs	r0, r3
 8006ba8:	e722      	b.n	80069f0 <_printf_float+0xbc>
 8006baa:	002a      	movs	r2, r5
 8006bac:	2301      	movs	r3, #1
 8006bae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bb2:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006bb4:	321a      	adds	r2, #26
 8006bb6:	47b8      	blx	r7
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d100      	bne.n	8006bbe <_printf_float+0x28a>
 8006bbc:	e716      	b.n	80069ec <_printf_float+0xb8>
 8006bbe:	3401      	adds	r4, #1
 8006bc0:	e7e5      	b.n	8006b8e <_printf_float+0x25a>
 8006bc2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	dc3b      	bgt.n	8006c40 <_printf_float+0x30c>
 8006bc8:	2301      	movs	r3, #1
 8006bca:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <_printf_float+0x308>)
 8006bcc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bd0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006bd2:	47a0      	blx	r4
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d100      	bne.n	8006bda <_printf_float+0x2a6>
 8006bd8:	e708      	b.n	80069ec <_printf_float+0xb8>
 8006bda:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8006bdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bde:	4333      	orrs	r3, r6
 8006be0:	d102      	bne.n	8006be8 <_printf_float+0x2b4>
 8006be2:	682b      	ldr	r3, [r5, #0]
 8006be4:	07db      	lsls	r3, r3, #31
 8006be6:	d5d5      	bpl.n	8006b94 <_printf_float+0x260>
 8006be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006bec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006bee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006bf0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006bf2:	47a0      	blx	r4
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	d100      	bne.n	8006bfc <_printf_float+0x2c8>
 8006bfa:	e6f7      	b.n	80069ec <_printf_float+0xb8>
 8006bfc:	930c      	str	r3, [sp, #48]	@ 0x30
 8006bfe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c00:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c02:	425b      	negs	r3, r3
 8006c04:	4293      	cmp	r3, r2
 8006c06:	dc01      	bgt.n	8006c0c <_printf_float+0x2d8>
 8006c08:	0033      	movs	r3, r6
 8006c0a:	e792      	b.n	8006b32 <_printf_float+0x1fe>
 8006c0c:	002a      	movs	r2, r5
 8006c0e:	2301      	movs	r3, #1
 8006c10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c14:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006c16:	321a      	adds	r2, #26
 8006c18:	47a0      	blx	r4
 8006c1a:	3001      	adds	r0, #1
 8006c1c:	d100      	bne.n	8006c20 <_printf_float+0x2ec>
 8006c1e:	e6e5      	b.n	80069ec <_printf_float+0xb8>
 8006c20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c22:	3301      	adds	r3, #1
 8006c24:	e7ea      	b.n	8006bfc <_printf_float+0x2c8>
 8006c26:	46c0      	nop			@ (mov r8, r8)
 8006c28:	7fefffff 	.word	0x7fefffff
 8006c2c:	0800b490 	.word	0x0800b490
 8006c30:	0800b48c 	.word	0x0800b48c
 8006c34:	0800b498 	.word	0x0800b498
 8006c38:	0800b494 	.word	0x0800b494
 8006c3c:	0800b49c 	.word	0x0800b49c
 8006c40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c42:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006c44:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c46:	429e      	cmp	r6, r3
 8006c48:	dd00      	ble.n	8006c4c <_printf_float+0x318>
 8006c4a:	001e      	movs	r6, r3
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	dc31      	bgt.n	8006cb4 <_printf_float+0x380>
 8006c50:	43f3      	mvns	r3, r6
 8006c52:	2400      	movs	r4, #0
 8006c54:	17db      	asrs	r3, r3, #31
 8006c56:	4033      	ands	r3, r6
 8006c58:	930e      	str	r3, [sp, #56]	@ 0x38
 8006c5a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8006c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c5e:	1af3      	subs	r3, r6, r3
 8006c60:	42a3      	cmp	r3, r4
 8006c62:	dc30      	bgt.n	8006cc6 <_printf_float+0x392>
 8006c64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	dc38      	bgt.n	8006cde <_printf_float+0x3aa>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	07db      	lsls	r3, r3, #31
 8006c70:	d435      	bmi.n	8006cde <_printf_float+0x3aa>
 8006c72:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8006c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c76:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c78:	1b9b      	subs	r3, r3, r6
 8006c7a:	1b14      	subs	r4, r2, r4
 8006c7c:	429c      	cmp	r4, r3
 8006c7e:	dd00      	ble.n	8006c82 <_printf_float+0x34e>
 8006c80:	001c      	movs	r4, r3
 8006c82:	2c00      	cmp	r4, #0
 8006c84:	dc34      	bgt.n	8006cf0 <_printf_float+0x3bc>
 8006c86:	43e3      	mvns	r3, r4
 8006c88:	2600      	movs	r6, #0
 8006c8a:	17db      	asrs	r3, r3, #31
 8006c8c:	401c      	ands	r4, r3
 8006c8e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006c92:	1ad3      	subs	r3, r2, r3
 8006c94:	1b1b      	subs	r3, r3, r4
 8006c96:	42b3      	cmp	r3, r6
 8006c98:	dc00      	bgt.n	8006c9c <_printf_float+0x368>
 8006c9a:	e77b      	b.n	8006b94 <_printf_float+0x260>
 8006c9c:	002a      	movs	r2, r5
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ca4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006ca6:	321a      	adds	r2, #26
 8006ca8:	47b8      	blx	r7
 8006caa:	3001      	adds	r0, #1
 8006cac:	d100      	bne.n	8006cb0 <_printf_float+0x37c>
 8006cae:	e69d      	b.n	80069ec <_printf_float+0xb8>
 8006cb0:	3601      	adds	r6, #1
 8006cb2:	e7ec      	b.n	8006c8e <_printf_float+0x35a>
 8006cb4:	0033      	movs	r3, r6
 8006cb6:	003a      	movs	r2, r7
 8006cb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cbc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006cbe:	47a0      	blx	r4
 8006cc0:	3001      	adds	r0, #1
 8006cc2:	d1c5      	bne.n	8006c50 <_printf_float+0x31c>
 8006cc4:	e692      	b.n	80069ec <_printf_float+0xb8>
 8006cc6:	002a      	movs	r2, r5
 8006cc8:	2301      	movs	r3, #1
 8006cca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ccc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cce:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006cd0:	321a      	adds	r2, #26
 8006cd2:	47b0      	blx	r6
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d100      	bne.n	8006cda <_printf_float+0x3a6>
 8006cd8:	e688      	b.n	80069ec <_printf_float+0xb8>
 8006cda:	3401      	adds	r4, #1
 8006cdc:	e7bd      	b.n	8006c5a <_printf_float+0x326>
 8006cde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ce0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006ce2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ce4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ce6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8006ce8:	47a0      	blx	r4
 8006cea:	3001      	adds	r0, #1
 8006cec:	d1c1      	bne.n	8006c72 <_printf_float+0x33e>
 8006cee:	e67d      	b.n	80069ec <_printf_float+0xb8>
 8006cf0:	19ba      	adds	r2, r7, r6
 8006cf2:	0023      	movs	r3, r4
 8006cf4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cf8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006cfa:	47b0      	blx	r6
 8006cfc:	3001      	adds	r0, #1
 8006cfe:	d1c2      	bne.n	8006c86 <_printf_float+0x352>
 8006d00:	e674      	b.n	80069ec <_printf_float+0xb8>
 8006d02:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d04:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	dc02      	bgt.n	8006d10 <_printf_float+0x3dc>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	421a      	tst	r2, r3
 8006d0e:	d039      	beq.n	8006d84 <_printf_float+0x450>
 8006d10:	2301      	movs	r3, #1
 8006d12:	003a      	movs	r2, r7
 8006d14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d18:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d1a:	47b0      	blx	r6
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d100      	bne.n	8006d22 <_printf_float+0x3ee>
 8006d20:	e664      	b.n	80069ec <_printf_float+0xb8>
 8006d22:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d24:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d28:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d2a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d2c:	47b0      	blx	r6
 8006d2e:	3001      	adds	r0, #1
 8006d30:	d100      	bne.n	8006d34 <_printf_float+0x400>
 8006d32:	e65b      	b.n	80069ec <_printf_float+0xb8>
 8006d34:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8006d36:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8006d38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d40:	2300      	movs	r3, #0
 8006d42:	f7f9 fb83 	bl	800044c <__aeabi_dcmpeq>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d11a      	bne.n	8006d80 <_printf_float+0x44c>
 8006d4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d4c:	1c7a      	adds	r2, r7, #1
 8006d4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d52:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d54:	47b0      	blx	r6
 8006d56:	3001      	adds	r0, #1
 8006d58:	d10e      	bne.n	8006d78 <_printf_float+0x444>
 8006d5a:	e647      	b.n	80069ec <_printf_float+0xb8>
 8006d5c:	002a      	movs	r2, r5
 8006d5e:	2301      	movs	r3, #1
 8006d60:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d64:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8006d66:	321a      	adds	r2, #26
 8006d68:	47b8      	blx	r7
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d100      	bne.n	8006d70 <_printf_float+0x43c>
 8006d6e:	e63d      	b.n	80069ec <_printf_float+0xb8>
 8006d70:	3601      	adds	r6, #1
 8006d72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d74:	429e      	cmp	r6, r3
 8006d76:	dbf1      	blt.n	8006d5c <_printf_float+0x428>
 8006d78:	002a      	movs	r2, r5
 8006d7a:	0023      	movs	r3, r4
 8006d7c:	3250      	adds	r2, #80	@ 0x50
 8006d7e:	e6d9      	b.n	8006b34 <_printf_float+0x200>
 8006d80:	2600      	movs	r6, #0
 8006d82:	e7f6      	b.n	8006d72 <_printf_float+0x43e>
 8006d84:	003a      	movs	r2, r7
 8006d86:	e7e2      	b.n	8006d4e <_printf_float+0x41a>
 8006d88:	002a      	movs	r2, r5
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d90:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d92:	3219      	adds	r2, #25
 8006d94:	47b0      	blx	r6
 8006d96:	3001      	adds	r0, #1
 8006d98:	d100      	bne.n	8006d9c <_printf_float+0x468>
 8006d9a:	e627      	b.n	80069ec <_printf_float+0xb8>
 8006d9c:	3401      	adds	r4, #1
 8006d9e:	68eb      	ldr	r3, [r5, #12]
 8006da0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	dcef      	bgt.n	8006d88 <_printf_float+0x454>
 8006da8:	e6f8      	b.n	8006b9c <_printf_float+0x268>
 8006daa:	2400      	movs	r4, #0
 8006dac:	e7f7      	b.n	8006d9e <_printf_float+0x46a>
 8006dae:	46c0      	nop			@ (mov r8, r8)

08006db0 <_printf_common>:
 8006db0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006db2:	0016      	movs	r6, r2
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	688a      	ldr	r2, [r1, #8]
 8006db8:	690b      	ldr	r3, [r1, #16]
 8006dba:	000c      	movs	r4, r1
 8006dbc:	9000      	str	r0, [sp, #0]
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	da00      	bge.n	8006dc4 <_printf_common+0x14>
 8006dc2:	0013      	movs	r3, r2
 8006dc4:	0022      	movs	r2, r4
 8006dc6:	6033      	str	r3, [r6, #0]
 8006dc8:	3243      	adds	r2, #67	@ 0x43
 8006dca:	7812      	ldrb	r2, [r2, #0]
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	d001      	beq.n	8006dd4 <_printf_common+0x24>
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	6033      	str	r3, [r6, #0]
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	069b      	lsls	r3, r3, #26
 8006dd8:	d502      	bpl.n	8006de0 <_printf_common+0x30>
 8006dda:	6833      	ldr	r3, [r6, #0]
 8006ddc:	3302      	adds	r3, #2
 8006dde:	6033      	str	r3, [r6, #0]
 8006de0:	6822      	ldr	r2, [r4, #0]
 8006de2:	2306      	movs	r3, #6
 8006de4:	0015      	movs	r5, r2
 8006de6:	401d      	ands	r5, r3
 8006de8:	421a      	tst	r2, r3
 8006dea:	d027      	beq.n	8006e3c <_printf_common+0x8c>
 8006dec:	0023      	movs	r3, r4
 8006dee:	3343      	adds	r3, #67	@ 0x43
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	1e5a      	subs	r2, r3, #1
 8006df4:	4193      	sbcs	r3, r2
 8006df6:	6822      	ldr	r2, [r4, #0]
 8006df8:	0692      	lsls	r2, r2, #26
 8006dfa:	d430      	bmi.n	8006e5e <_printf_common+0xae>
 8006dfc:	0022      	movs	r2, r4
 8006dfe:	9901      	ldr	r1, [sp, #4]
 8006e00:	9800      	ldr	r0, [sp, #0]
 8006e02:	9d08      	ldr	r5, [sp, #32]
 8006e04:	3243      	adds	r2, #67	@ 0x43
 8006e06:	47a8      	blx	r5
 8006e08:	3001      	adds	r0, #1
 8006e0a:	d025      	beq.n	8006e58 <_printf_common+0xa8>
 8006e0c:	2206      	movs	r2, #6
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	2500      	movs	r5, #0
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d105      	bne.n	8006e24 <_printf_common+0x74>
 8006e18:	6833      	ldr	r3, [r6, #0]
 8006e1a:	68e5      	ldr	r5, [r4, #12]
 8006e1c:	1aed      	subs	r5, r5, r3
 8006e1e:	43eb      	mvns	r3, r5
 8006e20:	17db      	asrs	r3, r3, #31
 8006e22:	401d      	ands	r5, r3
 8006e24:	68a3      	ldr	r3, [r4, #8]
 8006e26:	6922      	ldr	r2, [r4, #16]
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	dd01      	ble.n	8006e30 <_printf_common+0x80>
 8006e2c:	1a9b      	subs	r3, r3, r2
 8006e2e:	18ed      	adds	r5, r5, r3
 8006e30:	2600      	movs	r6, #0
 8006e32:	42b5      	cmp	r5, r6
 8006e34:	d120      	bne.n	8006e78 <_printf_common+0xc8>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e010      	b.n	8006e5c <_printf_common+0xac>
 8006e3a:	3501      	adds	r5, #1
 8006e3c:	68e3      	ldr	r3, [r4, #12]
 8006e3e:	6832      	ldr	r2, [r6, #0]
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	42ab      	cmp	r3, r5
 8006e44:	ddd2      	ble.n	8006dec <_printf_common+0x3c>
 8006e46:	0022      	movs	r2, r4
 8006e48:	2301      	movs	r3, #1
 8006e4a:	9901      	ldr	r1, [sp, #4]
 8006e4c:	9800      	ldr	r0, [sp, #0]
 8006e4e:	9f08      	ldr	r7, [sp, #32]
 8006e50:	3219      	adds	r2, #25
 8006e52:	47b8      	blx	r7
 8006e54:	3001      	adds	r0, #1
 8006e56:	d1f0      	bne.n	8006e3a <_printf_common+0x8a>
 8006e58:	2001      	movs	r0, #1
 8006e5a:	4240      	negs	r0, r0
 8006e5c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e5e:	2030      	movs	r0, #48	@ 0x30
 8006e60:	18e1      	adds	r1, r4, r3
 8006e62:	3143      	adds	r1, #67	@ 0x43
 8006e64:	7008      	strb	r0, [r1, #0]
 8006e66:	0021      	movs	r1, r4
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	3145      	adds	r1, #69	@ 0x45
 8006e6c:	7809      	ldrb	r1, [r1, #0]
 8006e6e:	18a2      	adds	r2, r4, r2
 8006e70:	3243      	adds	r2, #67	@ 0x43
 8006e72:	3302      	adds	r3, #2
 8006e74:	7011      	strb	r1, [r2, #0]
 8006e76:	e7c1      	b.n	8006dfc <_printf_common+0x4c>
 8006e78:	0022      	movs	r2, r4
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	9901      	ldr	r1, [sp, #4]
 8006e7e:	9800      	ldr	r0, [sp, #0]
 8006e80:	9f08      	ldr	r7, [sp, #32]
 8006e82:	321a      	adds	r2, #26
 8006e84:	47b8      	blx	r7
 8006e86:	3001      	adds	r0, #1
 8006e88:	d0e6      	beq.n	8006e58 <_printf_common+0xa8>
 8006e8a:	3601      	adds	r6, #1
 8006e8c:	e7d1      	b.n	8006e32 <_printf_common+0x82>
	...

08006e90 <_printf_i>:
 8006e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006e92:	b08b      	sub	sp, #44	@ 0x2c
 8006e94:	9206      	str	r2, [sp, #24]
 8006e96:	000a      	movs	r2, r1
 8006e98:	3243      	adds	r2, #67	@ 0x43
 8006e9a:	9307      	str	r3, [sp, #28]
 8006e9c:	9005      	str	r0, [sp, #20]
 8006e9e:	9203      	str	r2, [sp, #12]
 8006ea0:	7e0a      	ldrb	r2, [r1, #24]
 8006ea2:	000c      	movs	r4, r1
 8006ea4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006ea6:	2a78      	cmp	r2, #120	@ 0x78
 8006ea8:	d809      	bhi.n	8006ebe <_printf_i+0x2e>
 8006eaa:	2a62      	cmp	r2, #98	@ 0x62
 8006eac:	d80b      	bhi.n	8006ec6 <_printf_i+0x36>
 8006eae:	2a00      	cmp	r2, #0
 8006eb0:	d100      	bne.n	8006eb4 <_printf_i+0x24>
 8006eb2:	e0ba      	b.n	800702a <_printf_i+0x19a>
 8006eb4:	497a      	ldr	r1, [pc, #488]	@ (80070a0 <_printf_i+0x210>)
 8006eb6:	9104      	str	r1, [sp, #16]
 8006eb8:	2a58      	cmp	r2, #88	@ 0x58
 8006eba:	d100      	bne.n	8006ebe <_printf_i+0x2e>
 8006ebc:	e08e      	b.n	8006fdc <_printf_i+0x14c>
 8006ebe:	0025      	movs	r5, r4
 8006ec0:	3542      	adds	r5, #66	@ 0x42
 8006ec2:	702a      	strb	r2, [r5, #0]
 8006ec4:	e022      	b.n	8006f0c <_printf_i+0x7c>
 8006ec6:	0010      	movs	r0, r2
 8006ec8:	3863      	subs	r0, #99	@ 0x63
 8006eca:	2815      	cmp	r0, #21
 8006ecc:	d8f7      	bhi.n	8006ebe <_printf_i+0x2e>
 8006ece:	f7f9 f92d 	bl	800012c <__gnu_thumb1_case_shi>
 8006ed2:	0016      	.short	0x0016
 8006ed4:	fff6001f 	.word	0xfff6001f
 8006ed8:	fff6fff6 	.word	0xfff6fff6
 8006edc:	001ffff6 	.word	0x001ffff6
 8006ee0:	fff6fff6 	.word	0xfff6fff6
 8006ee4:	fff6fff6 	.word	0xfff6fff6
 8006ee8:	0036009f 	.word	0x0036009f
 8006eec:	fff6007e 	.word	0xfff6007e
 8006ef0:	00b0fff6 	.word	0x00b0fff6
 8006ef4:	0036fff6 	.word	0x0036fff6
 8006ef8:	fff6fff6 	.word	0xfff6fff6
 8006efc:	0082      	.short	0x0082
 8006efe:	0025      	movs	r5, r4
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	3542      	adds	r5, #66	@ 0x42
 8006f04:	1d11      	adds	r1, r2, #4
 8006f06:	6019      	str	r1, [r3, #0]
 8006f08:	6813      	ldr	r3, [r2, #0]
 8006f0a:	702b      	strb	r3, [r5, #0]
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e09e      	b.n	800704e <_printf_i+0x1be>
 8006f10:	6818      	ldr	r0, [r3, #0]
 8006f12:	6809      	ldr	r1, [r1, #0]
 8006f14:	1d02      	adds	r2, r0, #4
 8006f16:	060d      	lsls	r5, r1, #24
 8006f18:	d50b      	bpl.n	8006f32 <_printf_i+0xa2>
 8006f1a:	6806      	ldr	r6, [r0, #0]
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	2e00      	cmp	r6, #0
 8006f20:	da03      	bge.n	8006f2a <_printf_i+0x9a>
 8006f22:	232d      	movs	r3, #45	@ 0x2d
 8006f24:	9a03      	ldr	r2, [sp, #12]
 8006f26:	4276      	negs	r6, r6
 8006f28:	7013      	strb	r3, [r2, #0]
 8006f2a:	4b5d      	ldr	r3, [pc, #372]	@ (80070a0 <_printf_i+0x210>)
 8006f2c:	270a      	movs	r7, #10
 8006f2e:	9304      	str	r3, [sp, #16]
 8006f30:	e018      	b.n	8006f64 <_printf_i+0xd4>
 8006f32:	6806      	ldr	r6, [r0, #0]
 8006f34:	601a      	str	r2, [r3, #0]
 8006f36:	0649      	lsls	r1, r1, #25
 8006f38:	d5f1      	bpl.n	8006f1e <_printf_i+0x8e>
 8006f3a:	b236      	sxth	r6, r6
 8006f3c:	e7ef      	b.n	8006f1e <_printf_i+0x8e>
 8006f3e:	6808      	ldr	r0, [r1, #0]
 8006f40:	6819      	ldr	r1, [r3, #0]
 8006f42:	c940      	ldmia	r1!, {r6}
 8006f44:	0605      	lsls	r5, r0, #24
 8006f46:	d402      	bmi.n	8006f4e <_printf_i+0xbe>
 8006f48:	0640      	lsls	r0, r0, #25
 8006f4a:	d500      	bpl.n	8006f4e <_printf_i+0xbe>
 8006f4c:	b2b6      	uxth	r6, r6
 8006f4e:	6019      	str	r1, [r3, #0]
 8006f50:	4b53      	ldr	r3, [pc, #332]	@ (80070a0 <_printf_i+0x210>)
 8006f52:	270a      	movs	r7, #10
 8006f54:	9304      	str	r3, [sp, #16]
 8006f56:	2a6f      	cmp	r2, #111	@ 0x6f
 8006f58:	d100      	bne.n	8006f5c <_printf_i+0xcc>
 8006f5a:	3f02      	subs	r7, #2
 8006f5c:	0023      	movs	r3, r4
 8006f5e:	2200      	movs	r2, #0
 8006f60:	3343      	adds	r3, #67	@ 0x43
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	60a3      	str	r3, [r4, #8]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	db06      	blt.n	8006f7a <_printf_i+0xea>
 8006f6c:	2104      	movs	r1, #4
 8006f6e:	6822      	ldr	r2, [r4, #0]
 8006f70:	9d03      	ldr	r5, [sp, #12]
 8006f72:	438a      	bics	r2, r1
 8006f74:	6022      	str	r2, [r4, #0]
 8006f76:	4333      	orrs	r3, r6
 8006f78:	d00c      	beq.n	8006f94 <_printf_i+0x104>
 8006f7a:	9d03      	ldr	r5, [sp, #12]
 8006f7c:	0030      	movs	r0, r6
 8006f7e:	0039      	movs	r1, r7
 8006f80:	f7f9 f964 	bl	800024c <__aeabi_uidivmod>
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	3d01      	subs	r5, #1
 8006f88:	5c5b      	ldrb	r3, [r3, r1]
 8006f8a:	702b      	strb	r3, [r5, #0]
 8006f8c:	0033      	movs	r3, r6
 8006f8e:	0006      	movs	r6, r0
 8006f90:	429f      	cmp	r7, r3
 8006f92:	d9f3      	bls.n	8006f7c <_printf_i+0xec>
 8006f94:	2f08      	cmp	r7, #8
 8006f96:	d109      	bne.n	8006fac <_printf_i+0x11c>
 8006f98:	6823      	ldr	r3, [r4, #0]
 8006f9a:	07db      	lsls	r3, r3, #31
 8006f9c:	d506      	bpl.n	8006fac <_printf_i+0x11c>
 8006f9e:	6862      	ldr	r2, [r4, #4]
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	429a      	cmp	r2, r3
 8006fa4:	dc02      	bgt.n	8006fac <_printf_i+0x11c>
 8006fa6:	2330      	movs	r3, #48	@ 0x30
 8006fa8:	3d01      	subs	r5, #1
 8006faa:	702b      	strb	r3, [r5, #0]
 8006fac:	9b03      	ldr	r3, [sp, #12]
 8006fae:	1b5b      	subs	r3, r3, r5
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	9b07      	ldr	r3, [sp, #28]
 8006fb4:	0021      	movs	r1, r4
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	9805      	ldr	r0, [sp, #20]
 8006fba:	9b06      	ldr	r3, [sp, #24]
 8006fbc:	aa09      	add	r2, sp, #36	@ 0x24
 8006fbe:	f7ff fef7 	bl	8006db0 <_printf_common>
 8006fc2:	3001      	adds	r0, #1
 8006fc4:	d148      	bne.n	8007058 <_printf_i+0x1c8>
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	4240      	negs	r0, r0
 8006fca:	b00b      	add	sp, #44	@ 0x2c
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fce:	2220      	movs	r2, #32
 8006fd0:	6809      	ldr	r1, [r1, #0]
 8006fd2:	430a      	orrs	r2, r1
 8006fd4:	6022      	str	r2, [r4, #0]
 8006fd6:	2278      	movs	r2, #120	@ 0x78
 8006fd8:	4932      	ldr	r1, [pc, #200]	@ (80070a4 <_printf_i+0x214>)
 8006fda:	9104      	str	r1, [sp, #16]
 8006fdc:	0021      	movs	r1, r4
 8006fde:	3145      	adds	r1, #69	@ 0x45
 8006fe0:	700a      	strb	r2, [r1, #0]
 8006fe2:	6819      	ldr	r1, [r3, #0]
 8006fe4:	6822      	ldr	r2, [r4, #0]
 8006fe6:	c940      	ldmia	r1!, {r6}
 8006fe8:	0610      	lsls	r0, r2, #24
 8006fea:	d402      	bmi.n	8006ff2 <_printf_i+0x162>
 8006fec:	0650      	lsls	r0, r2, #25
 8006fee:	d500      	bpl.n	8006ff2 <_printf_i+0x162>
 8006ff0:	b2b6      	uxth	r6, r6
 8006ff2:	6019      	str	r1, [r3, #0]
 8006ff4:	07d3      	lsls	r3, r2, #31
 8006ff6:	d502      	bpl.n	8006ffe <_printf_i+0x16e>
 8006ff8:	2320      	movs	r3, #32
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	2e00      	cmp	r6, #0
 8007000:	d001      	beq.n	8007006 <_printf_i+0x176>
 8007002:	2710      	movs	r7, #16
 8007004:	e7aa      	b.n	8006f5c <_printf_i+0xcc>
 8007006:	2220      	movs	r2, #32
 8007008:	6823      	ldr	r3, [r4, #0]
 800700a:	4393      	bics	r3, r2
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	e7f8      	b.n	8007002 <_printf_i+0x172>
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	680d      	ldr	r5, [r1, #0]
 8007014:	1d10      	adds	r0, r2, #4
 8007016:	6949      	ldr	r1, [r1, #20]
 8007018:	6018      	str	r0, [r3, #0]
 800701a:	6813      	ldr	r3, [r2, #0]
 800701c:	062e      	lsls	r6, r5, #24
 800701e:	d501      	bpl.n	8007024 <_printf_i+0x194>
 8007020:	6019      	str	r1, [r3, #0]
 8007022:	e002      	b.n	800702a <_printf_i+0x19a>
 8007024:	066d      	lsls	r5, r5, #25
 8007026:	d5fb      	bpl.n	8007020 <_printf_i+0x190>
 8007028:	8019      	strh	r1, [r3, #0]
 800702a:	2300      	movs	r3, #0
 800702c:	9d03      	ldr	r5, [sp, #12]
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	e7bf      	b.n	8006fb2 <_printf_i+0x122>
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	1d11      	adds	r1, r2, #4
 8007036:	6019      	str	r1, [r3, #0]
 8007038:	6815      	ldr	r5, [r2, #0]
 800703a:	2100      	movs	r1, #0
 800703c:	0028      	movs	r0, r5
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	f000 fd07 	bl	8007a52 <memchr>
 8007044:	2800      	cmp	r0, #0
 8007046:	d001      	beq.n	800704c <_printf_i+0x1bc>
 8007048:	1b40      	subs	r0, r0, r5
 800704a:	6060      	str	r0, [r4, #4]
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	2300      	movs	r3, #0
 8007052:	9a03      	ldr	r2, [sp, #12]
 8007054:	7013      	strb	r3, [r2, #0]
 8007056:	e7ac      	b.n	8006fb2 <_printf_i+0x122>
 8007058:	002a      	movs	r2, r5
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	9906      	ldr	r1, [sp, #24]
 800705e:	9805      	ldr	r0, [sp, #20]
 8007060:	9d07      	ldr	r5, [sp, #28]
 8007062:	47a8      	blx	r5
 8007064:	3001      	adds	r0, #1
 8007066:	d0ae      	beq.n	8006fc6 <_printf_i+0x136>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	079b      	lsls	r3, r3, #30
 800706c:	d415      	bmi.n	800709a <_printf_i+0x20a>
 800706e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007070:	68e0      	ldr	r0, [r4, #12]
 8007072:	4298      	cmp	r0, r3
 8007074:	daa9      	bge.n	8006fca <_printf_i+0x13a>
 8007076:	0018      	movs	r0, r3
 8007078:	e7a7      	b.n	8006fca <_printf_i+0x13a>
 800707a:	0022      	movs	r2, r4
 800707c:	2301      	movs	r3, #1
 800707e:	9906      	ldr	r1, [sp, #24]
 8007080:	9805      	ldr	r0, [sp, #20]
 8007082:	9e07      	ldr	r6, [sp, #28]
 8007084:	3219      	adds	r2, #25
 8007086:	47b0      	blx	r6
 8007088:	3001      	adds	r0, #1
 800708a:	d09c      	beq.n	8006fc6 <_printf_i+0x136>
 800708c:	3501      	adds	r5, #1
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007092:	1a9b      	subs	r3, r3, r2
 8007094:	42ab      	cmp	r3, r5
 8007096:	dcf0      	bgt.n	800707a <_printf_i+0x1ea>
 8007098:	e7e9      	b.n	800706e <_printf_i+0x1de>
 800709a:	2500      	movs	r5, #0
 800709c:	e7f7      	b.n	800708e <_printf_i+0x1fe>
 800709e:	46c0      	nop			@ (mov r8, r8)
 80070a0:	0800b49e 	.word	0x0800b49e
 80070a4:	0800b4af 	.word	0x0800b4af

080070a8 <_scanf_float>:
 80070a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070aa:	b08b      	sub	sp, #44	@ 0x2c
 80070ac:	0016      	movs	r6, r2
 80070ae:	9003      	str	r0, [sp, #12]
 80070b0:	22ae      	movs	r2, #174	@ 0xae
 80070b2:	2000      	movs	r0, #0
 80070b4:	9307      	str	r3, [sp, #28]
 80070b6:	688b      	ldr	r3, [r1, #8]
 80070b8:	000c      	movs	r4, r1
 80070ba:	1e59      	subs	r1, r3, #1
 80070bc:	0052      	lsls	r2, r2, #1
 80070be:	9006      	str	r0, [sp, #24]
 80070c0:	4291      	cmp	r1, r2
 80070c2:	d905      	bls.n	80070d0 <_scanf_float+0x28>
 80070c4:	3b5e      	subs	r3, #94	@ 0x5e
 80070c6:	3bff      	subs	r3, #255	@ 0xff
 80070c8:	9306      	str	r3, [sp, #24]
 80070ca:	235e      	movs	r3, #94	@ 0x5e
 80070cc:	33ff      	adds	r3, #255	@ 0xff
 80070ce:	60a3      	str	r3, [r4, #8]
 80070d0:	23f0      	movs	r3, #240	@ 0xf0
 80070d2:	6822      	ldr	r2, [r4, #0]
 80070d4:	00db      	lsls	r3, r3, #3
 80070d6:	4313      	orrs	r3, r2
 80070d8:	6023      	str	r3, [r4, #0]
 80070da:	0023      	movs	r3, r4
 80070dc:	2500      	movs	r5, #0
 80070de:	331c      	adds	r3, #28
 80070e0:	001f      	movs	r7, r3
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	9502      	str	r5, [sp, #8]
 80070e6:	9509      	str	r5, [sp, #36]	@ 0x24
 80070e8:	9508      	str	r5, [sp, #32]
 80070ea:	9501      	str	r5, [sp, #4]
 80070ec:	9505      	str	r5, [sp, #20]
 80070ee:	68a2      	ldr	r2, [r4, #8]
 80070f0:	2a00      	cmp	r2, #0
 80070f2:	d00a      	beq.n	800710a <_scanf_float+0x62>
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	2b4e      	cmp	r3, #78	@ 0x4e
 80070fa:	d844      	bhi.n	8007186 <_scanf_float+0xde>
 80070fc:	0018      	movs	r0, r3
 80070fe:	2b40      	cmp	r3, #64	@ 0x40
 8007100:	d82c      	bhi.n	800715c <_scanf_float+0xb4>
 8007102:	382b      	subs	r0, #43	@ 0x2b
 8007104:	b2c1      	uxtb	r1, r0
 8007106:	290e      	cmp	r1, #14
 8007108:	d92a      	bls.n	8007160 <_scanf_float+0xb8>
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <_scanf_float+0x70>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	4aa6      	ldr	r2, [pc, #664]	@ (80073ac <_scanf_float+0x304>)
 8007114:	4013      	ands	r3, r2
 8007116:	6023      	str	r3, [r4, #0]
 8007118:	9b02      	ldr	r3, [sp, #8]
 800711a:	3b01      	subs	r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	d900      	bls.n	8007122 <_scanf_float+0x7a>
 8007120:	e0fe      	b.n	8007320 <_scanf_float+0x278>
 8007122:	25be      	movs	r5, #190	@ 0xbe
 8007124:	006d      	lsls	r5, r5, #1
 8007126:	9b04      	ldr	r3, [sp, #16]
 8007128:	429f      	cmp	r7, r3
 800712a:	d900      	bls.n	800712e <_scanf_float+0x86>
 800712c:	e0ee      	b.n	800730c <_scanf_float+0x264>
 800712e:	2001      	movs	r0, #1
 8007130:	b00b      	add	sp, #44	@ 0x2c
 8007132:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007134:	0018      	movs	r0, r3
 8007136:	3861      	subs	r0, #97	@ 0x61
 8007138:	280d      	cmp	r0, #13
 800713a:	d8e6      	bhi.n	800710a <_scanf_float+0x62>
 800713c:	f7f8 fff6 	bl	800012c <__gnu_thumb1_case_shi>
 8007140:	ffe50089 	.word	0xffe50089
 8007144:	ffe5ffe5 	.word	0xffe5ffe5
 8007148:	00a700bb 	.word	0x00a700bb
 800714c:	ffe5ffe5 	.word	0xffe5ffe5
 8007150:	ffe5008f 	.word	0xffe5008f
 8007154:	ffe5ffe5 	.word	0xffe5ffe5
 8007158:	006bffe5 	.word	0x006bffe5
 800715c:	3841      	subs	r0, #65	@ 0x41
 800715e:	e7eb      	b.n	8007138 <_scanf_float+0x90>
 8007160:	280e      	cmp	r0, #14
 8007162:	d8d2      	bhi.n	800710a <_scanf_float+0x62>
 8007164:	f7f8 ffe2 	bl	800012c <__gnu_thumb1_case_shi>
 8007168:	ffd1004f 	.word	0xffd1004f
 800716c:	009d004f 	.word	0x009d004f
 8007170:	0021ffd1 	.word	0x0021ffd1
 8007174:	00410041 	.word	0x00410041
 8007178:	00410041 	.word	0x00410041
 800717c:	00410041 	.word	0x00410041
 8007180:	00410041 	.word	0x00410041
 8007184:	0041      	.short	0x0041
 8007186:	2b6e      	cmp	r3, #110	@ 0x6e
 8007188:	d80a      	bhi.n	80071a0 <_scanf_float+0xf8>
 800718a:	2b60      	cmp	r3, #96	@ 0x60
 800718c:	d8d2      	bhi.n	8007134 <_scanf_float+0x8c>
 800718e:	2b54      	cmp	r3, #84	@ 0x54
 8007190:	d100      	bne.n	8007194 <_scanf_float+0xec>
 8007192:	e081      	b.n	8007298 <_scanf_float+0x1f0>
 8007194:	2b59      	cmp	r3, #89	@ 0x59
 8007196:	d1b8      	bne.n	800710a <_scanf_float+0x62>
 8007198:	2d07      	cmp	r5, #7
 800719a:	d1b6      	bne.n	800710a <_scanf_float+0x62>
 800719c:	2508      	movs	r5, #8
 800719e:	e02f      	b.n	8007200 <_scanf_float+0x158>
 80071a0:	2b74      	cmp	r3, #116	@ 0x74
 80071a2:	d079      	beq.n	8007298 <_scanf_float+0x1f0>
 80071a4:	2b79      	cmp	r3, #121	@ 0x79
 80071a6:	d0f7      	beq.n	8007198 <_scanf_float+0xf0>
 80071a8:	e7af      	b.n	800710a <_scanf_float+0x62>
 80071aa:	6821      	ldr	r1, [r4, #0]
 80071ac:	05c8      	lsls	r0, r1, #23
 80071ae:	d51c      	bpl.n	80071ea <_scanf_float+0x142>
 80071b0:	2380      	movs	r3, #128	@ 0x80
 80071b2:	4399      	bics	r1, r3
 80071b4:	9b01      	ldr	r3, [sp, #4]
 80071b6:	6021      	str	r1, [r4, #0]
 80071b8:	3301      	adds	r3, #1
 80071ba:	9301      	str	r3, [sp, #4]
 80071bc:	9b06      	ldr	r3, [sp, #24]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d003      	beq.n	80071ca <_scanf_float+0x122>
 80071c2:	3b01      	subs	r3, #1
 80071c4:	3201      	adds	r2, #1
 80071c6:	9306      	str	r3, [sp, #24]
 80071c8:	60a2      	str	r2, [r4, #8]
 80071ca:	68a3      	ldr	r3, [r4, #8]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	60a3      	str	r3, [r4, #8]
 80071d0:	6923      	ldr	r3, [r4, #16]
 80071d2:	3301      	adds	r3, #1
 80071d4:	6123      	str	r3, [r4, #16]
 80071d6:	6873      	ldr	r3, [r6, #4]
 80071d8:	3b01      	subs	r3, #1
 80071da:	6073      	str	r3, [r6, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	dc00      	bgt.n	80071e2 <_scanf_float+0x13a>
 80071e0:	e08a      	b.n	80072f8 <_scanf_float+0x250>
 80071e2:	6833      	ldr	r3, [r6, #0]
 80071e4:	3301      	adds	r3, #1
 80071e6:	6033      	str	r3, [r6, #0]
 80071e8:	e781      	b.n	80070ee <_scanf_float+0x46>
 80071ea:	9a02      	ldr	r2, [sp, #8]
 80071ec:	1951      	adds	r1, r2, r5
 80071ee:	2900      	cmp	r1, #0
 80071f0:	d000      	beq.n	80071f4 <_scanf_float+0x14c>
 80071f2:	e78a      	b.n	800710a <_scanf_float+0x62>
 80071f4:	000d      	movs	r5, r1
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	486d      	ldr	r0, [pc, #436]	@ (80073b0 <_scanf_float+0x308>)
 80071fa:	9102      	str	r1, [sp, #8]
 80071fc:	4002      	ands	r2, r0
 80071fe:	6022      	str	r2, [r4, #0]
 8007200:	703b      	strb	r3, [r7, #0]
 8007202:	3701      	adds	r7, #1
 8007204:	e7e1      	b.n	80071ca <_scanf_float+0x122>
 8007206:	2180      	movs	r1, #128	@ 0x80
 8007208:	6822      	ldr	r2, [r4, #0]
 800720a:	420a      	tst	r2, r1
 800720c:	d100      	bne.n	8007210 <_scanf_float+0x168>
 800720e:	e77c      	b.n	800710a <_scanf_float+0x62>
 8007210:	438a      	bics	r2, r1
 8007212:	6022      	str	r2, [r4, #0]
 8007214:	e7f4      	b.n	8007200 <_scanf_float+0x158>
 8007216:	9a02      	ldr	r2, [sp, #8]
 8007218:	2a00      	cmp	r2, #0
 800721a:	d10f      	bne.n	800723c <_scanf_float+0x194>
 800721c:	9a01      	ldr	r2, [sp, #4]
 800721e:	2a00      	cmp	r2, #0
 8007220:	d10f      	bne.n	8007242 <_scanf_float+0x19a>
 8007222:	6822      	ldr	r2, [r4, #0]
 8007224:	21e0      	movs	r1, #224	@ 0xe0
 8007226:	0010      	movs	r0, r2
 8007228:	00c9      	lsls	r1, r1, #3
 800722a:	4008      	ands	r0, r1
 800722c:	4288      	cmp	r0, r1
 800722e:	d108      	bne.n	8007242 <_scanf_float+0x19a>
 8007230:	4960      	ldr	r1, [pc, #384]	@ (80073b4 <_scanf_float+0x30c>)
 8007232:	400a      	ands	r2, r1
 8007234:	6022      	str	r2, [r4, #0]
 8007236:	2201      	movs	r2, #1
 8007238:	9202      	str	r2, [sp, #8]
 800723a:	e7e1      	b.n	8007200 <_scanf_float+0x158>
 800723c:	9a02      	ldr	r2, [sp, #8]
 800723e:	2a02      	cmp	r2, #2
 8007240:	d058      	beq.n	80072f4 <_scanf_float+0x24c>
 8007242:	2d01      	cmp	r5, #1
 8007244:	d002      	beq.n	800724c <_scanf_float+0x1a4>
 8007246:	2d04      	cmp	r5, #4
 8007248:	d000      	beq.n	800724c <_scanf_float+0x1a4>
 800724a:	e75e      	b.n	800710a <_scanf_float+0x62>
 800724c:	3501      	adds	r5, #1
 800724e:	b2ed      	uxtb	r5, r5
 8007250:	e7d6      	b.n	8007200 <_scanf_float+0x158>
 8007252:	9a02      	ldr	r2, [sp, #8]
 8007254:	2a01      	cmp	r2, #1
 8007256:	d000      	beq.n	800725a <_scanf_float+0x1b2>
 8007258:	e757      	b.n	800710a <_scanf_float+0x62>
 800725a:	2202      	movs	r2, #2
 800725c:	e7ec      	b.n	8007238 <_scanf_float+0x190>
 800725e:	2d00      	cmp	r5, #0
 8007260:	d110      	bne.n	8007284 <_scanf_float+0x1dc>
 8007262:	9a01      	ldr	r2, [sp, #4]
 8007264:	2a00      	cmp	r2, #0
 8007266:	d000      	beq.n	800726a <_scanf_float+0x1c2>
 8007268:	e752      	b.n	8007110 <_scanf_float+0x68>
 800726a:	6822      	ldr	r2, [r4, #0]
 800726c:	21e0      	movs	r1, #224	@ 0xe0
 800726e:	0010      	movs	r0, r2
 8007270:	00c9      	lsls	r1, r1, #3
 8007272:	4008      	ands	r0, r1
 8007274:	4288      	cmp	r0, r1
 8007276:	d000      	beq.n	800727a <_scanf_float+0x1d2>
 8007278:	e11b      	b.n	80074b2 <_scanf_float+0x40a>
 800727a:	494e      	ldr	r1, [pc, #312]	@ (80073b4 <_scanf_float+0x30c>)
 800727c:	3501      	adds	r5, #1
 800727e:	400a      	ands	r2, r1
 8007280:	6022      	str	r2, [r4, #0]
 8007282:	e7bd      	b.n	8007200 <_scanf_float+0x158>
 8007284:	21fd      	movs	r1, #253	@ 0xfd
 8007286:	1eea      	subs	r2, r5, #3
 8007288:	420a      	tst	r2, r1
 800728a:	d0df      	beq.n	800724c <_scanf_float+0x1a4>
 800728c:	e73d      	b.n	800710a <_scanf_float+0x62>
 800728e:	2d02      	cmp	r5, #2
 8007290:	d000      	beq.n	8007294 <_scanf_float+0x1ec>
 8007292:	e73a      	b.n	800710a <_scanf_float+0x62>
 8007294:	2503      	movs	r5, #3
 8007296:	e7b3      	b.n	8007200 <_scanf_float+0x158>
 8007298:	2d06      	cmp	r5, #6
 800729a:	d000      	beq.n	800729e <_scanf_float+0x1f6>
 800729c:	e735      	b.n	800710a <_scanf_float+0x62>
 800729e:	2507      	movs	r5, #7
 80072a0:	e7ae      	b.n	8007200 <_scanf_float+0x158>
 80072a2:	6822      	ldr	r2, [r4, #0]
 80072a4:	0591      	lsls	r1, r2, #22
 80072a6:	d400      	bmi.n	80072aa <_scanf_float+0x202>
 80072a8:	e72f      	b.n	800710a <_scanf_float+0x62>
 80072aa:	4943      	ldr	r1, [pc, #268]	@ (80073b8 <_scanf_float+0x310>)
 80072ac:	400a      	ands	r2, r1
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	9a01      	ldr	r2, [sp, #4]
 80072b2:	9205      	str	r2, [sp, #20]
 80072b4:	e7a4      	b.n	8007200 <_scanf_float+0x158>
 80072b6:	21a0      	movs	r1, #160	@ 0xa0
 80072b8:	2080      	movs	r0, #128	@ 0x80
 80072ba:	6822      	ldr	r2, [r4, #0]
 80072bc:	00c9      	lsls	r1, r1, #3
 80072be:	4011      	ands	r1, r2
 80072c0:	00c0      	lsls	r0, r0, #3
 80072c2:	4281      	cmp	r1, r0
 80072c4:	d006      	beq.n	80072d4 <_scanf_float+0x22c>
 80072c6:	4202      	tst	r2, r0
 80072c8:	d100      	bne.n	80072cc <_scanf_float+0x224>
 80072ca:	e71e      	b.n	800710a <_scanf_float+0x62>
 80072cc:	9901      	ldr	r1, [sp, #4]
 80072ce:	2900      	cmp	r1, #0
 80072d0:	d100      	bne.n	80072d4 <_scanf_float+0x22c>
 80072d2:	e0ee      	b.n	80074b2 <_scanf_float+0x40a>
 80072d4:	0591      	lsls	r1, r2, #22
 80072d6:	d404      	bmi.n	80072e2 <_scanf_float+0x23a>
 80072d8:	9901      	ldr	r1, [sp, #4]
 80072da:	9805      	ldr	r0, [sp, #20]
 80072dc:	9709      	str	r7, [sp, #36]	@ 0x24
 80072de:	1a09      	subs	r1, r1, r0
 80072e0:	9108      	str	r1, [sp, #32]
 80072e2:	4934      	ldr	r1, [pc, #208]	@ (80073b4 <_scanf_float+0x30c>)
 80072e4:	400a      	ands	r2, r1
 80072e6:	21c0      	movs	r1, #192	@ 0xc0
 80072e8:	0049      	lsls	r1, r1, #1
 80072ea:	430a      	orrs	r2, r1
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	2200      	movs	r2, #0
 80072f0:	9201      	str	r2, [sp, #4]
 80072f2:	e785      	b.n	8007200 <_scanf_float+0x158>
 80072f4:	2203      	movs	r2, #3
 80072f6:	e79f      	b.n	8007238 <_scanf_float+0x190>
 80072f8:	23c0      	movs	r3, #192	@ 0xc0
 80072fa:	005b      	lsls	r3, r3, #1
 80072fc:	0031      	movs	r1, r6
 80072fe:	58e3      	ldr	r3, [r4, r3]
 8007300:	9803      	ldr	r0, [sp, #12]
 8007302:	4798      	blx	r3
 8007304:	2800      	cmp	r0, #0
 8007306:	d100      	bne.n	800730a <_scanf_float+0x262>
 8007308:	e6f1      	b.n	80070ee <_scanf_float+0x46>
 800730a:	e6fe      	b.n	800710a <_scanf_float+0x62>
 800730c:	3f01      	subs	r7, #1
 800730e:	5963      	ldr	r3, [r4, r5]
 8007310:	0032      	movs	r2, r6
 8007312:	7839      	ldrb	r1, [r7, #0]
 8007314:	9803      	ldr	r0, [sp, #12]
 8007316:	4798      	blx	r3
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	3b01      	subs	r3, #1
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	e702      	b.n	8007126 <_scanf_float+0x7e>
 8007320:	1e6b      	subs	r3, r5, #1
 8007322:	2b06      	cmp	r3, #6
 8007324:	d80e      	bhi.n	8007344 <_scanf_float+0x29c>
 8007326:	9702      	str	r7, [sp, #8]
 8007328:	2d02      	cmp	r5, #2
 800732a:	d920      	bls.n	800736e <_scanf_float+0x2c6>
 800732c:	1beb      	subs	r3, r5, r7
 800732e:	b2db      	uxtb	r3, r3
 8007330:	9306      	str	r3, [sp, #24]
 8007332:	9b02      	ldr	r3, [sp, #8]
 8007334:	9a06      	ldr	r2, [sp, #24]
 8007336:	189b      	adds	r3, r3, r2
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d127      	bne.n	800738e <_scanf_float+0x2e6>
 800733e:	3d03      	subs	r5, #3
 8007340:	b2ed      	uxtb	r5, r5
 8007342:	1b7f      	subs	r7, r7, r5
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	05da      	lsls	r2, r3, #23
 8007348:	d553      	bpl.n	80073f2 <_scanf_float+0x34a>
 800734a:	055b      	lsls	r3, r3, #21
 800734c:	d536      	bpl.n	80073bc <_scanf_float+0x314>
 800734e:	25be      	movs	r5, #190	@ 0xbe
 8007350:	006d      	lsls	r5, r5, #1
 8007352:	9b04      	ldr	r3, [sp, #16]
 8007354:	429f      	cmp	r7, r3
 8007356:	d800      	bhi.n	800735a <_scanf_float+0x2b2>
 8007358:	e6e9      	b.n	800712e <_scanf_float+0x86>
 800735a:	3f01      	subs	r7, #1
 800735c:	5963      	ldr	r3, [r4, r5]
 800735e:	0032      	movs	r2, r6
 8007360:	7839      	ldrb	r1, [r7, #0]
 8007362:	9803      	ldr	r0, [sp, #12]
 8007364:	4798      	blx	r3
 8007366:	6923      	ldr	r3, [r4, #16]
 8007368:	3b01      	subs	r3, #1
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	e7f1      	b.n	8007352 <_scanf_float+0x2aa>
 800736e:	25be      	movs	r5, #190	@ 0xbe
 8007370:	006d      	lsls	r5, r5, #1
 8007372:	9b04      	ldr	r3, [sp, #16]
 8007374:	429f      	cmp	r7, r3
 8007376:	d800      	bhi.n	800737a <_scanf_float+0x2d2>
 8007378:	e6d9      	b.n	800712e <_scanf_float+0x86>
 800737a:	3f01      	subs	r7, #1
 800737c:	5963      	ldr	r3, [r4, r5]
 800737e:	0032      	movs	r2, r6
 8007380:	7839      	ldrb	r1, [r7, #0]
 8007382:	9803      	ldr	r0, [sp, #12]
 8007384:	4798      	blx	r3
 8007386:	6923      	ldr	r3, [r4, #16]
 8007388:	3b01      	subs	r3, #1
 800738a:	6123      	str	r3, [r4, #16]
 800738c:	e7f1      	b.n	8007372 <_scanf_float+0x2ca>
 800738e:	9b02      	ldr	r3, [sp, #8]
 8007390:	0032      	movs	r2, r6
 8007392:	3b01      	subs	r3, #1
 8007394:	7819      	ldrb	r1, [r3, #0]
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	23be      	movs	r3, #190	@ 0xbe
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	58e3      	ldr	r3, [r4, r3]
 800739e:	9803      	ldr	r0, [sp, #12]
 80073a0:	4798      	blx	r3
 80073a2:	6923      	ldr	r3, [r4, #16]
 80073a4:	3b01      	subs	r3, #1
 80073a6:	6123      	str	r3, [r4, #16]
 80073a8:	e7c3      	b.n	8007332 <_scanf_float+0x28a>
 80073aa:	46c0      	nop			@ (mov r8, r8)
 80073ac:	fffffeff 	.word	0xfffffeff
 80073b0:	fffffe7f 	.word	0xfffffe7f
 80073b4:	fffff87f 	.word	0xfffff87f
 80073b8:	fffffd7f 	.word	0xfffffd7f
 80073bc:	6923      	ldr	r3, [r4, #16]
 80073be:	1e7d      	subs	r5, r7, #1
 80073c0:	7829      	ldrb	r1, [r5, #0]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	6123      	str	r3, [r4, #16]
 80073c6:	2965      	cmp	r1, #101	@ 0x65
 80073c8:	d00c      	beq.n	80073e4 <_scanf_float+0x33c>
 80073ca:	2945      	cmp	r1, #69	@ 0x45
 80073cc:	d00a      	beq.n	80073e4 <_scanf_float+0x33c>
 80073ce:	23be      	movs	r3, #190	@ 0xbe
 80073d0:	005b      	lsls	r3, r3, #1
 80073d2:	58e3      	ldr	r3, [r4, r3]
 80073d4:	0032      	movs	r2, r6
 80073d6:	9803      	ldr	r0, [sp, #12]
 80073d8:	4798      	blx	r3
 80073da:	6923      	ldr	r3, [r4, #16]
 80073dc:	1ebd      	subs	r5, r7, #2
 80073de:	3b01      	subs	r3, #1
 80073e0:	7829      	ldrb	r1, [r5, #0]
 80073e2:	6123      	str	r3, [r4, #16]
 80073e4:	23be      	movs	r3, #190	@ 0xbe
 80073e6:	005b      	lsls	r3, r3, #1
 80073e8:	0032      	movs	r2, r6
 80073ea:	58e3      	ldr	r3, [r4, r3]
 80073ec:	9803      	ldr	r0, [sp, #12]
 80073ee:	4798      	blx	r3
 80073f0:	002f      	movs	r7, r5
 80073f2:	6821      	ldr	r1, [r4, #0]
 80073f4:	2310      	movs	r3, #16
 80073f6:	000a      	movs	r2, r1
 80073f8:	401a      	ands	r2, r3
 80073fa:	4219      	tst	r1, r3
 80073fc:	d001      	beq.n	8007402 <_scanf_float+0x35a>
 80073fe:	2000      	movs	r0, #0
 8007400:	e696      	b.n	8007130 <_scanf_float+0x88>
 8007402:	21c0      	movs	r1, #192	@ 0xc0
 8007404:	703a      	strb	r2, [r7, #0]
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	00c9      	lsls	r1, r1, #3
 800740a:	400b      	ands	r3, r1
 800740c:	2180      	movs	r1, #128	@ 0x80
 800740e:	00c9      	lsls	r1, r1, #3
 8007410:	428b      	cmp	r3, r1
 8007412:	d126      	bne.n	8007462 <_scanf_float+0x3ba>
 8007414:	9b05      	ldr	r3, [sp, #20]
 8007416:	9a01      	ldr	r2, [sp, #4]
 8007418:	4293      	cmp	r3, r2
 800741a:	d00c      	beq.n	8007436 <_scanf_float+0x38e>
 800741c:	1a9a      	subs	r2, r3, r2
 800741e:	0023      	movs	r3, r4
 8007420:	3370      	adds	r3, #112	@ 0x70
 8007422:	33ff      	adds	r3, #255	@ 0xff
 8007424:	429f      	cmp	r7, r3
 8007426:	d302      	bcc.n	800742e <_scanf_float+0x386>
 8007428:	0027      	movs	r7, r4
 800742a:	376f      	adds	r7, #111	@ 0x6f
 800742c:	37ff      	adds	r7, #255	@ 0xff
 800742e:	0038      	movs	r0, r7
 8007430:	4921      	ldr	r1, [pc, #132]	@ (80074b8 <_scanf_float+0x410>)
 8007432:	f000 f979 	bl	8007728 <siprintf>
 8007436:	2200      	movs	r2, #0
 8007438:	9904      	ldr	r1, [sp, #16]
 800743a:	9803      	ldr	r0, [sp, #12]
 800743c:	f002 fd76 	bl	8009f2c <_strtod_r>
 8007440:	9b07      	ldr	r3, [sp, #28]
 8007442:	6822      	ldr	r2, [r4, #0]
 8007444:	0006      	movs	r6, r0
 8007446:	000f      	movs	r7, r1
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	0791      	lsls	r1, r2, #30
 800744c:	d516      	bpl.n	800747c <_scanf_float+0x3d4>
 800744e:	9907      	ldr	r1, [sp, #28]
 8007450:	1d1a      	adds	r2, r3, #4
 8007452:	600a      	str	r2, [r1, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	601e      	str	r6, [r3, #0]
 8007458:	605f      	str	r7, [r3, #4]
 800745a:	68e3      	ldr	r3, [r4, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60e3      	str	r3, [r4, #12]
 8007460:	e7cd      	b.n	80073fe <_scanf_float+0x356>
 8007462:	9b08      	ldr	r3, [sp, #32]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d0e6      	beq.n	8007436 <_scanf_float+0x38e>
 8007468:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800746a:	9803      	ldr	r0, [sp, #12]
 800746c:	1c59      	adds	r1, r3, #1
 800746e:	230a      	movs	r3, #10
 8007470:	f002 fdee 	bl	800a050 <_strtol_r>
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8007478:	1ac2      	subs	r2, r0, r3
 800747a:	e7d0      	b.n	800741e <_scanf_float+0x376>
 800747c:	1d19      	adds	r1, r3, #4
 800747e:	0752      	lsls	r2, r2, #29
 8007480:	d502      	bpl.n	8007488 <_scanf_float+0x3e0>
 8007482:	9a07      	ldr	r2, [sp, #28]
 8007484:	6011      	str	r1, [r2, #0]
 8007486:	e7e5      	b.n	8007454 <_scanf_float+0x3ac>
 8007488:	9a07      	ldr	r2, [sp, #28]
 800748a:	0030      	movs	r0, r6
 800748c:	6011      	str	r1, [r2, #0]
 800748e:	681d      	ldr	r5, [r3, #0]
 8007490:	0032      	movs	r2, r6
 8007492:	003b      	movs	r3, r7
 8007494:	0039      	movs	r1, r7
 8007496:	f7fb f90f 	bl	80026b8 <__aeabi_dcmpun>
 800749a:	2800      	cmp	r0, #0
 800749c:	d004      	beq.n	80074a8 <_scanf_float+0x400>
 800749e:	4807      	ldr	r0, [pc, #28]	@ (80074bc <_scanf_float+0x414>)
 80074a0:	f000 faec 	bl	8007a7c <nanf>
 80074a4:	6028      	str	r0, [r5, #0]
 80074a6:	e7d8      	b.n	800745a <_scanf_float+0x3b2>
 80074a8:	0030      	movs	r0, r6
 80074aa:	0039      	movs	r1, r7
 80074ac:	f7fb f9fc 	bl	80028a8 <__aeabi_d2f>
 80074b0:	e7f8      	b.n	80074a4 <_scanf_float+0x3fc>
 80074b2:	2300      	movs	r3, #0
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	e62f      	b.n	8007118 <_scanf_float+0x70>
 80074b8:	0800b4c0 	.word	0x0800b4c0
 80074bc:	0800b601 	.word	0x0800b601

080074c0 <std>:
 80074c0:	2300      	movs	r3, #0
 80074c2:	b510      	push	{r4, lr}
 80074c4:	0004      	movs	r4, r0
 80074c6:	6003      	str	r3, [r0, #0]
 80074c8:	6043      	str	r3, [r0, #4]
 80074ca:	6083      	str	r3, [r0, #8]
 80074cc:	8181      	strh	r1, [r0, #12]
 80074ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80074d0:	81c2      	strh	r2, [r0, #14]
 80074d2:	6103      	str	r3, [r0, #16]
 80074d4:	6143      	str	r3, [r0, #20]
 80074d6:	6183      	str	r3, [r0, #24]
 80074d8:	0019      	movs	r1, r3
 80074da:	2208      	movs	r2, #8
 80074dc:	305c      	adds	r0, #92	@ 0x5c
 80074de:	f000 fa31 	bl	8007944 <memset>
 80074e2:	4b0b      	ldr	r3, [pc, #44]	@ (8007510 <std+0x50>)
 80074e4:	6224      	str	r4, [r4, #32]
 80074e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80074e8:	4b0a      	ldr	r3, [pc, #40]	@ (8007514 <std+0x54>)
 80074ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007518 <std+0x58>)
 80074ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074f0:	4b0a      	ldr	r3, [pc, #40]	@ (800751c <std+0x5c>)
 80074f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80074f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <std+0x60>)
 80074f6:	429c      	cmp	r4, r3
 80074f8:	d005      	beq.n	8007506 <std+0x46>
 80074fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <std+0x64>)
 80074fc:	429c      	cmp	r4, r3
 80074fe:	d002      	beq.n	8007506 <std+0x46>
 8007500:	4b09      	ldr	r3, [pc, #36]	@ (8007528 <std+0x68>)
 8007502:	429c      	cmp	r4, r3
 8007504:	d103      	bne.n	800750e <std+0x4e>
 8007506:	0020      	movs	r0, r4
 8007508:	3058      	adds	r0, #88	@ 0x58
 800750a:	f000 fa9f 	bl	8007a4c <__retarget_lock_init_recursive>
 800750e:	bd10      	pop	{r4, pc}
 8007510:	0800776d 	.word	0x0800776d
 8007514:	08007795 	.word	0x08007795
 8007518:	080077cd 	.word	0x080077cd
 800751c:	080077f9 	.word	0x080077f9
 8007520:	2000039c 	.word	0x2000039c
 8007524:	20000404 	.word	0x20000404
 8007528:	2000046c 	.word	0x2000046c

0800752c <stdio_exit_handler>:
 800752c:	b510      	push	{r4, lr}
 800752e:	4a03      	ldr	r2, [pc, #12]	@ (800753c <stdio_exit_handler+0x10>)
 8007530:	4903      	ldr	r1, [pc, #12]	@ (8007540 <stdio_exit_handler+0x14>)
 8007532:	4804      	ldr	r0, [pc, #16]	@ (8007544 <stdio_exit_handler+0x18>)
 8007534:	f000 f86c 	bl	8007610 <_fwalk_sglue>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	46c0      	nop			@ (mov r8, r8)
 800753c:	2000000c 	.word	0x2000000c
 8007540:	0800a6a9 	.word	0x0800a6a9
 8007544:	2000001c 	.word	0x2000001c

08007548 <cleanup_stdio>:
 8007548:	6841      	ldr	r1, [r0, #4]
 800754a:	4b0b      	ldr	r3, [pc, #44]	@ (8007578 <cleanup_stdio+0x30>)
 800754c:	b510      	push	{r4, lr}
 800754e:	0004      	movs	r4, r0
 8007550:	4299      	cmp	r1, r3
 8007552:	d001      	beq.n	8007558 <cleanup_stdio+0x10>
 8007554:	f003 f8a8 	bl	800a6a8 <_fflush_r>
 8007558:	68a1      	ldr	r1, [r4, #8]
 800755a:	4b08      	ldr	r3, [pc, #32]	@ (800757c <cleanup_stdio+0x34>)
 800755c:	4299      	cmp	r1, r3
 800755e:	d002      	beq.n	8007566 <cleanup_stdio+0x1e>
 8007560:	0020      	movs	r0, r4
 8007562:	f003 f8a1 	bl	800a6a8 <_fflush_r>
 8007566:	68e1      	ldr	r1, [r4, #12]
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <cleanup_stdio+0x38>)
 800756a:	4299      	cmp	r1, r3
 800756c:	d002      	beq.n	8007574 <cleanup_stdio+0x2c>
 800756e:	0020      	movs	r0, r4
 8007570:	f003 f89a 	bl	800a6a8 <_fflush_r>
 8007574:	bd10      	pop	{r4, pc}
 8007576:	46c0      	nop			@ (mov r8, r8)
 8007578:	2000039c 	.word	0x2000039c
 800757c:	20000404 	.word	0x20000404
 8007580:	2000046c 	.word	0x2000046c

08007584 <global_stdio_init.part.0>:
 8007584:	b510      	push	{r4, lr}
 8007586:	4b09      	ldr	r3, [pc, #36]	@ (80075ac <global_stdio_init.part.0+0x28>)
 8007588:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <global_stdio_init.part.0+0x2c>)
 800758a:	2104      	movs	r1, #4
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	4809      	ldr	r0, [pc, #36]	@ (80075b4 <global_stdio_init.part.0+0x30>)
 8007590:	2200      	movs	r2, #0
 8007592:	f7ff ff95 	bl	80074c0 <std>
 8007596:	2201      	movs	r2, #1
 8007598:	2109      	movs	r1, #9
 800759a:	4807      	ldr	r0, [pc, #28]	@ (80075b8 <global_stdio_init.part.0+0x34>)
 800759c:	f7ff ff90 	bl	80074c0 <std>
 80075a0:	2202      	movs	r2, #2
 80075a2:	2112      	movs	r1, #18
 80075a4:	4805      	ldr	r0, [pc, #20]	@ (80075bc <global_stdio_init.part.0+0x38>)
 80075a6:	f7ff ff8b 	bl	80074c0 <std>
 80075aa:	bd10      	pop	{r4, pc}
 80075ac:	200004d4 	.word	0x200004d4
 80075b0:	0800752d 	.word	0x0800752d
 80075b4:	2000039c 	.word	0x2000039c
 80075b8:	20000404 	.word	0x20000404
 80075bc:	2000046c 	.word	0x2000046c

080075c0 <__sfp_lock_acquire>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	4802      	ldr	r0, [pc, #8]	@ (80075cc <__sfp_lock_acquire+0xc>)
 80075c4:	f000 fa43 	bl	8007a4e <__retarget_lock_acquire_recursive>
 80075c8:	bd10      	pop	{r4, pc}
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	200004dd 	.word	0x200004dd

080075d0 <__sfp_lock_release>:
 80075d0:	b510      	push	{r4, lr}
 80075d2:	4802      	ldr	r0, [pc, #8]	@ (80075dc <__sfp_lock_release+0xc>)
 80075d4:	f000 fa3c 	bl	8007a50 <__retarget_lock_release_recursive>
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	46c0      	nop			@ (mov r8, r8)
 80075dc:	200004dd 	.word	0x200004dd

080075e0 <__sinit>:
 80075e0:	b510      	push	{r4, lr}
 80075e2:	0004      	movs	r4, r0
 80075e4:	f7ff ffec 	bl	80075c0 <__sfp_lock_acquire>
 80075e8:	6a23      	ldr	r3, [r4, #32]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <__sinit+0x14>
 80075ee:	f7ff ffef 	bl	80075d0 <__sfp_lock_release>
 80075f2:	bd10      	pop	{r4, pc}
 80075f4:	4b04      	ldr	r3, [pc, #16]	@ (8007608 <__sinit+0x28>)
 80075f6:	6223      	str	r3, [r4, #32]
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <__sinit+0x2c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1f6      	bne.n	80075ee <__sinit+0xe>
 8007600:	f7ff ffc0 	bl	8007584 <global_stdio_init.part.0>
 8007604:	e7f3      	b.n	80075ee <__sinit+0xe>
 8007606:	46c0      	nop			@ (mov r8, r8)
 8007608:	08007549 	.word	0x08007549
 800760c:	200004d4 	.word	0x200004d4

08007610 <_fwalk_sglue>:
 8007610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007612:	0014      	movs	r4, r2
 8007614:	2600      	movs	r6, #0
 8007616:	9000      	str	r0, [sp, #0]
 8007618:	9101      	str	r1, [sp, #4]
 800761a:	68a5      	ldr	r5, [r4, #8]
 800761c:	6867      	ldr	r7, [r4, #4]
 800761e:	3f01      	subs	r7, #1
 8007620:	d504      	bpl.n	800762c <_fwalk_sglue+0x1c>
 8007622:	6824      	ldr	r4, [r4, #0]
 8007624:	2c00      	cmp	r4, #0
 8007626:	d1f8      	bne.n	800761a <_fwalk_sglue+0xa>
 8007628:	0030      	movs	r0, r6
 800762a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800762c:	89ab      	ldrh	r3, [r5, #12]
 800762e:	2b01      	cmp	r3, #1
 8007630:	d908      	bls.n	8007644 <_fwalk_sglue+0x34>
 8007632:	220e      	movs	r2, #14
 8007634:	5eab      	ldrsh	r3, [r5, r2]
 8007636:	3301      	adds	r3, #1
 8007638:	d004      	beq.n	8007644 <_fwalk_sglue+0x34>
 800763a:	0029      	movs	r1, r5
 800763c:	9800      	ldr	r0, [sp, #0]
 800763e:	9b01      	ldr	r3, [sp, #4]
 8007640:	4798      	blx	r3
 8007642:	4306      	orrs	r6, r0
 8007644:	3568      	adds	r5, #104	@ 0x68
 8007646:	e7ea      	b.n	800761e <_fwalk_sglue+0xe>

08007648 <iprintf>:
 8007648:	b40f      	push	{r0, r1, r2, r3}
 800764a:	b507      	push	{r0, r1, r2, lr}
 800764c:	4905      	ldr	r1, [pc, #20]	@ (8007664 <iprintf+0x1c>)
 800764e:	ab04      	add	r3, sp, #16
 8007650:	6808      	ldr	r0, [r1, #0]
 8007652:	cb04      	ldmia	r3!, {r2}
 8007654:	6881      	ldr	r1, [r0, #8]
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	f002 fe84 	bl	800a364 <_vfiprintf_r>
 800765c:	b003      	add	sp, #12
 800765e:	bc08      	pop	{r3}
 8007660:	b004      	add	sp, #16
 8007662:	4718      	bx	r3
 8007664:	20000018 	.word	0x20000018

08007668 <_puts_r>:
 8007668:	6a03      	ldr	r3, [r0, #32]
 800766a:	b570      	push	{r4, r5, r6, lr}
 800766c:	0005      	movs	r5, r0
 800766e:	000e      	movs	r6, r1
 8007670:	6884      	ldr	r4, [r0, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <_puts_r+0x12>
 8007676:	f7ff ffb3 	bl	80075e0 <__sinit>
 800767a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800767c:	07db      	lsls	r3, r3, #31
 800767e:	d405      	bmi.n	800768c <_puts_r+0x24>
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	059b      	lsls	r3, r3, #22
 8007684:	d402      	bmi.n	800768c <_puts_r+0x24>
 8007686:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007688:	f000 f9e1 	bl	8007a4e <__retarget_lock_acquire_recursive>
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	071b      	lsls	r3, r3, #28
 8007690:	d502      	bpl.n	8007698 <_puts_r+0x30>
 8007692:	6923      	ldr	r3, [r4, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d11f      	bne.n	80076d8 <_puts_r+0x70>
 8007698:	0021      	movs	r1, r4
 800769a:	0028      	movs	r0, r5
 800769c:	f000 f8f4 	bl	8007888 <__swsetup_r>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	d019      	beq.n	80076d8 <_puts_r+0x70>
 80076a4:	2501      	movs	r5, #1
 80076a6:	426d      	negs	r5, r5
 80076a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076aa:	07db      	lsls	r3, r3, #31
 80076ac:	d405      	bmi.n	80076ba <_puts_r+0x52>
 80076ae:	89a3      	ldrh	r3, [r4, #12]
 80076b0:	059b      	lsls	r3, r3, #22
 80076b2:	d402      	bmi.n	80076ba <_puts_r+0x52>
 80076b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076b6:	f000 f9cb 	bl	8007a50 <__retarget_lock_release_recursive>
 80076ba:	0028      	movs	r0, r5
 80076bc:	bd70      	pop	{r4, r5, r6, pc}
 80076be:	3601      	adds	r6, #1
 80076c0:	60a3      	str	r3, [r4, #8]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	da04      	bge.n	80076d0 <_puts_r+0x68>
 80076c6:	69a2      	ldr	r2, [r4, #24]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	dc16      	bgt.n	80076fa <_puts_r+0x92>
 80076cc:	290a      	cmp	r1, #10
 80076ce:	d014      	beq.n	80076fa <_puts_r+0x92>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	1c5a      	adds	r2, r3, #1
 80076d4:	6022      	str	r2, [r4, #0]
 80076d6:	7019      	strb	r1, [r3, #0]
 80076d8:	68a3      	ldr	r3, [r4, #8]
 80076da:	7831      	ldrb	r1, [r6, #0]
 80076dc:	3b01      	subs	r3, #1
 80076de:	2900      	cmp	r1, #0
 80076e0:	d1ed      	bne.n	80076be <_puts_r+0x56>
 80076e2:	60a3      	str	r3, [r4, #8]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	da0f      	bge.n	8007708 <_puts_r+0xa0>
 80076e8:	0022      	movs	r2, r4
 80076ea:	0028      	movs	r0, r5
 80076ec:	310a      	adds	r1, #10
 80076ee:	f000 f889 	bl	8007804 <__swbuf_r>
 80076f2:	3001      	adds	r0, #1
 80076f4:	d0d6      	beq.n	80076a4 <_puts_r+0x3c>
 80076f6:	250a      	movs	r5, #10
 80076f8:	e7d6      	b.n	80076a8 <_puts_r+0x40>
 80076fa:	0022      	movs	r2, r4
 80076fc:	0028      	movs	r0, r5
 80076fe:	f000 f881 	bl	8007804 <__swbuf_r>
 8007702:	3001      	adds	r0, #1
 8007704:	d1e8      	bne.n	80076d8 <_puts_r+0x70>
 8007706:	e7cd      	b.n	80076a4 <_puts_r+0x3c>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	1c5a      	adds	r2, r3, #1
 800770c:	6022      	str	r2, [r4, #0]
 800770e:	220a      	movs	r2, #10
 8007710:	701a      	strb	r2, [r3, #0]
 8007712:	e7f0      	b.n	80076f6 <_puts_r+0x8e>

08007714 <puts>:
 8007714:	b510      	push	{r4, lr}
 8007716:	4b03      	ldr	r3, [pc, #12]	@ (8007724 <puts+0x10>)
 8007718:	0001      	movs	r1, r0
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	f7ff ffa4 	bl	8007668 <_puts_r>
 8007720:	bd10      	pop	{r4, pc}
 8007722:	46c0      	nop			@ (mov r8, r8)
 8007724:	20000018 	.word	0x20000018

08007728 <siprintf>:
 8007728:	b40e      	push	{r1, r2, r3}
 800772a:	b510      	push	{r4, lr}
 800772c:	2400      	movs	r4, #0
 800772e:	490c      	ldr	r1, [pc, #48]	@ (8007760 <siprintf+0x38>)
 8007730:	b09d      	sub	sp, #116	@ 0x74
 8007732:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007734:	9002      	str	r0, [sp, #8]
 8007736:	9006      	str	r0, [sp, #24]
 8007738:	9107      	str	r1, [sp, #28]
 800773a:	9104      	str	r1, [sp, #16]
 800773c:	4809      	ldr	r0, [pc, #36]	@ (8007764 <siprintf+0x3c>)
 800773e:	490a      	ldr	r1, [pc, #40]	@ (8007768 <siprintf+0x40>)
 8007740:	cb04      	ldmia	r3!, {r2}
 8007742:	9105      	str	r1, [sp, #20]
 8007744:	6800      	ldr	r0, [r0, #0]
 8007746:	a902      	add	r1, sp, #8
 8007748:	9301      	str	r3, [sp, #4]
 800774a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800774c:	f002 fce4 	bl	800a118 <_svfiprintf_r>
 8007750:	9b02      	ldr	r3, [sp, #8]
 8007752:	701c      	strb	r4, [r3, #0]
 8007754:	b01d      	add	sp, #116	@ 0x74
 8007756:	bc10      	pop	{r4}
 8007758:	bc08      	pop	{r3}
 800775a:	b003      	add	sp, #12
 800775c:	4718      	bx	r3
 800775e:	46c0      	nop			@ (mov r8, r8)
 8007760:	7fffffff 	.word	0x7fffffff
 8007764:	20000018 	.word	0x20000018
 8007768:	ffff0208 	.word	0xffff0208

0800776c <__sread>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	000c      	movs	r4, r1
 8007770:	250e      	movs	r5, #14
 8007772:	5f49      	ldrsh	r1, [r1, r5]
 8007774:	f000 f918 	bl	80079a8 <_read_r>
 8007778:	2800      	cmp	r0, #0
 800777a:	db03      	blt.n	8007784 <__sread+0x18>
 800777c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800777e:	181b      	adds	r3, r3, r0
 8007780:	6563      	str	r3, [r4, #84]	@ 0x54
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	4a02      	ldr	r2, [pc, #8]	@ (8007790 <__sread+0x24>)
 8007788:	4013      	ands	r3, r2
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	e7f9      	b.n	8007782 <__sread+0x16>
 800778e:	46c0      	nop			@ (mov r8, r8)
 8007790:	ffffefff 	.word	0xffffefff

08007794 <__swrite>:
 8007794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007796:	001f      	movs	r7, r3
 8007798:	898b      	ldrh	r3, [r1, #12]
 800779a:	0005      	movs	r5, r0
 800779c:	000c      	movs	r4, r1
 800779e:	0016      	movs	r6, r2
 80077a0:	05db      	lsls	r3, r3, #23
 80077a2:	d505      	bpl.n	80077b0 <__swrite+0x1c>
 80077a4:	230e      	movs	r3, #14
 80077a6:	5ec9      	ldrsh	r1, [r1, r3]
 80077a8:	2200      	movs	r2, #0
 80077aa:	2302      	movs	r3, #2
 80077ac:	f000 f8e8 	bl	8007980 <_lseek_r>
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	4a05      	ldr	r2, [pc, #20]	@ (80077c8 <__swrite+0x34>)
 80077b4:	0028      	movs	r0, r5
 80077b6:	4013      	ands	r3, r2
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	0032      	movs	r2, r6
 80077bc:	230e      	movs	r3, #14
 80077be:	5ee1      	ldrsh	r1, [r4, r3]
 80077c0:	003b      	movs	r3, r7
 80077c2:	f000 f905 	bl	80079d0 <_write_r>
 80077c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077c8:	ffffefff 	.word	0xffffefff

080077cc <__sseek>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	000c      	movs	r4, r1
 80077d0:	250e      	movs	r5, #14
 80077d2:	5f49      	ldrsh	r1, [r1, r5]
 80077d4:	f000 f8d4 	bl	8007980 <_lseek_r>
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	1c42      	adds	r2, r0, #1
 80077dc:	d103      	bne.n	80077e6 <__sseek+0x1a>
 80077de:	4a05      	ldr	r2, [pc, #20]	@ (80077f4 <__sseek+0x28>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	bd70      	pop	{r4, r5, r6, pc}
 80077e6:	2280      	movs	r2, #128	@ 0x80
 80077e8:	0152      	lsls	r2, r2, #5
 80077ea:	4313      	orrs	r3, r2
 80077ec:	81a3      	strh	r3, [r4, #12]
 80077ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80077f0:	e7f8      	b.n	80077e4 <__sseek+0x18>
 80077f2:	46c0      	nop			@ (mov r8, r8)
 80077f4:	ffffefff 	.word	0xffffefff

080077f8 <__sclose>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	230e      	movs	r3, #14
 80077fc:	5ec9      	ldrsh	r1, [r1, r3]
 80077fe:	f000 f8ad 	bl	800795c <_close_r>
 8007802:	bd10      	pop	{r4, pc}

08007804 <__swbuf_r>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	0006      	movs	r6, r0
 8007808:	000d      	movs	r5, r1
 800780a:	0014      	movs	r4, r2
 800780c:	2800      	cmp	r0, #0
 800780e:	d004      	beq.n	800781a <__swbuf_r+0x16>
 8007810:	6a03      	ldr	r3, [r0, #32]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <__swbuf_r+0x16>
 8007816:	f7ff fee3 	bl	80075e0 <__sinit>
 800781a:	69a3      	ldr	r3, [r4, #24]
 800781c:	60a3      	str	r3, [r4, #8]
 800781e:	89a3      	ldrh	r3, [r4, #12]
 8007820:	071b      	lsls	r3, r3, #28
 8007822:	d502      	bpl.n	800782a <__swbuf_r+0x26>
 8007824:	6923      	ldr	r3, [r4, #16]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d109      	bne.n	800783e <__swbuf_r+0x3a>
 800782a:	0021      	movs	r1, r4
 800782c:	0030      	movs	r0, r6
 800782e:	f000 f82b 	bl	8007888 <__swsetup_r>
 8007832:	2800      	cmp	r0, #0
 8007834:	d003      	beq.n	800783e <__swbuf_r+0x3a>
 8007836:	2501      	movs	r5, #1
 8007838:	426d      	negs	r5, r5
 800783a:	0028      	movs	r0, r5
 800783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800783e:	6923      	ldr	r3, [r4, #16]
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	b2ef      	uxtb	r7, r5
 8007844:	1ac0      	subs	r0, r0, r3
 8007846:	6963      	ldr	r3, [r4, #20]
 8007848:	b2ed      	uxtb	r5, r5
 800784a:	4283      	cmp	r3, r0
 800784c:	dc05      	bgt.n	800785a <__swbuf_r+0x56>
 800784e:	0021      	movs	r1, r4
 8007850:	0030      	movs	r0, r6
 8007852:	f002 ff29 	bl	800a6a8 <_fflush_r>
 8007856:	2800      	cmp	r0, #0
 8007858:	d1ed      	bne.n	8007836 <__swbuf_r+0x32>
 800785a:	68a3      	ldr	r3, [r4, #8]
 800785c:	3001      	adds	r0, #1
 800785e:	3b01      	subs	r3, #1
 8007860:	60a3      	str	r3, [r4, #8]
 8007862:	6823      	ldr	r3, [r4, #0]
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	6022      	str	r2, [r4, #0]
 8007868:	701f      	strb	r7, [r3, #0]
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	4283      	cmp	r3, r0
 800786e:	d004      	beq.n	800787a <__swbuf_r+0x76>
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	07db      	lsls	r3, r3, #31
 8007874:	d5e1      	bpl.n	800783a <__swbuf_r+0x36>
 8007876:	2d0a      	cmp	r5, #10
 8007878:	d1df      	bne.n	800783a <__swbuf_r+0x36>
 800787a:	0021      	movs	r1, r4
 800787c:	0030      	movs	r0, r6
 800787e:	f002 ff13 	bl	800a6a8 <_fflush_r>
 8007882:	2800      	cmp	r0, #0
 8007884:	d0d9      	beq.n	800783a <__swbuf_r+0x36>
 8007886:	e7d6      	b.n	8007836 <__swbuf_r+0x32>

08007888 <__swsetup_r>:
 8007888:	4b2d      	ldr	r3, [pc, #180]	@ (8007940 <__swsetup_r+0xb8>)
 800788a:	b570      	push	{r4, r5, r6, lr}
 800788c:	0005      	movs	r5, r0
 800788e:	6818      	ldr	r0, [r3, #0]
 8007890:	000c      	movs	r4, r1
 8007892:	2800      	cmp	r0, #0
 8007894:	d004      	beq.n	80078a0 <__swsetup_r+0x18>
 8007896:	6a03      	ldr	r3, [r0, #32]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d101      	bne.n	80078a0 <__swsetup_r+0x18>
 800789c:	f7ff fea0 	bl	80075e0 <__sinit>
 80078a0:	220c      	movs	r2, #12
 80078a2:	5ea3      	ldrsh	r3, [r4, r2]
 80078a4:	071a      	lsls	r2, r3, #28
 80078a6:	d423      	bmi.n	80078f0 <__swsetup_r+0x68>
 80078a8:	06da      	lsls	r2, r3, #27
 80078aa:	d407      	bmi.n	80078bc <__swsetup_r+0x34>
 80078ac:	2209      	movs	r2, #9
 80078ae:	602a      	str	r2, [r5, #0]
 80078b0:	2240      	movs	r2, #64	@ 0x40
 80078b2:	2001      	movs	r0, #1
 80078b4:	4313      	orrs	r3, r2
 80078b6:	81a3      	strh	r3, [r4, #12]
 80078b8:	4240      	negs	r0, r0
 80078ba:	e03a      	b.n	8007932 <__swsetup_r+0xaa>
 80078bc:	075b      	lsls	r3, r3, #29
 80078be:	d513      	bpl.n	80078e8 <__swsetup_r+0x60>
 80078c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078c2:	2900      	cmp	r1, #0
 80078c4:	d008      	beq.n	80078d8 <__swsetup_r+0x50>
 80078c6:	0023      	movs	r3, r4
 80078c8:	3344      	adds	r3, #68	@ 0x44
 80078ca:	4299      	cmp	r1, r3
 80078cc:	d002      	beq.n	80078d4 <__swsetup_r+0x4c>
 80078ce:	0028      	movs	r0, r5
 80078d0:	f000 ff4e 	bl	8008770 <_free_r>
 80078d4:	2300      	movs	r3, #0
 80078d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80078d8:	2224      	movs	r2, #36	@ 0x24
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	4393      	bics	r3, r2
 80078de:	81a3      	strh	r3, [r4, #12]
 80078e0:	2300      	movs	r3, #0
 80078e2:	6063      	str	r3, [r4, #4]
 80078e4:	6923      	ldr	r3, [r4, #16]
 80078e6:	6023      	str	r3, [r4, #0]
 80078e8:	2308      	movs	r3, #8
 80078ea:	89a2      	ldrh	r2, [r4, #12]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	81a3      	strh	r3, [r4, #12]
 80078f0:	6923      	ldr	r3, [r4, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d10b      	bne.n	800790e <__swsetup_r+0x86>
 80078f6:	21a0      	movs	r1, #160	@ 0xa0
 80078f8:	2280      	movs	r2, #128	@ 0x80
 80078fa:	89a3      	ldrh	r3, [r4, #12]
 80078fc:	0089      	lsls	r1, r1, #2
 80078fe:	0092      	lsls	r2, r2, #2
 8007900:	400b      	ands	r3, r1
 8007902:	4293      	cmp	r3, r2
 8007904:	d003      	beq.n	800790e <__swsetup_r+0x86>
 8007906:	0021      	movs	r1, r4
 8007908:	0028      	movs	r0, r5
 800790a:	f002 ff23 	bl	800a754 <__smakebuf_r>
 800790e:	220c      	movs	r2, #12
 8007910:	5ea3      	ldrsh	r3, [r4, r2]
 8007912:	2101      	movs	r1, #1
 8007914:	001a      	movs	r2, r3
 8007916:	400a      	ands	r2, r1
 8007918:	420b      	tst	r3, r1
 800791a:	d00b      	beq.n	8007934 <__swsetup_r+0xac>
 800791c:	2200      	movs	r2, #0
 800791e:	60a2      	str	r2, [r4, #8]
 8007920:	6962      	ldr	r2, [r4, #20]
 8007922:	4252      	negs	r2, r2
 8007924:	61a2      	str	r2, [r4, #24]
 8007926:	2000      	movs	r0, #0
 8007928:	6922      	ldr	r2, [r4, #16]
 800792a:	4282      	cmp	r2, r0
 800792c:	d101      	bne.n	8007932 <__swsetup_r+0xaa>
 800792e:	061a      	lsls	r2, r3, #24
 8007930:	d4be      	bmi.n	80078b0 <__swsetup_r+0x28>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	0799      	lsls	r1, r3, #30
 8007936:	d400      	bmi.n	800793a <__swsetup_r+0xb2>
 8007938:	6962      	ldr	r2, [r4, #20]
 800793a:	60a2      	str	r2, [r4, #8]
 800793c:	e7f3      	b.n	8007926 <__swsetup_r+0x9e>
 800793e:	46c0      	nop			@ (mov r8, r8)
 8007940:	20000018 	.word	0x20000018

08007944 <memset>:
 8007944:	0003      	movs	r3, r0
 8007946:	1882      	adds	r2, r0, r2
 8007948:	4293      	cmp	r3, r2
 800794a:	d100      	bne.n	800794e <memset+0xa>
 800794c:	4770      	bx	lr
 800794e:	7019      	strb	r1, [r3, #0]
 8007950:	3301      	adds	r3, #1
 8007952:	e7f9      	b.n	8007948 <memset+0x4>

08007954 <_localeconv_r>:
 8007954:	4800      	ldr	r0, [pc, #0]	@ (8007958 <_localeconv_r+0x4>)
 8007956:	4770      	bx	lr
 8007958:	20000158 	.word	0x20000158

0800795c <_close_r>:
 800795c:	2300      	movs	r3, #0
 800795e:	b570      	push	{r4, r5, r6, lr}
 8007960:	4d06      	ldr	r5, [pc, #24]	@ (800797c <_close_r+0x20>)
 8007962:	0004      	movs	r4, r0
 8007964:	0008      	movs	r0, r1
 8007966:	602b      	str	r3, [r5, #0]
 8007968:	f7fc fb64 	bl	8004034 <_close>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d103      	bne.n	8007978 <_close_r+0x1c>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d000      	beq.n	8007978 <_close_r+0x1c>
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	bd70      	pop	{r4, r5, r6, pc}
 800797a:	46c0      	nop			@ (mov r8, r8)
 800797c:	200004d8 	.word	0x200004d8

08007980 <_lseek_r>:
 8007980:	b570      	push	{r4, r5, r6, lr}
 8007982:	0004      	movs	r4, r0
 8007984:	0008      	movs	r0, r1
 8007986:	0011      	movs	r1, r2
 8007988:	001a      	movs	r2, r3
 800798a:	2300      	movs	r3, #0
 800798c:	4d05      	ldr	r5, [pc, #20]	@ (80079a4 <_lseek_r+0x24>)
 800798e:	602b      	str	r3, [r5, #0]
 8007990:	f7fc fb71 	bl	8004076 <_lseek>
 8007994:	1c43      	adds	r3, r0, #1
 8007996:	d103      	bne.n	80079a0 <_lseek_r+0x20>
 8007998:	682b      	ldr	r3, [r5, #0]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d000      	beq.n	80079a0 <_lseek_r+0x20>
 800799e:	6023      	str	r3, [r4, #0]
 80079a0:	bd70      	pop	{r4, r5, r6, pc}
 80079a2:	46c0      	nop			@ (mov r8, r8)
 80079a4:	200004d8 	.word	0x200004d8

080079a8 <_read_r>:
 80079a8:	b570      	push	{r4, r5, r6, lr}
 80079aa:	0004      	movs	r4, r0
 80079ac:	0008      	movs	r0, r1
 80079ae:	0011      	movs	r1, r2
 80079b0:	001a      	movs	r2, r3
 80079b2:	2300      	movs	r3, #0
 80079b4:	4d05      	ldr	r5, [pc, #20]	@ (80079cc <_read_r+0x24>)
 80079b6:	602b      	str	r3, [r5, #0]
 80079b8:	f7fc fb1f 	bl	8003ffa <_read>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d103      	bne.n	80079c8 <_read_r+0x20>
 80079c0:	682b      	ldr	r3, [r5, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d000      	beq.n	80079c8 <_read_r+0x20>
 80079c6:	6023      	str	r3, [r4, #0]
 80079c8:	bd70      	pop	{r4, r5, r6, pc}
 80079ca:	46c0      	nop			@ (mov r8, r8)
 80079cc:	200004d8 	.word	0x200004d8

080079d0 <_write_r>:
 80079d0:	b570      	push	{r4, r5, r6, lr}
 80079d2:	0004      	movs	r4, r0
 80079d4:	0008      	movs	r0, r1
 80079d6:	0011      	movs	r1, r2
 80079d8:	001a      	movs	r2, r3
 80079da:	2300      	movs	r3, #0
 80079dc:	4d05      	ldr	r5, [pc, #20]	@ (80079f4 <_write_r+0x24>)
 80079de:	602b      	str	r3, [r5, #0]
 80079e0:	f7fc f8ac 	bl	8003b3c <_write>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d103      	bne.n	80079f0 <_write_r+0x20>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d000      	beq.n	80079f0 <_write_r+0x20>
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	bd70      	pop	{r4, r5, r6, pc}
 80079f2:	46c0      	nop			@ (mov r8, r8)
 80079f4:	200004d8 	.word	0x200004d8

080079f8 <__errno>:
 80079f8:	4b01      	ldr	r3, [pc, #4]	@ (8007a00 <__errno+0x8>)
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	4770      	bx	lr
 80079fe:	46c0      	nop			@ (mov r8, r8)
 8007a00:	20000018 	.word	0x20000018

08007a04 <__libc_init_array>:
 8007a04:	b570      	push	{r4, r5, r6, lr}
 8007a06:	2600      	movs	r6, #0
 8007a08:	4c0c      	ldr	r4, [pc, #48]	@ (8007a3c <__libc_init_array+0x38>)
 8007a0a:	4d0d      	ldr	r5, [pc, #52]	@ (8007a40 <__libc_init_array+0x3c>)
 8007a0c:	1b64      	subs	r4, r4, r5
 8007a0e:	10a4      	asrs	r4, r4, #2
 8007a10:	42a6      	cmp	r6, r4
 8007a12:	d109      	bne.n	8007a28 <__libc_init_array+0x24>
 8007a14:	2600      	movs	r6, #0
 8007a16:	f003 fb9b 	bl	800b150 <_init>
 8007a1a:	4c0a      	ldr	r4, [pc, #40]	@ (8007a44 <__libc_init_array+0x40>)
 8007a1c:	4d0a      	ldr	r5, [pc, #40]	@ (8007a48 <__libc_init_array+0x44>)
 8007a1e:	1b64      	subs	r4, r4, r5
 8007a20:	10a4      	asrs	r4, r4, #2
 8007a22:	42a6      	cmp	r6, r4
 8007a24:	d105      	bne.n	8007a32 <__libc_init_array+0x2e>
 8007a26:	bd70      	pop	{r4, r5, r6, pc}
 8007a28:	00b3      	lsls	r3, r6, #2
 8007a2a:	58eb      	ldr	r3, [r5, r3]
 8007a2c:	4798      	blx	r3
 8007a2e:	3601      	adds	r6, #1
 8007a30:	e7ee      	b.n	8007a10 <__libc_init_array+0xc>
 8007a32:	00b3      	lsls	r3, r6, #2
 8007a34:	58eb      	ldr	r3, [r5, r3]
 8007a36:	4798      	blx	r3
 8007a38:	3601      	adds	r6, #1
 8007a3a:	e7f2      	b.n	8007a22 <__libc_init_array+0x1e>
 8007a3c:	0800b8b4 	.word	0x0800b8b4
 8007a40:	0800b8b4 	.word	0x0800b8b4
 8007a44:	0800b8b8 	.word	0x0800b8b8
 8007a48:	0800b8b4 	.word	0x0800b8b4

08007a4c <__retarget_lock_init_recursive>:
 8007a4c:	4770      	bx	lr

08007a4e <__retarget_lock_acquire_recursive>:
 8007a4e:	4770      	bx	lr

08007a50 <__retarget_lock_release_recursive>:
 8007a50:	4770      	bx	lr

08007a52 <memchr>:
 8007a52:	b2c9      	uxtb	r1, r1
 8007a54:	1882      	adds	r2, r0, r2
 8007a56:	4290      	cmp	r0, r2
 8007a58:	d101      	bne.n	8007a5e <memchr+0xc>
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	4770      	bx	lr
 8007a5e:	7803      	ldrb	r3, [r0, #0]
 8007a60:	428b      	cmp	r3, r1
 8007a62:	d0fb      	beq.n	8007a5c <memchr+0xa>
 8007a64:	3001      	adds	r0, #1
 8007a66:	e7f6      	b.n	8007a56 <memchr+0x4>

08007a68 <memcpy>:
 8007a68:	2300      	movs	r3, #0
 8007a6a:	b510      	push	{r4, lr}
 8007a6c:	429a      	cmp	r2, r3
 8007a6e:	d100      	bne.n	8007a72 <memcpy+0xa>
 8007a70:	bd10      	pop	{r4, pc}
 8007a72:	5ccc      	ldrb	r4, [r1, r3]
 8007a74:	54c4      	strb	r4, [r0, r3]
 8007a76:	3301      	adds	r3, #1
 8007a78:	e7f8      	b.n	8007a6c <memcpy+0x4>
	...

08007a7c <nanf>:
 8007a7c:	4800      	ldr	r0, [pc, #0]	@ (8007a80 <nanf+0x4>)
 8007a7e:	4770      	bx	lr
 8007a80:	7fc00000 	.word	0x7fc00000

08007a84 <quorem>:
 8007a84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a86:	6903      	ldr	r3, [r0, #16]
 8007a88:	690c      	ldr	r4, [r1, #16]
 8007a8a:	b089      	sub	sp, #36	@ 0x24
 8007a8c:	9003      	str	r0, [sp, #12]
 8007a8e:	9106      	str	r1, [sp, #24]
 8007a90:	2000      	movs	r0, #0
 8007a92:	42a3      	cmp	r3, r4
 8007a94:	db63      	blt.n	8007b5e <quorem+0xda>
 8007a96:	000b      	movs	r3, r1
 8007a98:	3c01      	subs	r4, #1
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	00a5      	lsls	r5, r4, #2
 8007a9e:	9304      	str	r3, [sp, #16]
 8007aa0:	195b      	adds	r3, r3, r5
 8007aa2:	9305      	str	r3, [sp, #20]
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	3314      	adds	r3, #20
 8007aa8:	9301      	str	r3, [sp, #4]
 8007aaa:	195d      	adds	r5, r3, r5
 8007aac:	9b05      	ldr	r3, [sp, #20]
 8007aae:	682f      	ldr	r7, [r5, #0]
 8007ab0:	681e      	ldr	r6, [r3, #0]
 8007ab2:	0038      	movs	r0, r7
 8007ab4:	3601      	adds	r6, #1
 8007ab6:	0031      	movs	r1, r6
 8007ab8:	f7f8 fb42 	bl	8000140 <__udivsi3>
 8007abc:	9002      	str	r0, [sp, #8]
 8007abe:	42b7      	cmp	r7, r6
 8007ac0:	d327      	bcc.n	8007b12 <quorem+0x8e>
 8007ac2:	9b04      	ldr	r3, [sp, #16]
 8007ac4:	2700      	movs	r7, #0
 8007ac6:	469c      	mov	ip, r3
 8007ac8:	9e01      	ldr	r6, [sp, #4]
 8007aca:	9707      	str	r7, [sp, #28]
 8007acc:	4662      	mov	r2, ip
 8007ace:	ca08      	ldmia	r2!, {r3}
 8007ad0:	6830      	ldr	r0, [r6, #0]
 8007ad2:	4694      	mov	ip, r2
 8007ad4:	9a02      	ldr	r2, [sp, #8]
 8007ad6:	b299      	uxth	r1, r3
 8007ad8:	4351      	muls	r1, r2
 8007ada:	0c1b      	lsrs	r3, r3, #16
 8007adc:	4353      	muls	r3, r2
 8007ade:	19c9      	adds	r1, r1, r7
 8007ae0:	0c0a      	lsrs	r2, r1, #16
 8007ae2:	189b      	adds	r3, r3, r2
 8007ae4:	b289      	uxth	r1, r1
 8007ae6:	b282      	uxth	r2, r0
 8007ae8:	1a52      	subs	r2, r2, r1
 8007aea:	9907      	ldr	r1, [sp, #28]
 8007aec:	0c1f      	lsrs	r7, r3, #16
 8007aee:	1852      	adds	r2, r2, r1
 8007af0:	0c00      	lsrs	r0, r0, #16
 8007af2:	b29b      	uxth	r3, r3
 8007af4:	1411      	asrs	r1, r2, #16
 8007af6:	1ac3      	subs	r3, r0, r3
 8007af8:	185b      	adds	r3, r3, r1
 8007afa:	1419      	asrs	r1, r3, #16
 8007afc:	b292      	uxth	r2, r2
 8007afe:	041b      	lsls	r3, r3, #16
 8007b00:	431a      	orrs	r2, r3
 8007b02:	9b05      	ldr	r3, [sp, #20]
 8007b04:	9107      	str	r1, [sp, #28]
 8007b06:	c604      	stmia	r6!, {r2}
 8007b08:	4563      	cmp	r3, ip
 8007b0a:	d2df      	bcs.n	8007acc <quorem+0x48>
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d02b      	beq.n	8007b6a <quorem+0xe6>
 8007b12:	9906      	ldr	r1, [sp, #24]
 8007b14:	9803      	ldr	r0, [sp, #12]
 8007b16:	f001 fa03 	bl	8008f20 <__mcmp>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	db1e      	blt.n	8007b5c <quorem+0xd8>
 8007b1e:	2600      	movs	r6, #0
 8007b20:	9d01      	ldr	r5, [sp, #4]
 8007b22:	9904      	ldr	r1, [sp, #16]
 8007b24:	c901      	ldmia	r1!, {r0}
 8007b26:	682b      	ldr	r3, [r5, #0]
 8007b28:	b287      	uxth	r7, r0
 8007b2a:	b29a      	uxth	r2, r3
 8007b2c:	1bd2      	subs	r2, r2, r7
 8007b2e:	1992      	adds	r2, r2, r6
 8007b30:	0c00      	lsrs	r0, r0, #16
 8007b32:	0c1b      	lsrs	r3, r3, #16
 8007b34:	1a1b      	subs	r3, r3, r0
 8007b36:	1410      	asrs	r0, r2, #16
 8007b38:	181b      	adds	r3, r3, r0
 8007b3a:	141e      	asrs	r6, r3, #16
 8007b3c:	b292      	uxth	r2, r2
 8007b3e:	041b      	lsls	r3, r3, #16
 8007b40:	431a      	orrs	r2, r3
 8007b42:	9b05      	ldr	r3, [sp, #20]
 8007b44:	c504      	stmia	r5!, {r2}
 8007b46:	428b      	cmp	r3, r1
 8007b48:	d2ec      	bcs.n	8007b24 <quorem+0xa0>
 8007b4a:	9a01      	ldr	r2, [sp, #4]
 8007b4c:	00a3      	lsls	r3, r4, #2
 8007b4e:	18d3      	adds	r3, r2, r3
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	2a00      	cmp	r2, #0
 8007b54:	d014      	beq.n	8007b80 <quorem+0xfc>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	9302      	str	r3, [sp, #8]
 8007b5c:	9802      	ldr	r0, [sp, #8]
 8007b5e:	b009      	add	sp, #36	@ 0x24
 8007b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b62:	682b      	ldr	r3, [r5, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d104      	bne.n	8007b72 <quorem+0xee>
 8007b68:	3c01      	subs	r4, #1
 8007b6a:	9b01      	ldr	r3, [sp, #4]
 8007b6c:	3d04      	subs	r5, #4
 8007b6e:	42ab      	cmp	r3, r5
 8007b70:	d3f7      	bcc.n	8007b62 <quorem+0xde>
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	611c      	str	r4, [r3, #16]
 8007b76:	e7cc      	b.n	8007b12 <quorem+0x8e>
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	d104      	bne.n	8007b88 <quorem+0x104>
 8007b7e:	3c01      	subs	r4, #1
 8007b80:	9a01      	ldr	r2, [sp, #4]
 8007b82:	3b04      	subs	r3, #4
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d3f7      	bcc.n	8007b78 <quorem+0xf4>
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	611c      	str	r4, [r3, #16]
 8007b8c:	e7e3      	b.n	8007b56 <quorem+0xd2>
	...

08007b90 <_dtoa_r>:
 8007b90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b92:	0014      	movs	r4, r2
 8007b94:	001d      	movs	r5, r3
 8007b96:	69c6      	ldr	r6, [r0, #28]
 8007b98:	b09d      	sub	sp, #116	@ 0x74
 8007b9a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b9c:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007b9e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8007ba0:	9003      	str	r0, [sp, #12]
 8007ba2:	2e00      	cmp	r6, #0
 8007ba4:	d10f      	bne.n	8007bc6 <_dtoa_r+0x36>
 8007ba6:	2010      	movs	r0, #16
 8007ba8:	f000 fe2c 	bl	8008804 <malloc>
 8007bac:	9b03      	ldr	r3, [sp, #12]
 8007bae:	1e02      	subs	r2, r0, #0
 8007bb0:	61d8      	str	r0, [r3, #28]
 8007bb2:	d104      	bne.n	8007bbe <_dtoa_r+0x2e>
 8007bb4:	21ef      	movs	r1, #239	@ 0xef
 8007bb6:	4bc7      	ldr	r3, [pc, #796]	@ (8007ed4 <_dtoa_r+0x344>)
 8007bb8:	48c7      	ldr	r0, [pc, #796]	@ (8007ed8 <_dtoa_r+0x348>)
 8007bba:	f002 fe6b 	bl	800a894 <__assert_func>
 8007bbe:	6046      	str	r6, [r0, #4]
 8007bc0:	6086      	str	r6, [r0, #8]
 8007bc2:	6006      	str	r6, [r0, #0]
 8007bc4:	60c6      	str	r6, [r0, #12]
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	6819      	ldr	r1, [r3, #0]
 8007bcc:	2900      	cmp	r1, #0
 8007bce:	d00b      	beq.n	8007be8 <_dtoa_r+0x58>
 8007bd0:	685a      	ldr	r2, [r3, #4]
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	4093      	lsls	r3, r2
 8007bd6:	604a      	str	r2, [r1, #4]
 8007bd8:	608b      	str	r3, [r1, #8]
 8007bda:	9803      	ldr	r0, [sp, #12]
 8007bdc:	f000 ff12 	bl	8008a04 <_Bfree>
 8007be0:	2200      	movs	r2, #0
 8007be2:	9b03      	ldr	r3, [sp, #12]
 8007be4:	69db      	ldr	r3, [r3, #28]
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	2d00      	cmp	r5, #0
 8007bea:	da1e      	bge.n	8007c2a <_dtoa_r+0x9a>
 8007bec:	2301      	movs	r3, #1
 8007bee:	603b      	str	r3, [r7, #0]
 8007bf0:	006b      	lsls	r3, r5, #1
 8007bf2:	085b      	lsrs	r3, r3, #1
 8007bf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bf6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007bf8:	4bb8      	ldr	r3, [pc, #736]	@ (8007edc <_dtoa_r+0x34c>)
 8007bfa:	4ab8      	ldr	r2, [pc, #736]	@ (8007edc <_dtoa_r+0x34c>)
 8007bfc:	403b      	ands	r3, r7
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d116      	bne.n	8007c30 <_dtoa_r+0xa0>
 8007c02:	4bb7      	ldr	r3, [pc, #732]	@ (8007ee0 <_dtoa_r+0x350>)
 8007c04:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c06:	6013      	str	r3, [r2, #0]
 8007c08:	033b      	lsls	r3, r7, #12
 8007c0a:	0b1b      	lsrs	r3, r3, #12
 8007c0c:	4323      	orrs	r3, r4
 8007c0e:	d101      	bne.n	8007c14 <_dtoa_r+0x84>
 8007c10:	f000 fd80 	bl	8008714 <_dtoa_r+0xb84>
 8007c14:	4bb3      	ldr	r3, [pc, #716]	@ (8007ee4 <_dtoa_r+0x354>)
 8007c16:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007c18:	9308      	str	r3, [sp, #32]
 8007c1a:	2a00      	cmp	r2, #0
 8007c1c:	d002      	beq.n	8007c24 <_dtoa_r+0x94>
 8007c1e:	4bb2      	ldr	r3, [pc, #712]	@ (8007ee8 <_dtoa_r+0x358>)
 8007c20:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007c22:	6013      	str	r3, [r2, #0]
 8007c24:	9808      	ldr	r0, [sp, #32]
 8007c26:	b01d      	add	sp, #116	@ 0x74
 8007c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	603b      	str	r3, [r7, #0]
 8007c2e:	e7e2      	b.n	8007bf6 <_dtoa_r+0x66>
 8007c30:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007c32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c34:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c36:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f7f8 fc04 	bl	800044c <__aeabi_dcmpeq>
 8007c44:	1e06      	subs	r6, r0, #0
 8007c46:	d00b      	beq.n	8007c60 <_dtoa_r+0xd0>
 8007c48:	2301      	movs	r3, #1
 8007c4a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007c4c:	6013      	str	r3, [r2, #0]
 8007c4e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d002      	beq.n	8007c5a <_dtoa_r+0xca>
 8007c54:	4ba5      	ldr	r3, [pc, #660]	@ (8007eec <_dtoa_r+0x35c>)
 8007c56:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007c58:	6013      	str	r3, [r2, #0]
 8007c5a:	4ba5      	ldr	r3, [pc, #660]	@ (8007ef0 <_dtoa_r+0x360>)
 8007c5c:	9308      	str	r3, [sp, #32]
 8007c5e:	e7e1      	b.n	8007c24 <_dtoa_r+0x94>
 8007c60:	ab1a      	add	r3, sp, #104	@ 0x68
 8007c62:	9301      	str	r3, [sp, #4]
 8007c64:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	9803      	ldr	r0, [sp, #12]
 8007c6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007c6c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c6e:	f001 fa79 	bl	8009164 <__d2b>
 8007c72:	007a      	lsls	r2, r7, #1
 8007c74:	9005      	str	r0, [sp, #20]
 8007c76:	0d52      	lsrs	r2, r2, #21
 8007c78:	d100      	bne.n	8007c7c <_dtoa_r+0xec>
 8007c7a:	e07b      	b.n	8007d74 <_dtoa_r+0x1e4>
 8007c7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c7e:	9618      	str	r6, [sp, #96]	@ 0x60
 8007c80:	0319      	lsls	r1, r3, #12
 8007c82:	4b9c      	ldr	r3, [pc, #624]	@ (8007ef4 <_dtoa_r+0x364>)
 8007c84:	0b09      	lsrs	r1, r1, #12
 8007c86:	430b      	orrs	r3, r1
 8007c88:	499b      	ldr	r1, [pc, #620]	@ (8007ef8 <_dtoa_r+0x368>)
 8007c8a:	1857      	adds	r7, r2, r1
 8007c8c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007c8e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007c90:	0019      	movs	r1, r3
 8007c92:	2200      	movs	r2, #0
 8007c94:	4b99      	ldr	r3, [pc, #612]	@ (8007efc <_dtoa_r+0x36c>)
 8007c96:	f7fa f905 	bl	8001ea4 <__aeabi_dsub>
 8007c9a:	4a99      	ldr	r2, [pc, #612]	@ (8007f00 <_dtoa_r+0x370>)
 8007c9c:	4b99      	ldr	r3, [pc, #612]	@ (8007f04 <_dtoa_r+0x374>)
 8007c9e:	f7f9 fe1b 	bl	80018d8 <__aeabi_dmul>
 8007ca2:	4a99      	ldr	r2, [pc, #612]	@ (8007f08 <_dtoa_r+0x378>)
 8007ca4:	4b99      	ldr	r3, [pc, #612]	@ (8007f0c <_dtoa_r+0x37c>)
 8007ca6:	f7f8 fe17 	bl	80008d8 <__aeabi_dadd>
 8007caa:	0004      	movs	r4, r0
 8007cac:	0038      	movs	r0, r7
 8007cae:	000d      	movs	r5, r1
 8007cb0:	f7fa fd60 	bl	8002774 <__aeabi_i2d>
 8007cb4:	4a96      	ldr	r2, [pc, #600]	@ (8007f10 <_dtoa_r+0x380>)
 8007cb6:	4b97      	ldr	r3, [pc, #604]	@ (8007f14 <_dtoa_r+0x384>)
 8007cb8:	f7f9 fe0e 	bl	80018d8 <__aeabi_dmul>
 8007cbc:	0002      	movs	r2, r0
 8007cbe:	000b      	movs	r3, r1
 8007cc0:	0020      	movs	r0, r4
 8007cc2:	0029      	movs	r1, r5
 8007cc4:	f7f8 fe08 	bl	80008d8 <__aeabi_dadd>
 8007cc8:	0004      	movs	r4, r0
 8007cca:	000d      	movs	r5, r1
 8007ccc:	f7fa fd16 	bl	80026fc <__aeabi_d2iz>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	9004      	str	r0, [sp, #16]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	0020      	movs	r0, r4
 8007cd8:	0029      	movs	r1, r5
 8007cda:	f7f8 fbbd 	bl	8000458 <__aeabi_dcmplt>
 8007cde:	2800      	cmp	r0, #0
 8007ce0:	d00b      	beq.n	8007cfa <_dtoa_r+0x16a>
 8007ce2:	9804      	ldr	r0, [sp, #16]
 8007ce4:	f7fa fd46 	bl	8002774 <__aeabi_i2d>
 8007ce8:	002b      	movs	r3, r5
 8007cea:	0022      	movs	r2, r4
 8007cec:	f7f8 fbae 	bl	800044c <__aeabi_dcmpeq>
 8007cf0:	4243      	negs	r3, r0
 8007cf2:	4158      	adcs	r0, r3
 8007cf4:	9b04      	ldr	r3, [sp, #16]
 8007cf6:	1a1b      	subs	r3, r3, r0
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007cfe:	9b04      	ldr	r3, [sp, #16]
 8007d00:	2b16      	cmp	r3, #22
 8007d02:	d810      	bhi.n	8007d26 <_dtoa_r+0x196>
 8007d04:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007d06:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007d08:	9a04      	ldr	r2, [sp, #16]
 8007d0a:	4b83      	ldr	r3, [pc, #524]	@ (8007f18 <_dtoa_r+0x388>)
 8007d0c:	00d2      	lsls	r2, r2, #3
 8007d0e:	189b      	adds	r3, r3, r2
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	f7f8 fba0 	bl	8000458 <__aeabi_dcmplt>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d047      	beq.n	8007dac <_dtoa_r+0x21c>
 8007d1c:	9b04      	ldr	r3, [sp, #16]
 8007d1e:	3b01      	subs	r3, #1
 8007d20:	9304      	str	r3, [sp, #16]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9315      	str	r3, [sp, #84]	@ 0x54
 8007d26:	2200      	movs	r2, #0
 8007d28:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007d2a:	9206      	str	r2, [sp, #24]
 8007d2c:	1bdb      	subs	r3, r3, r7
 8007d2e:	1e5a      	subs	r2, r3, #1
 8007d30:	d53e      	bpl.n	8007db0 <_dtoa_r+0x220>
 8007d32:	2201      	movs	r2, #1
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	9306      	str	r3, [sp, #24]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	db38      	blt.n	8007db4 <_dtoa_r+0x224>
 8007d42:	9a04      	ldr	r2, [sp, #16]
 8007d44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d46:	4694      	mov	ip, r2
 8007d48:	4463      	add	r3, ip
 8007d4a:	930d      	str	r3, [sp, #52]	@ 0x34
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9214      	str	r2, [sp, #80]	@ 0x50
 8007d50:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d52:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d54:	2401      	movs	r4, #1
 8007d56:	2b09      	cmp	r3, #9
 8007d58:	d862      	bhi.n	8007e20 <_dtoa_r+0x290>
 8007d5a:	2b05      	cmp	r3, #5
 8007d5c:	dd02      	ble.n	8007d64 <_dtoa_r+0x1d4>
 8007d5e:	2400      	movs	r4, #0
 8007d60:	3b04      	subs	r3, #4
 8007d62:	9322      	str	r3, [sp, #136]	@ 0x88
 8007d64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007d66:	1e98      	subs	r0, r3, #2
 8007d68:	2803      	cmp	r0, #3
 8007d6a:	d863      	bhi.n	8007e34 <_dtoa_r+0x2a4>
 8007d6c:	f7f8 f9d4 	bl	8000118 <__gnu_thumb1_case_uqi>
 8007d70:	2b385654 	.word	0x2b385654
 8007d74:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007d76:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8007d78:	18f6      	adds	r6, r6, r3
 8007d7a:	4b68      	ldr	r3, [pc, #416]	@ (8007f1c <_dtoa_r+0x38c>)
 8007d7c:	18f2      	adds	r2, r6, r3
 8007d7e:	2a20      	cmp	r2, #32
 8007d80:	dd0f      	ble.n	8007da2 <_dtoa_r+0x212>
 8007d82:	2340      	movs	r3, #64	@ 0x40
 8007d84:	1a9b      	subs	r3, r3, r2
 8007d86:	409f      	lsls	r7, r3
 8007d88:	4b65      	ldr	r3, [pc, #404]	@ (8007f20 <_dtoa_r+0x390>)
 8007d8a:	0038      	movs	r0, r7
 8007d8c:	18f3      	adds	r3, r6, r3
 8007d8e:	40dc      	lsrs	r4, r3
 8007d90:	4320      	orrs	r0, r4
 8007d92:	f7fa fd1d 	bl	80027d0 <__aeabi_ui2d>
 8007d96:	2201      	movs	r2, #1
 8007d98:	4b62      	ldr	r3, [pc, #392]	@ (8007f24 <_dtoa_r+0x394>)
 8007d9a:	1e77      	subs	r7, r6, #1
 8007d9c:	18cb      	adds	r3, r1, r3
 8007d9e:	9218      	str	r2, [sp, #96]	@ 0x60
 8007da0:	e776      	b.n	8007c90 <_dtoa_r+0x100>
 8007da2:	2320      	movs	r3, #32
 8007da4:	0020      	movs	r0, r4
 8007da6:	1a9b      	subs	r3, r3, r2
 8007da8:	4098      	lsls	r0, r3
 8007daa:	e7f2      	b.n	8007d92 <_dtoa_r+0x202>
 8007dac:	9015      	str	r0, [sp, #84]	@ 0x54
 8007dae:	e7ba      	b.n	8007d26 <_dtoa_r+0x196>
 8007db0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007db2:	e7c3      	b.n	8007d3c <_dtoa_r+0x1ac>
 8007db4:	9b06      	ldr	r3, [sp, #24]
 8007db6:	9a04      	ldr	r2, [sp, #16]
 8007db8:	1a9b      	subs	r3, r3, r2
 8007dba:	9306      	str	r3, [sp, #24]
 8007dbc:	4253      	negs	r3, r2
 8007dbe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9314      	str	r3, [sp, #80]	@ 0x50
 8007dc4:	e7c5      	b.n	8007d52 <_dtoa_r+0x1c2>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007dca:	9310      	str	r3, [sp, #64]	@ 0x40
 8007dcc:	4694      	mov	ip, r2
 8007dce:	9b04      	ldr	r3, [sp, #16]
 8007dd0:	4463      	add	r3, ip
 8007dd2:	930e      	str	r3, [sp, #56]	@ 0x38
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	dc08      	bgt.n	8007dee <_dtoa_r+0x25e>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e006      	b.n	8007dee <_dtoa_r+0x25e>
 8007de0:	2301      	movs	r3, #1
 8007de2:	9310      	str	r3, [sp, #64]	@ 0x40
 8007de4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dd28      	ble.n	8007e3c <_dtoa_r+0x2ac>
 8007dea:	930e      	str	r3, [sp, #56]	@ 0x38
 8007dec:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dee:	9a03      	ldr	r2, [sp, #12]
 8007df0:	2100      	movs	r1, #0
 8007df2:	69d0      	ldr	r0, [r2, #28]
 8007df4:	2204      	movs	r2, #4
 8007df6:	0015      	movs	r5, r2
 8007df8:	3514      	adds	r5, #20
 8007dfa:	429d      	cmp	r5, r3
 8007dfc:	d923      	bls.n	8007e46 <_dtoa_r+0x2b6>
 8007dfe:	6041      	str	r1, [r0, #4]
 8007e00:	9803      	ldr	r0, [sp, #12]
 8007e02:	f000 fdbb 	bl	800897c <_Balloc>
 8007e06:	9008      	str	r0, [sp, #32]
 8007e08:	2800      	cmp	r0, #0
 8007e0a:	d11f      	bne.n	8007e4c <_dtoa_r+0x2bc>
 8007e0c:	21b0      	movs	r1, #176	@ 0xb0
 8007e0e:	4b46      	ldr	r3, [pc, #280]	@ (8007f28 <_dtoa_r+0x398>)
 8007e10:	4831      	ldr	r0, [pc, #196]	@ (8007ed8 <_dtoa_r+0x348>)
 8007e12:	9a08      	ldr	r2, [sp, #32]
 8007e14:	31ff      	adds	r1, #255	@ 0xff
 8007e16:	e6d0      	b.n	8007bba <_dtoa_r+0x2a>
 8007e18:	2300      	movs	r3, #0
 8007e1a:	e7e2      	b.n	8007de2 <_dtoa_r+0x252>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e7d3      	b.n	8007dc8 <_dtoa_r+0x238>
 8007e20:	2300      	movs	r3, #0
 8007e22:	9410      	str	r4, [sp, #64]	@ 0x40
 8007e24:	9322      	str	r3, [sp, #136]	@ 0x88
 8007e26:	3b01      	subs	r3, #1
 8007e28:	2200      	movs	r2, #0
 8007e2a:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e2e:	3313      	adds	r3, #19
 8007e30:	9223      	str	r2, [sp, #140]	@ 0x8c
 8007e32:	e7dc      	b.n	8007dee <_dtoa_r+0x25e>
 8007e34:	2301      	movs	r3, #1
 8007e36:	9310      	str	r3, [sp, #64]	@ 0x40
 8007e38:	3b02      	subs	r3, #2
 8007e3a:	e7f5      	b.n	8007e28 <_dtoa_r+0x298>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	001a      	movs	r2, r3
 8007e40:	930e      	str	r3, [sp, #56]	@ 0x38
 8007e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e44:	e7f4      	b.n	8007e30 <_dtoa_r+0x2a0>
 8007e46:	3101      	adds	r1, #1
 8007e48:	0052      	lsls	r2, r2, #1
 8007e4a:	e7d4      	b.n	8007df6 <_dtoa_r+0x266>
 8007e4c:	9b03      	ldr	r3, [sp, #12]
 8007e4e:	9a08      	ldr	r2, [sp, #32]
 8007e50:	69db      	ldr	r3, [r3, #28]
 8007e52:	601a      	str	r2, [r3, #0]
 8007e54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e56:	2b0e      	cmp	r3, #14
 8007e58:	d900      	bls.n	8007e5c <_dtoa_r+0x2cc>
 8007e5a:	e0d6      	b.n	800800a <_dtoa_r+0x47a>
 8007e5c:	2c00      	cmp	r4, #0
 8007e5e:	d100      	bne.n	8007e62 <_dtoa_r+0x2d2>
 8007e60:	e0d3      	b.n	800800a <_dtoa_r+0x47a>
 8007e62:	9b04      	ldr	r3, [sp, #16]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dd63      	ble.n	8007f30 <_dtoa_r+0x3a0>
 8007e68:	210f      	movs	r1, #15
 8007e6a:	9a04      	ldr	r2, [sp, #16]
 8007e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8007f18 <_dtoa_r+0x388>)
 8007e6e:	400a      	ands	r2, r1
 8007e70:	00d2      	lsls	r2, r2, #3
 8007e72:	189b      	adds	r3, r3, r2
 8007e74:	681e      	ldr	r6, [r3, #0]
 8007e76:	685f      	ldr	r7, [r3, #4]
 8007e78:	9b04      	ldr	r3, [sp, #16]
 8007e7a:	2402      	movs	r4, #2
 8007e7c:	111d      	asrs	r5, r3, #4
 8007e7e:	05db      	lsls	r3, r3, #23
 8007e80:	d50a      	bpl.n	8007e98 <_dtoa_r+0x308>
 8007e82:	4b2a      	ldr	r3, [pc, #168]	@ (8007f2c <_dtoa_r+0x39c>)
 8007e84:	400d      	ands	r5, r1
 8007e86:	6a1a      	ldr	r2, [r3, #32]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8a:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007e8c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007e8e:	f7f9 f8e9 	bl	8001064 <__aeabi_ddiv>
 8007e92:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e94:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007e96:	3401      	adds	r4, #1
 8007e98:	4b24      	ldr	r3, [pc, #144]	@ (8007f2c <_dtoa_r+0x39c>)
 8007e9a:	930c      	str	r3, [sp, #48]	@ 0x30
 8007e9c:	2d00      	cmp	r5, #0
 8007e9e:	d108      	bne.n	8007eb2 <_dtoa_r+0x322>
 8007ea0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007ea2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ea4:	0032      	movs	r2, r6
 8007ea6:	003b      	movs	r3, r7
 8007ea8:	f7f9 f8dc 	bl	8001064 <__aeabi_ddiv>
 8007eac:	900a      	str	r0, [sp, #40]	@ 0x28
 8007eae:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007eb0:	e059      	b.n	8007f66 <_dtoa_r+0x3d6>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	421d      	tst	r5, r3
 8007eb6:	d009      	beq.n	8007ecc <_dtoa_r+0x33c>
 8007eb8:	18e4      	adds	r4, r4, r3
 8007eba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ebc:	0030      	movs	r0, r6
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	0039      	movs	r1, r7
 8007ec4:	f7f9 fd08 	bl	80018d8 <__aeabi_dmul>
 8007ec8:	0006      	movs	r6, r0
 8007eca:	000f      	movs	r7, r1
 8007ecc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ece:	106d      	asrs	r5, r5, #1
 8007ed0:	3308      	adds	r3, #8
 8007ed2:	e7e2      	b.n	8007e9a <_dtoa_r+0x30a>
 8007ed4:	0800b4d2 	.word	0x0800b4d2
 8007ed8:	0800b4e9 	.word	0x0800b4e9
 8007edc:	7ff00000 	.word	0x7ff00000
 8007ee0:	0000270f 	.word	0x0000270f
 8007ee4:	0800b4ce 	.word	0x0800b4ce
 8007ee8:	0800b4d1 	.word	0x0800b4d1
 8007eec:	0800b49d 	.word	0x0800b49d
 8007ef0:	0800b49c 	.word	0x0800b49c
 8007ef4:	3ff00000 	.word	0x3ff00000
 8007ef8:	fffffc01 	.word	0xfffffc01
 8007efc:	3ff80000 	.word	0x3ff80000
 8007f00:	636f4361 	.word	0x636f4361
 8007f04:	3fd287a7 	.word	0x3fd287a7
 8007f08:	8b60c8b3 	.word	0x8b60c8b3
 8007f0c:	3fc68a28 	.word	0x3fc68a28
 8007f10:	509f79fb 	.word	0x509f79fb
 8007f14:	3fd34413 	.word	0x3fd34413
 8007f18:	0800b698 	.word	0x0800b698
 8007f1c:	00000432 	.word	0x00000432
 8007f20:	00000412 	.word	0x00000412
 8007f24:	fe100000 	.word	0xfe100000
 8007f28:	0800b541 	.word	0x0800b541
 8007f2c:	0800b670 	.word	0x0800b670
 8007f30:	9b04      	ldr	r3, [sp, #16]
 8007f32:	2402      	movs	r4, #2
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d016      	beq.n	8007f66 <_dtoa_r+0x3d6>
 8007f38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8007f3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8007f3c:	220f      	movs	r2, #15
 8007f3e:	425d      	negs	r5, r3
 8007f40:	402a      	ands	r2, r5
 8007f42:	4bd5      	ldr	r3, [pc, #852]	@ (8008298 <_dtoa_r+0x708>)
 8007f44:	00d2      	lsls	r2, r2, #3
 8007f46:	189b      	adds	r3, r3, r2
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f7f9 fcc4 	bl	80018d8 <__aeabi_dmul>
 8007f50:	2701      	movs	r7, #1
 8007f52:	2300      	movs	r3, #0
 8007f54:	900a      	str	r0, [sp, #40]	@ 0x28
 8007f56:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007f58:	4ed0      	ldr	r6, [pc, #832]	@ (800829c <_dtoa_r+0x70c>)
 8007f5a:	112d      	asrs	r5, r5, #4
 8007f5c:	2d00      	cmp	r5, #0
 8007f5e:	d000      	beq.n	8007f62 <_dtoa_r+0x3d2>
 8007f60:	e095      	b.n	800808e <_dtoa_r+0x4fe>
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1a2      	bne.n	8007eac <_dtoa_r+0x31c>
 8007f66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007f68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8007f6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d100      	bne.n	8007f72 <_dtoa_r+0x3e2>
 8007f70:	e098      	b.n	80080a4 <_dtoa_r+0x514>
 8007f72:	2200      	movs	r2, #0
 8007f74:	0030      	movs	r0, r6
 8007f76:	0039      	movs	r1, r7
 8007f78:	4bc9      	ldr	r3, [pc, #804]	@ (80082a0 <_dtoa_r+0x710>)
 8007f7a:	f7f8 fa6d 	bl	8000458 <__aeabi_dcmplt>
 8007f7e:	2800      	cmp	r0, #0
 8007f80:	d100      	bne.n	8007f84 <_dtoa_r+0x3f4>
 8007f82:	e08f      	b.n	80080a4 <_dtoa_r+0x514>
 8007f84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d100      	bne.n	8007f8c <_dtoa_r+0x3fc>
 8007f8a:	e08b      	b.n	80080a4 <_dtoa_r+0x514>
 8007f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	dd37      	ble.n	8008002 <_dtoa_r+0x472>
 8007f92:	9b04      	ldr	r3, [sp, #16]
 8007f94:	2200      	movs	r2, #0
 8007f96:	3b01      	subs	r3, #1
 8007f98:	930c      	str	r3, [sp, #48]	@ 0x30
 8007f9a:	0030      	movs	r0, r6
 8007f9c:	4bc1      	ldr	r3, [pc, #772]	@ (80082a4 <_dtoa_r+0x714>)
 8007f9e:	0039      	movs	r1, r7
 8007fa0:	f7f9 fc9a 	bl	80018d8 <__aeabi_dmul>
 8007fa4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007fa6:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007fa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007faa:	3401      	adds	r4, #1
 8007fac:	0020      	movs	r0, r4
 8007fae:	9311      	str	r3, [sp, #68]	@ 0x44
 8007fb0:	f7fa fbe0 	bl	8002774 <__aeabi_i2d>
 8007fb4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fb6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fb8:	f7f9 fc8e 	bl	80018d8 <__aeabi_dmul>
 8007fbc:	4bba      	ldr	r3, [pc, #744]	@ (80082a8 <_dtoa_r+0x718>)
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f7f8 fc8a 	bl	80008d8 <__aeabi_dadd>
 8007fc4:	4bb9      	ldr	r3, [pc, #740]	@ (80082ac <_dtoa_r+0x71c>)
 8007fc6:	0006      	movs	r6, r0
 8007fc8:	18cf      	adds	r7, r1, r3
 8007fca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d16d      	bne.n	80080ac <_dtoa_r+0x51c>
 8007fd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007fd2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	4bb6      	ldr	r3, [pc, #728]	@ (80082b0 <_dtoa_r+0x720>)
 8007fd8:	f7f9 ff64 	bl	8001ea4 <__aeabi_dsub>
 8007fdc:	0032      	movs	r2, r6
 8007fde:	003b      	movs	r3, r7
 8007fe0:	0004      	movs	r4, r0
 8007fe2:	000d      	movs	r5, r1
 8007fe4:	f7f8 fa4c 	bl	8000480 <__aeabi_dcmpgt>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	d000      	beq.n	8007fee <_dtoa_r+0x45e>
 8007fec:	e2b6      	b.n	800855c <_dtoa_r+0x9cc>
 8007fee:	2180      	movs	r1, #128	@ 0x80
 8007ff0:	0609      	lsls	r1, r1, #24
 8007ff2:	187b      	adds	r3, r7, r1
 8007ff4:	0032      	movs	r2, r6
 8007ff6:	0020      	movs	r0, r4
 8007ff8:	0029      	movs	r1, r5
 8007ffa:	f7f8 fa2d 	bl	8000458 <__aeabi_dcmplt>
 8007ffe:	2800      	cmp	r0, #0
 8008000:	d128      	bne.n	8008054 <_dtoa_r+0x4c4>
 8008002:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008004:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8008006:	930a      	str	r3, [sp, #40]	@ 0x28
 8008008:	940b      	str	r4, [sp, #44]	@ 0x2c
 800800a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800800c:	2b00      	cmp	r3, #0
 800800e:	da00      	bge.n	8008012 <_dtoa_r+0x482>
 8008010:	e174      	b.n	80082fc <_dtoa_r+0x76c>
 8008012:	9a04      	ldr	r2, [sp, #16]
 8008014:	2a0e      	cmp	r2, #14
 8008016:	dd00      	ble.n	800801a <_dtoa_r+0x48a>
 8008018:	e170      	b.n	80082fc <_dtoa_r+0x76c>
 800801a:	4b9f      	ldr	r3, [pc, #636]	@ (8008298 <_dtoa_r+0x708>)
 800801c:	00d2      	lsls	r2, r2, #3
 800801e:	189b      	adds	r3, r3, r2
 8008020:	685c      	ldr	r4, [r3, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	9306      	str	r3, [sp, #24]
 8008026:	9407      	str	r4, [sp, #28]
 8008028:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800802a:	2b00      	cmp	r3, #0
 800802c:	db00      	blt.n	8008030 <_dtoa_r+0x4a0>
 800802e:	e0e7      	b.n	8008200 <_dtoa_r+0x670>
 8008030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008032:	2b00      	cmp	r3, #0
 8008034:	dd00      	ble.n	8008038 <_dtoa_r+0x4a8>
 8008036:	e0e3      	b.n	8008200 <_dtoa_r+0x670>
 8008038:	d10c      	bne.n	8008054 <_dtoa_r+0x4c4>
 800803a:	9806      	ldr	r0, [sp, #24]
 800803c:	9907      	ldr	r1, [sp, #28]
 800803e:	2200      	movs	r2, #0
 8008040:	4b9b      	ldr	r3, [pc, #620]	@ (80082b0 <_dtoa_r+0x720>)
 8008042:	f7f9 fc49 	bl	80018d8 <__aeabi_dmul>
 8008046:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008048:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800804a:	f7f8 fa23 	bl	8000494 <__aeabi_dcmpge>
 800804e:	2800      	cmp	r0, #0
 8008050:	d100      	bne.n	8008054 <_dtoa_r+0x4c4>
 8008052:	e286      	b.n	8008562 <_dtoa_r+0x9d2>
 8008054:	2600      	movs	r6, #0
 8008056:	0037      	movs	r7, r6
 8008058:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800805a:	9c08      	ldr	r4, [sp, #32]
 800805c:	43db      	mvns	r3, r3
 800805e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008060:	9704      	str	r7, [sp, #16]
 8008062:	2700      	movs	r7, #0
 8008064:	0031      	movs	r1, r6
 8008066:	9803      	ldr	r0, [sp, #12]
 8008068:	f000 fccc 	bl	8008a04 <_Bfree>
 800806c:	9b04      	ldr	r3, [sp, #16]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d100      	bne.n	8008074 <_dtoa_r+0x4e4>
 8008072:	e0bb      	b.n	80081ec <_dtoa_r+0x65c>
 8008074:	2f00      	cmp	r7, #0
 8008076:	d005      	beq.n	8008084 <_dtoa_r+0x4f4>
 8008078:	429f      	cmp	r7, r3
 800807a:	d003      	beq.n	8008084 <_dtoa_r+0x4f4>
 800807c:	0039      	movs	r1, r7
 800807e:	9803      	ldr	r0, [sp, #12]
 8008080:	f000 fcc0 	bl	8008a04 <_Bfree>
 8008084:	9904      	ldr	r1, [sp, #16]
 8008086:	9803      	ldr	r0, [sp, #12]
 8008088:	f000 fcbc 	bl	8008a04 <_Bfree>
 800808c:	e0ae      	b.n	80081ec <_dtoa_r+0x65c>
 800808e:	423d      	tst	r5, r7
 8008090:	d005      	beq.n	800809e <_dtoa_r+0x50e>
 8008092:	6832      	ldr	r2, [r6, #0]
 8008094:	6873      	ldr	r3, [r6, #4]
 8008096:	f7f9 fc1f 	bl	80018d8 <__aeabi_dmul>
 800809a:	003b      	movs	r3, r7
 800809c:	3401      	adds	r4, #1
 800809e:	106d      	asrs	r5, r5, #1
 80080a0:	3608      	adds	r6, #8
 80080a2:	e75b      	b.n	8007f5c <_dtoa_r+0x3cc>
 80080a4:	9b04      	ldr	r3, [sp, #16]
 80080a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80080a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080aa:	e77f      	b.n	8007fac <_dtoa_r+0x41c>
 80080ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80080ae:	4b7a      	ldr	r3, [pc, #488]	@ (8008298 <_dtoa_r+0x708>)
 80080b0:	3a01      	subs	r2, #1
 80080b2:	00d2      	lsls	r2, r2, #3
 80080b4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80080b6:	189b      	adds	r3, r3, r2
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2900      	cmp	r1, #0
 80080be:	d04c      	beq.n	800815a <_dtoa_r+0x5ca>
 80080c0:	2000      	movs	r0, #0
 80080c2:	497c      	ldr	r1, [pc, #496]	@ (80082b4 <_dtoa_r+0x724>)
 80080c4:	f7f8 ffce 	bl	8001064 <__aeabi_ddiv>
 80080c8:	0032      	movs	r2, r6
 80080ca:	003b      	movs	r3, r7
 80080cc:	f7f9 feea 	bl	8001ea4 <__aeabi_dsub>
 80080d0:	9a08      	ldr	r2, [sp, #32]
 80080d2:	0006      	movs	r6, r0
 80080d4:	4694      	mov	ip, r2
 80080d6:	000f      	movs	r7, r1
 80080d8:	9b08      	ldr	r3, [sp, #32]
 80080da:	9316      	str	r3, [sp, #88]	@ 0x58
 80080dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080de:	4463      	add	r3, ip
 80080e0:	9311      	str	r3, [sp, #68]	@ 0x44
 80080e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080e6:	f7fa fb09 	bl	80026fc <__aeabi_d2iz>
 80080ea:	0005      	movs	r5, r0
 80080ec:	f7fa fb42 	bl	8002774 <__aeabi_i2d>
 80080f0:	0002      	movs	r2, r0
 80080f2:	000b      	movs	r3, r1
 80080f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80080f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080f8:	f7f9 fed4 	bl	8001ea4 <__aeabi_dsub>
 80080fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80080fe:	3530      	adds	r5, #48	@ 0x30
 8008100:	1c5c      	adds	r4, r3, #1
 8008102:	701d      	strb	r5, [r3, #0]
 8008104:	0032      	movs	r2, r6
 8008106:	003b      	movs	r3, r7
 8008108:	900a      	str	r0, [sp, #40]	@ 0x28
 800810a:	910b      	str	r1, [sp, #44]	@ 0x2c
 800810c:	f7f8 f9a4 	bl	8000458 <__aeabi_dcmplt>
 8008110:	2800      	cmp	r0, #0
 8008112:	d16b      	bne.n	80081ec <_dtoa_r+0x65c>
 8008114:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008118:	2000      	movs	r0, #0
 800811a:	4961      	ldr	r1, [pc, #388]	@ (80082a0 <_dtoa_r+0x710>)
 800811c:	f7f9 fec2 	bl	8001ea4 <__aeabi_dsub>
 8008120:	0032      	movs	r2, r6
 8008122:	003b      	movs	r3, r7
 8008124:	f7f8 f998 	bl	8000458 <__aeabi_dcmplt>
 8008128:	2800      	cmp	r0, #0
 800812a:	d000      	beq.n	800812e <_dtoa_r+0x59e>
 800812c:	e0c6      	b.n	80082bc <_dtoa_r+0x72c>
 800812e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008130:	42a3      	cmp	r3, r4
 8008132:	d100      	bne.n	8008136 <_dtoa_r+0x5a6>
 8008134:	e765      	b.n	8008002 <_dtoa_r+0x472>
 8008136:	2200      	movs	r2, #0
 8008138:	0030      	movs	r0, r6
 800813a:	0039      	movs	r1, r7
 800813c:	4b59      	ldr	r3, [pc, #356]	@ (80082a4 <_dtoa_r+0x714>)
 800813e:	f7f9 fbcb 	bl	80018d8 <__aeabi_dmul>
 8008142:	2200      	movs	r2, #0
 8008144:	0006      	movs	r6, r0
 8008146:	000f      	movs	r7, r1
 8008148:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800814a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800814c:	4b55      	ldr	r3, [pc, #340]	@ (80082a4 <_dtoa_r+0x714>)
 800814e:	f7f9 fbc3 	bl	80018d8 <__aeabi_dmul>
 8008152:	9416      	str	r4, [sp, #88]	@ 0x58
 8008154:	900a      	str	r0, [sp, #40]	@ 0x28
 8008156:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008158:	e7c3      	b.n	80080e2 <_dtoa_r+0x552>
 800815a:	0030      	movs	r0, r6
 800815c:	0039      	movs	r1, r7
 800815e:	f7f9 fbbb 	bl	80018d8 <__aeabi_dmul>
 8008162:	9d08      	ldr	r5, [sp, #32]
 8008164:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008166:	002b      	movs	r3, r5
 8008168:	4694      	mov	ip, r2
 800816a:	9016      	str	r0, [sp, #88]	@ 0x58
 800816c:	9117      	str	r1, [sp, #92]	@ 0x5c
 800816e:	4463      	add	r3, ip
 8008170:	9319      	str	r3, [sp, #100]	@ 0x64
 8008172:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008176:	f7fa fac1 	bl	80026fc <__aeabi_d2iz>
 800817a:	0004      	movs	r4, r0
 800817c:	f7fa fafa 	bl	8002774 <__aeabi_i2d>
 8008180:	000b      	movs	r3, r1
 8008182:	0002      	movs	r2, r0
 8008184:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008186:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008188:	f7f9 fe8c 	bl	8001ea4 <__aeabi_dsub>
 800818c:	3430      	adds	r4, #48	@ 0x30
 800818e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008190:	702c      	strb	r4, [r5, #0]
 8008192:	3501      	adds	r5, #1
 8008194:	0006      	movs	r6, r0
 8008196:	000f      	movs	r7, r1
 8008198:	42ab      	cmp	r3, r5
 800819a:	d12a      	bne.n	80081f2 <_dtoa_r+0x662>
 800819c:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800819e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80081a0:	9b08      	ldr	r3, [sp, #32]
 80081a2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80081a4:	469c      	mov	ip, r3
 80081a6:	2200      	movs	r2, #0
 80081a8:	4b42      	ldr	r3, [pc, #264]	@ (80082b4 <_dtoa_r+0x724>)
 80081aa:	4464      	add	r4, ip
 80081ac:	f7f8 fb94 	bl	80008d8 <__aeabi_dadd>
 80081b0:	0002      	movs	r2, r0
 80081b2:	000b      	movs	r3, r1
 80081b4:	0030      	movs	r0, r6
 80081b6:	0039      	movs	r1, r7
 80081b8:	f7f8 f962 	bl	8000480 <__aeabi_dcmpgt>
 80081bc:	2800      	cmp	r0, #0
 80081be:	d000      	beq.n	80081c2 <_dtoa_r+0x632>
 80081c0:	e07c      	b.n	80082bc <_dtoa_r+0x72c>
 80081c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80081c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80081c6:	2000      	movs	r0, #0
 80081c8:	493a      	ldr	r1, [pc, #232]	@ (80082b4 <_dtoa_r+0x724>)
 80081ca:	f7f9 fe6b 	bl	8001ea4 <__aeabi_dsub>
 80081ce:	0002      	movs	r2, r0
 80081d0:	000b      	movs	r3, r1
 80081d2:	0030      	movs	r0, r6
 80081d4:	0039      	movs	r1, r7
 80081d6:	f7f8 f93f 	bl	8000458 <__aeabi_dcmplt>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d100      	bne.n	80081e0 <_dtoa_r+0x650>
 80081de:	e710      	b.n	8008002 <_dtoa_r+0x472>
 80081e0:	0023      	movs	r3, r4
 80081e2:	3c01      	subs	r4, #1
 80081e4:	7822      	ldrb	r2, [r4, #0]
 80081e6:	2a30      	cmp	r2, #48	@ 0x30
 80081e8:	d0fa      	beq.n	80081e0 <_dtoa_r+0x650>
 80081ea:	001c      	movs	r4, r3
 80081ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80081ee:	9304      	str	r3, [sp, #16]
 80081f0:	e042      	b.n	8008278 <_dtoa_r+0x6e8>
 80081f2:	2200      	movs	r2, #0
 80081f4:	4b2b      	ldr	r3, [pc, #172]	@ (80082a4 <_dtoa_r+0x714>)
 80081f6:	f7f9 fb6f 	bl	80018d8 <__aeabi_dmul>
 80081fa:	900a      	str	r0, [sp, #40]	@ 0x28
 80081fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081fe:	e7b8      	b.n	8008172 <_dtoa_r+0x5e2>
 8008200:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008202:	9d08      	ldr	r5, [sp, #32]
 8008204:	3b01      	subs	r3, #1
 8008206:	195b      	adds	r3, r3, r5
 8008208:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800820a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800820c:	930a      	str	r3, [sp, #40]	@ 0x28
 800820e:	9a06      	ldr	r2, [sp, #24]
 8008210:	9b07      	ldr	r3, [sp, #28]
 8008212:	0030      	movs	r0, r6
 8008214:	0039      	movs	r1, r7
 8008216:	f7f8 ff25 	bl	8001064 <__aeabi_ddiv>
 800821a:	f7fa fa6f 	bl	80026fc <__aeabi_d2iz>
 800821e:	9009      	str	r0, [sp, #36]	@ 0x24
 8008220:	f7fa faa8 	bl	8002774 <__aeabi_i2d>
 8008224:	9a06      	ldr	r2, [sp, #24]
 8008226:	9b07      	ldr	r3, [sp, #28]
 8008228:	f7f9 fb56 	bl	80018d8 <__aeabi_dmul>
 800822c:	0002      	movs	r2, r0
 800822e:	000b      	movs	r3, r1
 8008230:	0030      	movs	r0, r6
 8008232:	0039      	movs	r1, r7
 8008234:	f7f9 fe36 	bl	8001ea4 <__aeabi_dsub>
 8008238:	002b      	movs	r3, r5
 800823a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800823c:	3501      	adds	r5, #1
 800823e:	3230      	adds	r2, #48	@ 0x30
 8008240:	701a      	strb	r2, [r3, #0]
 8008242:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008244:	002c      	movs	r4, r5
 8008246:	429a      	cmp	r2, r3
 8008248:	d14b      	bne.n	80082e2 <_dtoa_r+0x752>
 800824a:	0002      	movs	r2, r0
 800824c:	000b      	movs	r3, r1
 800824e:	f7f8 fb43 	bl	80008d8 <__aeabi_dadd>
 8008252:	9a06      	ldr	r2, [sp, #24]
 8008254:	9b07      	ldr	r3, [sp, #28]
 8008256:	0006      	movs	r6, r0
 8008258:	000f      	movs	r7, r1
 800825a:	f7f8 f911 	bl	8000480 <__aeabi_dcmpgt>
 800825e:	2800      	cmp	r0, #0
 8008260:	d12a      	bne.n	80082b8 <_dtoa_r+0x728>
 8008262:	9a06      	ldr	r2, [sp, #24]
 8008264:	9b07      	ldr	r3, [sp, #28]
 8008266:	0030      	movs	r0, r6
 8008268:	0039      	movs	r1, r7
 800826a:	f7f8 f8ef 	bl	800044c <__aeabi_dcmpeq>
 800826e:	2800      	cmp	r0, #0
 8008270:	d002      	beq.n	8008278 <_dtoa_r+0x6e8>
 8008272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008274:	07dd      	lsls	r5, r3, #31
 8008276:	d41f      	bmi.n	80082b8 <_dtoa_r+0x728>
 8008278:	9905      	ldr	r1, [sp, #20]
 800827a:	9803      	ldr	r0, [sp, #12]
 800827c:	f000 fbc2 	bl	8008a04 <_Bfree>
 8008280:	2300      	movs	r3, #0
 8008282:	7023      	strb	r3, [r4, #0]
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008288:	3301      	adds	r3, #1
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800828e:	2b00      	cmp	r3, #0
 8008290:	d100      	bne.n	8008294 <_dtoa_r+0x704>
 8008292:	e4c7      	b.n	8007c24 <_dtoa_r+0x94>
 8008294:	601c      	str	r4, [r3, #0]
 8008296:	e4c5      	b.n	8007c24 <_dtoa_r+0x94>
 8008298:	0800b698 	.word	0x0800b698
 800829c:	0800b670 	.word	0x0800b670
 80082a0:	3ff00000 	.word	0x3ff00000
 80082a4:	40240000 	.word	0x40240000
 80082a8:	401c0000 	.word	0x401c0000
 80082ac:	fcc00000 	.word	0xfcc00000
 80082b0:	40140000 	.word	0x40140000
 80082b4:	3fe00000 	.word	0x3fe00000
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80082bc:	0023      	movs	r3, r4
 80082be:	001c      	movs	r4, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	781a      	ldrb	r2, [r3, #0]
 80082c4:	2a39      	cmp	r2, #57	@ 0x39
 80082c6:	d108      	bne.n	80082da <_dtoa_r+0x74a>
 80082c8:	9a08      	ldr	r2, [sp, #32]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d1f7      	bne.n	80082be <_dtoa_r+0x72e>
 80082ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082d0:	9908      	ldr	r1, [sp, #32]
 80082d2:	3201      	adds	r2, #1
 80082d4:	920c      	str	r2, [sp, #48]	@ 0x30
 80082d6:	2230      	movs	r2, #48	@ 0x30
 80082d8:	700a      	strb	r2, [r1, #0]
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	3201      	adds	r2, #1
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	e784      	b.n	80081ec <_dtoa_r+0x65c>
 80082e2:	2200      	movs	r2, #0
 80082e4:	4bc6      	ldr	r3, [pc, #792]	@ (8008600 <_dtoa_r+0xa70>)
 80082e6:	f7f9 faf7 	bl	80018d8 <__aeabi_dmul>
 80082ea:	2200      	movs	r2, #0
 80082ec:	2300      	movs	r3, #0
 80082ee:	0006      	movs	r6, r0
 80082f0:	000f      	movs	r7, r1
 80082f2:	f7f8 f8ab 	bl	800044c <__aeabi_dcmpeq>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d089      	beq.n	800820e <_dtoa_r+0x67e>
 80082fa:	e7bd      	b.n	8008278 <_dtoa_r+0x6e8>
 80082fc:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80082fe:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8008300:	9c06      	ldr	r4, [sp, #24]
 8008302:	2f00      	cmp	r7, #0
 8008304:	d014      	beq.n	8008330 <_dtoa_r+0x7a0>
 8008306:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008308:	2a01      	cmp	r2, #1
 800830a:	dd00      	ble.n	800830e <_dtoa_r+0x77e>
 800830c:	e0e4      	b.n	80084d8 <_dtoa_r+0x948>
 800830e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8008310:	2a00      	cmp	r2, #0
 8008312:	d100      	bne.n	8008316 <_dtoa_r+0x786>
 8008314:	e0da      	b.n	80084cc <_dtoa_r+0x93c>
 8008316:	4abb      	ldr	r2, [pc, #748]	@ (8008604 <_dtoa_r+0xa74>)
 8008318:	189b      	adds	r3, r3, r2
 800831a:	9a06      	ldr	r2, [sp, #24]
 800831c:	2101      	movs	r1, #1
 800831e:	18d2      	adds	r2, r2, r3
 8008320:	9206      	str	r2, [sp, #24]
 8008322:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008324:	9803      	ldr	r0, [sp, #12]
 8008326:	18d3      	adds	r3, r2, r3
 8008328:	930d      	str	r3, [sp, #52]	@ 0x34
 800832a:	f000 fc6f 	bl	8008c0c <__i2b>
 800832e:	0007      	movs	r7, r0
 8008330:	2c00      	cmp	r4, #0
 8008332:	d00e      	beq.n	8008352 <_dtoa_r+0x7c2>
 8008334:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008336:	2b00      	cmp	r3, #0
 8008338:	dd0b      	ble.n	8008352 <_dtoa_r+0x7c2>
 800833a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800833c:	0023      	movs	r3, r4
 800833e:	4294      	cmp	r4, r2
 8008340:	dd00      	ble.n	8008344 <_dtoa_r+0x7b4>
 8008342:	0013      	movs	r3, r2
 8008344:	9a06      	ldr	r2, [sp, #24]
 8008346:	1ae4      	subs	r4, r4, r3
 8008348:	1ad2      	subs	r2, r2, r3
 800834a:	9206      	str	r2, [sp, #24]
 800834c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800834e:	1ad3      	subs	r3, r2, r3
 8008350:	930d      	str	r3, [sp, #52]	@ 0x34
 8008352:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d021      	beq.n	800839c <_dtoa_r+0x80c>
 8008358:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800835a:	2b00      	cmp	r3, #0
 800835c:	d100      	bne.n	8008360 <_dtoa_r+0x7d0>
 800835e:	e0d3      	b.n	8008508 <_dtoa_r+0x978>
 8008360:	9e05      	ldr	r6, [sp, #20]
 8008362:	2d00      	cmp	r5, #0
 8008364:	d014      	beq.n	8008390 <_dtoa_r+0x800>
 8008366:	0039      	movs	r1, r7
 8008368:	002a      	movs	r2, r5
 800836a:	9803      	ldr	r0, [sp, #12]
 800836c:	f000 fd10 	bl	8008d90 <__pow5mult>
 8008370:	9a05      	ldr	r2, [sp, #20]
 8008372:	0001      	movs	r1, r0
 8008374:	0007      	movs	r7, r0
 8008376:	9803      	ldr	r0, [sp, #12]
 8008378:	f000 fc60 	bl	8008c3c <__multiply>
 800837c:	0006      	movs	r6, r0
 800837e:	9905      	ldr	r1, [sp, #20]
 8008380:	9803      	ldr	r0, [sp, #12]
 8008382:	f000 fb3f 	bl	8008a04 <_Bfree>
 8008386:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008388:	9605      	str	r6, [sp, #20]
 800838a:	1b5b      	subs	r3, r3, r5
 800838c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800838e:	d005      	beq.n	800839c <_dtoa_r+0x80c>
 8008390:	0031      	movs	r1, r6
 8008392:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008394:	9803      	ldr	r0, [sp, #12]
 8008396:	f000 fcfb 	bl	8008d90 <__pow5mult>
 800839a:	9005      	str	r0, [sp, #20]
 800839c:	2101      	movs	r1, #1
 800839e:	9803      	ldr	r0, [sp, #12]
 80083a0:	f000 fc34 	bl	8008c0c <__i2b>
 80083a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083a6:	0006      	movs	r6, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d100      	bne.n	80083ae <_dtoa_r+0x81e>
 80083ac:	e1bc      	b.n	8008728 <_dtoa_r+0xb98>
 80083ae:	001a      	movs	r2, r3
 80083b0:	0001      	movs	r1, r0
 80083b2:	9803      	ldr	r0, [sp, #12]
 80083b4:	f000 fcec 	bl	8008d90 <__pow5mult>
 80083b8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80083ba:	0006      	movs	r6, r0
 80083bc:	2500      	movs	r5, #0
 80083be:	2b01      	cmp	r3, #1
 80083c0:	dc16      	bgt.n	80083f0 <_dtoa_r+0x860>
 80083c2:	2500      	movs	r5, #0
 80083c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083c6:	42ab      	cmp	r3, r5
 80083c8:	d10e      	bne.n	80083e8 <_dtoa_r+0x858>
 80083ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083cc:	031b      	lsls	r3, r3, #12
 80083ce:	42ab      	cmp	r3, r5
 80083d0:	d10a      	bne.n	80083e8 <_dtoa_r+0x858>
 80083d2:	4b8d      	ldr	r3, [pc, #564]	@ (8008608 <_dtoa_r+0xa78>)
 80083d4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083d6:	4213      	tst	r3, r2
 80083d8:	d006      	beq.n	80083e8 <_dtoa_r+0x858>
 80083da:	9b06      	ldr	r3, [sp, #24]
 80083dc:	3501      	adds	r5, #1
 80083de:	3301      	adds	r3, #1
 80083e0:	9306      	str	r3, [sp, #24]
 80083e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80083e4:	3301      	adds	r3, #1
 80083e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80083e8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083ea:	2001      	movs	r0, #1
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d008      	beq.n	8008402 <_dtoa_r+0x872>
 80083f0:	6933      	ldr	r3, [r6, #16]
 80083f2:	3303      	adds	r3, #3
 80083f4:	009b      	lsls	r3, r3, #2
 80083f6:	18f3      	adds	r3, r6, r3
 80083f8:	6858      	ldr	r0, [r3, #4]
 80083fa:	f000 fbb7 	bl	8008b6c <__hi0bits>
 80083fe:	2320      	movs	r3, #32
 8008400:	1a18      	subs	r0, r3, r0
 8008402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008404:	1818      	adds	r0, r3, r0
 8008406:	0002      	movs	r2, r0
 8008408:	231f      	movs	r3, #31
 800840a:	401a      	ands	r2, r3
 800840c:	4218      	tst	r0, r3
 800840e:	d100      	bne.n	8008412 <_dtoa_r+0x882>
 8008410:	e081      	b.n	8008516 <_dtoa_r+0x986>
 8008412:	3301      	adds	r3, #1
 8008414:	1a9b      	subs	r3, r3, r2
 8008416:	2b04      	cmp	r3, #4
 8008418:	dd79      	ble.n	800850e <_dtoa_r+0x97e>
 800841a:	231c      	movs	r3, #28
 800841c:	1a9b      	subs	r3, r3, r2
 800841e:	9a06      	ldr	r2, [sp, #24]
 8008420:	18e4      	adds	r4, r4, r3
 8008422:	18d2      	adds	r2, r2, r3
 8008424:	9206      	str	r2, [sp, #24]
 8008426:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008428:	18d3      	adds	r3, r2, r3
 800842a:	930d      	str	r3, [sp, #52]	@ 0x34
 800842c:	9b06      	ldr	r3, [sp, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	dd05      	ble.n	800843e <_dtoa_r+0x8ae>
 8008432:	001a      	movs	r2, r3
 8008434:	9905      	ldr	r1, [sp, #20]
 8008436:	9803      	ldr	r0, [sp, #12]
 8008438:	f000 fd06 	bl	8008e48 <__lshift>
 800843c:	9005      	str	r0, [sp, #20]
 800843e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008440:	2b00      	cmp	r3, #0
 8008442:	dd05      	ble.n	8008450 <_dtoa_r+0x8c0>
 8008444:	0031      	movs	r1, r6
 8008446:	001a      	movs	r2, r3
 8008448:	9803      	ldr	r0, [sp, #12]
 800844a:	f000 fcfd 	bl	8008e48 <__lshift>
 800844e:	0006      	movs	r6, r0
 8008450:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008452:	2b00      	cmp	r3, #0
 8008454:	d061      	beq.n	800851a <_dtoa_r+0x98a>
 8008456:	0031      	movs	r1, r6
 8008458:	9805      	ldr	r0, [sp, #20]
 800845a:	f000 fd61 	bl	8008f20 <__mcmp>
 800845e:	2800      	cmp	r0, #0
 8008460:	da5b      	bge.n	800851a <_dtoa_r+0x98a>
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	220a      	movs	r2, #10
 8008466:	3b01      	subs	r3, #1
 8008468:	930c      	str	r3, [sp, #48]	@ 0x30
 800846a:	9905      	ldr	r1, [sp, #20]
 800846c:	2300      	movs	r3, #0
 800846e:	9803      	ldr	r0, [sp, #12]
 8008470:	f000 faec 	bl	8008a4c <__multadd>
 8008474:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008476:	9005      	str	r0, [sp, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d100      	bne.n	800847e <_dtoa_r+0x8ee>
 800847c:	e15b      	b.n	8008736 <_dtoa_r+0xba6>
 800847e:	2300      	movs	r3, #0
 8008480:	0039      	movs	r1, r7
 8008482:	220a      	movs	r2, #10
 8008484:	9803      	ldr	r0, [sp, #12]
 8008486:	f000 fae1 	bl	8008a4c <__multadd>
 800848a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800848c:	0007      	movs	r7, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	dc4d      	bgt.n	800852e <_dtoa_r+0x99e>
 8008492:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008494:	2b02      	cmp	r3, #2
 8008496:	dd46      	ble.n	8008526 <_dtoa_r+0x996>
 8008498:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800849a:	2b00      	cmp	r3, #0
 800849c:	d000      	beq.n	80084a0 <_dtoa_r+0x910>
 800849e:	e5db      	b.n	8008058 <_dtoa_r+0x4c8>
 80084a0:	0031      	movs	r1, r6
 80084a2:	2205      	movs	r2, #5
 80084a4:	9803      	ldr	r0, [sp, #12]
 80084a6:	f000 fad1 	bl	8008a4c <__multadd>
 80084aa:	0006      	movs	r6, r0
 80084ac:	0001      	movs	r1, r0
 80084ae:	9805      	ldr	r0, [sp, #20]
 80084b0:	f000 fd36 	bl	8008f20 <__mcmp>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	dc00      	bgt.n	80084ba <_dtoa_r+0x92a>
 80084b8:	e5ce      	b.n	8008058 <_dtoa_r+0x4c8>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	9a08      	ldr	r2, [sp, #32]
 80084be:	1c5c      	adds	r4, r3, #1
 80084c0:	2331      	movs	r3, #49	@ 0x31
 80084c2:	7013      	strb	r3, [r2, #0]
 80084c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084c6:	3301      	adds	r3, #1
 80084c8:	930c      	str	r3, [sp, #48]	@ 0x30
 80084ca:	e5c9      	b.n	8008060 <_dtoa_r+0x4d0>
 80084cc:	2336      	movs	r3, #54	@ 0x36
 80084ce:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80084d0:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80084d2:	1a9b      	subs	r3, r3, r2
 80084d4:	9c06      	ldr	r4, [sp, #24]
 80084d6:	e720      	b.n	800831a <_dtoa_r+0x78a>
 80084d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084da:	1e5d      	subs	r5, r3, #1
 80084dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084de:	42ab      	cmp	r3, r5
 80084e0:	db08      	blt.n	80084f4 <_dtoa_r+0x964>
 80084e2:	1b5d      	subs	r5, r3, r5
 80084e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	daf4      	bge.n	80084d4 <_dtoa_r+0x944>
 80084ea:	9b06      	ldr	r3, [sp, #24]
 80084ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084ee:	1a9c      	subs	r4, r3, r2
 80084f0:	2300      	movs	r3, #0
 80084f2:	e712      	b.n	800831a <_dtoa_r+0x78a>
 80084f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084f6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80084f8:	1aeb      	subs	r3, r5, r3
 80084fa:	18d3      	adds	r3, r2, r3
 80084fc:	9314      	str	r3, [sp, #80]	@ 0x50
 80084fe:	950f      	str	r5, [sp, #60]	@ 0x3c
 8008500:	9c06      	ldr	r4, [sp, #24]
 8008502:	2500      	movs	r5, #0
 8008504:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008506:	e708      	b.n	800831a <_dtoa_r+0x78a>
 8008508:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800850a:	9905      	ldr	r1, [sp, #20]
 800850c:	e742      	b.n	8008394 <_dtoa_r+0x804>
 800850e:	2b04      	cmp	r3, #4
 8008510:	d08c      	beq.n	800842c <_dtoa_r+0x89c>
 8008512:	331c      	adds	r3, #28
 8008514:	e783      	b.n	800841e <_dtoa_r+0x88e>
 8008516:	0013      	movs	r3, r2
 8008518:	e7fb      	b.n	8008512 <_dtoa_r+0x982>
 800851a:	9b04      	ldr	r3, [sp, #16]
 800851c:	930c      	str	r3, [sp, #48]	@ 0x30
 800851e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008520:	930e      	str	r3, [sp, #56]	@ 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	ddb5      	ble.n	8008492 <_dtoa_r+0x902>
 8008526:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008528:	2b00      	cmp	r3, #0
 800852a:	d100      	bne.n	800852e <_dtoa_r+0x99e>
 800852c:	e107      	b.n	800873e <_dtoa_r+0xbae>
 800852e:	2c00      	cmp	r4, #0
 8008530:	dd05      	ble.n	800853e <_dtoa_r+0x9ae>
 8008532:	0039      	movs	r1, r7
 8008534:	0022      	movs	r2, r4
 8008536:	9803      	ldr	r0, [sp, #12]
 8008538:	f000 fc86 	bl	8008e48 <__lshift>
 800853c:	0007      	movs	r7, r0
 800853e:	9704      	str	r7, [sp, #16]
 8008540:	2d00      	cmp	r5, #0
 8008542:	d020      	beq.n	8008586 <_dtoa_r+0x9f6>
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	9803      	ldr	r0, [sp, #12]
 8008548:	f000 fa18 	bl	800897c <_Balloc>
 800854c:	1e04      	subs	r4, r0, #0
 800854e:	d10c      	bne.n	800856a <_dtoa_r+0x9da>
 8008550:	0022      	movs	r2, r4
 8008552:	4b2e      	ldr	r3, [pc, #184]	@ (800860c <_dtoa_r+0xa7c>)
 8008554:	482e      	ldr	r0, [pc, #184]	@ (8008610 <_dtoa_r+0xa80>)
 8008556:	492f      	ldr	r1, [pc, #188]	@ (8008614 <_dtoa_r+0xa84>)
 8008558:	f7ff fb2f 	bl	8007bba <_dtoa_r+0x2a>
 800855c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800855e:	0037      	movs	r7, r6
 8008560:	e7ab      	b.n	80084ba <_dtoa_r+0x92a>
 8008562:	9b04      	ldr	r3, [sp, #16]
 8008564:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8008566:	930c      	str	r3, [sp, #48]	@ 0x30
 8008568:	e7f9      	b.n	800855e <_dtoa_r+0x9ce>
 800856a:	0039      	movs	r1, r7
 800856c:	693a      	ldr	r2, [r7, #16]
 800856e:	310c      	adds	r1, #12
 8008570:	3202      	adds	r2, #2
 8008572:	0092      	lsls	r2, r2, #2
 8008574:	300c      	adds	r0, #12
 8008576:	f7ff fa77 	bl	8007a68 <memcpy>
 800857a:	2201      	movs	r2, #1
 800857c:	0021      	movs	r1, r4
 800857e:	9803      	ldr	r0, [sp, #12]
 8008580:	f000 fc62 	bl	8008e48 <__lshift>
 8008584:	9004      	str	r0, [sp, #16]
 8008586:	9b08      	ldr	r3, [sp, #32]
 8008588:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800858a:	9306      	str	r3, [sp, #24]
 800858c:	3b01      	subs	r3, #1
 800858e:	189b      	adds	r3, r3, r2
 8008590:	2201      	movs	r2, #1
 8008592:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008594:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008596:	4013      	ands	r3, r2
 8008598:	930e      	str	r3, [sp, #56]	@ 0x38
 800859a:	0031      	movs	r1, r6
 800859c:	9805      	ldr	r0, [sp, #20]
 800859e:	f7ff fa71 	bl	8007a84 <quorem>
 80085a2:	0039      	movs	r1, r7
 80085a4:	0005      	movs	r5, r0
 80085a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80085a8:	9805      	ldr	r0, [sp, #20]
 80085aa:	f000 fcb9 	bl	8008f20 <__mcmp>
 80085ae:	9a04      	ldr	r2, [sp, #16]
 80085b0:	900d      	str	r0, [sp, #52]	@ 0x34
 80085b2:	0031      	movs	r1, r6
 80085b4:	9803      	ldr	r0, [sp, #12]
 80085b6:	f000 fccf 	bl	8008f58 <__mdiff>
 80085ba:	2201      	movs	r2, #1
 80085bc:	68c3      	ldr	r3, [r0, #12]
 80085be:	0004      	movs	r4, r0
 80085c0:	3530      	adds	r5, #48	@ 0x30
 80085c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <_dtoa_r+0xa42>
 80085c8:	0001      	movs	r1, r0
 80085ca:	9805      	ldr	r0, [sp, #20]
 80085cc:	f000 fca8 	bl	8008f20 <__mcmp>
 80085d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80085d2:	0021      	movs	r1, r4
 80085d4:	9803      	ldr	r0, [sp, #12]
 80085d6:	f000 fa15 	bl	8008a04 <_Bfree>
 80085da:	9b06      	ldr	r3, [sp, #24]
 80085dc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085de:	1c5c      	adds	r4, r3, #1
 80085e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e2:	4313      	orrs	r3, r2
 80085e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085e6:	4313      	orrs	r3, r2
 80085e8:	d116      	bne.n	8008618 <_dtoa_r+0xa88>
 80085ea:	2d39      	cmp	r5, #57	@ 0x39
 80085ec:	d02f      	beq.n	800864e <_dtoa_r+0xabe>
 80085ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	dd01      	ble.n	80085f8 <_dtoa_r+0xa68>
 80085f4:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80085f6:	3531      	adds	r5, #49	@ 0x31
 80085f8:	9b06      	ldr	r3, [sp, #24]
 80085fa:	701d      	strb	r5, [r3, #0]
 80085fc:	e532      	b.n	8008064 <_dtoa_r+0x4d4>
 80085fe:	46c0      	nop			@ (mov r8, r8)
 8008600:	40240000 	.word	0x40240000
 8008604:	00000433 	.word	0x00000433
 8008608:	7ff00000 	.word	0x7ff00000
 800860c:	0800b541 	.word	0x0800b541
 8008610:	0800b4e9 	.word	0x0800b4e9
 8008614:	000002ef 	.word	0x000002ef
 8008618:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800861a:	2b00      	cmp	r3, #0
 800861c:	db04      	blt.n	8008628 <_dtoa_r+0xa98>
 800861e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8008620:	4313      	orrs	r3, r2
 8008622:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008624:	4313      	orrs	r3, r2
 8008626:	d11e      	bne.n	8008666 <_dtoa_r+0xad6>
 8008628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800862a:	2b00      	cmp	r3, #0
 800862c:	dde4      	ble.n	80085f8 <_dtoa_r+0xa68>
 800862e:	9905      	ldr	r1, [sp, #20]
 8008630:	2201      	movs	r2, #1
 8008632:	9803      	ldr	r0, [sp, #12]
 8008634:	f000 fc08 	bl	8008e48 <__lshift>
 8008638:	0031      	movs	r1, r6
 800863a:	9005      	str	r0, [sp, #20]
 800863c:	f000 fc70 	bl	8008f20 <__mcmp>
 8008640:	2800      	cmp	r0, #0
 8008642:	dc02      	bgt.n	800864a <_dtoa_r+0xaba>
 8008644:	d1d8      	bne.n	80085f8 <_dtoa_r+0xa68>
 8008646:	07eb      	lsls	r3, r5, #31
 8008648:	d5d6      	bpl.n	80085f8 <_dtoa_r+0xa68>
 800864a:	2d39      	cmp	r5, #57	@ 0x39
 800864c:	d1d2      	bne.n	80085f4 <_dtoa_r+0xa64>
 800864e:	2339      	movs	r3, #57	@ 0x39
 8008650:	9a06      	ldr	r2, [sp, #24]
 8008652:	7013      	strb	r3, [r2, #0]
 8008654:	0023      	movs	r3, r4
 8008656:	001c      	movs	r4, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	781a      	ldrb	r2, [r3, #0]
 800865c:	2a39      	cmp	r2, #57	@ 0x39
 800865e:	d050      	beq.n	8008702 <_dtoa_r+0xb72>
 8008660:	3201      	adds	r2, #1
 8008662:	701a      	strb	r2, [r3, #0]
 8008664:	e4fe      	b.n	8008064 <_dtoa_r+0x4d4>
 8008666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd03      	ble.n	8008674 <_dtoa_r+0xae4>
 800866c:	2d39      	cmp	r5, #57	@ 0x39
 800866e:	d0ee      	beq.n	800864e <_dtoa_r+0xabe>
 8008670:	3501      	adds	r5, #1
 8008672:	e7c1      	b.n	80085f8 <_dtoa_r+0xa68>
 8008674:	9b06      	ldr	r3, [sp, #24]
 8008676:	9a06      	ldr	r2, [sp, #24]
 8008678:	701d      	strb	r5, [r3, #0]
 800867a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800867c:	4293      	cmp	r3, r2
 800867e:	d02b      	beq.n	80086d8 <_dtoa_r+0xb48>
 8008680:	2300      	movs	r3, #0
 8008682:	220a      	movs	r2, #10
 8008684:	9905      	ldr	r1, [sp, #20]
 8008686:	9803      	ldr	r0, [sp, #12]
 8008688:	f000 f9e0 	bl	8008a4c <__multadd>
 800868c:	9b04      	ldr	r3, [sp, #16]
 800868e:	9005      	str	r0, [sp, #20]
 8008690:	429f      	cmp	r7, r3
 8008692:	d109      	bne.n	80086a8 <_dtoa_r+0xb18>
 8008694:	0039      	movs	r1, r7
 8008696:	2300      	movs	r3, #0
 8008698:	220a      	movs	r2, #10
 800869a:	9803      	ldr	r0, [sp, #12]
 800869c:	f000 f9d6 	bl	8008a4c <__multadd>
 80086a0:	0007      	movs	r7, r0
 80086a2:	9004      	str	r0, [sp, #16]
 80086a4:	9406      	str	r4, [sp, #24]
 80086a6:	e778      	b.n	800859a <_dtoa_r+0xa0a>
 80086a8:	0039      	movs	r1, r7
 80086aa:	2300      	movs	r3, #0
 80086ac:	220a      	movs	r2, #10
 80086ae:	9803      	ldr	r0, [sp, #12]
 80086b0:	f000 f9cc 	bl	8008a4c <__multadd>
 80086b4:	2300      	movs	r3, #0
 80086b6:	0007      	movs	r7, r0
 80086b8:	220a      	movs	r2, #10
 80086ba:	9904      	ldr	r1, [sp, #16]
 80086bc:	9803      	ldr	r0, [sp, #12]
 80086be:	f000 f9c5 	bl	8008a4c <__multadd>
 80086c2:	9004      	str	r0, [sp, #16]
 80086c4:	e7ee      	b.n	80086a4 <_dtoa_r+0xb14>
 80086c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086c8:	2401      	movs	r4, #1
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dd00      	ble.n	80086d0 <_dtoa_r+0xb40>
 80086ce:	001c      	movs	r4, r3
 80086d0:	9704      	str	r7, [sp, #16]
 80086d2:	2700      	movs	r7, #0
 80086d4:	9b08      	ldr	r3, [sp, #32]
 80086d6:	191c      	adds	r4, r3, r4
 80086d8:	9905      	ldr	r1, [sp, #20]
 80086da:	2201      	movs	r2, #1
 80086dc:	9803      	ldr	r0, [sp, #12]
 80086de:	f000 fbb3 	bl	8008e48 <__lshift>
 80086e2:	0031      	movs	r1, r6
 80086e4:	9005      	str	r0, [sp, #20]
 80086e6:	f000 fc1b 	bl	8008f20 <__mcmp>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	dcb2      	bgt.n	8008654 <_dtoa_r+0xac4>
 80086ee:	d101      	bne.n	80086f4 <_dtoa_r+0xb64>
 80086f0:	07ed      	lsls	r5, r5, #31
 80086f2:	d4af      	bmi.n	8008654 <_dtoa_r+0xac4>
 80086f4:	0023      	movs	r3, r4
 80086f6:	001c      	movs	r4, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	781a      	ldrb	r2, [r3, #0]
 80086fc:	2a30      	cmp	r2, #48	@ 0x30
 80086fe:	d0fa      	beq.n	80086f6 <_dtoa_r+0xb66>
 8008700:	e4b0      	b.n	8008064 <_dtoa_r+0x4d4>
 8008702:	9a08      	ldr	r2, [sp, #32]
 8008704:	429a      	cmp	r2, r3
 8008706:	d1a6      	bne.n	8008656 <_dtoa_r+0xac6>
 8008708:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800870a:	3301      	adds	r3, #1
 800870c:	930c      	str	r3, [sp, #48]	@ 0x30
 800870e:	2331      	movs	r3, #49	@ 0x31
 8008710:	7013      	strb	r3, [r2, #0]
 8008712:	e4a7      	b.n	8008064 <_dtoa_r+0x4d4>
 8008714:	4b14      	ldr	r3, [pc, #80]	@ (8008768 <_dtoa_r+0xbd8>)
 8008716:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8008718:	9308      	str	r3, [sp, #32]
 800871a:	4b14      	ldr	r3, [pc, #80]	@ (800876c <_dtoa_r+0xbdc>)
 800871c:	2a00      	cmp	r2, #0
 800871e:	d001      	beq.n	8008724 <_dtoa_r+0xb94>
 8008720:	f7ff fa7e 	bl	8007c20 <_dtoa_r+0x90>
 8008724:	f7ff fa7e 	bl	8007c24 <_dtoa_r+0x94>
 8008728:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800872a:	2b01      	cmp	r3, #1
 800872c:	dc00      	bgt.n	8008730 <_dtoa_r+0xba0>
 800872e:	e648      	b.n	80083c2 <_dtoa_r+0x832>
 8008730:	2001      	movs	r0, #1
 8008732:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8008734:	e665      	b.n	8008402 <_dtoa_r+0x872>
 8008736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008738:	2b00      	cmp	r3, #0
 800873a:	dc00      	bgt.n	800873e <_dtoa_r+0xbae>
 800873c:	e6a9      	b.n	8008492 <_dtoa_r+0x902>
 800873e:	2400      	movs	r4, #0
 8008740:	0031      	movs	r1, r6
 8008742:	9805      	ldr	r0, [sp, #20]
 8008744:	f7ff f99e 	bl	8007a84 <quorem>
 8008748:	9b08      	ldr	r3, [sp, #32]
 800874a:	3030      	adds	r0, #48	@ 0x30
 800874c:	5518      	strb	r0, [r3, r4]
 800874e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008750:	3401      	adds	r4, #1
 8008752:	0005      	movs	r5, r0
 8008754:	42a3      	cmp	r3, r4
 8008756:	ddb6      	ble.n	80086c6 <_dtoa_r+0xb36>
 8008758:	2300      	movs	r3, #0
 800875a:	220a      	movs	r2, #10
 800875c:	9905      	ldr	r1, [sp, #20]
 800875e:	9803      	ldr	r0, [sp, #12]
 8008760:	f000 f974 	bl	8008a4c <__multadd>
 8008764:	9005      	str	r0, [sp, #20]
 8008766:	e7eb      	b.n	8008740 <_dtoa_r+0xbb0>
 8008768:	0800b4c5 	.word	0x0800b4c5
 800876c:	0800b4cd 	.word	0x0800b4cd

08008770 <_free_r>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	0005      	movs	r5, r0
 8008774:	1e0c      	subs	r4, r1, #0
 8008776:	d010      	beq.n	800879a <_free_r+0x2a>
 8008778:	3c04      	subs	r4, #4
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	2b00      	cmp	r3, #0
 800877e:	da00      	bge.n	8008782 <_free_r+0x12>
 8008780:	18e4      	adds	r4, r4, r3
 8008782:	0028      	movs	r0, r5
 8008784:	f000 f8ea 	bl	800895c <__malloc_lock>
 8008788:	4a1d      	ldr	r2, [pc, #116]	@ (8008800 <_free_r+0x90>)
 800878a:	6813      	ldr	r3, [r2, #0]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d105      	bne.n	800879c <_free_r+0x2c>
 8008790:	6063      	str	r3, [r4, #4]
 8008792:	6014      	str	r4, [r2, #0]
 8008794:	0028      	movs	r0, r5
 8008796:	f000 f8e9 	bl	800896c <__malloc_unlock>
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	42a3      	cmp	r3, r4
 800879e:	d908      	bls.n	80087b2 <_free_r+0x42>
 80087a0:	6820      	ldr	r0, [r4, #0]
 80087a2:	1821      	adds	r1, r4, r0
 80087a4:	428b      	cmp	r3, r1
 80087a6:	d1f3      	bne.n	8008790 <_free_r+0x20>
 80087a8:	6819      	ldr	r1, [r3, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	1809      	adds	r1, r1, r0
 80087ae:	6021      	str	r1, [r4, #0]
 80087b0:	e7ee      	b.n	8008790 <_free_r+0x20>
 80087b2:	001a      	movs	r2, r3
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <_free_r+0x4e>
 80087ba:	42a3      	cmp	r3, r4
 80087bc:	d9f9      	bls.n	80087b2 <_free_r+0x42>
 80087be:	6811      	ldr	r1, [r2, #0]
 80087c0:	1850      	adds	r0, r2, r1
 80087c2:	42a0      	cmp	r0, r4
 80087c4:	d10b      	bne.n	80087de <_free_r+0x6e>
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	1809      	adds	r1, r1, r0
 80087ca:	1850      	adds	r0, r2, r1
 80087cc:	6011      	str	r1, [r2, #0]
 80087ce:	4283      	cmp	r3, r0
 80087d0:	d1e0      	bne.n	8008794 <_free_r+0x24>
 80087d2:	6818      	ldr	r0, [r3, #0]
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	1841      	adds	r1, r0, r1
 80087d8:	6011      	str	r1, [r2, #0]
 80087da:	6053      	str	r3, [r2, #4]
 80087dc:	e7da      	b.n	8008794 <_free_r+0x24>
 80087de:	42a0      	cmp	r0, r4
 80087e0:	d902      	bls.n	80087e8 <_free_r+0x78>
 80087e2:	230c      	movs	r3, #12
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	e7d5      	b.n	8008794 <_free_r+0x24>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	1821      	adds	r1, r4, r0
 80087ec:	428b      	cmp	r3, r1
 80087ee:	d103      	bne.n	80087f8 <_free_r+0x88>
 80087f0:	6819      	ldr	r1, [r3, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	1809      	adds	r1, r1, r0
 80087f6:	6021      	str	r1, [r4, #0]
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	6054      	str	r4, [r2, #4]
 80087fc:	e7ca      	b.n	8008794 <_free_r+0x24>
 80087fe:	46c0      	nop			@ (mov r8, r8)
 8008800:	200004e4 	.word	0x200004e4

08008804 <malloc>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4b03      	ldr	r3, [pc, #12]	@ (8008814 <malloc+0x10>)
 8008808:	0001      	movs	r1, r0
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	f000 f826 	bl	800885c <_malloc_r>
 8008810:	bd10      	pop	{r4, pc}
 8008812:	46c0      	nop			@ (mov r8, r8)
 8008814:	20000018 	.word	0x20000018

08008818 <sbrk_aligned>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	4e0f      	ldr	r6, [pc, #60]	@ (8008858 <sbrk_aligned+0x40>)
 800881c:	000d      	movs	r5, r1
 800881e:	6831      	ldr	r1, [r6, #0]
 8008820:	0004      	movs	r4, r0
 8008822:	2900      	cmp	r1, #0
 8008824:	d102      	bne.n	800882c <sbrk_aligned+0x14>
 8008826:	f002 f81d 	bl	800a864 <_sbrk_r>
 800882a:	6030      	str	r0, [r6, #0]
 800882c:	0029      	movs	r1, r5
 800882e:	0020      	movs	r0, r4
 8008830:	f002 f818 	bl	800a864 <_sbrk_r>
 8008834:	1c43      	adds	r3, r0, #1
 8008836:	d103      	bne.n	8008840 <sbrk_aligned+0x28>
 8008838:	2501      	movs	r5, #1
 800883a:	426d      	negs	r5, r5
 800883c:	0028      	movs	r0, r5
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	2303      	movs	r3, #3
 8008842:	1cc5      	adds	r5, r0, #3
 8008844:	439d      	bics	r5, r3
 8008846:	42a8      	cmp	r0, r5
 8008848:	d0f8      	beq.n	800883c <sbrk_aligned+0x24>
 800884a:	1a29      	subs	r1, r5, r0
 800884c:	0020      	movs	r0, r4
 800884e:	f002 f809 	bl	800a864 <_sbrk_r>
 8008852:	3001      	adds	r0, #1
 8008854:	d1f2      	bne.n	800883c <sbrk_aligned+0x24>
 8008856:	e7ef      	b.n	8008838 <sbrk_aligned+0x20>
 8008858:	200004e0 	.word	0x200004e0

0800885c <_malloc_r>:
 800885c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800885e:	2203      	movs	r2, #3
 8008860:	1ccb      	adds	r3, r1, #3
 8008862:	4393      	bics	r3, r2
 8008864:	3308      	adds	r3, #8
 8008866:	0005      	movs	r5, r0
 8008868:	001f      	movs	r7, r3
 800886a:	2b0c      	cmp	r3, #12
 800886c:	d234      	bcs.n	80088d8 <_malloc_r+0x7c>
 800886e:	270c      	movs	r7, #12
 8008870:	42b9      	cmp	r1, r7
 8008872:	d833      	bhi.n	80088dc <_malloc_r+0x80>
 8008874:	0028      	movs	r0, r5
 8008876:	f000 f871 	bl	800895c <__malloc_lock>
 800887a:	4e37      	ldr	r6, [pc, #220]	@ (8008958 <_malloc_r+0xfc>)
 800887c:	6833      	ldr	r3, [r6, #0]
 800887e:	001c      	movs	r4, r3
 8008880:	2c00      	cmp	r4, #0
 8008882:	d12f      	bne.n	80088e4 <_malloc_r+0x88>
 8008884:	0039      	movs	r1, r7
 8008886:	0028      	movs	r0, r5
 8008888:	f7ff ffc6 	bl	8008818 <sbrk_aligned>
 800888c:	0004      	movs	r4, r0
 800888e:	1c43      	adds	r3, r0, #1
 8008890:	d15f      	bne.n	8008952 <_malloc_r+0xf6>
 8008892:	6834      	ldr	r4, [r6, #0]
 8008894:	9400      	str	r4, [sp, #0]
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d14a      	bne.n	8008932 <_malloc_r+0xd6>
 800889c:	2c00      	cmp	r4, #0
 800889e:	d052      	beq.n	8008946 <_malloc_r+0xea>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	0028      	movs	r0, r5
 80088a4:	18e3      	adds	r3, r4, r3
 80088a6:	9900      	ldr	r1, [sp, #0]
 80088a8:	9301      	str	r3, [sp, #4]
 80088aa:	f001 ffdb 	bl	800a864 <_sbrk_r>
 80088ae:	9b01      	ldr	r3, [sp, #4]
 80088b0:	4283      	cmp	r3, r0
 80088b2:	d148      	bne.n	8008946 <_malloc_r+0xea>
 80088b4:	6823      	ldr	r3, [r4, #0]
 80088b6:	0028      	movs	r0, r5
 80088b8:	1aff      	subs	r7, r7, r3
 80088ba:	0039      	movs	r1, r7
 80088bc:	f7ff ffac 	bl	8008818 <sbrk_aligned>
 80088c0:	3001      	adds	r0, #1
 80088c2:	d040      	beq.n	8008946 <_malloc_r+0xea>
 80088c4:	6823      	ldr	r3, [r4, #0]
 80088c6:	19db      	adds	r3, r3, r7
 80088c8:	6023      	str	r3, [r4, #0]
 80088ca:	6833      	ldr	r3, [r6, #0]
 80088cc:	685a      	ldr	r2, [r3, #4]
 80088ce:	2a00      	cmp	r2, #0
 80088d0:	d133      	bne.n	800893a <_malloc_r+0xde>
 80088d2:	9b00      	ldr	r3, [sp, #0]
 80088d4:	6033      	str	r3, [r6, #0]
 80088d6:	e019      	b.n	800890c <_malloc_r+0xb0>
 80088d8:	2b00      	cmp	r3, #0
 80088da:	dac9      	bge.n	8008870 <_malloc_r+0x14>
 80088dc:	230c      	movs	r3, #12
 80088de:	602b      	str	r3, [r5, #0]
 80088e0:	2000      	movs	r0, #0
 80088e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80088e4:	6821      	ldr	r1, [r4, #0]
 80088e6:	1bc9      	subs	r1, r1, r7
 80088e8:	d420      	bmi.n	800892c <_malloc_r+0xd0>
 80088ea:	290b      	cmp	r1, #11
 80088ec:	d90a      	bls.n	8008904 <_malloc_r+0xa8>
 80088ee:	19e2      	adds	r2, r4, r7
 80088f0:	6027      	str	r7, [r4, #0]
 80088f2:	42a3      	cmp	r3, r4
 80088f4:	d104      	bne.n	8008900 <_malloc_r+0xa4>
 80088f6:	6032      	str	r2, [r6, #0]
 80088f8:	6863      	ldr	r3, [r4, #4]
 80088fa:	6011      	str	r1, [r2, #0]
 80088fc:	6053      	str	r3, [r2, #4]
 80088fe:	e005      	b.n	800890c <_malloc_r+0xb0>
 8008900:	605a      	str	r2, [r3, #4]
 8008902:	e7f9      	b.n	80088f8 <_malloc_r+0x9c>
 8008904:	6862      	ldr	r2, [r4, #4]
 8008906:	42a3      	cmp	r3, r4
 8008908:	d10e      	bne.n	8008928 <_malloc_r+0xcc>
 800890a:	6032      	str	r2, [r6, #0]
 800890c:	0028      	movs	r0, r5
 800890e:	f000 f82d 	bl	800896c <__malloc_unlock>
 8008912:	0020      	movs	r0, r4
 8008914:	2207      	movs	r2, #7
 8008916:	300b      	adds	r0, #11
 8008918:	1d23      	adds	r3, r4, #4
 800891a:	4390      	bics	r0, r2
 800891c:	1ac2      	subs	r2, r0, r3
 800891e:	4298      	cmp	r0, r3
 8008920:	d0df      	beq.n	80088e2 <_malloc_r+0x86>
 8008922:	1a1b      	subs	r3, r3, r0
 8008924:	50a3      	str	r3, [r4, r2]
 8008926:	e7dc      	b.n	80088e2 <_malloc_r+0x86>
 8008928:	605a      	str	r2, [r3, #4]
 800892a:	e7ef      	b.n	800890c <_malloc_r+0xb0>
 800892c:	0023      	movs	r3, r4
 800892e:	6864      	ldr	r4, [r4, #4]
 8008930:	e7a6      	b.n	8008880 <_malloc_r+0x24>
 8008932:	9c00      	ldr	r4, [sp, #0]
 8008934:	6863      	ldr	r3, [r4, #4]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	e7ad      	b.n	8008896 <_malloc_r+0x3a>
 800893a:	001a      	movs	r2, r3
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	42a3      	cmp	r3, r4
 8008940:	d1fb      	bne.n	800893a <_malloc_r+0xde>
 8008942:	2300      	movs	r3, #0
 8008944:	e7da      	b.n	80088fc <_malloc_r+0xa0>
 8008946:	230c      	movs	r3, #12
 8008948:	0028      	movs	r0, r5
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f000 f80e 	bl	800896c <__malloc_unlock>
 8008950:	e7c6      	b.n	80088e0 <_malloc_r+0x84>
 8008952:	6007      	str	r7, [r0, #0]
 8008954:	e7da      	b.n	800890c <_malloc_r+0xb0>
 8008956:	46c0      	nop			@ (mov r8, r8)
 8008958:	200004e4 	.word	0x200004e4

0800895c <__malloc_lock>:
 800895c:	b510      	push	{r4, lr}
 800895e:	4802      	ldr	r0, [pc, #8]	@ (8008968 <__malloc_lock+0xc>)
 8008960:	f7ff f875 	bl	8007a4e <__retarget_lock_acquire_recursive>
 8008964:	bd10      	pop	{r4, pc}
 8008966:	46c0      	nop			@ (mov r8, r8)
 8008968:	200004dc 	.word	0x200004dc

0800896c <__malloc_unlock>:
 800896c:	b510      	push	{r4, lr}
 800896e:	4802      	ldr	r0, [pc, #8]	@ (8008978 <__malloc_unlock+0xc>)
 8008970:	f7ff f86e 	bl	8007a50 <__retarget_lock_release_recursive>
 8008974:	bd10      	pop	{r4, pc}
 8008976:	46c0      	nop			@ (mov r8, r8)
 8008978:	200004dc 	.word	0x200004dc

0800897c <_Balloc>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	69c5      	ldr	r5, [r0, #28]
 8008980:	0006      	movs	r6, r0
 8008982:	000c      	movs	r4, r1
 8008984:	2d00      	cmp	r5, #0
 8008986:	d10e      	bne.n	80089a6 <_Balloc+0x2a>
 8008988:	2010      	movs	r0, #16
 800898a:	f7ff ff3b 	bl	8008804 <malloc>
 800898e:	1e02      	subs	r2, r0, #0
 8008990:	61f0      	str	r0, [r6, #28]
 8008992:	d104      	bne.n	800899e <_Balloc+0x22>
 8008994:	216b      	movs	r1, #107	@ 0x6b
 8008996:	4b19      	ldr	r3, [pc, #100]	@ (80089fc <_Balloc+0x80>)
 8008998:	4819      	ldr	r0, [pc, #100]	@ (8008a00 <_Balloc+0x84>)
 800899a:	f001 ff7b 	bl	800a894 <__assert_func>
 800899e:	6045      	str	r5, [r0, #4]
 80089a0:	6085      	str	r5, [r0, #8]
 80089a2:	6005      	str	r5, [r0, #0]
 80089a4:	60c5      	str	r5, [r0, #12]
 80089a6:	69f5      	ldr	r5, [r6, #28]
 80089a8:	68eb      	ldr	r3, [r5, #12]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d013      	beq.n	80089d6 <_Balloc+0x5a>
 80089ae:	69f3      	ldr	r3, [r6, #28]
 80089b0:	00a2      	lsls	r2, r4, #2
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	189b      	adds	r3, r3, r2
 80089b6:	6818      	ldr	r0, [r3, #0]
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d118      	bne.n	80089ee <_Balloc+0x72>
 80089bc:	2101      	movs	r1, #1
 80089be:	000d      	movs	r5, r1
 80089c0:	40a5      	lsls	r5, r4
 80089c2:	1d6a      	adds	r2, r5, #5
 80089c4:	0030      	movs	r0, r6
 80089c6:	0092      	lsls	r2, r2, #2
 80089c8:	f001 ff82 	bl	800a8d0 <_calloc_r>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d00c      	beq.n	80089ea <_Balloc+0x6e>
 80089d0:	6044      	str	r4, [r0, #4]
 80089d2:	6085      	str	r5, [r0, #8]
 80089d4:	e00d      	b.n	80089f2 <_Balloc+0x76>
 80089d6:	2221      	movs	r2, #33	@ 0x21
 80089d8:	2104      	movs	r1, #4
 80089da:	0030      	movs	r0, r6
 80089dc:	f001 ff78 	bl	800a8d0 <_calloc_r>
 80089e0:	69f3      	ldr	r3, [r6, #28]
 80089e2:	60e8      	str	r0, [r5, #12]
 80089e4:	68db      	ldr	r3, [r3, #12]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d1e1      	bne.n	80089ae <_Balloc+0x32>
 80089ea:	2000      	movs	r0, #0
 80089ec:	bd70      	pop	{r4, r5, r6, pc}
 80089ee:	6802      	ldr	r2, [r0, #0]
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	2300      	movs	r3, #0
 80089f4:	6103      	str	r3, [r0, #16]
 80089f6:	60c3      	str	r3, [r0, #12]
 80089f8:	e7f8      	b.n	80089ec <_Balloc+0x70>
 80089fa:	46c0      	nop			@ (mov r8, r8)
 80089fc:	0800b4d2 	.word	0x0800b4d2
 8008a00:	0800b552 	.word	0x0800b552

08008a04 <_Bfree>:
 8008a04:	b570      	push	{r4, r5, r6, lr}
 8008a06:	69c6      	ldr	r6, [r0, #28]
 8008a08:	0005      	movs	r5, r0
 8008a0a:	000c      	movs	r4, r1
 8008a0c:	2e00      	cmp	r6, #0
 8008a0e:	d10e      	bne.n	8008a2e <_Bfree+0x2a>
 8008a10:	2010      	movs	r0, #16
 8008a12:	f7ff fef7 	bl	8008804 <malloc>
 8008a16:	1e02      	subs	r2, r0, #0
 8008a18:	61e8      	str	r0, [r5, #28]
 8008a1a:	d104      	bne.n	8008a26 <_Bfree+0x22>
 8008a1c:	218f      	movs	r1, #143	@ 0x8f
 8008a1e:	4b09      	ldr	r3, [pc, #36]	@ (8008a44 <_Bfree+0x40>)
 8008a20:	4809      	ldr	r0, [pc, #36]	@ (8008a48 <_Bfree+0x44>)
 8008a22:	f001 ff37 	bl	800a894 <__assert_func>
 8008a26:	6046      	str	r6, [r0, #4]
 8008a28:	6086      	str	r6, [r0, #8]
 8008a2a:	6006      	str	r6, [r0, #0]
 8008a2c:	60c6      	str	r6, [r0, #12]
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	d007      	beq.n	8008a42 <_Bfree+0x3e>
 8008a32:	69eb      	ldr	r3, [r5, #28]
 8008a34:	6862      	ldr	r2, [r4, #4]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	0092      	lsls	r2, r2, #2
 8008a3a:	189b      	adds	r3, r3, r2
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	6022      	str	r2, [r4, #0]
 8008a40:	601c      	str	r4, [r3, #0]
 8008a42:	bd70      	pop	{r4, r5, r6, pc}
 8008a44:	0800b4d2 	.word	0x0800b4d2
 8008a48:	0800b552 	.word	0x0800b552

08008a4c <__multadd>:
 8008a4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a4e:	000f      	movs	r7, r1
 8008a50:	9001      	str	r0, [sp, #4]
 8008a52:	000c      	movs	r4, r1
 8008a54:	001e      	movs	r6, r3
 8008a56:	2000      	movs	r0, #0
 8008a58:	690d      	ldr	r5, [r1, #16]
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	3001      	adds	r0, #1
 8008a60:	b299      	uxth	r1, r3
 8008a62:	4351      	muls	r1, r2
 8008a64:	0c1b      	lsrs	r3, r3, #16
 8008a66:	4353      	muls	r3, r2
 8008a68:	1989      	adds	r1, r1, r6
 8008a6a:	0c0e      	lsrs	r6, r1, #16
 8008a6c:	199b      	adds	r3, r3, r6
 8008a6e:	0c1e      	lsrs	r6, r3, #16
 8008a70:	b289      	uxth	r1, r1
 8008a72:	041b      	lsls	r3, r3, #16
 8008a74:	185b      	adds	r3, r3, r1
 8008a76:	c708      	stmia	r7!, {r3}
 8008a78:	4285      	cmp	r5, r0
 8008a7a:	dcef      	bgt.n	8008a5c <__multadd+0x10>
 8008a7c:	2e00      	cmp	r6, #0
 8008a7e:	d022      	beq.n	8008ac6 <__multadd+0x7a>
 8008a80:	68a3      	ldr	r3, [r4, #8]
 8008a82:	42ab      	cmp	r3, r5
 8008a84:	dc19      	bgt.n	8008aba <__multadd+0x6e>
 8008a86:	6861      	ldr	r1, [r4, #4]
 8008a88:	9801      	ldr	r0, [sp, #4]
 8008a8a:	3101      	adds	r1, #1
 8008a8c:	f7ff ff76 	bl	800897c <_Balloc>
 8008a90:	1e07      	subs	r7, r0, #0
 8008a92:	d105      	bne.n	8008aa0 <__multadd+0x54>
 8008a94:	003a      	movs	r2, r7
 8008a96:	21ba      	movs	r1, #186	@ 0xba
 8008a98:	4b0c      	ldr	r3, [pc, #48]	@ (8008acc <__multadd+0x80>)
 8008a9a:	480d      	ldr	r0, [pc, #52]	@ (8008ad0 <__multadd+0x84>)
 8008a9c:	f001 fefa 	bl	800a894 <__assert_func>
 8008aa0:	0021      	movs	r1, r4
 8008aa2:	6922      	ldr	r2, [r4, #16]
 8008aa4:	310c      	adds	r1, #12
 8008aa6:	3202      	adds	r2, #2
 8008aa8:	0092      	lsls	r2, r2, #2
 8008aaa:	300c      	adds	r0, #12
 8008aac:	f7fe ffdc 	bl	8007a68 <memcpy>
 8008ab0:	0021      	movs	r1, r4
 8008ab2:	9801      	ldr	r0, [sp, #4]
 8008ab4:	f7ff ffa6 	bl	8008a04 <_Bfree>
 8008ab8:	003c      	movs	r4, r7
 8008aba:	1d2b      	adds	r3, r5, #4
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	18e3      	adds	r3, r4, r3
 8008ac0:	3501      	adds	r5, #1
 8008ac2:	605e      	str	r6, [r3, #4]
 8008ac4:	6125      	str	r5, [r4, #16]
 8008ac6:	0020      	movs	r0, r4
 8008ac8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008aca:	46c0      	nop			@ (mov r8, r8)
 8008acc:	0800b541 	.word	0x0800b541
 8008ad0:	0800b552 	.word	0x0800b552

08008ad4 <__s2b>:
 8008ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ad6:	0007      	movs	r7, r0
 8008ad8:	0018      	movs	r0, r3
 8008ada:	000c      	movs	r4, r1
 8008adc:	3008      	adds	r0, #8
 8008ade:	2109      	movs	r1, #9
 8008ae0:	9301      	str	r3, [sp, #4]
 8008ae2:	0015      	movs	r5, r2
 8008ae4:	f7f7 fbb6 	bl	8000254 <__divsi3>
 8008ae8:	2301      	movs	r3, #1
 8008aea:	2100      	movs	r1, #0
 8008aec:	4283      	cmp	r3, r0
 8008aee:	db0a      	blt.n	8008b06 <__s2b+0x32>
 8008af0:	0038      	movs	r0, r7
 8008af2:	f7ff ff43 	bl	800897c <_Balloc>
 8008af6:	1e01      	subs	r1, r0, #0
 8008af8:	d108      	bne.n	8008b0c <__s2b+0x38>
 8008afa:	000a      	movs	r2, r1
 8008afc:	4b19      	ldr	r3, [pc, #100]	@ (8008b64 <__s2b+0x90>)
 8008afe:	481a      	ldr	r0, [pc, #104]	@ (8008b68 <__s2b+0x94>)
 8008b00:	31d3      	adds	r1, #211	@ 0xd3
 8008b02:	f001 fec7 	bl	800a894 <__assert_func>
 8008b06:	005b      	lsls	r3, r3, #1
 8008b08:	3101      	adds	r1, #1
 8008b0a:	e7ef      	b.n	8008aec <__s2b+0x18>
 8008b0c:	9b08      	ldr	r3, [sp, #32]
 8008b0e:	6143      	str	r3, [r0, #20]
 8008b10:	2301      	movs	r3, #1
 8008b12:	6103      	str	r3, [r0, #16]
 8008b14:	2d09      	cmp	r5, #9
 8008b16:	dd18      	ble.n	8008b4a <__s2b+0x76>
 8008b18:	0023      	movs	r3, r4
 8008b1a:	3309      	adds	r3, #9
 8008b1c:	001e      	movs	r6, r3
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	1964      	adds	r4, r4, r5
 8008b22:	7833      	ldrb	r3, [r6, #0]
 8008b24:	220a      	movs	r2, #10
 8008b26:	0038      	movs	r0, r7
 8008b28:	3b30      	subs	r3, #48	@ 0x30
 8008b2a:	f7ff ff8f 	bl	8008a4c <__multadd>
 8008b2e:	3601      	adds	r6, #1
 8008b30:	0001      	movs	r1, r0
 8008b32:	42a6      	cmp	r6, r4
 8008b34:	d1f5      	bne.n	8008b22 <__s2b+0x4e>
 8008b36:	002c      	movs	r4, r5
 8008b38:	9b00      	ldr	r3, [sp, #0]
 8008b3a:	3c08      	subs	r4, #8
 8008b3c:	191c      	adds	r4, r3, r4
 8008b3e:	002e      	movs	r6, r5
 8008b40:	9b01      	ldr	r3, [sp, #4]
 8008b42:	429e      	cmp	r6, r3
 8008b44:	db04      	blt.n	8008b50 <__s2b+0x7c>
 8008b46:	0008      	movs	r0, r1
 8008b48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008b4a:	2509      	movs	r5, #9
 8008b4c:	340a      	adds	r4, #10
 8008b4e:	e7f6      	b.n	8008b3e <__s2b+0x6a>
 8008b50:	1b63      	subs	r3, r4, r5
 8008b52:	5d9b      	ldrb	r3, [r3, r6]
 8008b54:	220a      	movs	r2, #10
 8008b56:	0038      	movs	r0, r7
 8008b58:	3b30      	subs	r3, #48	@ 0x30
 8008b5a:	f7ff ff77 	bl	8008a4c <__multadd>
 8008b5e:	3601      	adds	r6, #1
 8008b60:	0001      	movs	r1, r0
 8008b62:	e7ed      	b.n	8008b40 <__s2b+0x6c>
 8008b64:	0800b541 	.word	0x0800b541
 8008b68:	0800b552 	.word	0x0800b552

08008b6c <__hi0bits>:
 8008b6c:	2280      	movs	r2, #128	@ 0x80
 8008b6e:	0003      	movs	r3, r0
 8008b70:	0252      	lsls	r2, r2, #9
 8008b72:	2000      	movs	r0, #0
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d201      	bcs.n	8008b7c <__hi0bits+0x10>
 8008b78:	041b      	lsls	r3, r3, #16
 8008b7a:	3010      	adds	r0, #16
 8008b7c:	2280      	movs	r2, #128	@ 0x80
 8008b7e:	0452      	lsls	r2, r2, #17
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d201      	bcs.n	8008b88 <__hi0bits+0x1c>
 8008b84:	3008      	adds	r0, #8
 8008b86:	021b      	lsls	r3, r3, #8
 8008b88:	2280      	movs	r2, #128	@ 0x80
 8008b8a:	0552      	lsls	r2, r2, #21
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d201      	bcs.n	8008b94 <__hi0bits+0x28>
 8008b90:	3004      	adds	r0, #4
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	2280      	movs	r2, #128	@ 0x80
 8008b96:	05d2      	lsls	r2, r2, #23
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d201      	bcs.n	8008ba0 <__hi0bits+0x34>
 8008b9c:	3002      	adds	r0, #2
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	db03      	blt.n	8008bac <__hi0bits+0x40>
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	4213      	tst	r3, r2
 8008ba8:	d100      	bne.n	8008bac <__hi0bits+0x40>
 8008baa:	2020      	movs	r0, #32
 8008bac:	4770      	bx	lr

08008bae <__lo0bits>:
 8008bae:	6803      	ldr	r3, [r0, #0]
 8008bb0:	0001      	movs	r1, r0
 8008bb2:	2207      	movs	r2, #7
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	4010      	ands	r0, r2
 8008bb8:	4213      	tst	r3, r2
 8008bba:	d00d      	beq.n	8008bd8 <__lo0bits+0x2a>
 8008bbc:	3a06      	subs	r2, #6
 8008bbe:	2000      	movs	r0, #0
 8008bc0:	4213      	tst	r3, r2
 8008bc2:	d105      	bne.n	8008bd0 <__lo0bits+0x22>
 8008bc4:	3002      	adds	r0, #2
 8008bc6:	4203      	tst	r3, r0
 8008bc8:	d003      	beq.n	8008bd2 <__lo0bits+0x24>
 8008bca:	40d3      	lsrs	r3, r2
 8008bcc:	0010      	movs	r0, r2
 8008bce:	600b      	str	r3, [r1, #0]
 8008bd0:	4770      	bx	lr
 8008bd2:	089b      	lsrs	r3, r3, #2
 8008bd4:	600b      	str	r3, [r1, #0]
 8008bd6:	e7fb      	b.n	8008bd0 <__lo0bits+0x22>
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	2a00      	cmp	r2, #0
 8008bdc:	d101      	bne.n	8008be2 <__lo0bits+0x34>
 8008bde:	2010      	movs	r0, #16
 8008be0:	0c1b      	lsrs	r3, r3, #16
 8008be2:	b2da      	uxtb	r2, r3
 8008be4:	2a00      	cmp	r2, #0
 8008be6:	d101      	bne.n	8008bec <__lo0bits+0x3e>
 8008be8:	3008      	adds	r0, #8
 8008bea:	0a1b      	lsrs	r3, r3, #8
 8008bec:	071a      	lsls	r2, r3, #28
 8008bee:	d101      	bne.n	8008bf4 <__lo0bits+0x46>
 8008bf0:	3004      	adds	r0, #4
 8008bf2:	091b      	lsrs	r3, r3, #4
 8008bf4:	079a      	lsls	r2, r3, #30
 8008bf6:	d101      	bne.n	8008bfc <__lo0bits+0x4e>
 8008bf8:	3002      	adds	r0, #2
 8008bfa:	089b      	lsrs	r3, r3, #2
 8008bfc:	07da      	lsls	r2, r3, #31
 8008bfe:	d4e9      	bmi.n	8008bd4 <__lo0bits+0x26>
 8008c00:	3001      	adds	r0, #1
 8008c02:	085b      	lsrs	r3, r3, #1
 8008c04:	d1e6      	bne.n	8008bd4 <__lo0bits+0x26>
 8008c06:	2020      	movs	r0, #32
 8008c08:	e7e2      	b.n	8008bd0 <__lo0bits+0x22>
	...

08008c0c <__i2b>:
 8008c0c:	b510      	push	{r4, lr}
 8008c0e:	000c      	movs	r4, r1
 8008c10:	2101      	movs	r1, #1
 8008c12:	f7ff feb3 	bl	800897c <_Balloc>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d107      	bne.n	8008c2a <__i2b+0x1e>
 8008c1a:	2146      	movs	r1, #70	@ 0x46
 8008c1c:	4c05      	ldr	r4, [pc, #20]	@ (8008c34 <__i2b+0x28>)
 8008c1e:	0002      	movs	r2, r0
 8008c20:	4b05      	ldr	r3, [pc, #20]	@ (8008c38 <__i2b+0x2c>)
 8008c22:	0020      	movs	r0, r4
 8008c24:	31ff      	adds	r1, #255	@ 0xff
 8008c26:	f001 fe35 	bl	800a894 <__assert_func>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	6144      	str	r4, [r0, #20]
 8008c2e:	6103      	str	r3, [r0, #16]
 8008c30:	bd10      	pop	{r4, pc}
 8008c32:	46c0      	nop			@ (mov r8, r8)
 8008c34:	0800b552 	.word	0x0800b552
 8008c38:	0800b541 	.word	0x0800b541

08008c3c <__multiply>:
 8008c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c3e:	0014      	movs	r4, r2
 8008c40:	690a      	ldr	r2, [r1, #16]
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	000d      	movs	r5, r1
 8008c46:	b089      	sub	sp, #36	@ 0x24
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	db02      	blt.n	8008c52 <__multiply+0x16>
 8008c4c:	0023      	movs	r3, r4
 8008c4e:	000c      	movs	r4, r1
 8008c50:	001d      	movs	r5, r3
 8008c52:	6927      	ldr	r7, [r4, #16]
 8008c54:	692e      	ldr	r6, [r5, #16]
 8008c56:	6861      	ldr	r1, [r4, #4]
 8008c58:	19bb      	adds	r3, r7, r6
 8008c5a:	9300      	str	r3, [sp, #0]
 8008c5c:	68a3      	ldr	r3, [r4, #8]
 8008c5e:	19ba      	adds	r2, r7, r6
 8008c60:	4293      	cmp	r3, r2
 8008c62:	da00      	bge.n	8008c66 <__multiply+0x2a>
 8008c64:	3101      	adds	r1, #1
 8008c66:	f7ff fe89 	bl	800897c <_Balloc>
 8008c6a:	4684      	mov	ip, r0
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	d106      	bne.n	8008c7e <__multiply+0x42>
 8008c70:	21b1      	movs	r1, #177	@ 0xb1
 8008c72:	4662      	mov	r2, ip
 8008c74:	4b44      	ldr	r3, [pc, #272]	@ (8008d88 <__multiply+0x14c>)
 8008c76:	4845      	ldr	r0, [pc, #276]	@ (8008d8c <__multiply+0x150>)
 8008c78:	0049      	lsls	r1, r1, #1
 8008c7a:	f001 fe0b 	bl	800a894 <__assert_func>
 8008c7e:	0002      	movs	r2, r0
 8008c80:	19bb      	adds	r3, r7, r6
 8008c82:	3214      	adds	r2, #20
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	18d3      	adds	r3, r2, r3
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	2100      	movs	r1, #0
 8008c8c:	0013      	movs	r3, r2
 8008c8e:	9801      	ldr	r0, [sp, #4]
 8008c90:	4283      	cmp	r3, r0
 8008c92:	d328      	bcc.n	8008ce6 <__multiply+0xaa>
 8008c94:	0023      	movs	r3, r4
 8008c96:	00bf      	lsls	r7, r7, #2
 8008c98:	3314      	adds	r3, #20
 8008c9a:	9304      	str	r3, [sp, #16]
 8008c9c:	3514      	adds	r5, #20
 8008c9e:	19db      	adds	r3, r3, r7
 8008ca0:	00b6      	lsls	r6, r6, #2
 8008ca2:	9302      	str	r3, [sp, #8]
 8008ca4:	19ab      	adds	r3, r5, r6
 8008ca6:	9307      	str	r3, [sp, #28]
 8008ca8:	2304      	movs	r3, #4
 8008caa:	9305      	str	r3, [sp, #20]
 8008cac:	0023      	movs	r3, r4
 8008cae:	9902      	ldr	r1, [sp, #8]
 8008cb0:	3315      	adds	r3, #21
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	d305      	bcc.n	8008cc2 <__multiply+0x86>
 8008cb6:	1b0c      	subs	r4, r1, r4
 8008cb8:	3c15      	subs	r4, #21
 8008cba:	08a4      	lsrs	r4, r4, #2
 8008cbc:	3401      	adds	r4, #1
 8008cbe:	00a3      	lsls	r3, r4, #2
 8008cc0:	9305      	str	r3, [sp, #20]
 8008cc2:	9b07      	ldr	r3, [sp, #28]
 8008cc4:	429d      	cmp	r5, r3
 8008cc6:	d310      	bcc.n	8008cea <__multiply+0xae>
 8008cc8:	9b00      	ldr	r3, [sp, #0]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dd05      	ble.n	8008cda <__multiply+0x9e>
 8008cce:	9b01      	ldr	r3, [sp, #4]
 8008cd0:	3b04      	subs	r3, #4
 8008cd2:	9301      	str	r3, [sp, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d052      	beq.n	8008d80 <__multiply+0x144>
 8008cda:	4663      	mov	r3, ip
 8008cdc:	4660      	mov	r0, ip
 8008cde:	9a00      	ldr	r2, [sp, #0]
 8008ce0:	611a      	str	r2, [r3, #16]
 8008ce2:	b009      	add	sp, #36	@ 0x24
 8008ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ce6:	c302      	stmia	r3!, {r1}
 8008ce8:	e7d1      	b.n	8008c8e <__multiply+0x52>
 8008cea:	682c      	ldr	r4, [r5, #0]
 8008cec:	b2a4      	uxth	r4, r4
 8008cee:	2c00      	cmp	r4, #0
 8008cf0:	d01f      	beq.n	8008d32 <__multiply+0xf6>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	0017      	movs	r7, r2
 8008cf6:	9e04      	ldr	r6, [sp, #16]
 8008cf8:	9303      	str	r3, [sp, #12]
 8008cfa:	ce08      	ldmia	r6!, {r3}
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	9306      	str	r3, [sp, #24]
 8008d00:	466b      	mov	r3, sp
 8008d02:	8b1b      	ldrh	r3, [r3, #24]
 8008d04:	b288      	uxth	r0, r1
 8008d06:	4363      	muls	r3, r4
 8008d08:	181b      	adds	r3, r3, r0
 8008d0a:	9803      	ldr	r0, [sp, #12]
 8008d0c:	0c09      	lsrs	r1, r1, #16
 8008d0e:	181b      	adds	r3, r3, r0
 8008d10:	9806      	ldr	r0, [sp, #24]
 8008d12:	0c00      	lsrs	r0, r0, #16
 8008d14:	4360      	muls	r0, r4
 8008d16:	1840      	adds	r0, r0, r1
 8008d18:	0c19      	lsrs	r1, r3, #16
 8008d1a:	1841      	adds	r1, r0, r1
 8008d1c:	0c08      	lsrs	r0, r1, #16
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	0409      	lsls	r1, r1, #16
 8008d22:	4319      	orrs	r1, r3
 8008d24:	9b02      	ldr	r3, [sp, #8]
 8008d26:	9003      	str	r0, [sp, #12]
 8008d28:	c702      	stmia	r7!, {r1}
 8008d2a:	42b3      	cmp	r3, r6
 8008d2c:	d8e5      	bhi.n	8008cfa <__multiply+0xbe>
 8008d2e:	9b05      	ldr	r3, [sp, #20]
 8008d30:	50d0      	str	r0, [r2, r3]
 8008d32:	682c      	ldr	r4, [r5, #0]
 8008d34:	0c24      	lsrs	r4, r4, #16
 8008d36:	d020      	beq.n	8008d7a <__multiply+0x13e>
 8008d38:	2100      	movs	r1, #0
 8008d3a:	0010      	movs	r0, r2
 8008d3c:	6813      	ldr	r3, [r2, #0]
 8008d3e:	9e04      	ldr	r6, [sp, #16]
 8008d40:	9103      	str	r1, [sp, #12]
 8008d42:	6831      	ldr	r1, [r6, #0]
 8008d44:	6807      	ldr	r7, [r0, #0]
 8008d46:	b289      	uxth	r1, r1
 8008d48:	4361      	muls	r1, r4
 8008d4a:	0c3f      	lsrs	r7, r7, #16
 8008d4c:	19c9      	adds	r1, r1, r7
 8008d4e:	9f03      	ldr	r7, [sp, #12]
 8008d50:	b29b      	uxth	r3, r3
 8008d52:	19c9      	adds	r1, r1, r7
 8008d54:	040f      	lsls	r7, r1, #16
 8008d56:	431f      	orrs	r7, r3
 8008d58:	6007      	str	r7, [r0, #0]
 8008d5a:	ce80      	ldmia	r6!, {r7}
 8008d5c:	6843      	ldr	r3, [r0, #4]
 8008d5e:	0c3f      	lsrs	r7, r7, #16
 8008d60:	4367      	muls	r7, r4
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	0c09      	lsrs	r1, r1, #16
 8008d66:	18fb      	adds	r3, r7, r3
 8008d68:	185b      	adds	r3, r3, r1
 8008d6a:	0c19      	lsrs	r1, r3, #16
 8008d6c:	9103      	str	r1, [sp, #12]
 8008d6e:	9902      	ldr	r1, [sp, #8]
 8008d70:	3004      	adds	r0, #4
 8008d72:	42b1      	cmp	r1, r6
 8008d74:	d8e5      	bhi.n	8008d42 <__multiply+0x106>
 8008d76:	9905      	ldr	r1, [sp, #20]
 8008d78:	5053      	str	r3, [r2, r1]
 8008d7a:	3504      	adds	r5, #4
 8008d7c:	3204      	adds	r2, #4
 8008d7e:	e7a0      	b.n	8008cc2 <__multiply+0x86>
 8008d80:	9b00      	ldr	r3, [sp, #0]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	9300      	str	r3, [sp, #0]
 8008d86:	e79f      	b.n	8008cc8 <__multiply+0x8c>
 8008d88:	0800b541 	.word	0x0800b541
 8008d8c:	0800b552 	.word	0x0800b552

08008d90 <__pow5mult>:
 8008d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d92:	2303      	movs	r3, #3
 8008d94:	0015      	movs	r5, r2
 8008d96:	0007      	movs	r7, r0
 8008d98:	000e      	movs	r6, r1
 8008d9a:	401a      	ands	r2, r3
 8008d9c:	421d      	tst	r5, r3
 8008d9e:	d008      	beq.n	8008db2 <__pow5mult+0x22>
 8008da0:	4925      	ldr	r1, [pc, #148]	@ (8008e38 <__pow5mult+0xa8>)
 8008da2:	3a01      	subs	r2, #1
 8008da4:	0092      	lsls	r2, r2, #2
 8008da6:	5852      	ldr	r2, [r2, r1]
 8008da8:	2300      	movs	r3, #0
 8008daa:	0031      	movs	r1, r6
 8008dac:	f7ff fe4e 	bl	8008a4c <__multadd>
 8008db0:	0006      	movs	r6, r0
 8008db2:	10ad      	asrs	r5, r5, #2
 8008db4:	d03d      	beq.n	8008e32 <__pow5mult+0xa2>
 8008db6:	69fc      	ldr	r4, [r7, #28]
 8008db8:	2c00      	cmp	r4, #0
 8008dba:	d10f      	bne.n	8008ddc <__pow5mult+0x4c>
 8008dbc:	2010      	movs	r0, #16
 8008dbe:	f7ff fd21 	bl	8008804 <malloc>
 8008dc2:	1e02      	subs	r2, r0, #0
 8008dc4:	61f8      	str	r0, [r7, #28]
 8008dc6:	d105      	bne.n	8008dd4 <__pow5mult+0x44>
 8008dc8:	21b4      	movs	r1, #180	@ 0xb4
 8008dca:	4b1c      	ldr	r3, [pc, #112]	@ (8008e3c <__pow5mult+0xac>)
 8008dcc:	481c      	ldr	r0, [pc, #112]	@ (8008e40 <__pow5mult+0xb0>)
 8008dce:	31ff      	adds	r1, #255	@ 0xff
 8008dd0:	f001 fd60 	bl	800a894 <__assert_func>
 8008dd4:	6044      	str	r4, [r0, #4]
 8008dd6:	6084      	str	r4, [r0, #8]
 8008dd8:	6004      	str	r4, [r0, #0]
 8008dda:	60c4      	str	r4, [r0, #12]
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	689c      	ldr	r4, [r3, #8]
 8008de0:	9301      	str	r3, [sp, #4]
 8008de2:	2c00      	cmp	r4, #0
 8008de4:	d108      	bne.n	8008df8 <__pow5mult+0x68>
 8008de6:	0038      	movs	r0, r7
 8008de8:	4916      	ldr	r1, [pc, #88]	@ (8008e44 <__pow5mult+0xb4>)
 8008dea:	f7ff ff0f 	bl	8008c0c <__i2b>
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	0004      	movs	r4, r0
 8008df2:	6098      	str	r0, [r3, #8]
 8008df4:	2300      	movs	r3, #0
 8008df6:	6003      	str	r3, [r0, #0]
 8008df8:	2301      	movs	r3, #1
 8008dfa:	421d      	tst	r5, r3
 8008dfc:	d00a      	beq.n	8008e14 <__pow5mult+0x84>
 8008dfe:	0031      	movs	r1, r6
 8008e00:	0022      	movs	r2, r4
 8008e02:	0038      	movs	r0, r7
 8008e04:	f7ff ff1a 	bl	8008c3c <__multiply>
 8008e08:	0031      	movs	r1, r6
 8008e0a:	9001      	str	r0, [sp, #4]
 8008e0c:	0038      	movs	r0, r7
 8008e0e:	f7ff fdf9 	bl	8008a04 <_Bfree>
 8008e12:	9e01      	ldr	r6, [sp, #4]
 8008e14:	106d      	asrs	r5, r5, #1
 8008e16:	d00c      	beq.n	8008e32 <__pow5mult+0xa2>
 8008e18:	6820      	ldr	r0, [r4, #0]
 8008e1a:	2800      	cmp	r0, #0
 8008e1c:	d107      	bne.n	8008e2e <__pow5mult+0x9e>
 8008e1e:	0022      	movs	r2, r4
 8008e20:	0021      	movs	r1, r4
 8008e22:	0038      	movs	r0, r7
 8008e24:	f7ff ff0a 	bl	8008c3c <__multiply>
 8008e28:	2300      	movs	r3, #0
 8008e2a:	6020      	str	r0, [r4, #0]
 8008e2c:	6003      	str	r3, [r0, #0]
 8008e2e:	0004      	movs	r4, r0
 8008e30:	e7e2      	b.n	8008df8 <__pow5mult+0x68>
 8008e32:	0030      	movs	r0, r6
 8008e34:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e36:	46c0      	nop			@ (mov r8, r8)
 8008e38:	0800b664 	.word	0x0800b664
 8008e3c:	0800b4d2 	.word	0x0800b4d2
 8008e40:	0800b552 	.word	0x0800b552
 8008e44:	00000271 	.word	0x00000271

08008e48 <__lshift>:
 8008e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e4a:	000c      	movs	r4, r1
 8008e4c:	0016      	movs	r6, r2
 8008e4e:	6923      	ldr	r3, [r4, #16]
 8008e50:	1157      	asrs	r7, r2, #5
 8008e52:	b085      	sub	sp, #20
 8008e54:	18fb      	adds	r3, r7, r3
 8008e56:	9301      	str	r3, [sp, #4]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	9300      	str	r3, [sp, #0]
 8008e5c:	6849      	ldr	r1, [r1, #4]
 8008e5e:	68a3      	ldr	r3, [r4, #8]
 8008e60:	9002      	str	r0, [sp, #8]
 8008e62:	9a00      	ldr	r2, [sp, #0]
 8008e64:	4293      	cmp	r3, r2
 8008e66:	db10      	blt.n	8008e8a <__lshift+0x42>
 8008e68:	9802      	ldr	r0, [sp, #8]
 8008e6a:	f7ff fd87 	bl	800897c <_Balloc>
 8008e6e:	2300      	movs	r3, #0
 8008e70:	0001      	movs	r1, r0
 8008e72:	0005      	movs	r5, r0
 8008e74:	001a      	movs	r2, r3
 8008e76:	3114      	adds	r1, #20
 8008e78:	4298      	cmp	r0, r3
 8008e7a:	d10c      	bne.n	8008e96 <__lshift+0x4e>
 8008e7c:	21ef      	movs	r1, #239	@ 0xef
 8008e7e:	002a      	movs	r2, r5
 8008e80:	4b25      	ldr	r3, [pc, #148]	@ (8008f18 <__lshift+0xd0>)
 8008e82:	4826      	ldr	r0, [pc, #152]	@ (8008f1c <__lshift+0xd4>)
 8008e84:	0049      	lsls	r1, r1, #1
 8008e86:	f001 fd05 	bl	800a894 <__assert_func>
 8008e8a:	3101      	adds	r1, #1
 8008e8c:	005b      	lsls	r3, r3, #1
 8008e8e:	e7e8      	b.n	8008e62 <__lshift+0x1a>
 8008e90:	0098      	lsls	r0, r3, #2
 8008e92:	500a      	str	r2, [r1, r0]
 8008e94:	3301      	adds	r3, #1
 8008e96:	42bb      	cmp	r3, r7
 8008e98:	dbfa      	blt.n	8008e90 <__lshift+0x48>
 8008e9a:	43fb      	mvns	r3, r7
 8008e9c:	17db      	asrs	r3, r3, #31
 8008e9e:	401f      	ands	r7, r3
 8008ea0:	00bf      	lsls	r7, r7, #2
 8008ea2:	0023      	movs	r3, r4
 8008ea4:	201f      	movs	r0, #31
 8008ea6:	19c9      	adds	r1, r1, r7
 8008ea8:	0037      	movs	r7, r6
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	3314      	adds	r3, #20
 8008eae:	0092      	lsls	r2, r2, #2
 8008eb0:	189a      	adds	r2, r3, r2
 8008eb2:	4007      	ands	r7, r0
 8008eb4:	4206      	tst	r6, r0
 8008eb6:	d029      	beq.n	8008f0c <__lshift+0xc4>
 8008eb8:	3001      	adds	r0, #1
 8008eba:	1bc0      	subs	r0, r0, r7
 8008ebc:	9003      	str	r0, [sp, #12]
 8008ebe:	468c      	mov	ip, r1
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	681e      	ldr	r6, [r3, #0]
 8008ec4:	40be      	lsls	r6, r7
 8008ec6:	4306      	orrs	r6, r0
 8008ec8:	4660      	mov	r0, ip
 8008eca:	c040      	stmia	r0!, {r6}
 8008ecc:	4684      	mov	ip, r0
 8008ece:	9e03      	ldr	r6, [sp, #12]
 8008ed0:	cb01      	ldmia	r3!, {r0}
 8008ed2:	40f0      	lsrs	r0, r6
 8008ed4:	429a      	cmp	r2, r3
 8008ed6:	d8f4      	bhi.n	8008ec2 <__lshift+0x7a>
 8008ed8:	0026      	movs	r6, r4
 8008eda:	3615      	adds	r6, #21
 8008edc:	2304      	movs	r3, #4
 8008ede:	42b2      	cmp	r2, r6
 8008ee0:	d304      	bcc.n	8008eec <__lshift+0xa4>
 8008ee2:	1b13      	subs	r3, r2, r4
 8008ee4:	3b15      	subs	r3, #21
 8008ee6:	089b      	lsrs	r3, r3, #2
 8008ee8:	3301      	adds	r3, #1
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	50c8      	str	r0, [r1, r3]
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	d002      	beq.n	8008ef8 <__lshift+0xb0>
 8008ef2:	9b01      	ldr	r3, [sp, #4]
 8008ef4:	3302      	adds	r3, #2
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	9b00      	ldr	r3, [sp, #0]
 8008efa:	9802      	ldr	r0, [sp, #8]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	0021      	movs	r1, r4
 8008f00:	612b      	str	r3, [r5, #16]
 8008f02:	f7ff fd7f 	bl	8008a04 <_Bfree>
 8008f06:	0028      	movs	r0, r5
 8008f08:	b005      	add	sp, #20
 8008f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f0c:	cb01      	ldmia	r3!, {r0}
 8008f0e:	c101      	stmia	r1!, {r0}
 8008f10:	429a      	cmp	r2, r3
 8008f12:	d8fb      	bhi.n	8008f0c <__lshift+0xc4>
 8008f14:	e7f0      	b.n	8008ef8 <__lshift+0xb0>
 8008f16:	46c0      	nop			@ (mov r8, r8)
 8008f18:	0800b541 	.word	0x0800b541
 8008f1c:	0800b552 	.word	0x0800b552

08008f20 <__mcmp>:
 8008f20:	b530      	push	{r4, r5, lr}
 8008f22:	690b      	ldr	r3, [r1, #16]
 8008f24:	6904      	ldr	r4, [r0, #16]
 8008f26:	0002      	movs	r2, r0
 8008f28:	1ae0      	subs	r0, r4, r3
 8008f2a:	429c      	cmp	r4, r3
 8008f2c:	d10f      	bne.n	8008f4e <__mcmp+0x2e>
 8008f2e:	3214      	adds	r2, #20
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	3114      	adds	r1, #20
 8008f34:	0014      	movs	r4, r2
 8008f36:	18c9      	adds	r1, r1, r3
 8008f38:	18d2      	adds	r2, r2, r3
 8008f3a:	3a04      	subs	r2, #4
 8008f3c:	3904      	subs	r1, #4
 8008f3e:	6815      	ldr	r5, [r2, #0]
 8008f40:	680b      	ldr	r3, [r1, #0]
 8008f42:	429d      	cmp	r5, r3
 8008f44:	d004      	beq.n	8008f50 <__mcmp+0x30>
 8008f46:	2001      	movs	r0, #1
 8008f48:	429d      	cmp	r5, r3
 8008f4a:	d200      	bcs.n	8008f4e <__mcmp+0x2e>
 8008f4c:	3802      	subs	r0, #2
 8008f4e:	bd30      	pop	{r4, r5, pc}
 8008f50:	4294      	cmp	r4, r2
 8008f52:	d3f2      	bcc.n	8008f3a <__mcmp+0x1a>
 8008f54:	e7fb      	b.n	8008f4e <__mcmp+0x2e>
	...

08008f58 <__mdiff>:
 8008f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f5a:	000c      	movs	r4, r1
 8008f5c:	b087      	sub	sp, #28
 8008f5e:	9000      	str	r0, [sp, #0]
 8008f60:	0011      	movs	r1, r2
 8008f62:	0020      	movs	r0, r4
 8008f64:	0017      	movs	r7, r2
 8008f66:	f7ff ffdb 	bl	8008f20 <__mcmp>
 8008f6a:	1e05      	subs	r5, r0, #0
 8008f6c:	d110      	bne.n	8008f90 <__mdiff+0x38>
 8008f6e:	0001      	movs	r1, r0
 8008f70:	9800      	ldr	r0, [sp, #0]
 8008f72:	f7ff fd03 	bl	800897c <_Balloc>
 8008f76:	1e02      	subs	r2, r0, #0
 8008f78:	d104      	bne.n	8008f84 <__mdiff+0x2c>
 8008f7a:	4b40      	ldr	r3, [pc, #256]	@ (800907c <__mdiff+0x124>)
 8008f7c:	4840      	ldr	r0, [pc, #256]	@ (8009080 <__mdiff+0x128>)
 8008f7e:	4941      	ldr	r1, [pc, #260]	@ (8009084 <__mdiff+0x12c>)
 8008f80:	f001 fc88 	bl	800a894 <__assert_func>
 8008f84:	2301      	movs	r3, #1
 8008f86:	6145      	str	r5, [r0, #20]
 8008f88:	6103      	str	r3, [r0, #16]
 8008f8a:	0010      	movs	r0, r2
 8008f8c:	b007      	add	sp, #28
 8008f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f90:	2600      	movs	r6, #0
 8008f92:	42b0      	cmp	r0, r6
 8008f94:	da03      	bge.n	8008f9e <__mdiff+0x46>
 8008f96:	0023      	movs	r3, r4
 8008f98:	003c      	movs	r4, r7
 8008f9a:	001f      	movs	r7, r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	6861      	ldr	r1, [r4, #4]
 8008fa0:	9800      	ldr	r0, [sp, #0]
 8008fa2:	f7ff fceb 	bl	800897c <_Balloc>
 8008fa6:	1e02      	subs	r2, r0, #0
 8008fa8:	d103      	bne.n	8008fb2 <__mdiff+0x5a>
 8008faa:	4b34      	ldr	r3, [pc, #208]	@ (800907c <__mdiff+0x124>)
 8008fac:	4834      	ldr	r0, [pc, #208]	@ (8009080 <__mdiff+0x128>)
 8008fae:	4936      	ldr	r1, [pc, #216]	@ (8009088 <__mdiff+0x130>)
 8008fb0:	e7e6      	b.n	8008f80 <__mdiff+0x28>
 8008fb2:	6923      	ldr	r3, [r4, #16]
 8008fb4:	3414      	adds	r4, #20
 8008fb6:	9300      	str	r3, [sp, #0]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	18e3      	adds	r3, r4, r3
 8008fbc:	0021      	movs	r1, r4
 8008fbe:	9401      	str	r4, [sp, #4]
 8008fc0:	003c      	movs	r4, r7
 8008fc2:	9302      	str	r3, [sp, #8]
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	3414      	adds	r4, #20
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	18e3      	adds	r3, r4, r3
 8008fcc:	9303      	str	r3, [sp, #12]
 8008fce:	0003      	movs	r3, r0
 8008fd0:	60c6      	str	r6, [r0, #12]
 8008fd2:	468c      	mov	ip, r1
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	3314      	adds	r3, #20
 8008fd8:	9304      	str	r3, [sp, #16]
 8008fda:	9305      	str	r3, [sp, #20]
 8008fdc:	4663      	mov	r3, ip
 8008fde:	cb20      	ldmia	r3!, {r5}
 8008fe0:	b2a9      	uxth	r1, r5
 8008fe2:	000e      	movs	r6, r1
 8008fe4:	469c      	mov	ip, r3
 8008fe6:	cc08      	ldmia	r4!, {r3}
 8008fe8:	0c2d      	lsrs	r5, r5, #16
 8008fea:	b299      	uxth	r1, r3
 8008fec:	1a71      	subs	r1, r6, r1
 8008fee:	1809      	adds	r1, r1, r0
 8008ff0:	0c1b      	lsrs	r3, r3, #16
 8008ff2:	1408      	asrs	r0, r1, #16
 8008ff4:	1aeb      	subs	r3, r5, r3
 8008ff6:	181b      	adds	r3, r3, r0
 8008ff8:	1418      	asrs	r0, r3, #16
 8008ffa:	b289      	uxth	r1, r1
 8008ffc:	041b      	lsls	r3, r3, #16
 8008ffe:	4319      	orrs	r1, r3
 8009000:	9b05      	ldr	r3, [sp, #20]
 8009002:	c302      	stmia	r3!, {r1}
 8009004:	9305      	str	r3, [sp, #20]
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	42a3      	cmp	r3, r4
 800900a:	d8e7      	bhi.n	8008fdc <__mdiff+0x84>
 800900c:	0039      	movs	r1, r7
 800900e:	9c03      	ldr	r4, [sp, #12]
 8009010:	3115      	adds	r1, #21
 8009012:	2304      	movs	r3, #4
 8009014:	428c      	cmp	r4, r1
 8009016:	d304      	bcc.n	8009022 <__mdiff+0xca>
 8009018:	1be3      	subs	r3, r4, r7
 800901a:	3b15      	subs	r3, #21
 800901c:	089b      	lsrs	r3, r3, #2
 800901e:	3301      	adds	r3, #1
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	9901      	ldr	r1, [sp, #4]
 8009024:	18cd      	adds	r5, r1, r3
 8009026:	9904      	ldr	r1, [sp, #16]
 8009028:	002e      	movs	r6, r5
 800902a:	18cb      	adds	r3, r1, r3
 800902c:	001f      	movs	r7, r3
 800902e:	9902      	ldr	r1, [sp, #8]
 8009030:	428e      	cmp	r6, r1
 8009032:	d311      	bcc.n	8009058 <__mdiff+0x100>
 8009034:	9c02      	ldr	r4, [sp, #8]
 8009036:	1ee9      	subs	r1, r5, #3
 8009038:	2000      	movs	r0, #0
 800903a:	428c      	cmp	r4, r1
 800903c:	d304      	bcc.n	8009048 <__mdiff+0xf0>
 800903e:	0021      	movs	r1, r4
 8009040:	3103      	adds	r1, #3
 8009042:	1b49      	subs	r1, r1, r5
 8009044:	0889      	lsrs	r1, r1, #2
 8009046:	0088      	lsls	r0, r1, #2
 8009048:	181b      	adds	r3, r3, r0
 800904a:	3b04      	subs	r3, #4
 800904c:	6819      	ldr	r1, [r3, #0]
 800904e:	2900      	cmp	r1, #0
 8009050:	d010      	beq.n	8009074 <__mdiff+0x11c>
 8009052:	9b00      	ldr	r3, [sp, #0]
 8009054:	6113      	str	r3, [r2, #16]
 8009056:	e798      	b.n	8008f8a <__mdiff+0x32>
 8009058:	4684      	mov	ip, r0
 800905a:	ce02      	ldmia	r6!, {r1}
 800905c:	b288      	uxth	r0, r1
 800905e:	4460      	add	r0, ip
 8009060:	1400      	asrs	r0, r0, #16
 8009062:	0c0c      	lsrs	r4, r1, #16
 8009064:	1904      	adds	r4, r0, r4
 8009066:	4461      	add	r1, ip
 8009068:	1420      	asrs	r0, r4, #16
 800906a:	b289      	uxth	r1, r1
 800906c:	0424      	lsls	r4, r4, #16
 800906e:	4321      	orrs	r1, r4
 8009070:	c702      	stmia	r7!, {r1}
 8009072:	e7dc      	b.n	800902e <__mdiff+0xd6>
 8009074:	9900      	ldr	r1, [sp, #0]
 8009076:	3901      	subs	r1, #1
 8009078:	9100      	str	r1, [sp, #0]
 800907a:	e7e6      	b.n	800904a <__mdiff+0xf2>
 800907c:	0800b541 	.word	0x0800b541
 8009080:	0800b552 	.word	0x0800b552
 8009084:	00000237 	.word	0x00000237
 8009088:	00000245 	.word	0x00000245

0800908c <__ulp>:
 800908c:	b510      	push	{r4, lr}
 800908e:	2400      	movs	r4, #0
 8009090:	4b0c      	ldr	r3, [pc, #48]	@ (80090c4 <__ulp+0x38>)
 8009092:	4a0d      	ldr	r2, [pc, #52]	@ (80090c8 <__ulp+0x3c>)
 8009094:	400b      	ands	r3, r1
 8009096:	189b      	adds	r3, r3, r2
 8009098:	42a3      	cmp	r3, r4
 800909a:	dc06      	bgt.n	80090aa <__ulp+0x1e>
 800909c:	425b      	negs	r3, r3
 800909e:	151a      	asrs	r2, r3, #20
 80090a0:	2a13      	cmp	r2, #19
 80090a2:	dc05      	bgt.n	80090b0 <__ulp+0x24>
 80090a4:	2380      	movs	r3, #128	@ 0x80
 80090a6:	031b      	lsls	r3, r3, #12
 80090a8:	4113      	asrs	r3, r2
 80090aa:	0019      	movs	r1, r3
 80090ac:	0020      	movs	r0, r4
 80090ae:	bd10      	pop	{r4, pc}
 80090b0:	3a14      	subs	r2, #20
 80090b2:	2401      	movs	r4, #1
 80090b4:	2a1e      	cmp	r2, #30
 80090b6:	dc02      	bgt.n	80090be <__ulp+0x32>
 80090b8:	2480      	movs	r4, #128	@ 0x80
 80090ba:	0624      	lsls	r4, r4, #24
 80090bc:	40d4      	lsrs	r4, r2
 80090be:	2300      	movs	r3, #0
 80090c0:	e7f3      	b.n	80090aa <__ulp+0x1e>
 80090c2:	46c0      	nop			@ (mov r8, r8)
 80090c4:	7ff00000 	.word	0x7ff00000
 80090c8:	fcc00000 	.word	0xfcc00000

080090cc <__b2d>:
 80090cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090ce:	0006      	movs	r6, r0
 80090d0:	6903      	ldr	r3, [r0, #16]
 80090d2:	3614      	adds	r6, #20
 80090d4:	009b      	lsls	r3, r3, #2
 80090d6:	18f3      	adds	r3, r6, r3
 80090d8:	1f1d      	subs	r5, r3, #4
 80090da:	682c      	ldr	r4, [r5, #0]
 80090dc:	000f      	movs	r7, r1
 80090de:	0020      	movs	r0, r4
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	f7ff fd43 	bl	8008b6c <__hi0bits>
 80090e6:	2220      	movs	r2, #32
 80090e8:	1a12      	subs	r2, r2, r0
 80090ea:	603a      	str	r2, [r7, #0]
 80090ec:	0003      	movs	r3, r0
 80090ee:	4a1c      	ldr	r2, [pc, #112]	@ (8009160 <__b2d+0x94>)
 80090f0:	280a      	cmp	r0, #10
 80090f2:	dc15      	bgt.n	8009120 <__b2d+0x54>
 80090f4:	210b      	movs	r1, #11
 80090f6:	0027      	movs	r7, r4
 80090f8:	1a09      	subs	r1, r1, r0
 80090fa:	40cf      	lsrs	r7, r1
 80090fc:	433a      	orrs	r2, r7
 80090fe:	468c      	mov	ip, r1
 8009100:	0011      	movs	r1, r2
 8009102:	2200      	movs	r2, #0
 8009104:	42ae      	cmp	r6, r5
 8009106:	d202      	bcs.n	800910e <__b2d+0x42>
 8009108:	9a01      	ldr	r2, [sp, #4]
 800910a:	3a08      	subs	r2, #8
 800910c:	6812      	ldr	r2, [r2, #0]
 800910e:	3315      	adds	r3, #21
 8009110:	409c      	lsls	r4, r3
 8009112:	4663      	mov	r3, ip
 8009114:	0027      	movs	r7, r4
 8009116:	40da      	lsrs	r2, r3
 8009118:	4317      	orrs	r7, r2
 800911a:	0038      	movs	r0, r7
 800911c:	b003      	add	sp, #12
 800911e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009120:	2700      	movs	r7, #0
 8009122:	42ae      	cmp	r6, r5
 8009124:	d202      	bcs.n	800912c <__b2d+0x60>
 8009126:	9d01      	ldr	r5, [sp, #4]
 8009128:	3d08      	subs	r5, #8
 800912a:	682f      	ldr	r7, [r5, #0]
 800912c:	210b      	movs	r1, #11
 800912e:	4249      	negs	r1, r1
 8009130:	468c      	mov	ip, r1
 8009132:	449c      	add	ip, r3
 8009134:	2b0b      	cmp	r3, #11
 8009136:	d010      	beq.n	800915a <__b2d+0x8e>
 8009138:	4661      	mov	r1, ip
 800913a:	2320      	movs	r3, #32
 800913c:	408c      	lsls	r4, r1
 800913e:	1a5b      	subs	r3, r3, r1
 8009140:	0039      	movs	r1, r7
 8009142:	40d9      	lsrs	r1, r3
 8009144:	430c      	orrs	r4, r1
 8009146:	4322      	orrs	r2, r4
 8009148:	0011      	movs	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	42b5      	cmp	r5, r6
 800914e:	d901      	bls.n	8009154 <__b2d+0x88>
 8009150:	3d04      	subs	r5, #4
 8009152:	682a      	ldr	r2, [r5, #0]
 8009154:	4664      	mov	r4, ip
 8009156:	40a7      	lsls	r7, r4
 8009158:	e7dd      	b.n	8009116 <__b2d+0x4a>
 800915a:	4322      	orrs	r2, r4
 800915c:	0011      	movs	r1, r2
 800915e:	e7dc      	b.n	800911a <__b2d+0x4e>
 8009160:	3ff00000 	.word	0x3ff00000

08009164 <__d2b>:
 8009164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009166:	2101      	movs	r1, #1
 8009168:	0016      	movs	r6, r2
 800916a:	001f      	movs	r7, r3
 800916c:	f7ff fc06 	bl	800897c <_Balloc>
 8009170:	1e04      	subs	r4, r0, #0
 8009172:	d105      	bne.n	8009180 <__d2b+0x1c>
 8009174:	0022      	movs	r2, r4
 8009176:	4b25      	ldr	r3, [pc, #148]	@ (800920c <__d2b+0xa8>)
 8009178:	4825      	ldr	r0, [pc, #148]	@ (8009210 <__d2b+0xac>)
 800917a:	4926      	ldr	r1, [pc, #152]	@ (8009214 <__d2b+0xb0>)
 800917c:	f001 fb8a 	bl	800a894 <__assert_func>
 8009180:	033b      	lsls	r3, r7, #12
 8009182:	007d      	lsls	r5, r7, #1
 8009184:	0b1b      	lsrs	r3, r3, #12
 8009186:	0d6d      	lsrs	r5, r5, #21
 8009188:	d002      	beq.n	8009190 <__d2b+0x2c>
 800918a:	2280      	movs	r2, #128	@ 0x80
 800918c:	0352      	lsls	r2, r2, #13
 800918e:	4313      	orrs	r3, r2
 8009190:	9301      	str	r3, [sp, #4]
 8009192:	2e00      	cmp	r6, #0
 8009194:	d025      	beq.n	80091e2 <__d2b+0x7e>
 8009196:	4668      	mov	r0, sp
 8009198:	9600      	str	r6, [sp, #0]
 800919a:	f7ff fd08 	bl	8008bae <__lo0bits>
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	9900      	ldr	r1, [sp, #0]
 80091a2:	2800      	cmp	r0, #0
 80091a4:	d01b      	beq.n	80091de <__d2b+0x7a>
 80091a6:	2220      	movs	r2, #32
 80091a8:	001e      	movs	r6, r3
 80091aa:	1a12      	subs	r2, r2, r0
 80091ac:	4096      	lsls	r6, r2
 80091ae:	0032      	movs	r2, r6
 80091b0:	40c3      	lsrs	r3, r0
 80091b2:	430a      	orrs	r2, r1
 80091b4:	6162      	str	r2, [r4, #20]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	9e01      	ldr	r6, [sp, #4]
 80091ba:	61a6      	str	r6, [r4, #24]
 80091bc:	1e73      	subs	r3, r6, #1
 80091be:	419e      	sbcs	r6, r3
 80091c0:	3601      	adds	r6, #1
 80091c2:	6126      	str	r6, [r4, #16]
 80091c4:	2d00      	cmp	r5, #0
 80091c6:	d014      	beq.n	80091f2 <__d2b+0x8e>
 80091c8:	2635      	movs	r6, #53	@ 0x35
 80091ca:	4b13      	ldr	r3, [pc, #76]	@ (8009218 <__d2b+0xb4>)
 80091cc:	18ed      	adds	r5, r5, r3
 80091ce:	9b08      	ldr	r3, [sp, #32]
 80091d0:	182d      	adds	r5, r5, r0
 80091d2:	601d      	str	r5, [r3, #0]
 80091d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d6:	1a36      	subs	r6, r6, r0
 80091d8:	601e      	str	r6, [r3, #0]
 80091da:	0020      	movs	r0, r4
 80091dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80091de:	6161      	str	r1, [r4, #20]
 80091e0:	e7ea      	b.n	80091b8 <__d2b+0x54>
 80091e2:	a801      	add	r0, sp, #4
 80091e4:	f7ff fce3 	bl	8008bae <__lo0bits>
 80091e8:	9b01      	ldr	r3, [sp, #4]
 80091ea:	2601      	movs	r6, #1
 80091ec:	6163      	str	r3, [r4, #20]
 80091ee:	3020      	adds	r0, #32
 80091f0:	e7e7      	b.n	80091c2 <__d2b+0x5e>
 80091f2:	4b0a      	ldr	r3, [pc, #40]	@ (800921c <__d2b+0xb8>)
 80091f4:	18c0      	adds	r0, r0, r3
 80091f6:	9b08      	ldr	r3, [sp, #32]
 80091f8:	6018      	str	r0, [r3, #0]
 80091fa:	4b09      	ldr	r3, [pc, #36]	@ (8009220 <__d2b+0xbc>)
 80091fc:	18f3      	adds	r3, r6, r3
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	18e3      	adds	r3, r4, r3
 8009202:	6958      	ldr	r0, [r3, #20]
 8009204:	f7ff fcb2 	bl	8008b6c <__hi0bits>
 8009208:	0176      	lsls	r6, r6, #5
 800920a:	e7e3      	b.n	80091d4 <__d2b+0x70>
 800920c:	0800b541 	.word	0x0800b541
 8009210:	0800b552 	.word	0x0800b552
 8009214:	0000030f 	.word	0x0000030f
 8009218:	fffffbcd 	.word	0xfffffbcd
 800921c:	fffffbce 	.word	0xfffffbce
 8009220:	3fffffff 	.word	0x3fffffff

08009224 <__ratio>:
 8009224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009226:	b087      	sub	sp, #28
 8009228:	000f      	movs	r7, r1
 800922a:	a904      	add	r1, sp, #16
 800922c:	0006      	movs	r6, r0
 800922e:	f7ff ff4d 	bl	80090cc <__b2d>
 8009232:	9000      	str	r0, [sp, #0]
 8009234:	9101      	str	r1, [sp, #4]
 8009236:	9b00      	ldr	r3, [sp, #0]
 8009238:	9c01      	ldr	r4, [sp, #4]
 800923a:	0038      	movs	r0, r7
 800923c:	a905      	add	r1, sp, #20
 800923e:	9302      	str	r3, [sp, #8]
 8009240:	9403      	str	r4, [sp, #12]
 8009242:	f7ff ff43 	bl	80090cc <__b2d>
 8009246:	000d      	movs	r5, r1
 8009248:	0002      	movs	r2, r0
 800924a:	000b      	movs	r3, r1
 800924c:	6930      	ldr	r0, [r6, #16]
 800924e:	6939      	ldr	r1, [r7, #16]
 8009250:	9e04      	ldr	r6, [sp, #16]
 8009252:	1a40      	subs	r0, r0, r1
 8009254:	9905      	ldr	r1, [sp, #20]
 8009256:	0140      	lsls	r0, r0, #5
 8009258:	1a71      	subs	r1, r6, r1
 800925a:	1841      	adds	r1, r0, r1
 800925c:	0508      	lsls	r0, r1, #20
 800925e:	2900      	cmp	r1, #0
 8009260:	dd08      	ble.n	8009274 <__ratio+0x50>
 8009262:	9901      	ldr	r1, [sp, #4]
 8009264:	1841      	adds	r1, r0, r1
 8009266:	9103      	str	r1, [sp, #12]
 8009268:	9802      	ldr	r0, [sp, #8]
 800926a:	9903      	ldr	r1, [sp, #12]
 800926c:	f7f7 fefa 	bl	8001064 <__aeabi_ddiv>
 8009270:	b007      	add	sp, #28
 8009272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009274:	1a2b      	subs	r3, r5, r0
 8009276:	e7f7      	b.n	8009268 <__ratio+0x44>

08009278 <__copybits>:
 8009278:	b570      	push	{r4, r5, r6, lr}
 800927a:	0014      	movs	r4, r2
 800927c:	0005      	movs	r5, r0
 800927e:	3901      	subs	r1, #1
 8009280:	6913      	ldr	r3, [r2, #16]
 8009282:	1149      	asrs	r1, r1, #5
 8009284:	3101      	adds	r1, #1
 8009286:	0089      	lsls	r1, r1, #2
 8009288:	3414      	adds	r4, #20
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	1841      	adds	r1, r0, r1
 800928e:	18e3      	adds	r3, r4, r3
 8009290:	42a3      	cmp	r3, r4
 8009292:	d80d      	bhi.n	80092b0 <__copybits+0x38>
 8009294:	0014      	movs	r4, r2
 8009296:	3411      	adds	r4, #17
 8009298:	2500      	movs	r5, #0
 800929a:	42a3      	cmp	r3, r4
 800929c:	d303      	bcc.n	80092a6 <__copybits+0x2e>
 800929e:	1a9b      	subs	r3, r3, r2
 80092a0:	3b11      	subs	r3, #17
 80092a2:	089b      	lsrs	r3, r3, #2
 80092a4:	009d      	lsls	r5, r3, #2
 80092a6:	2300      	movs	r3, #0
 80092a8:	1940      	adds	r0, r0, r5
 80092aa:	4281      	cmp	r1, r0
 80092ac:	d803      	bhi.n	80092b6 <__copybits+0x3e>
 80092ae:	bd70      	pop	{r4, r5, r6, pc}
 80092b0:	cc40      	ldmia	r4!, {r6}
 80092b2:	c540      	stmia	r5!, {r6}
 80092b4:	e7ec      	b.n	8009290 <__copybits+0x18>
 80092b6:	c008      	stmia	r0!, {r3}
 80092b8:	e7f7      	b.n	80092aa <__copybits+0x32>

080092ba <__any_on>:
 80092ba:	0002      	movs	r2, r0
 80092bc:	6900      	ldr	r0, [r0, #16]
 80092be:	b510      	push	{r4, lr}
 80092c0:	3214      	adds	r2, #20
 80092c2:	114b      	asrs	r3, r1, #5
 80092c4:	4298      	cmp	r0, r3
 80092c6:	db13      	blt.n	80092f0 <__any_on+0x36>
 80092c8:	dd0c      	ble.n	80092e4 <__any_on+0x2a>
 80092ca:	241f      	movs	r4, #31
 80092cc:	0008      	movs	r0, r1
 80092ce:	4020      	ands	r0, r4
 80092d0:	4221      	tst	r1, r4
 80092d2:	d007      	beq.n	80092e4 <__any_on+0x2a>
 80092d4:	0099      	lsls	r1, r3, #2
 80092d6:	588c      	ldr	r4, [r1, r2]
 80092d8:	0021      	movs	r1, r4
 80092da:	40c1      	lsrs	r1, r0
 80092dc:	4081      	lsls	r1, r0
 80092de:	2001      	movs	r0, #1
 80092e0:	428c      	cmp	r4, r1
 80092e2:	d104      	bne.n	80092ee <__any_on+0x34>
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	18d3      	adds	r3, r2, r3
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d803      	bhi.n	80092f4 <__any_on+0x3a>
 80092ec:	2000      	movs	r0, #0
 80092ee:	bd10      	pop	{r4, pc}
 80092f0:	0003      	movs	r3, r0
 80092f2:	e7f7      	b.n	80092e4 <__any_on+0x2a>
 80092f4:	3b04      	subs	r3, #4
 80092f6:	6819      	ldr	r1, [r3, #0]
 80092f8:	2900      	cmp	r1, #0
 80092fa:	d0f5      	beq.n	80092e8 <__any_on+0x2e>
 80092fc:	2001      	movs	r0, #1
 80092fe:	e7f6      	b.n	80092ee <__any_on+0x34>

08009300 <sulp>:
 8009300:	b570      	push	{r4, r5, r6, lr}
 8009302:	0016      	movs	r6, r2
 8009304:	000d      	movs	r5, r1
 8009306:	f7ff fec1 	bl	800908c <__ulp>
 800930a:	2e00      	cmp	r6, #0
 800930c:	d00d      	beq.n	800932a <sulp+0x2a>
 800930e:	236b      	movs	r3, #107	@ 0x6b
 8009310:	006a      	lsls	r2, r5, #1
 8009312:	0d52      	lsrs	r2, r2, #21
 8009314:	1a9b      	subs	r3, r3, r2
 8009316:	2b00      	cmp	r3, #0
 8009318:	dd07      	ble.n	800932a <sulp+0x2a>
 800931a:	2400      	movs	r4, #0
 800931c:	4a03      	ldr	r2, [pc, #12]	@ (800932c <sulp+0x2c>)
 800931e:	051b      	lsls	r3, r3, #20
 8009320:	189d      	adds	r5, r3, r2
 8009322:	002b      	movs	r3, r5
 8009324:	0022      	movs	r2, r4
 8009326:	f7f8 fad7 	bl	80018d8 <__aeabi_dmul>
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	3ff00000 	.word	0x3ff00000

08009330 <_strtod_l>:
 8009330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009332:	b0a3      	sub	sp, #140	@ 0x8c
 8009334:	921b      	str	r2, [sp, #108]	@ 0x6c
 8009336:	2200      	movs	r2, #0
 8009338:	2600      	movs	r6, #0
 800933a:	2700      	movs	r7, #0
 800933c:	9005      	str	r0, [sp, #20]
 800933e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009340:	921e      	str	r2, [sp, #120]	@ 0x78
 8009342:	911d      	str	r1, [sp, #116]	@ 0x74
 8009344:	780a      	ldrb	r2, [r1, #0]
 8009346:	2a2b      	cmp	r2, #43	@ 0x2b
 8009348:	d053      	beq.n	80093f2 <_strtod_l+0xc2>
 800934a:	d83f      	bhi.n	80093cc <_strtod_l+0x9c>
 800934c:	2a0d      	cmp	r2, #13
 800934e:	d839      	bhi.n	80093c4 <_strtod_l+0x94>
 8009350:	2a08      	cmp	r2, #8
 8009352:	d839      	bhi.n	80093c8 <_strtod_l+0x98>
 8009354:	2a00      	cmp	r2, #0
 8009356:	d042      	beq.n	80093de <_strtod_l+0xae>
 8009358:	2200      	movs	r2, #0
 800935a:	9212      	str	r2, [sp, #72]	@ 0x48
 800935c:	2100      	movs	r1, #0
 800935e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 8009360:	910c      	str	r1, [sp, #48]	@ 0x30
 8009362:	782a      	ldrb	r2, [r5, #0]
 8009364:	2a30      	cmp	r2, #48	@ 0x30
 8009366:	d000      	beq.n	800936a <_strtod_l+0x3a>
 8009368:	e083      	b.n	8009472 <_strtod_l+0x142>
 800936a:	786a      	ldrb	r2, [r5, #1]
 800936c:	3120      	adds	r1, #32
 800936e:	438a      	bics	r2, r1
 8009370:	2a58      	cmp	r2, #88	@ 0x58
 8009372:	d000      	beq.n	8009376 <_strtod_l+0x46>
 8009374:	e073      	b.n	800945e <_strtod_l+0x12e>
 8009376:	9302      	str	r3, [sp, #8]
 8009378:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800937a:	4a9b      	ldr	r2, [pc, #620]	@ (80095e8 <_strtod_l+0x2b8>)
 800937c:	9301      	str	r3, [sp, #4]
 800937e:	ab1e      	add	r3, sp, #120	@ 0x78
 8009380:	9300      	str	r3, [sp, #0]
 8009382:	9805      	ldr	r0, [sp, #20]
 8009384:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009386:	a91d      	add	r1, sp, #116	@ 0x74
 8009388:	f001 fb38 	bl	800a9fc <__gethex>
 800938c:	230f      	movs	r3, #15
 800938e:	0002      	movs	r2, r0
 8009390:	401a      	ands	r2, r3
 8009392:	0004      	movs	r4, r0
 8009394:	9206      	str	r2, [sp, #24]
 8009396:	4218      	tst	r0, r3
 8009398:	d005      	beq.n	80093a6 <_strtod_l+0x76>
 800939a:	2a06      	cmp	r2, #6
 800939c:	d12b      	bne.n	80093f6 <_strtod_l+0xc6>
 800939e:	2300      	movs	r3, #0
 80093a0:	3501      	adds	r5, #1
 80093a2:	951d      	str	r5, [sp, #116]	@ 0x74
 80093a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80093a6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <_strtod_l+0x82>
 80093ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80093ae:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80093b0:	6013      	str	r3, [r2, #0]
 80093b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d019      	beq.n	80093ec <_strtod_l+0xbc>
 80093b8:	2380      	movs	r3, #128	@ 0x80
 80093ba:	0030      	movs	r0, r6
 80093bc:	061b      	lsls	r3, r3, #24
 80093be:	18f9      	adds	r1, r7, r3
 80093c0:	b023      	add	sp, #140	@ 0x8c
 80093c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093c4:	2a20      	cmp	r2, #32
 80093c6:	d1c7      	bne.n	8009358 <_strtod_l+0x28>
 80093c8:	3101      	adds	r1, #1
 80093ca:	e7ba      	b.n	8009342 <_strtod_l+0x12>
 80093cc:	2a2d      	cmp	r2, #45	@ 0x2d
 80093ce:	d1c3      	bne.n	8009358 <_strtod_l+0x28>
 80093d0:	3a2c      	subs	r2, #44	@ 0x2c
 80093d2:	9212      	str	r2, [sp, #72]	@ 0x48
 80093d4:	1c4a      	adds	r2, r1, #1
 80093d6:	921d      	str	r2, [sp, #116]	@ 0x74
 80093d8:	784a      	ldrb	r2, [r1, #1]
 80093da:	2a00      	cmp	r2, #0
 80093dc:	d1be      	bne.n	800935c <_strtod_l+0x2c>
 80093de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093e0:	931d      	str	r3, [sp, #116]	@ 0x74
 80093e2:	2300      	movs	r3, #0
 80093e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80093e6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d1df      	bne.n	80093ac <_strtod_l+0x7c>
 80093ec:	0030      	movs	r0, r6
 80093ee:	0039      	movs	r1, r7
 80093f0:	e7e6      	b.n	80093c0 <_strtod_l+0x90>
 80093f2:	2200      	movs	r2, #0
 80093f4:	e7ed      	b.n	80093d2 <_strtod_l+0xa2>
 80093f6:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80093f8:	2a00      	cmp	r2, #0
 80093fa:	d007      	beq.n	800940c <_strtod_l+0xdc>
 80093fc:	2135      	movs	r1, #53	@ 0x35
 80093fe:	a820      	add	r0, sp, #128	@ 0x80
 8009400:	f7ff ff3a 	bl	8009278 <__copybits>
 8009404:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009406:	9805      	ldr	r0, [sp, #20]
 8009408:	f7ff fafc 	bl	8008a04 <_Bfree>
 800940c:	9806      	ldr	r0, [sp, #24]
 800940e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009410:	3801      	subs	r0, #1
 8009412:	2804      	cmp	r0, #4
 8009414:	d806      	bhi.n	8009424 <_strtod_l+0xf4>
 8009416:	f7f6 fe7f 	bl	8000118 <__gnu_thumb1_case_uqi>
 800941a:	0312      	.short	0x0312
 800941c:	1e1c      	.short	0x1e1c
 800941e:	12          	.byte	0x12
 800941f:	00          	.byte	0x00
 8009420:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009422:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 8009424:	05e4      	lsls	r4, r4, #23
 8009426:	d502      	bpl.n	800942e <_strtod_l+0xfe>
 8009428:	2380      	movs	r3, #128	@ 0x80
 800942a:	061b      	lsls	r3, r3, #24
 800942c:	431f      	orrs	r7, r3
 800942e:	4b6f      	ldr	r3, [pc, #444]	@ (80095ec <_strtod_l+0x2bc>)
 8009430:	423b      	tst	r3, r7
 8009432:	d1b8      	bne.n	80093a6 <_strtod_l+0x76>
 8009434:	f7fe fae0 	bl	80079f8 <__errno>
 8009438:	2322      	movs	r3, #34	@ 0x22
 800943a:	6003      	str	r3, [r0, #0]
 800943c:	e7b3      	b.n	80093a6 <_strtod_l+0x76>
 800943e:	496c      	ldr	r1, [pc, #432]	@ (80095f0 <_strtod_l+0x2c0>)
 8009440:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009442:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8009444:	400a      	ands	r2, r1
 8009446:	496b      	ldr	r1, [pc, #428]	@ (80095f4 <_strtod_l+0x2c4>)
 8009448:	185b      	adds	r3, r3, r1
 800944a:	051b      	lsls	r3, r3, #20
 800944c:	431a      	orrs	r2, r3
 800944e:	0017      	movs	r7, r2
 8009450:	e7e8      	b.n	8009424 <_strtod_l+0xf4>
 8009452:	4f66      	ldr	r7, [pc, #408]	@ (80095ec <_strtod_l+0x2bc>)
 8009454:	e7e6      	b.n	8009424 <_strtod_l+0xf4>
 8009456:	2601      	movs	r6, #1
 8009458:	4f67      	ldr	r7, [pc, #412]	@ (80095f8 <_strtod_l+0x2c8>)
 800945a:	4276      	negs	r6, r6
 800945c:	e7e2      	b.n	8009424 <_strtod_l+0xf4>
 800945e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009460:	1c5a      	adds	r2, r3, #1
 8009462:	921d      	str	r2, [sp, #116]	@ 0x74
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	2b30      	cmp	r3, #48	@ 0x30
 8009468:	d0f9      	beq.n	800945e <_strtod_l+0x12e>
 800946a:	2b00      	cmp	r3, #0
 800946c:	d09b      	beq.n	80093a6 <_strtod_l+0x76>
 800946e:	2301      	movs	r3, #1
 8009470:	930c      	str	r3, [sp, #48]	@ 0x30
 8009472:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009474:	220a      	movs	r2, #10
 8009476:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009478:	2300      	movs	r3, #0
 800947a:	9310      	str	r3, [sp, #64]	@ 0x40
 800947c:	930d      	str	r3, [sp, #52]	@ 0x34
 800947e:	9308      	str	r3, [sp, #32]
 8009480:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8009482:	7804      	ldrb	r4, [r0, #0]
 8009484:	0023      	movs	r3, r4
 8009486:	3b30      	subs	r3, #48	@ 0x30
 8009488:	b2d9      	uxtb	r1, r3
 800948a:	2909      	cmp	r1, #9
 800948c:	d927      	bls.n	80094de <_strtod_l+0x1ae>
 800948e:	2201      	movs	r2, #1
 8009490:	495a      	ldr	r1, [pc, #360]	@ (80095fc <_strtod_l+0x2cc>)
 8009492:	f001 f9b2 	bl	800a7fa <strncmp>
 8009496:	2800      	cmp	r0, #0
 8009498:	d033      	beq.n	8009502 <_strtod_l+0x1d2>
 800949a:	2000      	movs	r0, #0
 800949c:	0023      	movs	r3, r4
 800949e:	4684      	mov	ip, r0
 80094a0:	9a08      	ldr	r2, [sp, #32]
 80094a2:	900e      	str	r0, [sp, #56]	@ 0x38
 80094a4:	9206      	str	r2, [sp, #24]
 80094a6:	2220      	movs	r2, #32
 80094a8:	0019      	movs	r1, r3
 80094aa:	4391      	bics	r1, r2
 80094ac:	000a      	movs	r2, r1
 80094ae:	2100      	movs	r1, #0
 80094b0:	9107      	str	r1, [sp, #28]
 80094b2:	2a45      	cmp	r2, #69	@ 0x45
 80094b4:	d000      	beq.n	80094b8 <_strtod_l+0x188>
 80094b6:	e0cb      	b.n	8009650 <_strtod_l+0x320>
 80094b8:	9b06      	ldr	r3, [sp, #24]
 80094ba:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80094bc:	4303      	orrs	r3, r0
 80094be:	4313      	orrs	r3, r2
 80094c0:	428b      	cmp	r3, r1
 80094c2:	d08c      	beq.n	80093de <_strtod_l+0xae>
 80094c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80094c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80094c8:	3301      	adds	r3, #1
 80094ca:	931d      	str	r3, [sp, #116]	@ 0x74
 80094cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	2b2b      	cmp	r3, #43	@ 0x2b
 80094d2:	d07b      	beq.n	80095cc <_strtod_l+0x29c>
 80094d4:	000c      	movs	r4, r1
 80094d6:	2b2d      	cmp	r3, #45	@ 0x2d
 80094d8:	d17e      	bne.n	80095d8 <_strtod_l+0x2a8>
 80094da:	2401      	movs	r4, #1
 80094dc:	e077      	b.n	80095ce <_strtod_l+0x29e>
 80094de:	9908      	ldr	r1, [sp, #32]
 80094e0:	2908      	cmp	r1, #8
 80094e2:	dc09      	bgt.n	80094f8 <_strtod_l+0x1c8>
 80094e4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80094e6:	4351      	muls	r1, r2
 80094e8:	185b      	adds	r3, r3, r1
 80094ea:	930d      	str	r3, [sp, #52]	@ 0x34
 80094ec:	9b08      	ldr	r3, [sp, #32]
 80094ee:	3001      	adds	r0, #1
 80094f0:	3301      	adds	r3, #1
 80094f2:	9308      	str	r3, [sp, #32]
 80094f4:	901d      	str	r0, [sp, #116]	@ 0x74
 80094f6:	e7c3      	b.n	8009480 <_strtod_l+0x150>
 80094f8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80094fa:	4355      	muls	r5, r2
 80094fc:	195b      	adds	r3, r3, r5
 80094fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8009500:	e7f4      	b.n	80094ec <_strtod_l+0x1bc>
 8009502:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	921d      	str	r2, [sp, #116]	@ 0x74
 8009508:	9a08      	ldr	r2, [sp, #32]
 800950a:	785b      	ldrb	r3, [r3, #1]
 800950c:	2a00      	cmp	r2, #0
 800950e:	d03e      	beq.n	800958e <_strtod_l+0x25e>
 8009510:	900e      	str	r0, [sp, #56]	@ 0x38
 8009512:	9206      	str	r2, [sp, #24]
 8009514:	001a      	movs	r2, r3
 8009516:	3a30      	subs	r2, #48	@ 0x30
 8009518:	2a09      	cmp	r2, #9
 800951a:	d912      	bls.n	8009542 <_strtod_l+0x212>
 800951c:	2201      	movs	r2, #1
 800951e:	4694      	mov	ip, r2
 8009520:	e7c1      	b.n	80094a6 <_strtod_l+0x176>
 8009522:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009524:	3001      	adds	r0, #1
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	921d      	str	r2, [sp, #116]	@ 0x74
 800952a:	785b      	ldrb	r3, [r3, #1]
 800952c:	2b30      	cmp	r3, #48	@ 0x30
 800952e:	d0f8      	beq.n	8009522 <_strtod_l+0x1f2>
 8009530:	001a      	movs	r2, r3
 8009532:	3a31      	subs	r2, #49	@ 0x31
 8009534:	2a08      	cmp	r2, #8
 8009536:	d844      	bhi.n	80095c2 <_strtod_l+0x292>
 8009538:	900e      	str	r0, [sp, #56]	@ 0x38
 800953a:	2000      	movs	r0, #0
 800953c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800953e:	9006      	str	r0, [sp, #24]
 8009540:	9213      	str	r2, [sp, #76]	@ 0x4c
 8009542:	001c      	movs	r4, r3
 8009544:	1c42      	adds	r2, r0, #1
 8009546:	3c30      	subs	r4, #48	@ 0x30
 8009548:	2b30      	cmp	r3, #48	@ 0x30
 800954a:	d01a      	beq.n	8009582 <_strtod_l+0x252>
 800954c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800954e:	9906      	ldr	r1, [sp, #24]
 8009550:	189b      	adds	r3, r3, r2
 8009552:	930e      	str	r3, [sp, #56]	@ 0x38
 8009554:	230a      	movs	r3, #10
 8009556:	469c      	mov	ip, r3
 8009558:	9d06      	ldr	r5, [sp, #24]
 800955a:	1c4b      	adds	r3, r1, #1
 800955c:	1b5d      	subs	r5, r3, r5
 800955e:	42aa      	cmp	r2, r5
 8009560:	dc17      	bgt.n	8009592 <_strtod_l+0x262>
 8009562:	43c3      	mvns	r3, r0
 8009564:	9a06      	ldr	r2, [sp, #24]
 8009566:	17db      	asrs	r3, r3, #31
 8009568:	4003      	ands	r3, r0
 800956a:	18d1      	adds	r1, r2, r3
 800956c:	3201      	adds	r2, #1
 800956e:	18d3      	adds	r3, r2, r3
 8009570:	9306      	str	r3, [sp, #24]
 8009572:	2908      	cmp	r1, #8
 8009574:	dc1c      	bgt.n	80095b0 <_strtod_l+0x280>
 8009576:	230a      	movs	r3, #10
 8009578:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800957a:	4353      	muls	r3, r2
 800957c:	2200      	movs	r2, #0
 800957e:	18e3      	adds	r3, r4, r3
 8009580:	930d      	str	r3, [sp, #52]	@ 0x34
 8009582:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009584:	0010      	movs	r0, r2
 8009586:	1c59      	adds	r1, r3, #1
 8009588:	911d      	str	r1, [sp, #116]	@ 0x74
 800958a:	785b      	ldrb	r3, [r3, #1]
 800958c:	e7c2      	b.n	8009514 <_strtod_l+0x1e4>
 800958e:	9808      	ldr	r0, [sp, #32]
 8009590:	e7cc      	b.n	800952c <_strtod_l+0x1fc>
 8009592:	2908      	cmp	r1, #8
 8009594:	dc05      	bgt.n	80095a2 <_strtod_l+0x272>
 8009596:	4665      	mov	r5, ip
 8009598:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800959a:	4369      	muls	r1, r5
 800959c:	910d      	str	r1, [sp, #52]	@ 0x34
 800959e:	0019      	movs	r1, r3
 80095a0:	e7da      	b.n	8009558 <_strtod_l+0x228>
 80095a2:	2b10      	cmp	r3, #16
 80095a4:	dcfb      	bgt.n	800959e <_strtod_l+0x26e>
 80095a6:	4661      	mov	r1, ip
 80095a8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80095aa:	434d      	muls	r5, r1
 80095ac:	9510      	str	r5, [sp, #64]	@ 0x40
 80095ae:	e7f6      	b.n	800959e <_strtod_l+0x26e>
 80095b0:	2200      	movs	r2, #0
 80095b2:	290f      	cmp	r1, #15
 80095b4:	dce5      	bgt.n	8009582 <_strtod_l+0x252>
 80095b6:	230a      	movs	r3, #10
 80095b8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80095ba:	435d      	muls	r5, r3
 80095bc:	1963      	adds	r3, r4, r5
 80095be:	9310      	str	r3, [sp, #64]	@ 0x40
 80095c0:	e7df      	b.n	8009582 <_strtod_l+0x252>
 80095c2:	2200      	movs	r2, #0
 80095c4:	920e      	str	r2, [sp, #56]	@ 0x38
 80095c6:	9206      	str	r2, [sp, #24]
 80095c8:	3201      	adds	r2, #1
 80095ca:	e7a8      	b.n	800951e <_strtod_l+0x1ee>
 80095cc:	2400      	movs	r4, #0
 80095ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d0:	3302      	adds	r3, #2
 80095d2:	931d      	str	r3, [sp, #116]	@ 0x74
 80095d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d6:	789b      	ldrb	r3, [r3, #2]
 80095d8:	001a      	movs	r2, r3
 80095da:	3a30      	subs	r2, #48	@ 0x30
 80095dc:	2a09      	cmp	r2, #9
 80095de:	d913      	bls.n	8009608 <_strtod_l+0x2d8>
 80095e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095e2:	921d      	str	r2, [sp, #116]	@ 0x74
 80095e4:	2200      	movs	r2, #0
 80095e6:	e032      	b.n	800964e <_strtod_l+0x31e>
 80095e8:	0800b774 	.word	0x0800b774
 80095ec:	7ff00000 	.word	0x7ff00000
 80095f0:	ffefffff 	.word	0xffefffff
 80095f4:	00000433 	.word	0x00000433
 80095f8:	7fffffff 	.word	0x7fffffff
 80095fc:	0800b5ab 	.word	0x0800b5ab
 8009600:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	921d      	str	r2, [sp, #116]	@ 0x74
 8009606:	785b      	ldrb	r3, [r3, #1]
 8009608:	2b30      	cmp	r3, #48	@ 0x30
 800960a:	d0f9      	beq.n	8009600 <_strtod_l+0x2d0>
 800960c:	2200      	movs	r2, #0
 800960e:	9207      	str	r2, [sp, #28]
 8009610:	001a      	movs	r2, r3
 8009612:	3a31      	subs	r2, #49	@ 0x31
 8009614:	2a08      	cmp	r2, #8
 8009616:	d81b      	bhi.n	8009650 <_strtod_l+0x320>
 8009618:	3b30      	subs	r3, #48	@ 0x30
 800961a:	001a      	movs	r2, r3
 800961c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800961e:	9307      	str	r3, [sp, #28]
 8009620:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009622:	1c59      	adds	r1, r3, #1
 8009624:	911d      	str	r1, [sp, #116]	@ 0x74
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	001d      	movs	r5, r3
 800962a:	3d30      	subs	r5, #48	@ 0x30
 800962c:	2d09      	cmp	r5, #9
 800962e:	d93a      	bls.n	80096a6 <_strtod_l+0x376>
 8009630:	9d07      	ldr	r5, [sp, #28]
 8009632:	1b49      	subs	r1, r1, r5
 8009634:	000d      	movs	r5, r1
 8009636:	49b3      	ldr	r1, [pc, #716]	@ (8009904 <_strtod_l+0x5d4>)
 8009638:	9107      	str	r1, [sp, #28]
 800963a:	2d08      	cmp	r5, #8
 800963c:	dc03      	bgt.n	8009646 <_strtod_l+0x316>
 800963e:	9207      	str	r2, [sp, #28]
 8009640:	428a      	cmp	r2, r1
 8009642:	dd00      	ble.n	8009646 <_strtod_l+0x316>
 8009644:	9107      	str	r1, [sp, #28]
 8009646:	2c00      	cmp	r4, #0
 8009648:	d002      	beq.n	8009650 <_strtod_l+0x320>
 800964a:	9a07      	ldr	r2, [sp, #28]
 800964c:	4252      	negs	r2, r2
 800964e:	9207      	str	r2, [sp, #28]
 8009650:	9a06      	ldr	r2, [sp, #24]
 8009652:	2a00      	cmp	r2, #0
 8009654:	d14b      	bne.n	80096ee <_strtod_l+0x3be>
 8009656:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009658:	4310      	orrs	r0, r2
 800965a:	d000      	beq.n	800965e <_strtod_l+0x32e>
 800965c:	e6a3      	b.n	80093a6 <_strtod_l+0x76>
 800965e:	4662      	mov	r2, ip
 8009660:	2a00      	cmp	r2, #0
 8009662:	d000      	beq.n	8009666 <_strtod_l+0x336>
 8009664:	e6bb      	b.n	80093de <_strtod_l+0xae>
 8009666:	2b69      	cmp	r3, #105	@ 0x69
 8009668:	d025      	beq.n	80096b6 <_strtod_l+0x386>
 800966a:	dc21      	bgt.n	80096b0 <_strtod_l+0x380>
 800966c:	2b49      	cmp	r3, #73	@ 0x49
 800966e:	d022      	beq.n	80096b6 <_strtod_l+0x386>
 8009670:	2b4e      	cmp	r3, #78	@ 0x4e
 8009672:	d000      	beq.n	8009676 <_strtod_l+0x346>
 8009674:	e6b3      	b.n	80093de <_strtod_l+0xae>
 8009676:	49a4      	ldr	r1, [pc, #656]	@ (8009908 <_strtod_l+0x5d8>)
 8009678:	a81d      	add	r0, sp, #116	@ 0x74
 800967a:	f001 fbf5 	bl	800ae68 <__match>
 800967e:	2800      	cmp	r0, #0
 8009680:	d100      	bne.n	8009684 <_strtod_l+0x354>
 8009682:	e6ac      	b.n	80093de <_strtod_l+0xae>
 8009684:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	2b28      	cmp	r3, #40	@ 0x28
 800968a:	d12a      	bne.n	80096e2 <_strtod_l+0x3b2>
 800968c:	499f      	ldr	r1, [pc, #636]	@ (800990c <_strtod_l+0x5dc>)
 800968e:	aa20      	add	r2, sp, #128	@ 0x80
 8009690:	a81d      	add	r0, sp, #116	@ 0x74
 8009692:	f001 fbfd 	bl	800ae90 <__hexnan>
 8009696:	2805      	cmp	r0, #5
 8009698:	d123      	bne.n	80096e2 <_strtod_l+0x3b2>
 800969a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800969c:	4a9c      	ldr	r2, [pc, #624]	@ (8009910 <_strtod_l+0x5e0>)
 800969e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80096a0:	431a      	orrs	r2, r3
 80096a2:	0017      	movs	r7, r2
 80096a4:	e67f      	b.n	80093a6 <_strtod_l+0x76>
 80096a6:	210a      	movs	r1, #10
 80096a8:	434a      	muls	r2, r1
 80096aa:	18d2      	adds	r2, r2, r3
 80096ac:	3a30      	subs	r2, #48	@ 0x30
 80096ae:	e7b7      	b.n	8009620 <_strtod_l+0x2f0>
 80096b0:	2b6e      	cmp	r3, #110	@ 0x6e
 80096b2:	d0e0      	beq.n	8009676 <_strtod_l+0x346>
 80096b4:	e693      	b.n	80093de <_strtod_l+0xae>
 80096b6:	4997      	ldr	r1, [pc, #604]	@ (8009914 <_strtod_l+0x5e4>)
 80096b8:	a81d      	add	r0, sp, #116	@ 0x74
 80096ba:	f001 fbd5 	bl	800ae68 <__match>
 80096be:	2800      	cmp	r0, #0
 80096c0:	d100      	bne.n	80096c4 <_strtod_l+0x394>
 80096c2:	e68c      	b.n	80093de <_strtod_l+0xae>
 80096c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096c6:	4994      	ldr	r1, [pc, #592]	@ (8009918 <_strtod_l+0x5e8>)
 80096c8:	3b01      	subs	r3, #1
 80096ca:	a81d      	add	r0, sp, #116	@ 0x74
 80096cc:	931d      	str	r3, [sp, #116]	@ 0x74
 80096ce:	f001 fbcb 	bl	800ae68 <__match>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d102      	bne.n	80096dc <_strtod_l+0x3ac>
 80096d6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096d8:	3301      	adds	r3, #1
 80096da:	931d      	str	r3, [sp, #116]	@ 0x74
 80096dc:	2600      	movs	r6, #0
 80096de:	4f8c      	ldr	r7, [pc, #560]	@ (8009910 <_strtod_l+0x5e0>)
 80096e0:	e661      	b.n	80093a6 <_strtod_l+0x76>
 80096e2:	488e      	ldr	r0, [pc, #568]	@ (800991c <_strtod_l+0x5ec>)
 80096e4:	f001 f8d0 	bl	800a888 <nan>
 80096e8:	0006      	movs	r6, r0
 80096ea:	000f      	movs	r7, r1
 80096ec:	e65b      	b.n	80093a6 <_strtod_l+0x76>
 80096ee:	9b07      	ldr	r3, [sp, #28]
 80096f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096f2:	1a9b      	subs	r3, r3, r2
 80096f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80096f6:	9b08      	ldr	r3, [sp, #32]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d101      	bne.n	8009700 <_strtod_l+0x3d0>
 80096fc:	9b06      	ldr	r3, [sp, #24]
 80096fe:	9308      	str	r3, [sp, #32]
 8009700:	9c06      	ldr	r4, [sp, #24]
 8009702:	2c10      	cmp	r4, #16
 8009704:	dd00      	ble.n	8009708 <_strtod_l+0x3d8>
 8009706:	2410      	movs	r4, #16
 8009708:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800970a:	f7f9 f861 	bl	80027d0 <__aeabi_ui2d>
 800970e:	9b06      	ldr	r3, [sp, #24]
 8009710:	0006      	movs	r6, r0
 8009712:	000f      	movs	r7, r1
 8009714:	2b09      	cmp	r3, #9
 8009716:	dc13      	bgt.n	8009740 <_strtod_l+0x410>
 8009718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800971a:	2b00      	cmp	r3, #0
 800971c:	d100      	bne.n	8009720 <_strtod_l+0x3f0>
 800971e:	e642      	b.n	80093a6 <_strtod_l+0x76>
 8009720:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009722:	2b00      	cmp	r3, #0
 8009724:	dc00      	bgt.n	8009728 <_strtod_l+0x3f8>
 8009726:	e07e      	b.n	8009826 <_strtod_l+0x4f6>
 8009728:	2b16      	cmp	r3, #22
 800972a:	dc63      	bgt.n	80097f4 <_strtod_l+0x4c4>
 800972c:	497c      	ldr	r1, [pc, #496]	@ (8009920 <_strtod_l+0x5f0>)
 800972e:	00db      	lsls	r3, r3, #3
 8009730:	18c9      	adds	r1, r1, r3
 8009732:	0032      	movs	r2, r6
 8009734:	6808      	ldr	r0, [r1, #0]
 8009736:	6849      	ldr	r1, [r1, #4]
 8009738:	003b      	movs	r3, r7
 800973a:	f7f8 f8cd 	bl	80018d8 <__aeabi_dmul>
 800973e:	e7d3      	b.n	80096e8 <_strtod_l+0x3b8>
 8009740:	0022      	movs	r2, r4
 8009742:	4b77      	ldr	r3, [pc, #476]	@ (8009920 <_strtod_l+0x5f0>)
 8009744:	3a09      	subs	r2, #9
 8009746:	00d2      	lsls	r2, r2, #3
 8009748:	189b      	adds	r3, r3, r2
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f7f8 f8c3 	bl	80018d8 <__aeabi_dmul>
 8009752:	0006      	movs	r6, r0
 8009754:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009756:	000f      	movs	r7, r1
 8009758:	f7f9 f83a 	bl	80027d0 <__aeabi_ui2d>
 800975c:	000b      	movs	r3, r1
 800975e:	0002      	movs	r2, r0
 8009760:	0039      	movs	r1, r7
 8009762:	0030      	movs	r0, r6
 8009764:	f7f7 f8b8 	bl	80008d8 <__aeabi_dadd>
 8009768:	9b06      	ldr	r3, [sp, #24]
 800976a:	0006      	movs	r6, r0
 800976c:	000f      	movs	r7, r1
 800976e:	2b0f      	cmp	r3, #15
 8009770:	ddd2      	ble.n	8009718 <_strtod_l+0x3e8>
 8009772:	9b06      	ldr	r3, [sp, #24]
 8009774:	1b1c      	subs	r4, r3, r4
 8009776:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009778:	18e4      	adds	r4, r4, r3
 800977a:	2c00      	cmp	r4, #0
 800977c:	dc00      	bgt.n	8009780 <_strtod_l+0x450>
 800977e:	e09b      	b.n	80098b8 <_strtod_l+0x588>
 8009780:	220f      	movs	r2, #15
 8009782:	0023      	movs	r3, r4
 8009784:	4013      	ands	r3, r2
 8009786:	4214      	tst	r4, r2
 8009788:	d00a      	beq.n	80097a0 <_strtod_l+0x470>
 800978a:	4965      	ldr	r1, [pc, #404]	@ (8009920 <_strtod_l+0x5f0>)
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	18c9      	adds	r1, r1, r3
 8009790:	0032      	movs	r2, r6
 8009792:	6808      	ldr	r0, [r1, #0]
 8009794:	6849      	ldr	r1, [r1, #4]
 8009796:	003b      	movs	r3, r7
 8009798:	f7f8 f89e 	bl	80018d8 <__aeabi_dmul>
 800979c:	0006      	movs	r6, r0
 800979e:	000f      	movs	r7, r1
 80097a0:	230f      	movs	r3, #15
 80097a2:	439c      	bics	r4, r3
 80097a4:	d073      	beq.n	800988e <_strtod_l+0x55e>
 80097a6:	3326      	adds	r3, #38	@ 0x26
 80097a8:	33ff      	adds	r3, #255	@ 0xff
 80097aa:	429c      	cmp	r4, r3
 80097ac:	dd4b      	ble.n	8009846 <_strtod_l+0x516>
 80097ae:	2300      	movs	r3, #0
 80097b0:	9306      	str	r3, [sp, #24]
 80097b2:	9307      	str	r3, [sp, #28]
 80097b4:	930d      	str	r3, [sp, #52]	@ 0x34
 80097b6:	9308      	str	r3, [sp, #32]
 80097b8:	2322      	movs	r3, #34	@ 0x22
 80097ba:	2600      	movs	r6, #0
 80097bc:	9a05      	ldr	r2, [sp, #20]
 80097be:	4f54      	ldr	r7, [pc, #336]	@ (8009910 <_strtod_l+0x5e0>)
 80097c0:	6013      	str	r3, [r2, #0]
 80097c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80097c4:	42b3      	cmp	r3, r6
 80097c6:	d100      	bne.n	80097ca <_strtod_l+0x49a>
 80097c8:	e5ed      	b.n	80093a6 <_strtod_l+0x76>
 80097ca:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80097cc:	9805      	ldr	r0, [sp, #20]
 80097ce:	f7ff f919 	bl	8008a04 <_Bfree>
 80097d2:	9908      	ldr	r1, [sp, #32]
 80097d4:	9805      	ldr	r0, [sp, #20]
 80097d6:	f7ff f915 	bl	8008a04 <_Bfree>
 80097da:	9907      	ldr	r1, [sp, #28]
 80097dc:	9805      	ldr	r0, [sp, #20]
 80097de:	f7ff f911 	bl	8008a04 <_Bfree>
 80097e2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80097e4:	9805      	ldr	r0, [sp, #20]
 80097e6:	f7ff f90d 	bl	8008a04 <_Bfree>
 80097ea:	9906      	ldr	r1, [sp, #24]
 80097ec:	9805      	ldr	r0, [sp, #20]
 80097ee:	f7ff f909 	bl	8008a04 <_Bfree>
 80097f2:	e5d8      	b.n	80093a6 <_strtod_l+0x76>
 80097f4:	2325      	movs	r3, #37	@ 0x25
 80097f6:	9a06      	ldr	r2, [sp, #24]
 80097f8:	1a9b      	subs	r3, r3, r2
 80097fa:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097fc:	4293      	cmp	r3, r2
 80097fe:	dbb8      	blt.n	8009772 <_strtod_l+0x442>
 8009800:	240f      	movs	r4, #15
 8009802:	9b06      	ldr	r3, [sp, #24]
 8009804:	4d46      	ldr	r5, [pc, #280]	@ (8009920 <_strtod_l+0x5f0>)
 8009806:	1ae4      	subs	r4, r4, r3
 8009808:	00e1      	lsls	r1, r4, #3
 800980a:	1869      	adds	r1, r5, r1
 800980c:	0032      	movs	r2, r6
 800980e:	6808      	ldr	r0, [r1, #0]
 8009810:	6849      	ldr	r1, [r1, #4]
 8009812:	003b      	movs	r3, r7
 8009814:	f7f8 f860 	bl	80018d8 <__aeabi_dmul>
 8009818:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800981a:	1b1c      	subs	r4, r3, r4
 800981c:	00e4      	lsls	r4, r4, #3
 800981e:	192d      	adds	r5, r5, r4
 8009820:	682a      	ldr	r2, [r5, #0]
 8009822:	686b      	ldr	r3, [r5, #4]
 8009824:	e789      	b.n	800973a <_strtod_l+0x40a>
 8009826:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009828:	3316      	adds	r3, #22
 800982a:	dba2      	blt.n	8009772 <_strtod_l+0x442>
 800982c:	9907      	ldr	r1, [sp, #28]
 800982e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009830:	4b3b      	ldr	r3, [pc, #236]	@ (8009920 <_strtod_l+0x5f0>)
 8009832:	1a52      	subs	r2, r2, r1
 8009834:	00d2      	lsls	r2, r2, #3
 8009836:	189b      	adds	r3, r3, r2
 8009838:	0030      	movs	r0, r6
 800983a:	681a      	ldr	r2, [r3, #0]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	0039      	movs	r1, r7
 8009840:	f7f7 fc10 	bl	8001064 <__aeabi_ddiv>
 8009844:	e750      	b.n	80096e8 <_strtod_l+0x3b8>
 8009846:	2300      	movs	r3, #0
 8009848:	0030      	movs	r0, r6
 800984a:	0039      	movs	r1, r7
 800984c:	4d35      	ldr	r5, [pc, #212]	@ (8009924 <_strtod_l+0x5f4>)
 800984e:	1124      	asrs	r4, r4, #4
 8009850:	9309      	str	r3, [sp, #36]	@ 0x24
 8009852:	2c01      	cmp	r4, #1
 8009854:	dc1e      	bgt.n	8009894 <_strtod_l+0x564>
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <_strtod_l+0x52e>
 800985a:	0006      	movs	r6, r0
 800985c:	000f      	movs	r7, r1
 800985e:	4b32      	ldr	r3, [pc, #200]	@ (8009928 <_strtod_l+0x5f8>)
 8009860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009862:	18ff      	adds	r7, r7, r3
 8009864:	4b2f      	ldr	r3, [pc, #188]	@ (8009924 <_strtod_l+0x5f4>)
 8009866:	00d5      	lsls	r5, r2, #3
 8009868:	195d      	adds	r5, r3, r5
 800986a:	0032      	movs	r2, r6
 800986c:	6828      	ldr	r0, [r5, #0]
 800986e:	6869      	ldr	r1, [r5, #4]
 8009870:	003b      	movs	r3, r7
 8009872:	f7f8 f831 	bl	80018d8 <__aeabi_dmul>
 8009876:	4b26      	ldr	r3, [pc, #152]	@ (8009910 <_strtod_l+0x5e0>)
 8009878:	4a2c      	ldr	r2, [pc, #176]	@ (800992c <_strtod_l+0x5fc>)
 800987a:	0006      	movs	r6, r0
 800987c:	400b      	ands	r3, r1
 800987e:	4293      	cmp	r3, r2
 8009880:	d895      	bhi.n	80097ae <_strtod_l+0x47e>
 8009882:	4a2b      	ldr	r2, [pc, #172]	@ (8009930 <_strtod_l+0x600>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d913      	bls.n	80098b0 <_strtod_l+0x580>
 8009888:	2601      	movs	r6, #1
 800988a:	4f2a      	ldr	r7, [pc, #168]	@ (8009934 <_strtod_l+0x604>)
 800988c:	4276      	negs	r6, r6
 800988e:	2300      	movs	r3, #0
 8009890:	9309      	str	r3, [sp, #36]	@ 0x24
 8009892:	e086      	b.n	80099a2 <_strtod_l+0x672>
 8009894:	2201      	movs	r2, #1
 8009896:	4214      	tst	r4, r2
 8009898:	d004      	beq.n	80098a4 <_strtod_l+0x574>
 800989a:	682a      	ldr	r2, [r5, #0]
 800989c:	686b      	ldr	r3, [r5, #4]
 800989e:	f7f8 f81b 	bl	80018d8 <__aeabi_dmul>
 80098a2:	2301      	movs	r3, #1
 80098a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098a6:	1064      	asrs	r4, r4, #1
 80098a8:	3201      	adds	r2, #1
 80098aa:	9209      	str	r2, [sp, #36]	@ 0x24
 80098ac:	3508      	adds	r5, #8
 80098ae:	e7d0      	b.n	8009852 <_strtod_l+0x522>
 80098b0:	23d4      	movs	r3, #212	@ 0xd4
 80098b2:	049b      	lsls	r3, r3, #18
 80098b4:	18cf      	adds	r7, r1, r3
 80098b6:	e7ea      	b.n	800988e <_strtod_l+0x55e>
 80098b8:	2c00      	cmp	r4, #0
 80098ba:	d0e8      	beq.n	800988e <_strtod_l+0x55e>
 80098bc:	4264      	negs	r4, r4
 80098be:	230f      	movs	r3, #15
 80098c0:	0022      	movs	r2, r4
 80098c2:	401a      	ands	r2, r3
 80098c4:	421c      	tst	r4, r3
 80098c6:	d00a      	beq.n	80098de <_strtod_l+0x5ae>
 80098c8:	4b15      	ldr	r3, [pc, #84]	@ (8009920 <_strtod_l+0x5f0>)
 80098ca:	00d2      	lsls	r2, r2, #3
 80098cc:	189b      	adds	r3, r3, r2
 80098ce:	0030      	movs	r0, r6
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	0039      	movs	r1, r7
 80098d6:	f7f7 fbc5 	bl	8001064 <__aeabi_ddiv>
 80098da:	0006      	movs	r6, r0
 80098dc:	000f      	movs	r7, r1
 80098de:	1124      	asrs	r4, r4, #4
 80098e0:	d0d5      	beq.n	800988e <_strtod_l+0x55e>
 80098e2:	2c1f      	cmp	r4, #31
 80098e4:	dd28      	ble.n	8009938 <_strtod_l+0x608>
 80098e6:	2300      	movs	r3, #0
 80098e8:	9306      	str	r3, [sp, #24]
 80098ea:	9307      	str	r3, [sp, #28]
 80098ec:	930d      	str	r3, [sp, #52]	@ 0x34
 80098ee:	9308      	str	r3, [sp, #32]
 80098f0:	2322      	movs	r3, #34	@ 0x22
 80098f2:	9a05      	ldr	r2, [sp, #20]
 80098f4:	2600      	movs	r6, #0
 80098f6:	6013      	str	r3, [r2, #0]
 80098f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80098fa:	2700      	movs	r7, #0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d000      	beq.n	8009902 <_strtod_l+0x5d2>
 8009900:	e763      	b.n	80097ca <_strtod_l+0x49a>
 8009902:	e550      	b.n	80093a6 <_strtod_l+0x76>
 8009904:	00004e1f 	.word	0x00004e1f
 8009908:	0800b499 	.word	0x0800b499
 800990c:	0800b760 	.word	0x0800b760
 8009910:	7ff00000 	.word	0x7ff00000
 8009914:	0800b491 	.word	0x0800b491
 8009918:	0800b4c8 	.word	0x0800b4c8
 800991c:	0800b601 	.word	0x0800b601
 8009920:	0800b698 	.word	0x0800b698
 8009924:	0800b670 	.word	0x0800b670
 8009928:	fcb00000 	.word	0xfcb00000
 800992c:	7ca00000 	.word	0x7ca00000
 8009930:	7c900000 	.word	0x7c900000
 8009934:	7fefffff 	.word	0x7fefffff
 8009938:	2310      	movs	r3, #16
 800993a:	0022      	movs	r2, r4
 800993c:	401a      	ands	r2, r3
 800993e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009940:	421c      	tst	r4, r3
 8009942:	d001      	beq.n	8009948 <_strtod_l+0x618>
 8009944:	335a      	adds	r3, #90	@ 0x5a
 8009946:	9309      	str	r3, [sp, #36]	@ 0x24
 8009948:	0030      	movs	r0, r6
 800994a:	0039      	movs	r1, r7
 800994c:	2300      	movs	r3, #0
 800994e:	4dc0      	ldr	r5, [pc, #768]	@ (8009c50 <_strtod_l+0x920>)
 8009950:	2201      	movs	r2, #1
 8009952:	4214      	tst	r4, r2
 8009954:	d004      	beq.n	8009960 <_strtod_l+0x630>
 8009956:	682a      	ldr	r2, [r5, #0]
 8009958:	686b      	ldr	r3, [r5, #4]
 800995a:	f7f7 ffbd 	bl	80018d8 <__aeabi_dmul>
 800995e:	2301      	movs	r3, #1
 8009960:	1064      	asrs	r4, r4, #1
 8009962:	3508      	adds	r5, #8
 8009964:	2c00      	cmp	r4, #0
 8009966:	d1f3      	bne.n	8009950 <_strtod_l+0x620>
 8009968:	2b00      	cmp	r3, #0
 800996a:	d001      	beq.n	8009970 <_strtod_l+0x640>
 800996c:	0006      	movs	r6, r0
 800996e:	000f      	movs	r7, r1
 8009970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <_strtod_l+0x662>
 8009976:	236b      	movs	r3, #107	@ 0x6b
 8009978:	007a      	lsls	r2, r7, #1
 800997a:	0d52      	lsrs	r2, r2, #21
 800997c:	0039      	movs	r1, r7
 800997e:	1a9b      	subs	r3, r3, r2
 8009980:	2b00      	cmp	r3, #0
 8009982:	dd06      	ble.n	8009992 <_strtod_l+0x662>
 8009984:	2b1f      	cmp	r3, #31
 8009986:	dd5c      	ble.n	8009a42 <_strtod_l+0x712>
 8009988:	2600      	movs	r6, #0
 800998a:	2b34      	cmp	r3, #52	@ 0x34
 800998c:	dd52      	ble.n	8009a34 <_strtod_l+0x704>
 800998e:	27dc      	movs	r7, #220	@ 0xdc
 8009990:	04bf      	lsls	r7, r7, #18
 8009992:	2200      	movs	r2, #0
 8009994:	2300      	movs	r3, #0
 8009996:	0030      	movs	r0, r6
 8009998:	0039      	movs	r1, r7
 800999a:	f7f6 fd57 	bl	800044c <__aeabi_dcmpeq>
 800999e:	2800      	cmp	r0, #0
 80099a0:	d1a1      	bne.n	80098e6 <_strtod_l+0x5b6>
 80099a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099a4:	9a08      	ldr	r2, [sp, #32]
 80099a6:	9300      	str	r3, [sp, #0]
 80099a8:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80099aa:	9b06      	ldr	r3, [sp, #24]
 80099ac:	9805      	ldr	r0, [sp, #20]
 80099ae:	f7ff f891 	bl	8008ad4 <__s2b>
 80099b2:	900d      	str	r0, [sp, #52]	@ 0x34
 80099b4:	2800      	cmp	r0, #0
 80099b6:	d100      	bne.n	80099ba <_strtod_l+0x68a>
 80099b8:	e6f9      	b.n	80097ae <_strtod_l+0x47e>
 80099ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099bc:	9907      	ldr	r1, [sp, #28]
 80099be:	43db      	mvns	r3, r3
 80099c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099c2:	17db      	asrs	r3, r3, #31
 80099c4:	1a52      	subs	r2, r2, r1
 80099c6:	9214      	str	r2, [sp, #80]	@ 0x50
 80099c8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099ca:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80099cc:	17d2      	asrs	r2, r2, #31
 80099ce:	4011      	ands	r1, r2
 80099d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099d2:	9114      	str	r1, [sp, #80]	@ 0x50
 80099d4:	401a      	ands	r2, r3
 80099d6:	2300      	movs	r3, #0
 80099d8:	921a      	str	r2, [sp, #104]	@ 0x68
 80099da:	9306      	str	r3, [sp, #24]
 80099dc:	9307      	str	r3, [sp, #28]
 80099de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099e0:	9805      	ldr	r0, [sp, #20]
 80099e2:	6859      	ldr	r1, [r3, #4]
 80099e4:	f7fe ffca 	bl	800897c <_Balloc>
 80099e8:	9008      	str	r0, [sp, #32]
 80099ea:	2800      	cmp	r0, #0
 80099ec:	d100      	bne.n	80099f0 <_strtod_l+0x6c0>
 80099ee:	e6e3      	b.n	80097b8 <_strtod_l+0x488>
 80099f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099f2:	300c      	adds	r0, #12
 80099f4:	0019      	movs	r1, r3
 80099f6:	691a      	ldr	r2, [r3, #16]
 80099f8:	310c      	adds	r1, #12
 80099fa:	3202      	adds	r2, #2
 80099fc:	0092      	lsls	r2, r2, #2
 80099fe:	f7fe f833 	bl	8007a68 <memcpy>
 8009a02:	ab20      	add	r3, sp, #128	@ 0x80
 8009a04:	9301      	str	r3, [sp, #4]
 8009a06:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	0032      	movs	r2, r6
 8009a0c:	003b      	movs	r3, r7
 8009a0e:	9805      	ldr	r0, [sp, #20]
 8009a10:	9610      	str	r6, [sp, #64]	@ 0x40
 8009a12:	9711      	str	r7, [sp, #68]	@ 0x44
 8009a14:	f7ff fba6 	bl	8009164 <__d2b>
 8009a18:	901e      	str	r0, [sp, #120]	@ 0x78
 8009a1a:	2800      	cmp	r0, #0
 8009a1c:	d100      	bne.n	8009a20 <_strtod_l+0x6f0>
 8009a1e:	e6cb      	b.n	80097b8 <_strtod_l+0x488>
 8009a20:	2101      	movs	r1, #1
 8009a22:	9805      	ldr	r0, [sp, #20]
 8009a24:	f7ff f8f2 	bl	8008c0c <__i2b>
 8009a28:	9007      	str	r0, [sp, #28]
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	d10e      	bne.n	8009a4c <_strtod_l+0x71c>
 8009a2e:	2300      	movs	r3, #0
 8009a30:	9307      	str	r3, [sp, #28]
 8009a32:	e6c1      	b.n	80097b8 <_strtod_l+0x488>
 8009a34:	234b      	movs	r3, #75	@ 0x4b
 8009a36:	1a9a      	subs	r2, r3, r2
 8009a38:	3b4c      	subs	r3, #76	@ 0x4c
 8009a3a:	4093      	lsls	r3, r2
 8009a3c:	4019      	ands	r1, r3
 8009a3e:	000f      	movs	r7, r1
 8009a40:	e7a7      	b.n	8009992 <_strtod_l+0x662>
 8009a42:	2201      	movs	r2, #1
 8009a44:	4252      	negs	r2, r2
 8009a46:	409a      	lsls	r2, r3
 8009a48:	4016      	ands	r6, r2
 8009a4a:	e7a2      	b.n	8009992 <_strtod_l+0x662>
 8009a4c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8009a4e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009a50:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8009a52:	1ad4      	subs	r4, r2, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	db01      	blt.n	8009a5c <_strtod_l+0x72c>
 8009a58:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8009a5a:	195d      	adds	r5, r3, r5
 8009a5c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a5e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009a60:	1a5b      	subs	r3, r3, r1
 8009a62:	2136      	movs	r1, #54	@ 0x36
 8009a64:	189b      	adds	r3, r3, r2
 8009a66:	1a8a      	subs	r2, r1, r2
 8009a68:	497a      	ldr	r1, [pc, #488]	@ (8009c54 <_strtod_l+0x924>)
 8009a6a:	2001      	movs	r0, #1
 8009a6c:	468c      	mov	ip, r1
 8009a6e:	2100      	movs	r1, #0
 8009a70:	3b01      	subs	r3, #1
 8009a72:	9115      	str	r1, [sp, #84]	@ 0x54
 8009a74:	9016      	str	r0, [sp, #88]	@ 0x58
 8009a76:	4563      	cmp	r3, ip
 8009a78:	da06      	bge.n	8009a88 <_strtod_l+0x758>
 8009a7a:	4661      	mov	r1, ip
 8009a7c:	1ac9      	subs	r1, r1, r3
 8009a7e:	1a52      	subs	r2, r2, r1
 8009a80:	291f      	cmp	r1, #31
 8009a82:	dc3f      	bgt.n	8009b04 <_strtod_l+0x7d4>
 8009a84:	4088      	lsls	r0, r1
 8009a86:	9016      	str	r0, [sp, #88]	@ 0x58
 8009a88:	18ab      	adds	r3, r5, r2
 8009a8a:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a8c:	18a4      	adds	r4, r4, r2
 8009a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a90:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a92:	191c      	adds	r4, r3, r4
 8009a94:	002b      	movs	r3, r5
 8009a96:	4295      	cmp	r5, r2
 8009a98:	dd00      	ble.n	8009a9c <_strtod_l+0x76c>
 8009a9a:	0013      	movs	r3, r2
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	dd00      	ble.n	8009aa2 <_strtod_l+0x772>
 8009aa0:	0023      	movs	r3, r4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	dd04      	ble.n	8009ab0 <_strtod_l+0x780>
 8009aa6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009aa8:	1ae4      	subs	r4, r4, r3
 8009aaa:	1ad2      	subs	r2, r2, r3
 8009aac:	920e      	str	r2, [sp, #56]	@ 0x38
 8009aae:	1aed      	subs	r5, r5, r3
 8009ab0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	dd16      	ble.n	8009ae4 <_strtod_l+0x7b4>
 8009ab6:	001a      	movs	r2, r3
 8009ab8:	9907      	ldr	r1, [sp, #28]
 8009aba:	9805      	ldr	r0, [sp, #20]
 8009abc:	f7ff f968 	bl	8008d90 <__pow5mult>
 8009ac0:	9007      	str	r0, [sp, #28]
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d0b3      	beq.n	8009a2e <_strtod_l+0x6fe>
 8009ac6:	0001      	movs	r1, r0
 8009ac8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8009aca:	9805      	ldr	r0, [sp, #20]
 8009acc:	f7ff f8b6 	bl	8008c3c <__multiply>
 8009ad0:	9013      	str	r0, [sp, #76]	@ 0x4c
 8009ad2:	2800      	cmp	r0, #0
 8009ad4:	d100      	bne.n	8009ad8 <_strtod_l+0x7a8>
 8009ad6:	e66f      	b.n	80097b8 <_strtod_l+0x488>
 8009ad8:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009ada:	9805      	ldr	r0, [sp, #20]
 8009adc:	f7fe ff92 	bl	8008a04 <_Bfree>
 8009ae0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ae2:	931e      	str	r3, [sp, #120]	@ 0x78
 8009ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	dc12      	bgt.n	8009b10 <_strtod_l+0x7e0>
 8009aea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dd18      	ble.n	8009b22 <_strtod_l+0x7f2>
 8009af0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009af2:	9908      	ldr	r1, [sp, #32]
 8009af4:	9805      	ldr	r0, [sp, #20]
 8009af6:	f7ff f94b 	bl	8008d90 <__pow5mult>
 8009afa:	9008      	str	r0, [sp, #32]
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d110      	bne.n	8009b22 <_strtod_l+0x7f2>
 8009b00:	2300      	movs	r3, #0
 8009b02:	e658      	b.n	80097b6 <_strtod_l+0x486>
 8009b04:	4954      	ldr	r1, [pc, #336]	@ (8009c58 <_strtod_l+0x928>)
 8009b06:	1acb      	subs	r3, r1, r3
 8009b08:	0001      	movs	r1, r0
 8009b0a:	4099      	lsls	r1, r3
 8009b0c:	9115      	str	r1, [sp, #84]	@ 0x54
 8009b0e:	e7ba      	b.n	8009a86 <_strtod_l+0x756>
 8009b10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b12:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009b14:	9805      	ldr	r0, [sp, #20]
 8009b16:	f7ff f997 	bl	8008e48 <__lshift>
 8009b1a:	901e      	str	r0, [sp, #120]	@ 0x78
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d1e4      	bne.n	8009aea <_strtod_l+0x7ba>
 8009b20:	e64a      	b.n	80097b8 <_strtod_l+0x488>
 8009b22:	2c00      	cmp	r4, #0
 8009b24:	dd07      	ble.n	8009b36 <_strtod_l+0x806>
 8009b26:	0022      	movs	r2, r4
 8009b28:	9908      	ldr	r1, [sp, #32]
 8009b2a:	9805      	ldr	r0, [sp, #20]
 8009b2c:	f7ff f98c 	bl	8008e48 <__lshift>
 8009b30:	9008      	str	r0, [sp, #32]
 8009b32:	2800      	cmp	r0, #0
 8009b34:	d0e4      	beq.n	8009b00 <_strtod_l+0x7d0>
 8009b36:	2d00      	cmp	r5, #0
 8009b38:	dd08      	ble.n	8009b4c <_strtod_l+0x81c>
 8009b3a:	002a      	movs	r2, r5
 8009b3c:	9907      	ldr	r1, [sp, #28]
 8009b3e:	9805      	ldr	r0, [sp, #20]
 8009b40:	f7ff f982 	bl	8008e48 <__lshift>
 8009b44:	9007      	str	r0, [sp, #28]
 8009b46:	2800      	cmp	r0, #0
 8009b48:	d100      	bne.n	8009b4c <_strtod_l+0x81c>
 8009b4a:	e635      	b.n	80097b8 <_strtod_l+0x488>
 8009b4c:	9a08      	ldr	r2, [sp, #32]
 8009b4e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009b50:	9805      	ldr	r0, [sp, #20]
 8009b52:	f7ff fa01 	bl	8008f58 <__mdiff>
 8009b56:	9006      	str	r0, [sp, #24]
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d100      	bne.n	8009b5e <_strtod_l+0x82e>
 8009b5c:	e62c      	b.n	80097b8 <_strtod_l+0x488>
 8009b5e:	68c3      	ldr	r3, [r0, #12]
 8009b60:	9907      	ldr	r1, [sp, #28]
 8009b62:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009b64:	2300      	movs	r3, #0
 8009b66:	60c3      	str	r3, [r0, #12]
 8009b68:	f7ff f9da 	bl	8008f20 <__mcmp>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	da3b      	bge.n	8009be8 <_strtod_l+0x8b8>
 8009b70:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b72:	4333      	orrs	r3, r6
 8009b74:	d167      	bne.n	8009c46 <_strtod_l+0x916>
 8009b76:	033b      	lsls	r3, r7, #12
 8009b78:	d165      	bne.n	8009c46 <_strtod_l+0x916>
 8009b7a:	22d6      	movs	r2, #214	@ 0xd6
 8009b7c:	4b37      	ldr	r3, [pc, #220]	@ (8009c5c <_strtod_l+0x92c>)
 8009b7e:	04d2      	lsls	r2, r2, #19
 8009b80:	403b      	ands	r3, r7
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d95f      	bls.n	8009c46 <_strtod_l+0x916>
 8009b86:	9b06      	ldr	r3, [sp, #24]
 8009b88:	695b      	ldr	r3, [r3, #20]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d103      	bne.n	8009b96 <_strtod_l+0x866>
 8009b8e:	9b06      	ldr	r3, [sp, #24]
 8009b90:	691b      	ldr	r3, [r3, #16]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	dd57      	ble.n	8009c46 <_strtod_l+0x916>
 8009b96:	9906      	ldr	r1, [sp, #24]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	9805      	ldr	r0, [sp, #20]
 8009b9c:	f7ff f954 	bl	8008e48 <__lshift>
 8009ba0:	9907      	ldr	r1, [sp, #28]
 8009ba2:	9006      	str	r0, [sp, #24]
 8009ba4:	f7ff f9bc 	bl	8008f20 <__mcmp>
 8009ba8:	2800      	cmp	r0, #0
 8009baa:	dd4c      	ble.n	8009c46 <_strtod_l+0x916>
 8009bac:	4b2b      	ldr	r3, [pc, #172]	@ (8009c5c <_strtod_l+0x92c>)
 8009bae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009bb0:	403b      	ands	r3, r7
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	d074      	beq.n	8009ca0 <_strtod_l+0x970>
 8009bb6:	22d6      	movs	r2, #214	@ 0xd6
 8009bb8:	04d2      	lsls	r2, r2, #19
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d870      	bhi.n	8009ca0 <_strtod_l+0x970>
 8009bbe:	22dc      	movs	r2, #220	@ 0xdc
 8009bc0:	0492      	lsls	r2, r2, #18
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d800      	bhi.n	8009bc8 <_strtod_l+0x898>
 8009bc6:	e693      	b.n	80098f0 <_strtod_l+0x5c0>
 8009bc8:	0030      	movs	r0, r6
 8009bca:	0039      	movs	r1, r7
 8009bcc:	4b24      	ldr	r3, [pc, #144]	@ (8009c60 <_strtod_l+0x930>)
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f7f7 fe82 	bl	80018d8 <__aeabi_dmul>
 8009bd4:	4b21      	ldr	r3, [pc, #132]	@ (8009c5c <_strtod_l+0x92c>)
 8009bd6:	0006      	movs	r6, r0
 8009bd8:	000f      	movs	r7, r1
 8009bda:	420b      	tst	r3, r1
 8009bdc:	d000      	beq.n	8009be0 <_strtod_l+0x8b0>
 8009bde:	e5f4      	b.n	80097ca <_strtod_l+0x49a>
 8009be0:	2322      	movs	r3, #34	@ 0x22
 8009be2:	9a05      	ldr	r2, [sp, #20]
 8009be4:	6013      	str	r3, [r2, #0]
 8009be6:	e5f0      	b.n	80097ca <_strtod_l+0x49a>
 8009be8:	970e      	str	r7, [sp, #56]	@ 0x38
 8009bea:	2800      	cmp	r0, #0
 8009bec:	d175      	bne.n	8009cda <_strtod_l+0x9aa>
 8009bee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009bf0:	033b      	lsls	r3, r7, #12
 8009bf2:	0b1b      	lsrs	r3, r3, #12
 8009bf4:	2a00      	cmp	r2, #0
 8009bf6:	d039      	beq.n	8009c6c <_strtod_l+0x93c>
 8009bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8009c64 <_strtod_l+0x934>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d138      	bne.n	8009c70 <_strtod_l+0x940>
 8009bfe:	2101      	movs	r1, #1
 8009c00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c02:	4249      	negs	r1, r1
 8009c04:	0032      	movs	r2, r6
 8009c06:	0008      	movs	r0, r1
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d00b      	beq.n	8009c24 <_strtod_l+0x8f4>
 8009c0c:	24d4      	movs	r4, #212	@ 0xd4
 8009c0e:	4b13      	ldr	r3, [pc, #76]	@ (8009c5c <_strtod_l+0x92c>)
 8009c10:	0008      	movs	r0, r1
 8009c12:	403b      	ands	r3, r7
 8009c14:	04e4      	lsls	r4, r4, #19
 8009c16:	42a3      	cmp	r3, r4
 8009c18:	d804      	bhi.n	8009c24 <_strtod_l+0x8f4>
 8009c1a:	306c      	adds	r0, #108	@ 0x6c
 8009c1c:	0d1b      	lsrs	r3, r3, #20
 8009c1e:	1ac3      	subs	r3, r0, r3
 8009c20:	4099      	lsls	r1, r3
 8009c22:	0008      	movs	r0, r1
 8009c24:	4282      	cmp	r2, r0
 8009c26:	d123      	bne.n	8009c70 <_strtod_l+0x940>
 8009c28:	4b0f      	ldr	r3, [pc, #60]	@ (8009c68 <_strtod_l+0x938>)
 8009c2a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009c2c:	4299      	cmp	r1, r3
 8009c2e:	d102      	bne.n	8009c36 <_strtod_l+0x906>
 8009c30:	3201      	adds	r2, #1
 8009c32:	d100      	bne.n	8009c36 <_strtod_l+0x906>
 8009c34:	e5c0      	b.n	80097b8 <_strtod_l+0x488>
 8009c36:	4b09      	ldr	r3, [pc, #36]	@ (8009c5c <_strtod_l+0x92c>)
 8009c38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c3a:	2600      	movs	r6, #0
 8009c3c:	401a      	ands	r2, r3
 8009c3e:	0013      	movs	r3, r2
 8009c40:	2280      	movs	r2, #128	@ 0x80
 8009c42:	0352      	lsls	r2, r2, #13
 8009c44:	189f      	adds	r7, r3, r2
 8009c46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1bd      	bne.n	8009bc8 <_strtod_l+0x898>
 8009c4c:	e5bd      	b.n	80097ca <_strtod_l+0x49a>
 8009c4e:	46c0      	nop			@ (mov r8, r8)
 8009c50:	0800b788 	.word	0x0800b788
 8009c54:	fffffc02 	.word	0xfffffc02
 8009c58:	fffffbe2 	.word	0xfffffbe2
 8009c5c:	7ff00000 	.word	0x7ff00000
 8009c60:	39500000 	.word	0x39500000
 8009c64:	000fffff 	.word	0x000fffff
 8009c68:	7fefffff 	.word	0x7fefffff
 8009c6c:	4333      	orrs	r3, r6
 8009c6e:	d09d      	beq.n	8009bac <_strtod_l+0x87c>
 8009c70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01c      	beq.n	8009cb0 <_strtod_l+0x980>
 8009c76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c78:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009c7a:	4213      	tst	r3, r2
 8009c7c:	d0e3      	beq.n	8009c46 <_strtod_l+0x916>
 8009c7e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009c80:	0030      	movs	r0, r6
 8009c82:	0039      	movs	r1, r7
 8009c84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d016      	beq.n	8009cb8 <_strtod_l+0x988>
 8009c8a:	f7ff fb39 	bl	8009300 <sulp>
 8009c8e:	0002      	movs	r2, r0
 8009c90:	000b      	movs	r3, r1
 8009c92:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009c94:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009c96:	f7f6 fe1f 	bl	80008d8 <__aeabi_dadd>
 8009c9a:	0006      	movs	r6, r0
 8009c9c:	000f      	movs	r7, r1
 8009c9e:	e7d2      	b.n	8009c46 <_strtod_l+0x916>
 8009ca0:	2601      	movs	r6, #1
 8009ca2:	4a92      	ldr	r2, [pc, #584]	@ (8009eec <_strtod_l+0xbbc>)
 8009ca4:	4276      	negs	r6, r6
 8009ca6:	189b      	adds	r3, r3, r2
 8009ca8:	4a91      	ldr	r2, [pc, #580]	@ (8009ef0 <_strtod_l+0xbc0>)
 8009caa:	431a      	orrs	r2, r3
 8009cac:	0017      	movs	r7, r2
 8009cae:	e7ca      	b.n	8009c46 <_strtod_l+0x916>
 8009cb0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009cb2:	4233      	tst	r3, r6
 8009cb4:	d0c7      	beq.n	8009c46 <_strtod_l+0x916>
 8009cb6:	e7e2      	b.n	8009c7e <_strtod_l+0x94e>
 8009cb8:	f7ff fb22 	bl	8009300 <sulp>
 8009cbc:	0002      	movs	r2, r0
 8009cbe:	000b      	movs	r3, r1
 8009cc0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009cc2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009cc4:	f7f8 f8ee 	bl	8001ea4 <__aeabi_dsub>
 8009cc8:	2200      	movs	r2, #0
 8009cca:	2300      	movs	r3, #0
 8009ccc:	0006      	movs	r6, r0
 8009cce:	000f      	movs	r7, r1
 8009cd0:	f7f6 fbbc 	bl	800044c <__aeabi_dcmpeq>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d0b6      	beq.n	8009c46 <_strtod_l+0x916>
 8009cd8:	e60a      	b.n	80098f0 <_strtod_l+0x5c0>
 8009cda:	9907      	ldr	r1, [sp, #28]
 8009cdc:	9806      	ldr	r0, [sp, #24]
 8009cde:	f7ff faa1 	bl	8009224 <__ratio>
 8009ce2:	2380      	movs	r3, #128	@ 0x80
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	05db      	lsls	r3, r3, #23
 8009ce8:	0004      	movs	r4, r0
 8009cea:	000d      	movs	r5, r1
 8009cec:	f7f6 fbbe 	bl	800046c <__aeabi_dcmple>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d06c      	beq.n	8009dce <_strtod_l+0xa9e>
 8009cf4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d177      	bne.n	8009dea <_strtod_l+0xaba>
 8009cfa:	2e00      	cmp	r6, #0
 8009cfc:	d157      	bne.n	8009dae <_strtod_l+0xa7e>
 8009cfe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d00:	031b      	lsls	r3, r3, #12
 8009d02:	d15a      	bne.n	8009dba <_strtod_l+0xa8a>
 8009d04:	2200      	movs	r2, #0
 8009d06:	0020      	movs	r0, r4
 8009d08:	0029      	movs	r1, r5
 8009d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8009ef4 <_strtod_l+0xbc4>)
 8009d0c:	f7f6 fba4 	bl	8000458 <__aeabi_dcmplt>
 8009d10:	2800      	cmp	r0, #0
 8009d12:	d159      	bne.n	8009dc8 <_strtod_l+0xa98>
 8009d14:	0020      	movs	r0, r4
 8009d16:	0029      	movs	r1, r5
 8009d18:	2200      	movs	r2, #0
 8009d1a:	4b77      	ldr	r3, [pc, #476]	@ (8009ef8 <_strtod_l+0xbc8>)
 8009d1c:	f7f7 fddc 	bl	80018d8 <__aeabi_dmul>
 8009d20:	0004      	movs	r4, r0
 8009d22:	000d      	movs	r5, r1
 8009d24:	2380      	movs	r3, #128	@ 0x80
 8009d26:	061b      	lsls	r3, r3, #24
 8009d28:	18eb      	adds	r3, r5, r3
 8009d2a:	940a      	str	r4, [sp, #40]	@ 0x28
 8009d2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d32:	9216      	str	r2, [sp, #88]	@ 0x58
 8009d34:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009d36:	4a71      	ldr	r2, [pc, #452]	@ (8009efc <_strtod_l+0xbcc>)
 8009d38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d3a:	4013      	ands	r3, r2
 8009d3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8009d3e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009d40:	4b6f      	ldr	r3, [pc, #444]	@ (8009f00 <_strtod_l+0xbd0>)
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d000      	beq.n	8009d48 <_strtod_l+0xa18>
 8009d46:	e087      	b.n	8009e58 <_strtod_l+0xb28>
 8009d48:	4a6e      	ldr	r2, [pc, #440]	@ (8009f04 <_strtod_l+0xbd4>)
 8009d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d4c:	4694      	mov	ip, r2
 8009d4e:	4463      	add	r3, ip
 8009d50:	001f      	movs	r7, r3
 8009d52:	0030      	movs	r0, r6
 8009d54:	0019      	movs	r1, r3
 8009d56:	f7ff f999 	bl	800908c <__ulp>
 8009d5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d5e:	f7f7 fdbb 	bl	80018d8 <__aeabi_dmul>
 8009d62:	0032      	movs	r2, r6
 8009d64:	003b      	movs	r3, r7
 8009d66:	f7f6 fdb7 	bl	80008d8 <__aeabi_dadd>
 8009d6a:	4a64      	ldr	r2, [pc, #400]	@ (8009efc <_strtod_l+0xbcc>)
 8009d6c:	4b66      	ldr	r3, [pc, #408]	@ (8009f08 <_strtod_l+0xbd8>)
 8009d6e:	0006      	movs	r6, r0
 8009d70:	400a      	ands	r2, r1
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d940      	bls.n	8009df8 <_strtod_l+0xac8>
 8009d76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009d78:	4a64      	ldr	r2, [pc, #400]	@ (8009f0c <_strtod_l+0xbdc>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d103      	bne.n	8009d86 <_strtod_l+0xa56>
 8009d7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009d80:	3301      	adds	r3, #1
 8009d82:	d100      	bne.n	8009d86 <_strtod_l+0xa56>
 8009d84:	e518      	b.n	80097b8 <_strtod_l+0x488>
 8009d86:	2601      	movs	r6, #1
 8009d88:	4f60      	ldr	r7, [pc, #384]	@ (8009f0c <_strtod_l+0xbdc>)
 8009d8a:	4276      	negs	r6, r6
 8009d8c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8009d8e:	9805      	ldr	r0, [sp, #20]
 8009d90:	f7fe fe38 	bl	8008a04 <_Bfree>
 8009d94:	9908      	ldr	r1, [sp, #32]
 8009d96:	9805      	ldr	r0, [sp, #20]
 8009d98:	f7fe fe34 	bl	8008a04 <_Bfree>
 8009d9c:	9907      	ldr	r1, [sp, #28]
 8009d9e:	9805      	ldr	r0, [sp, #20]
 8009da0:	f7fe fe30 	bl	8008a04 <_Bfree>
 8009da4:	9906      	ldr	r1, [sp, #24]
 8009da6:	9805      	ldr	r0, [sp, #20]
 8009da8:	f7fe fe2c 	bl	8008a04 <_Bfree>
 8009dac:	e617      	b.n	80099de <_strtod_l+0x6ae>
 8009dae:	2e01      	cmp	r6, #1
 8009db0:	d103      	bne.n	8009dba <_strtod_l+0xa8a>
 8009db2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d100      	bne.n	8009dba <_strtod_l+0xa8a>
 8009db8:	e59a      	b.n	80098f0 <_strtod_l+0x5c0>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	4c54      	ldr	r4, [pc, #336]	@ (8009f10 <_strtod_l+0xbe0>)
 8009dbe:	4d4d      	ldr	r5, [pc, #308]	@ (8009ef4 <_strtod_l+0xbc4>)
 8009dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dc2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009dc4:	2400      	movs	r4, #0
 8009dc6:	e7b2      	b.n	8009d2e <_strtod_l+0x9fe>
 8009dc8:	2400      	movs	r4, #0
 8009dca:	4d4b      	ldr	r5, [pc, #300]	@ (8009ef8 <_strtod_l+0xbc8>)
 8009dcc:	e7aa      	b.n	8009d24 <_strtod_l+0x9f4>
 8009dce:	0020      	movs	r0, r4
 8009dd0:	0029      	movs	r1, r5
 8009dd2:	4b49      	ldr	r3, [pc, #292]	@ (8009ef8 <_strtod_l+0xbc8>)
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f7f7 fd7f 	bl	80018d8 <__aeabi_dmul>
 8009dda:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009ddc:	0004      	movs	r4, r0
 8009dde:	000d      	movs	r5, r1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d09f      	beq.n	8009d24 <_strtod_l+0x9f4>
 8009de4:	940a      	str	r4, [sp, #40]	@ 0x28
 8009de6:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009de8:	e7a1      	b.n	8009d2e <_strtod_l+0x9fe>
 8009dea:	2300      	movs	r3, #0
 8009dec:	4c41      	ldr	r4, [pc, #260]	@ (8009ef4 <_strtod_l+0xbc4>)
 8009dee:	0025      	movs	r5, r4
 8009df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009df2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009df4:	001c      	movs	r4, r3
 8009df6:	e79a      	b.n	8009d2e <_strtod_l+0x9fe>
 8009df8:	23d4      	movs	r3, #212	@ 0xd4
 8009dfa:	049b      	lsls	r3, r3, #18
 8009dfc:	18cf      	adds	r7, r1, r3
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	9710      	str	r7, [sp, #64]	@ 0x40
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1c2      	bne.n	8009d8c <_strtod_l+0xa5c>
 8009e06:	4b3d      	ldr	r3, [pc, #244]	@ (8009efc <_strtod_l+0xbcc>)
 8009e08:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009e0a:	403b      	ands	r3, r7
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d1bd      	bne.n	8009d8c <_strtod_l+0xa5c>
 8009e10:	0020      	movs	r0, r4
 8009e12:	0029      	movs	r1, r5
 8009e14:	f7f6 fb66 	bl	80004e4 <__aeabi_d2lz>
 8009e18:	f7f6 fb9e 	bl	8000558 <__aeabi_l2d>
 8009e1c:	0002      	movs	r2, r0
 8009e1e:	000b      	movs	r3, r1
 8009e20:	0020      	movs	r0, r4
 8009e22:	0029      	movs	r1, r5
 8009e24:	f7f8 f83e 	bl	8001ea4 <__aeabi_dsub>
 8009e28:	033c      	lsls	r4, r7, #12
 8009e2a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e2c:	0b24      	lsrs	r4, r4, #12
 8009e2e:	4334      	orrs	r4, r6
 8009e30:	900e      	str	r0, [sp, #56]	@ 0x38
 8009e32:	910f      	str	r1, [sp, #60]	@ 0x3c
 8009e34:	4a37      	ldr	r2, [pc, #220]	@ (8009f14 <_strtod_l+0xbe4>)
 8009e36:	431c      	orrs	r4, r3
 8009e38:	d052      	beq.n	8009ee0 <_strtod_l+0xbb0>
 8009e3a:	4b37      	ldr	r3, [pc, #220]	@ (8009f18 <_strtod_l+0xbe8>)
 8009e3c:	f7f6 fb0c 	bl	8000458 <__aeabi_dcmplt>
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d000      	beq.n	8009e46 <_strtod_l+0xb16>
 8009e44:	e4c1      	b.n	80097ca <_strtod_l+0x49a>
 8009e46:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009e48:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009e4a:	4a34      	ldr	r2, [pc, #208]	@ (8009f1c <_strtod_l+0xbec>)
 8009e4c:	4b2a      	ldr	r3, [pc, #168]	@ (8009ef8 <_strtod_l+0xbc8>)
 8009e4e:	f7f6 fb17 	bl	8000480 <__aeabi_dcmpgt>
 8009e52:	2800      	cmp	r0, #0
 8009e54:	d09a      	beq.n	8009d8c <_strtod_l+0xa5c>
 8009e56:	e4b8      	b.n	80097ca <_strtod_l+0x49a>
 8009e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d02a      	beq.n	8009eb4 <_strtod_l+0xb84>
 8009e5e:	23d4      	movs	r3, #212	@ 0xd4
 8009e60:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009e62:	04db      	lsls	r3, r3, #19
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d825      	bhi.n	8009eb4 <_strtod_l+0xb84>
 8009e68:	0020      	movs	r0, r4
 8009e6a:	0029      	movs	r1, r5
 8009e6c:	4a2c      	ldr	r2, [pc, #176]	@ (8009f20 <_strtod_l+0xbf0>)
 8009e6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f24 <_strtod_l+0xbf4>)
 8009e70:	f7f6 fafc 	bl	800046c <__aeabi_dcmple>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d016      	beq.n	8009ea6 <_strtod_l+0xb76>
 8009e78:	0020      	movs	r0, r4
 8009e7a:	0029      	movs	r1, r5
 8009e7c:	f7f6 fb14 	bl	80004a8 <__aeabi_d2uiz>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d100      	bne.n	8009e86 <_strtod_l+0xb56>
 8009e84:	3001      	adds	r0, #1
 8009e86:	f7f8 fca3 	bl	80027d0 <__aeabi_ui2d>
 8009e8a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009e8c:	0004      	movs	r4, r0
 8009e8e:	000d      	movs	r5, r1
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d122      	bne.n	8009eda <_strtod_l+0xbaa>
 8009e94:	2380      	movs	r3, #128	@ 0x80
 8009e96:	061b      	lsls	r3, r3, #24
 8009e98:	18cb      	adds	r3, r1, r3
 8009e9a:	9018      	str	r0, [sp, #96]	@ 0x60
 8009e9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8009e9e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8009ea0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ea2:	9216      	str	r2, [sp, #88]	@ 0x58
 8009ea4:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009ea6:	22d6      	movs	r2, #214	@ 0xd6
 8009ea8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009eaa:	04d2      	lsls	r2, r2, #19
 8009eac:	189b      	adds	r3, r3, r2
 8009eae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8009eb4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8009eb6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009eb8:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8009eba:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8009ebc:	f7ff f8e6 	bl	800908c <__ulp>
 8009ec0:	0002      	movs	r2, r0
 8009ec2:	000b      	movs	r3, r1
 8009ec4:	0030      	movs	r0, r6
 8009ec6:	0039      	movs	r1, r7
 8009ec8:	f7f7 fd06 	bl	80018d8 <__aeabi_dmul>
 8009ecc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009ece:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ed0:	f7f6 fd02 	bl	80008d8 <__aeabi_dadd>
 8009ed4:	0006      	movs	r6, r0
 8009ed6:	000f      	movs	r7, r1
 8009ed8:	e791      	b.n	8009dfe <_strtod_l+0xace>
 8009eda:	9418      	str	r4, [sp, #96]	@ 0x60
 8009edc:	9519      	str	r5, [sp, #100]	@ 0x64
 8009ede:	e7de      	b.n	8009e9e <_strtod_l+0xb6e>
 8009ee0:	4b11      	ldr	r3, [pc, #68]	@ (8009f28 <_strtod_l+0xbf8>)
 8009ee2:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009ee4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009ee6:	f7f6 fab7 	bl	8000458 <__aeabi_dcmplt>
 8009eea:	e7b2      	b.n	8009e52 <_strtod_l+0xb22>
 8009eec:	fff00000 	.word	0xfff00000
 8009ef0:	000fffff 	.word	0x000fffff
 8009ef4:	3ff00000 	.word	0x3ff00000
 8009ef8:	3fe00000 	.word	0x3fe00000
 8009efc:	7ff00000 	.word	0x7ff00000
 8009f00:	7fe00000 	.word	0x7fe00000
 8009f04:	fcb00000 	.word	0xfcb00000
 8009f08:	7c9fffff 	.word	0x7c9fffff
 8009f0c:	7fefffff 	.word	0x7fefffff
 8009f10:	bff00000 	.word	0xbff00000
 8009f14:	94a03595 	.word	0x94a03595
 8009f18:	3fdfffff 	.word	0x3fdfffff
 8009f1c:	35afe535 	.word	0x35afe535
 8009f20:	ffc00000 	.word	0xffc00000
 8009f24:	41dfffff 	.word	0x41dfffff
 8009f28:	3fcfffff 	.word	0x3fcfffff

08009f2c <_strtod_r>:
 8009f2c:	b510      	push	{r4, lr}
 8009f2e:	4b02      	ldr	r3, [pc, #8]	@ (8009f38 <_strtod_r+0xc>)
 8009f30:	f7ff f9fe 	bl	8009330 <_strtod_l>
 8009f34:	bd10      	pop	{r4, pc}
 8009f36:	46c0      	nop			@ (mov r8, r8)
 8009f38:	20000068 	.word	0x20000068

08009f3c <_strtol_l.isra.0>:
 8009f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f3e:	b085      	sub	sp, #20
 8009f40:	0017      	movs	r7, r2
 8009f42:	001e      	movs	r6, r3
 8009f44:	9003      	str	r0, [sp, #12]
 8009f46:	9101      	str	r1, [sp, #4]
 8009f48:	2b24      	cmp	r3, #36	@ 0x24
 8009f4a:	d823      	bhi.n	8009f94 <_strtol_l.isra.0+0x58>
 8009f4c:	000c      	movs	r4, r1
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d020      	beq.n	8009f94 <_strtol_l.isra.0+0x58>
 8009f52:	4b3d      	ldr	r3, [pc, #244]	@ (800a048 <_strtol_l.isra.0+0x10c>)
 8009f54:	2208      	movs	r2, #8
 8009f56:	469c      	mov	ip, r3
 8009f58:	0023      	movs	r3, r4
 8009f5a:	4661      	mov	r1, ip
 8009f5c:	781d      	ldrb	r5, [r3, #0]
 8009f5e:	3401      	adds	r4, #1
 8009f60:	5d48      	ldrb	r0, [r1, r5]
 8009f62:	0001      	movs	r1, r0
 8009f64:	4011      	ands	r1, r2
 8009f66:	4210      	tst	r0, r2
 8009f68:	d1f6      	bne.n	8009f58 <_strtol_l.isra.0+0x1c>
 8009f6a:	2d2d      	cmp	r5, #45	@ 0x2d
 8009f6c:	d119      	bne.n	8009fa2 <_strtol_l.isra.0+0x66>
 8009f6e:	7825      	ldrb	r5, [r4, #0]
 8009f70:	1c9c      	adds	r4, r3, #2
 8009f72:	2301      	movs	r3, #1
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	2210      	movs	r2, #16
 8009f78:	0033      	movs	r3, r6
 8009f7a:	4393      	bics	r3, r2
 8009f7c:	d11d      	bne.n	8009fba <_strtol_l.isra.0+0x7e>
 8009f7e:	2d30      	cmp	r5, #48	@ 0x30
 8009f80:	d115      	bne.n	8009fae <_strtol_l.isra.0+0x72>
 8009f82:	2120      	movs	r1, #32
 8009f84:	7823      	ldrb	r3, [r4, #0]
 8009f86:	438b      	bics	r3, r1
 8009f88:	2b58      	cmp	r3, #88	@ 0x58
 8009f8a:	d110      	bne.n	8009fae <_strtol_l.isra.0+0x72>
 8009f8c:	7865      	ldrb	r5, [r4, #1]
 8009f8e:	3402      	adds	r4, #2
 8009f90:	2610      	movs	r6, #16
 8009f92:	e012      	b.n	8009fba <_strtol_l.isra.0+0x7e>
 8009f94:	f7fd fd30 	bl	80079f8 <__errno>
 8009f98:	2316      	movs	r3, #22
 8009f9a:	6003      	str	r3, [r0, #0]
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	b005      	add	sp, #20
 8009fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fa2:	9100      	str	r1, [sp, #0]
 8009fa4:	2d2b      	cmp	r5, #43	@ 0x2b
 8009fa6:	d1e6      	bne.n	8009f76 <_strtol_l.isra.0+0x3a>
 8009fa8:	7825      	ldrb	r5, [r4, #0]
 8009faa:	1c9c      	adds	r4, r3, #2
 8009fac:	e7e3      	b.n	8009f76 <_strtol_l.isra.0+0x3a>
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d1ee      	bne.n	8009f90 <_strtol_l.isra.0+0x54>
 8009fb2:	360a      	adds	r6, #10
 8009fb4:	2d30      	cmp	r5, #48	@ 0x30
 8009fb6:	d100      	bne.n	8009fba <_strtol_l.isra.0+0x7e>
 8009fb8:	3e02      	subs	r6, #2
 8009fba:	4a24      	ldr	r2, [pc, #144]	@ (800a04c <_strtol_l.isra.0+0x110>)
 8009fbc:	9b00      	ldr	r3, [sp, #0]
 8009fbe:	4694      	mov	ip, r2
 8009fc0:	4463      	add	r3, ip
 8009fc2:	0031      	movs	r1, r6
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	9302      	str	r3, [sp, #8]
 8009fc8:	f7f6 f940 	bl	800024c <__aeabi_uidivmod>
 8009fcc:	2200      	movs	r2, #0
 8009fce:	4684      	mov	ip, r0
 8009fd0:	0010      	movs	r0, r2
 8009fd2:	002b      	movs	r3, r5
 8009fd4:	3b30      	subs	r3, #48	@ 0x30
 8009fd6:	2b09      	cmp	r3, #9
 8009fd8:	d811      	bhi.n	8009ffe <_strtol_l.isra.0+0xc2>
 8009fda:	001d      	movs	r5, r3
 8009fdc:	42ae      	cmp	r6, r5
 8009fde:	dd1d      	ble.n	800a01c <_strtol_l.isra.0+0xe0>
 8009fe0:	1c53      	adds	r3, r2, #1
 8009fe2:	d009      	beq.n	8009ff8 <_strtol_l.isra.0+0xbc>
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	4252      	negs	r2, r2
 8009fe8:	4584      	cmp	ip, r0
 8009fea:	d305      	bcc.n	8009ff8 <_strtol_l.isra.0+0xbc>
 8009fec:	d101      	bne.n	8009ff2 <_strtol_l.isra.0+0xb6>
 8009fee:	42a9      	cmp	r1, r5
 8009ff0:	db11      	blt.n	800a016 <_strtol_l.isra.0+0xda>
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4370      	muls	r0, r6
 8009ff6:	1828      	adds	r0, r5, r0
 8009ff8:	7825      	ldrb	r5, [r4, #0]
 8009ffa:	3401      	adds	r4, #1
 8009ffc:	e7e9      	b.n	8009fd2 <_strtol_l.isra.0+0x96>
 8009ffe:	002b      	movs	r3, r5
 800a000:	3b41      	subs	r3, #65	@ 0x41
 800a002:	2b19      	cmp	r3, #25
 800a004:	d801      	bhi.n	800a00a <_strtol_l.isra.0+0xce>
 800a006:	3d37      	subs	r5, #55	@ 0x37
 800a008:	e7e8      	b.n	8009fdc <_strtol_l.isra.0+0xa0>
 800a00a:	002b      	movs	r3, r5
 800a00c:	3b61      	subs	r3, #97	@ 0x61
 800a00e:	2b19      	cmp	r3, #25
 800a010:	d804      	bhi.n	800a01c <_strtol_l.isra.0+0xe0>
 800a012:	3d57      	subs	r5, #87	@ 0x57
 800a014:	e7e2      	b.n	8009fdc <_strtol_l.isra.0+0xa0>
 800a016:	2201      	movs	r2, #1
 800a018:	4252      	negs	r2, r2
 800a01a:	e7ed      	b.n	8009ff8 <_strtol_l.isra.0+0xbc>
 800a01c:	1c53      	adds	r3, r2, #1
 800a01e:	d108      	bne.n	800a032 <_strtol_l.isra.0+0xf6>
 800a020:	2322      	movs	r3, #34	@ 0x22
 800a022:	9a03      	ldr	r2, [sp, #12]
 800a024:	9802      	ldr	r0, [sp, #8]
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	2f00      	cmp	r7, #0
 800a02a:	d0b8      	beq.n	8009f9e <_strtol_l.isra.0+0x62>
 800a02c:	1e63      	subs	r3, r4, #1
 800a02e:	9301      	str	r3, [sp, #4]
 800a030:	e007      	b.n	800a042 <_strtol_l.isra.0+0x106>
 800a032:	9b00      	ldr	r3, [sp, #0]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d000      	beq.n	800a03a <_strtol_l.isra.0+0xfe>
 800a038:	4240      	negs	r0, r0
 800a03a:	2f00      	cmp	r7, #0
 800a03c:	d0af      	beq.n	8009f9e <_strtol_l.isra.0+0x62>
 800a03e:	2a00      	cmp	r2, #0
 800a040:	d1f4      	bne.n	800a02c <_strtol_l.isra.0+0xf0>
 800a042:	9b01      	ldr	r3, [sp, #4]
 800a044:	603b      	str	r3, [r7, #0]
 800a046:	e7aa      	b.n	8009f9e <_strtol_l.isra.0+0x62>
 800a048:	0800b7b1 	.word	0x0800b7b1
 800a04c:	7fffffff 	.word	0x7fffffff

0800a050 <_strtol_r>:
 800a050:	b510      	push	{r4, lr}
 800a052:	f7ff ff73 	bl	8009f3c <_strtol_l.isra.0>
 800a056:	bd10      	pop	{r4, pc}

0800a058 <__ssputs_r>:
 800a058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a05a:	688e      	ldr	r6, [r1, #8]
 800a05c:	b085      	sub	sp, #20
 800a05e:	001f      	movs	r7, r3
 800a060:	000c      	movs	r4, r1
 800a062:	680b      	ldr	r3, [r1, #0]
 800a064:	9002      	str	r0, [sp, #8]
 800a066:	9203      	str	r2, [sp, #12]
 800a068:	42be      	cmp	r6, r7
 800a06a:	d830      	bhi.n	800a0ce <__ssputs_r+0x76>
 800a06c:	210c      	movs	r1, #12
 800a06e:	5e62      	ldrsh	r2, [r4, r1]
 800a070:	2190      	movs	r1, #144	@ 0x90
 800a072:	00c9      	lsls	r1, r1, #3
 800a074:	420a      	tst	r2, r1
 800a076:	d028      	beq.n	800a0ca <__ssputs_r+0x72>
 800a078:	2003      	movs	r0, #3
 800a07a:	6921      	ldr	r1, [r4, #16]
 800a07c:	1a5b      	subs	r3, r3, r1
 800a07e:	9301      	str	r3, [sp, #4]
 800a080:	6963      	ldr	r3, [r4, #20]
 800a082:	4343      	muls	r3, r0
 800a084:	9801      	ldr	r0, [sp, #4]
 800a086:	0fdd      	lsrs	r5, r3, #31
 800a088:	18ed      	adds	r5, r5, r3
 800a08a:	1c7b      	adds	r3, r7, #1
 800a08c:	181b      	adds	r3, r3, r0
 800a08e:	106d      	asrs	r5, r5, #1
 800a090:	42ab      	cmp	r3, r5
 800a092:	d900      	bls.n	800a096 <__ssputs_r+0x3e>
 800a094:	001d      	movs	r5, r3
 800a096:	0552      	lsls	r2, r2, #21
 800a098:	d528      	bpl.n	800a0ec <__ssputs_r+0x94>
 800a09a:	0029      	movs	r1, r5
 800a09c:	9802      	ldr	r0, [sp, #8]
 800a09e:	f7fe fbdd 	bl	800885c <_malloc_r>
 800a0a2:	1e06      	subs	r6, r0, #0
 800a0a4:	d02c      	beq.n	800a100 <__ssputs_r+0xa8>
 800a0a6:	9a01      	ldr	r2, [sp, #4]
 800a0a8:	6921      	ldr	r1, [r4, #16]
 800a0aa:	f7fd fcdd 	bl	8007a68 <memcpy>
 800a0ae:	89a2      	ldrh	r2, [r4, #12]
 800a0b0:	4b18      	ldr	r3, [pc, #96]	@ (800a114 <__ssputs_r+0xbc>)
 800a0b2:	401a      	ands	r2, r3
 800a0b4:	2380      	movs	r3, #128	@ 0x80
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	9b01      	ldr	r3, [sp, #4]
 800a0bc:	6126      	str	r6, [r4, #16]
 800a0be:	18f6      	adds	r6, r6, r3
 800a0c0:	6026      	str	r6, [r4, #0]
 800a0c2:	003e      	movs	r6, r7
 800a0c4:	6165      	str	r5, [r4, #20]
 800a0c6:	1aed      	subs	r5, r5, r3
 800a0c8:	60a5      	str	r5, [r4, #8]
 800a0ca:	42be      	cmp	r6, r7
 800a0cc:	d900      	bls.n	800a0d0 <__ssputs_r+0x78>
 800a0ce:	003e      	movs	r6, r7
 800a0d0:	0032      	movs	r2, r6
 800a0d2:	9903      	ldr	r1, [sp, #12]
 800a0d4:	6820      	ldr	r0, [r4, #0]
 800a0d6:	f000 fb7e 	bl	800a7d6 <memmove>
 800a0da:	2000      	movs	r0, #0
 800a0dc:	68a3      	ldr	r3, [r4, #8]
 800a0de:	1b9b      	subs	r3, r3, r6
 800a0e0:	60a3      	str	r3, [r4, #8]
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	199b      	adds	r3, r3, r6
 800a0e6:	6023      	str	r3, [r4, #0]
 800a0e8:	b005      	add	sp, #20
 800a0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0ec:	002a      	movs	r2, r5
 800a0ee:	9802      	ldr	r0, [sp, #8]
 800a0f0:	f000 ff88 	bl	800b004 <_realloc_r>
 800a0f4:	1e06      	subs	r6, r0, #0
 800a0f6:	d1e0      	bne.n	800a0ba <__ssputs_r+0x62>
 800a0f8:	6921      	ldr	r1, [r4, #16]
 800a0fa:	9802      	ldr	r0, [sp, #8]
 800a0fc:	f7fe fb38 	bl	8008770 <_free_r>
 800a100:	230c      	movs	r3, #12
 800a102:	2001      	movs	r0, #1
 800a104:	9a02      	ldr	r2, [sp, #8]
 800a106:	4240      	negs	r0, r0
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	89a2      	ldrh	r2, [r4, #12]
 800a10c:	3334      	adds	r3, #52	@ 0x34
 800a10e:	4313      	orrs	r3, r2
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	e7e9      	b.n	800a0e8 <__ssputs_r+0x90>
 800a114:	fffffb7f 	.word	0xfffffb7f

0800a118 <_svfiprintf_r>:
 800a118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a11a:	b0a1      	sub	sp, #132	@ 0x84
 800a11c:	9003      	str	r0, [sp, #12]
 800a11e:	001d      	movs	r5, r3
 800a120:	898b      	ldrh	r3, [r1, #12]
 800a122:	000f      	movs	r7, r1
 800a124:	0016      	movs	r6, r2
 800a126:	061b      	lsls	r3, r3, #24
 800a128:	d511      	bpl.n	800a14e <_svfiprintf_r+0x36>
 800a12a:	690b      	ldr	r3, [r1, #16]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10e      	bne.n	800a14e <_svfiprintf_r+0x36>
 800a130:	2140      	movs	r1, #64	@ 0x40
 800a132:	f7fe fb93 	bl	800885c <_malloc_r>
 800a136:	6038      	str	r0, [r7, #0]
 800a138:	6138      	str	r0, [r7, #16]
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d105      	bne.n	800a14a <_svfiprintf_r+0x32>
 800a13e:	230c      	movs	r3, #12
 800a140:	9a03      	ldr	r2, [sp, #12]
 800a142:	6013      	str	r3, [r2, #0]
 800a144:	2001      	movs	r0, #1
 800a146:	4240      	negs	r0, r0
 800a148:	e0cf      	b.n	800a2ea <_svfiprintf_r+0x1d2>
 800a14a:	2340      	movs	r3, #64	@ 0x40
 800a14c:	617b      	str	r3, [r7, #20]
 800a14e:	2300      	movs	r3, #0
 800a150:	ac08      	add	r4, sp, #32
 800a152:	6163      	str	r3, [r4, #20]
 800a154:	3320      	adds	r3, #32
 800a156:	7663      	strb	r3, [r4, #25]
 800a158:	3310      	adds	r3, #16
 800a15a:	76a3      	strb	r3, [r4, #26]
 800a15c:	9507      	str	r5, [sp, #28]
 800a15e:	0035      	movs	r5, r6
 800a160:	782b      	ldrb	r3, [r5, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d001      	beq.n	800a16a <_svfiprintf_r+0x52>
 800a166:	2b25      	cmp	r3, #37	@ 0x25
 800a168:	d148      	bne.n	800a1fc <_svfiprintf_r+0xe4>
 800a16a:	1bab      	subs	r3, r5, r6
 800a16c:	9305      	str	r3, [sp, #20]
 800a16e:	42b5      	cmp	r5, r6
 800a170:	d00b      	beq.n	800a18a <_svfiprintf_r+0x72>
 800a172:	0032      	movs	r2, r6
 800a174:	0039      	movs	r1, r7
 800a176:	9803      	ldr	r0, [sp, #12]
 800a178:	f7ff ff6e 	bl	800a058 <__ssputs_r>
 800a17c:	3001      	adds	r0, #1
 800a17e:	d100      	bne.n	800a182 <_svfiprintf_r+0x6a>
 800a180:	e0ae      	b.n	800a2e0 <_svfiprintf_r+0x1c8>
 800a182:	6963      	ldr	r3, [r4, #20]
 800a184:	9a05      	ldr	r2, [sp, #20]
 800a186:	189b      	adds	r3, r3, r2
 800a188:	6163      	str	r3, [r4, #20]
 800a18a:	782b      	ldrb	r3, [r5, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d100      	bne.n	800a192 <_svfiprintf_r+0x7a>
 800a190:	e0a6      	b.n	800a2e0 <_svfiprintf_r+0x1c8>
 800a192:	2201      	movs	r2, #1
 800a194:	2300      	movs	r3, #0
 800a196:	4252      	negs	r2, r2
 800a198:	6062      	str	r2, [r4, #4]
 800a19a:	a904      	add	r1, sp, #16
 800a19c:	3254      	adds	r2, #84	@ 0x54
 800a19e:	1852      	adds	r2, r2, r1
 800a1a0:	1c6e      	adds	r6, r5, #1
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	60e3      	str	r3, [r4, #12]
 800a1a6:	60a3      	str	r3, [r4, #8]
 800a1a8:	7013      	strb	r3, [r2, #0]
 800a1aa:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a1ac:	4b54      	ldr	r3, [pc, #336]	@ (800a300 <_svfiprintf_r+0x1e8>)
 800a1ae:	2205      	movs	r2, #5
 800a1b0:	0018      	movs	r0, r3
 800a1b2:	7831      	ldrb	r1, [r6, #0]
 800a1b4:	9305      	str	r3, [sp, #20]
 800a1b6:	f7fd fc4c 	bl	8007a52 <memchr>
 800a1ba:	1c75      	adds	r5, r6, #1
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	d11f      	bne.n	800a200 <_svfiprintf_r+0xe8>
 800a1c0:	6822      	ldr	r2, [r4, #0]
 800a1c2:	06d3      	lsls	r3, r2, #27
 800a1c4:	d504      	bpl.n	800a1d0 <_svfiprintf_r+0xb8>
 800a1c6:	2353      	movs	r3, #83	@ 0x53
 800a1c8:	a904      	add	r1, sp, #16
 800a1ca:	185b      	adds	r3, r3, r1
 800a1cc:	2120      	movs	r1, #32
 800a1ce:	7019      	strb	r1, [r3, #0]
 800a1d0:	0713      	lsls	r3, r2, #28
 800a1d2:	d504      	bpl.n	800a1de <_svfiprintf_r+0xc6>
 800a1d4:	2353      	movs	r3, #83	@ 0x53
 800a1d6:	a904      	add	r1, sp, #16
 800a1d8:	185b      	adds	r3, r3, r1
 800a1da:	212b      	movs	r1, #43	@ 0x2b
 800a1dc:	7019      	strb	r1, [r3, #0]
 800a1de:	7833      	ldrb	r3, [r6, #0]
 800a1e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a1e2:	d016      	beq.n	800a212 <_svfiprintf_r+0xfa>
 800a1e4:	0035      	movs	r5, r6
 800a1e6:	2100      	movs	r1, #0
 800a1e8:	200a      	movs	r0, #10
 800a1ea:	68e3      	ldr	r3, [r4, #12]
 800a1ec:	782a      	ldrb	r2, [r5, #0]
 800a1ee:	1c6e      	adds	r6, r5, #1
 800a1f0:	3a30      	subs	r2, #48	@ 0x30
 800a1f2:	2a09      	cmp	r2, #9
 800a1f4:	d950      	bls.n	800a298 <_svfiprintf_r+0x180>
 800a1f6:	2900      	cmp	r1, #0
 800a1f8:	d111      	bne.n	800a21e <_svfiprintf_r+0x106>
 800a1fa:	e017      	b.n	800a22c <_svfiprintf_r+0x114>
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	e7af      	b.n	800a160 <_svfiprintf_r+0x48>
 800a200:	9b05      	ldr	r3, [sp, #20]
 800a202:	6822      	ldr	r2, [r4, #0]
 800a204:	1ac0      	subs	r0, r0, r3
 800a206:	2301      	movs	r3, #1
 800a208:	4083      	lsls	r3, r0
 800a20a:	4313      	orrs	r3, r2
 800a20c:	002e      	movs	r6, r5
 800a20e:	6023      	str	r3, [r4, #0]
 800a210:	e7cc      	b.n	800a1ac <_svfiprintf_r+0x94>
 800a212:	9b07      	ldr	r3, [sp, #28]
 800a214:	1d19      	adds	r1, r3, #4
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	9107      	str	r1, [sp, #28]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	db01      	blt.n	800a222 <_svfiprintf_r+0x10a>
 800a21e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a220:	e004      	b.n	800a22c <_svfiprintf_r+0x114>
 800a222:	425b      	negs	r3, r3
 800a224:	60e3      	str	r3, [r4, #12]
 800a226:	2302      	movs	r3, #2
 800a228:	4313      	orrs	r3, r2
 800a22a:	6023      	str	r3, [r4, #0]
 800a22c:	782b      	ldrb	r3, [r5, #0]
 800a22e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a230:	d10c      	bne.n	800a24c <_svfiprintf_r+0x134>
 800a232:	786b      	ldrb	r3, [r5, #1]
 800a234:	2b2a      	cmp	r3, #42	@ 0x2a
 800a236:	d134      	bne.n	800a2a2 <_svfiprintf_r+0x18a>
 800a238:	9b07      	ldr	r3, [sp, #28]
 800a23a:	3502      	adds	r5, #2
 800a23c:	1d1a      	adds	r2, r3, #4
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	9207      	str	r2, [sp, #28]
 800a242:	2b00      	cmp	r3, #0
 800a244:	da01      	bge.n	800a24a <_svfiprintf_r+0x132>
 800a246:	2301      	movs	r3, #1
 800a248:	425b      	negs	r3, r3
 800a24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24c:	4e2d      	ldr	r6, [pc, #180]	@ (800a304 <_svfiprintf_r+0x1ec>)
 800a24e:	2203      	movs	r2, #3
 800a250:	0030      	movs	r0, r6
 800a252:	7829      	ldrb	r1, [r5, #0]
 800a254:	f7fd fbfd 	bl	8007a52 <memchr>
 800a258:	2800      	cmp	r0, #0
 800a25a:	d006      	beq.n	800a26a <_svfiprintf_r+0x152>
 800a25c:	2340      	movs	r3, #64	@ 0x40
 800a25e:	1b80      	subs	r0, r0, r6
 800a260:	4083      	lsls	r3, r0
 800a262:	6822      	ldr	r2, [r4, #0]
 800a264:	3501      	adds	r5, #1
 800a266:	4313      	orrs	r3, r2
 800a268:	6023      	str	r3, [r4, #0]
 800a26a:	7829      	ldrb	r1, [r5, #0]
 800a26c:	2206      	movs	r2, #6
 800a26e:	4826      	ldr	r0, [pc, #152]	@ (800a308 <_svfiprintf_r+0x1f0>)
 800a270:	1c6e      	adds	r6, r5, #1
 800a272:	7621      	strb	r1, [r4, #24]
 800a274:	f7fd fbed 	bl	8007a52 <memchr>
 800a278:	2800      	cmp	r0, #0
 800a27a:	d038      	beq.n	800a2ee <_svfiprintf_r+0x1d6>
 800a27c:	4b23      	ldr	r3, [pc, #140]	@ (800a30c <_svfiprintf_r+0x1f4>)
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d122      	bne.n	800a2c8 <_svfiprintf_r+0x1b0>
 800a282:	2207      	movs	r2, #7
 800a284:	9b07      	ldr	r3, [sp, #28]
 800a286:	3307      	adds	r3, #7
 800a288:	4393      	bics	r3, r2
 800a28a:	3308      	adds	r3, #8
 800a28c:	9307      	str	r3, [sp, #28]
 800a28e:	6963      	ldr	r3, [r4, #20]
 800a290:	9a04      	ldr	r2, [sp, #16]
 800a292:	189b      	adds	r3, r3, r2
 800a294:	6163      	str	r3, [r4, #20]
 800a296:	e762      	b.n	800a15e <_svfiprintf_r+0x46>
 800a298:	4343      	muls	r3, r0
 800a29a:	0035      	movs	r5, r6
 800a29c:	2101      	movs	r1, #1
 800a29e:	189b      	adds	r3, r3, r2
 800a2a0:	e7a4      	b.n	800a1ec <_svfiprintf_r+0xd4>
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	200a      	movs	r0, #10
 800a2a6:	0019      	movs	r1, r3
 800a2a8:	3501      	adds	r5, #1
 800a2aa:	6063      	str	r3, [r4, #4]
 800a2ac:	782a      	ldrb	r2, [r5, #0]
 800a2ae:	1c6e      	adds	r6, r5, #1
 800a2b0:	3a30      	subs	r2, #48	@ 0x30
 800a2b2:	2a09      	cmp	r2, #9
 800a2b4:	d903      	bls.n	800a2be <_svfiprintf_r+0x1a6>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0c8      	beq.n	800a24c <_svfiprintf_r+0x134>
 800a2ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800a2bc:	e7c6      	b.n	800a24c <_svfiprintf_r+0x134>
 800a2be:	4341      	muls	r1, r0
 800a2c0:	0035      	movs	r5, r6
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	1889      	adds	r1, r1, r2
 800a2c6:	e7f1      	b.n	800a2ac <_svfiprintf_r+0x194>
 800a2c8:	aa07      	add	r2, sp, #28
 800a2ca:	9200      	str	r2, [sp, #0]
 800a2cc:	0021      	movs	r1, r4
 800a2ce:	003a      	movs	r2, r7
 800a2d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a310 <_svfiprintf_r+0x1f8>)
 800a2d2:	9803      	ldr	r0, [sp, #12]
 800a2d4:	f7fc fb2e 	bl	8006934 <_printf_float>
 800a2d8:	9004      	str	r0, [sp, #16]
 800a2da:	9b04      	ldr	r3, [sp, #16]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	d1d6      	bne.n	800a28e <_svfiprintf_r+0x176>
 800a2e0:	89bb      	ldrh	r3, [r7, #12]
 800a2e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a2e4:	065b      	lsls	r3, r3, #25
 800a2e6:	d500      	bpl.n	800a2ea <_svfiprintf_r+0x1d2>
 800a2e8:	e72c      	b.n	800a144 <_svfiprintf_r+0x2c>
 800a2ea:	b021      	add	sp, #132	@ 0x84
 800a2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2ee:	aa07      	add	r2, sp, #28
 800a2f0:	9200      	str	r2, [sp, #0]
 800a2f2:	0021      	movs	r1, r4
 800a2f4:	003a      	movs	r2, r7
 800a2f6:	4b06      	ldr	r3, [pc, #24]	@ (800a310 <_svfiprintf_r+0x1f8>)
 800a2f8:	9803      	ldr	r0, [sp, #12]
 800a2fa:	f7fc fdc9 	bl	8006e90 <_printf_i>
 800a2fe:	e7eb      	b.n	800a2d8 <_svfiprintf_r+0x1c0>
 800a300:	0800b5ad 	.word	0x0800b5ad
 800a304:	0800b5b3 	.word	0x0800b5b3
 800a308:	0800b5b7 	.word	0x0800b5b7
 800a30c:	08006935 	.word	0x08006935
 800a310:	0800a059 	.word	0x0800a059

0800a314 <__sfputc_r>:
 800a314:	6893      	ldr	r3, [r2, #8]
 800a316:	b510      	push	{r4, lr}
 800a318:	3b01      	subs	r3, #1
 800a31a:	6093      	str	r3, [r2, #8]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	da04      	bge.n	800a32a <__sfputc_r+0x16>
 800a320:	6994      	ldr	r4, [r2, #24]
 800a322:	42a3      	cmp	r3, r4
 800a324:	db07      	blt.n	800a336 <__sfputc_r+0x22>
 800a326:	290a      	cmp	r1, #10
 800a328:	d005      	beq.n	800a336 <__sfputc_r+0x22>
 800a32a:	6813      	ldr	r3, [r2, #0]
 800a32c:	1c58      	adds	r0, r3, #1
 800a32e:	6010      	str	r0, [r2, #0]
 800a330:	7019      	strb	r1, [r3, #0]
 800a332:	0008      	movs	r0, r1
 800a334:	bd10      	pop	{r4, pc}
 800a336:	f7fd fa65 	bl	8007804 <__swbuf_r>
 800a33a:	0001      	movs	r1, r0
 800a33c:	e7f9      	b.n	800a332 <__sfputc_r+0x1e>

0800a33e <__sfputs_r>:
 800a33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a340:	0006      	movs	r6, r0
 800a342:	000f      	movs	r7, r1
 800a344:	0014      	movs	r4, r2
 800a346:	18d5      	adds	r5, r2, r3
 800a348:	42ac      	cmp	r4, r5
 800a34a:	d101      	bne.n	800a350 <__sfputs_r+0x12>
 800a34c:	2000      	movs	r0, #0
 800a34e:	e007      	b.n	800a360 <__sfputs_r+0x22>
 800a350:	7821      	ldrb	r1, [r4, #0]
 800a352:	003a      	movs	r2, r7
 800a354:	0030      	movs	r0, r6
 800a356:	f7ff ffdd 	bl	800a314 <__sfputc_r>
 800a35a:	3401      	adds	r4, #1
 800a35c:	1c43      	adds	r3, r0, #1
 800a35e:	d1f3      	bne.n	800a348 <__sfputs_r+0xa>
 800a360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a364 <_vfiprintf_r>:
 800a364:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a366:	b0a1      	sub	sp, #132	@ 0x84
 800a368:	000f      	movs	r7, r1
 800a36a:	0015      	movs	r5, r2
 800a36c:	001e      	movs	r6, r3
 800a36e:	9003      	str	r0, [sp, #12]
 800a370:	2800      	cmp	r0, #0
 800a372:	d004      	beq.n	800a37e <_vfiprintf_r+0x1a>
 800a374:	6a03      	ldr	r3, [r0, #32]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d101      	bne.n	800a37e <_vfiprintf_r+0x1a>
 800a37a:	f7fd f931 	bl	80075e0 <__sinit>
 800a37e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a380:	07db      	lsls	r3, r3, #31
 800a382:	d405      	bmi.n	800a390 <_vfiprintf_r+0x2c>
 800a384:	89bb      	ldrh	r3, [r7, #12]
 800a386:	059b      	lsls	r3, r3, #22
 800a388:	d402      	bmi.n	800a390 <_vfiprintf_r+0x2c>
 800a38a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a38c:	f7fd fb5f 	bl	8007a4e <__retarget_lock_acquire_recursive>
 800a390:	89bb      	ldrh	r3, [r7, #12]
 800a392:	071b      	lsls	r3, r3, #28
 800a394:	d502      	bpl.n	800a39c <_vfiprintf_r+0x38>
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d113      	bne.n	800a3c4 <_vfiprintf_r+0x60>
 800a39c:	0039      	movs	r1, r7
 800a39e:	9803      	ldr	r0, [sp, #12]
 800a3a0:	f7fd fa72 	bl	8007888 <__swsetup_r>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d00d      	beq.n	800a3c4 <_vfiprintf_r+0x60>
 800a3a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3aa:	07db      	lsls	r3, r3, #31
 800a3ac:	d503      	bpl.n	800a3b6 <_vfiprintf_r+0x52>
 800a3ae:	2001      	movs	r0, #1
 800a3b0:	4240      	negs	r0, r0
 800a3b2:	b021      	add	sp, #132	@ 0x84
 800a3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3b6:	89bb      	ldrh	r3, [r7, #12]
 800a3b8:	059b      	lsls	r3, r3, #22
 800a3ba:	d4f8      	bmi.n	800a3ae <_vfiprintf_r+0x4a>
 800a3bc:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a3be:	f7fd fb47 	bl	8007a50 <__retarget_lock_release_recursive>
 800a3c2:	e7f4      	b.n	800a3ae <_vfiprintf_r+0x4a>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	ac08      	add	r4, sp, #32
 800a3c8:	6163      	str	r3, [r4, #20]
 800a3ca:	3320      	adds	r3, #32
 800a3cc:	7663      	strb	r3, [r4, #25]
 800a3ce:	3310      	adds	r3, #16
 800a3d0:	76a3      	strb	r3, [r4, #26]
 800a3d2:	9607      	str	r6, [sp, #28]
 800a3d4:	002e      	movs	r6, r5
 800a3d6:	7833      	ldrb	r3, [r6, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <_vfiprintf_r+0x7c>
 800a3dc:	2b25      	cmp	r3, #37	@ 0x25
 800a3de:	d148      	bne.n	800a472 <_vfiprintf_r+0x10e>
 800a3e0:	1b73      	subs	r3, r6, r5
 800a3e2:	9305      	str	r3, [sp, #20]
 800a3e4:	42ae      	cmp	r6, r5
 800a3e6:	d00b      	beq.n	800a400 <_vfiprintf_r+0x9c>
 800a3e8:	002a      	movs	r2, r5
 800a3ea:	0039      	movs	r1, r7
 800a3ec:	9803      	ldr	r0, [sp, #12]
 800a3ee:	f7ff ffa6 	bl	800a33e <__sfputs_r>
 800a3f2:	3001      	adds	r0, #1
 800a3f4:	d100      	bne.n	800a3f8 <_vfiprintf_r+0x94>
 800a3f6:	e0ae      	b.n	800a556 <_vfiprintf_r+0x1f2>
 800a3f8:	6963      	ldr	r3, [r4, #20]
 800a3fa:	9a05      	ldr	r2, [sp, #20]
 800a3fc:	189b      	adds	r3, r3, r2
 800a3fe:	6163      	str	r3, [r4, #20]
 800a400:	7833      	ldrb	r3, [r6, #0]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d100      	bne.n	800a408 <_vfiprintf_r+0xa4>
 800a406:	e0a6      	b.n	800a556 <_vfiprintf_r+0x1f2>
 800a408:	2201      	movs	r2, #1
 800a40a:	2300      	movs	r3, #0
 800a40c:	4252      	negs	r2, r2
 800a40e:	6062      	str	r2, [r4, #4]
 800a410:	a904      	add	r1, sp, #16
 800a412:	3254      	adds	r2, #84	@ 0x54
 800a414:	1852      	adds	r2, r2, r1
 800a416:	1c75      	adds	r5, r6, #1
 800a418:	6023      	str	r3, [r4, #0]
 800a41a:	60e3      	str	r3, [r4, #12]
 800a41c:	60a3      	str	r3, [r4, #8]
 800a41e:	7013      	strb	r3, [r2, #0]
 800a420:	65a3      	str	r3, [r4, #88]	@ 0x58
 800a422:	4b59      	ldr	r3, [pc, #356]	@ (800a588 <_vfiprintf_r+0x224>)
 800a424:	2205      	movs	r2, #5
 800a426:	0018      	movs	r0, r3
 800a428:	7829      	ldrb	r1, [r5, #0]
 800a42a:	9305      	str	r3, [sp, #20]
 800a42c:	f7fd fb11 	bl	8007a52 <memchr>
 800a430:	1c6e      	adds	r6, r5, #1
 800a432:	2800      	cmp	r0, #0
 800a434:	d11f      	bne.n	800a476 <_vfiprintf_r+0x112>
 800a436:	6822      	ldr	r2, [r4, #0]
 800a438:	06d3      	lsls	r3, r2, #27
 800a43a:	d504      	bpl.n	800a446 <_vfiprintf_r+0xe2>
 800a43c:	2353      	movs	r3, #83	@ 0x53
 800a43e:	a904      	add	r1, sp, #16
 800a440:	185b      	adds	r3, r3, r1
 800a442:	2120      	movs	r1, #32
 800a444:	7019      	strb	r1, [r3, #0]
 800a446:	0713      	lsls	r3, r2, #28
 800a448:	d504      	bpl.n	800a454 <_vfiprintf_r+0xf0>
 800a44a:	2353      	movs	r3, #83	@ 0x53
 800a44c:	a904      	add	r1, sp, #16
 800a44e:	185b      	adds	r3, r3, r1
 800a450:	212b      	movs	r1, #43	@ 0x2b
 800a452:	7019      	strb	r1, [r3, #0]
 800a454:	782b      	ldrb	r3, [r5, #0]
 800a456:	2b2a      	cmp	r3, #42	@ 0x2a
 800a458:	d016      	beq.n	800a488 <_vfiprintf_r+0x124>
 800a45a:	002e      	movs	r6, r5
 800a45c:	2100      	movs	r1, #0
 800a45e:	200a      	movs	r0, #10
 800a460:	68e3      	ldr	r3, [r4, #12]
 800a462:	7832      	ldrb	r2, [r6, #0]
 800a464:	1c75      	adds	r5, r6, #1
 800a466:	3a30      	subs	r2, #48	@ 0x30
 800a468:	2a09      	cmp	r2, #9
 800a46a:	d950      	bls.n	800a50e <_vfiprintf_r+0x1aa>
 800a46c:	2900      	cmp	r1, #0
 800a46e:	d111      	bne.n	800a494 <_vfiprintf_r+0x130>
 800a470:	e017      	b.n	800a4a2 <_vfiprintf_r+0x13e>
 800a472:	3601      	adds	r6, #1
 800a474:	e7af      	b.n	800a3d6 <_vfiprintf_r+0x72>
 800a476:	9b05      	ldr	r3, [sp, #20]
 800a478:	6822      	ldr	r2, [r4, #0]
 800a47a:	1ac0      	subs	r0, r0, r3
 800a47c:	2301      	movs	r3, #1
 800a47e:	4083      	lsls	r3, r0
 800a480:	4313      	orrs	r3, r2
 800a482:	0035      	movs	r5, r6
 800a484:	6023      	str	r3, [r4, #0]
 800a486:	e7cc      	b.n	800a422 <_vfiprintf_r+0xbe>
 800a488:	9b07      	ldr	r3, [sp, #28]
 800a48a:	1d19      	adds	r1, r3, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	9107      	str	r1, [sp, #28]
 800a490:	2b00      	cmp	r3, #0
 800a492:	db01      	blt.n	800a498 <_vfiprintf_r+0x134>
 800a494:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a496:	e004      	b.n	800a4a2 <_vfiprintf_r+0x13e>
 800a498:	425b      	negs	r3, r3
 800a49a:	60e3      	str	r3, [r4, #12]
 800a49c:	2302      	movs	r3, #2
 800a49e:	4313      	orrs	r3, r2
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	7833      	ldrb	r3, [r6, #0]
 800a4a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800a4a6:	d10c      	bne.n	800a4c2 <_vfiprintf_r+0x15e>
 800a4a8:	7873      	ldrb	r3, [r6, #1]
 800a4aa:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4ac:	d134      	bne.n	800a518 <_vfiprintf_r+0x1b4>
 800a4ae:	9b07      	ldr	r3, [sp, #28]
 800a4b0:	3602      	adds	r6, #2
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	9207      	str	r2, [sp, #28]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	da01      	bge.n	800a4c0 <_vfiprintf_r+0x15c>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	425b      	negs	r3, r3
 800a4c0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4c2:	4d32      	ldr	r5, [pc, #200]	@ (800a58c <_vfiprintf_r+0x228>)
 800a4c4:	2203      	movs	r2, #3
 800a4c6:	0028      	movs	r0, r5
 800a4c8:	7831      	ldrb	r1, [r6, #0]
 800a4ca:	f7fd fac2 	bl	8007a52 <memchr>
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d006      	beq.n	800a4e0 <_vfiprintf_r+0x17c>
 800a4d2:	2340      	movs	r3, #64	@ 0x40
 800a4d4:	1b40      	subs	r0, r0, r5
 800a4d6:	4083      	lsls	r3, r0
 800a4d8:	6822      	ldr	r2, [r4, #0]
 800a4da:	3601      	adds	r6, #1
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	6023      	str	r3, [r4, #0]
 800a4e0:	7831      	ldrb	r1, [r6, #0]
 800a4e2:	2206      	movs	r2, #6
 800a4e4:	482a      	ldr	r0, [pc, #168]	@ (800a590 <_vfiprintf_r+0x22c>)
 800a4e6:	1c75      	adds	r5, r6, #1
 800a4e8:	7621      	strb	r1, [r4, #24]
 800a4ea:	f7fd fab2 	bl	8007a52 <memchr>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d040      	beq.n	800a574 <_vfiprintf_r+0x210>
 800a4f2:	4b28      	ldr	r3, [pc, #160]	@ (800a594 <_vfiprintf_r+0x230>)
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d122      	bne.n	800a53e <_vfiprintf_r+0x1da>
 800a4f8:	2207      	movs	r2, #7
 800a4fa:	9b07      	ldr	r3, [sp, #28]
 800a4fc:	3307      	adds	r3, #7
 800a4fe:	4393      	bics	r3, r2
 800a500:	3308      	adds	r3, #8
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	6963      	ldr	r3, [r4, #20]
 800a506:	9a04      	ldr	r2, [sp, #16]
 800a508:	189b      	adds	r3, r3, r2
 800a50a:	6163      	str	r3, [r4, #20]
 800a50c:	e762      	b.n	800a3d4 <_vfiprintf_r+0x70>
 800a50e:	4343      	muls	r3, r0
 800a510:	002e      	movs	r6, r5
 800a512:	2101      	movs	r1, #1
 800a514:	189b      	adds	r3, r3, r2
 800a516:	e7a4      	b.n	800a462 <_vfiprintf_r+0xfe>
 800a518:	2300      	movs	r3, #0
 800a51a:	200a      	movs	r0, #10
 800a51c:	0019      	movs	r1, r3
 800a51e:	3601      	adds	r6, #1
 800a520:	6063      	str	r3, [r4, #4]
 800a522:	7832      	ldrb	r2, [r6, #0]
 800a524:	1c75      	adds	r5, r6, #1
 800a526:	3a30      	subs	r2, #48	@ 0x30
 800a528:	2a09      	cmp	r2, #9
 800a52a:	d903      	bls.n	800a534 <_vfiprintf_r+0x1d0>
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d0c8      	beq.n	800a4c2 <_vfiprintf_r+0x15e>
 800a530:	9109      	str	r1, [sp, #36]	@ 0x24
 800a532:	e7c6      	b.n	800a4c2 <_vfiprintf_r+0x15e>
 800a534:	4341      	muls	r1, r0
 800a536:	002e      	movs	r6, r5
 800a538:	2301      	movs	r3, #1
 800a53a:	1889      	adds	r1, r1, r2
 800a53c:	e7f1      	b.n	800a522 <_vfiprintf_r+0x1be>
 800a53e:	aa07      	add	r2, sp, #28
 800a540:	9200      	str	r2, [sp, #0]
 800a542:	0021      	movs	r1, r4
 800a544:	003a      	movs	r2, r7
 800a546:	4b14      	ldr	r3, [pc, #80]	@ (800a598 <_vfiprintf_r+0x234>)
 800a548:	9803      	ldr	r0, [sp, #12]
 800a54a:	f7fc f9f3 	bl	8006934 <_printf_float>
 800a54e:	9004      	str	r0, [sp, #16]
 800a550:	9b04      	ldr	r3, [sp, #16]
 800a552:	3301      	adds	r3, #1
 800a554:	d1d6      	bne.n	800a504 <_vfiprintf_r+0x1a0>
 800a556:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a558:	07db      	lsls	r3, r3, #31
 800a55a:	d405      	bmi.n	800a568 <_vfiprintf_r+0x204>
 800a55c:	89bb      	ldrh	r3, [r7, #12]
 800a55e:	059b      	lsls	r3, r3, #22
 800a560:	d402      	bmi.n	800a568 <_vfiprintf_r+0x204>
 800a562:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800a564:	f7fd fa74 	bl	8007a50 <__retarget_lock_release_recursive>
 800a568:	89bb      	ldrh	r3, [r7, #12]
 800a56a:	065b      	lsls	r3, r3, #25
 800a56c:	d500      	bpl.n	800a570 <_vfiprintf_r+0x20c>
 800a56e:	e71e      	b.n	800a3ae <_vfiprintf_r+0x4a>
 800a570:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a572:	e71e      	b.n	800a3b2 <_vfiprintf_r+0x4e>
 800a574:	aa07      	add	r2, sp, #28
 800a576:	9200      	str	r2, [sp, #0]
 800a578:	0021      	movs	r1, r4
 800a57a:	003a      	movs	r2, r7
 800a57c:	4b06      	ldr	r3, [pc, #24]	@ (800a598 <_vfiprintf_r+0x234>)
 800a57e:	9803      	ldr	r0, [sp, #12]
 800a580:	f7fc fc86 	bl	8006e90 <_printf_i>
 800a584:	e7e3      	b.n	800a54e <_vfiprintf_r+0x1ea>
 800a586:	46c0      	nop			@ (mov r8, r8)
 800a588:	0800b5ad 	.word	0x0800b5ad
 800a58c:	0800b5b3 	.word	0x0800b5b3
 800a590:	0800b5b7 	.word	0x0800b5b7
 800a594:	08006935 	.word	0x08006935
 800a598:	0800a33f 	.word	0x0800a33f

0800a59c <__sflush_r>:
 800a59c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a59e:	220c      	movs	r2, #12
 800a5a0:	5e8b      	ldrsh	r3, [r1, r2]
 800a5a2:	0005      	movs	r5, r0
 800a5a4:	000c      	movs	r4, r1
 800a5a6:	071a      	lsls	r2, r3, #28
 800a5a8:	d456      	bmi.n	800a658 <__sflush_r+0xbc>
 800a5aa:	684a      	ldr	r2, [r1, #4]
 800a5ac:	2a00      	cmp	r2, #0
 800a5ae:	dc02      	bgt.n	800a5b6 <__sflush_r+0x1a>
 800a5b0:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800a5b2:	2a00      	cmp	r2, #0
 800a5b4:	dd4e      	ble.n	800a654 <__sflush_r+0xb8>
 800a5b6:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a5b8:	2f00      	cmp	r7, #0
 800a5ba:	d04b      	beq.n	800a654 <__sflush_r+0xb8>
 800a5bc:	2200      	movs	r2, #0
 800a5be:	2080      	movs	r0, #128	@ 0x80
 800a5c0:	682e      	ldr	r6, [r5, #0]
 800a5c2:	602a      	str	r2, [r5, #0]
 800a5c4:	001a      	movs	r2, r3
 800a5c6:	0140      	lsls	r0, r0, #5
 800a5c8:	6a21      	ldr	r1, [r4, #32]
 800a5ca:	4002      	ands	r2, r0
 800a5cc:	4203      	tst	r3, r0
 800a5ce:	d033      	beq.n	800a638 <__sflush_r+0x9c>
 800a5d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5d2:	89a3      	ldrh	r3, [r4, #12]
 800a5d4:	075b      	lsls	r3, r3, #29
 800a5d6:	d506      	bpl.n	800a5e6 <__sflush_r+0x4a>
 800a5d8:	6863      	ldr	r3, [r4, #4]
 800a5da:	1ad2      	subs	r2, r2, r3
 800a5dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <__sflush_r+0x4a>
 800a5e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5e4:	1ad2      	subs	r2, r2, r3
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	0028      	movs	r0, r5
 800a5ea:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800a5ec:	6a21      	ldr	r1, [r4, #32]
 800a5ee:	47b8      	blx	r7
 800a5f0:	89a2      	ldrh	r2, [r4, #12]
 800a5f2:	1c43      	adds	r3, r0, #1
 800a5f4:	d106      	bne.n	800a604 <__sflush_r+0x68>
 800a5f6:	6829      	ldr	r1, [r5, #0]
 800a5f8:	291d      	cmp	r1, #29
 800a5fa:	d846      	bhi.n	800a68a <__sflush_r+0xee>
 800a5fc:	4b29      	ldr	r3, [pc, #164]	@ (800a6a4 <__sflush_r+0x108>)
 800a5fe:	40cb      	lsrs	r3, r1
 800a600:	07db      	lsls	r3, r3, #31
 800a602:	d542      	bpl.n	800a68a <__sflush_r+0xee>
 800a604:	2300      	movs	r3, #0
 800a606:	6063      	str	r3, [r4, #4]
 800a608:	6923      	ldr	r3, [r4, #16]
 800a60a:	6023      	str	r3, [r4, #0]
 800a60c:	04d2      	lsls	r2, r2, #19
 800a60e:	d505      	bpl.n	800a61c <__sflush_r+0x80>
 800a610:	1c43      	adds	r3, r0, #1
 800a612:	d102      	bne.n	800a61a <__sflush_r+0x7e>
 800a614:	682b      	ldr	r3, [r5, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d100      	bne.n	800a61c <__sflush_r+0x80>
 800a61a:	6560      	str	r0, [r4, #84]	@ 0x54
 800a61c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a61e:	602e      	str	r6, [r5, #0]
 800a620:	2900      	cmp	r1, #0
 800a622:	d017      	beq.n	800a654 <__sflush_r+0xb8>
 800a624:	0023      	movs	r3, r4
 800a626:	3344      	adds	r3, #68	@ 0x44
 800a628:	4299      	cmp	r1, r3
 800a62a:	d002      	beq.n	800a632 <__sflush_r+0x96>
 800a62c:	0028      	movs	r0, r5
 800a62e:	f7fe f89f 	bl	8008770 <_free_r>
 800a632:	2300      	movs	r3, #0
 800a634:	6363      	str	r3, [r4, #52]	@ 0x34
 800a636:	e00d      	b.n	800a654 <__sflush_r+0xb8>
 800a638:	2301      	movs	r3, #1
 800a63a:	0028      	movs	r0, r5
 800a63c:	47b8      	blx	r7
 800a63e:	0002      	movs	r2, r0
 800a640:	1c43      	adds	r3, r0, #1
 800a642:	d1c6      	bne.n	800a5d2 <__sflush_r+0x36>
 800a644:	682b      	ldr	r3, [r5, #0]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d0c3      	beq.n	800a5d2 <__sflush_r+0x36>
 800a64a:	2b1d      	cmp	r3, #29
 800a64c:	d001      	beq.n	800a652 <__sflush_r+0xb6>
 800a64e:	2b16      	cmp	r3, #22
 800a650:	d11a      	bne.n	800a688 <__sflush_r+0xec>
 800a652:	602e      	str	r6, [r5, #0]
 800a654:	2000      	movs	r0, #0
 800a656:	e01e      	b.n	800a696 <__sflush_r+0xfa>
 800a658:	690e      	ldr	r6, [r1, #16]
 800a65a:	2e00      	cmp	r6, #0
 800a65c:	d0fa      	beq.n	800a654 <__sflush_r+0xb8>
 800a65e:	680f      	ldr	r7, [r1, #0]
 800a660:	600e      	str	r6, [r1, #0]
 800a662:	1bba      	subs	r2, r7, r6
 800a664:	9201      	str	r2, [sp, #4]
 800a666:	2200      	movs	r2, #0
 800a668:	079b      	lsls	r3, r3, #30
 800a66a:	d100      	bne.n	800a66e <__sflush_r+0xd2>
 800a66c:	694a      	ldr	r2, [r1, #20]
 800a66e:	60a2      	str	r2, [r4, #8]
 800a670:	9b01      	ldr	r3, [sp, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	ddee      	ble.n	800a654 <__sflush_r+0xb8>
 800a676:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a678:	0032      	movs	r2, r6
 800a67a:	001f      	movs	r7, r3
 800a67c:	0028      	movs	r0, r5
 800a67e:	9b01      	ldr	r3, [sp, #4]
 800a680:	6a21      	ldr	r1, [r4, #32]
 800a682:	47b8      	blx	r7
 800a684:	2800      	cmp	r0, #0
 800a686:	dc07      	bgt.n	800a698 <__sflush_r+0xfc>
 800a688:	89a2      	ldrh	r2, [r4, #12]
 800a68a:	2340      	movs	r3, #64	@ 0x40
 800a68c:	2001      	movs	r0, #1
 800a68e:	4313      	orrs	r3, r2
 800a690:	b21b      	sxth	r3, r3
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	4240      	negs	r0, r0
 800a696:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a698:	9b01      	ldr	r3, [sp, #4]
 800a69a:	1836      	adds	r6, r6, r0
 800a69c:	1a1b      	subs	r3, r3, r0
 800a69e:	9301      	str	r3, [sp, #4]
 800a6a0:	e7e6      	b.n	800a670 <__sflush_r+0xd4>
 800a6a2:	46c0      	nop			@ (mov r8, r8)
 800a6a4:	20400001 	.word	0x20400001

0800a6a8 <_fflush_r>:
 800a6a8:	690b      	ldr	r3, [r1, #16]
 800a6aa:	b570      	push	{r4, r5, r6, lr}
 800a6ac:	0005      	movs	r5, r0
 800a6ae:	000c      	movs	r4, r1
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <_fflush_r+0x12>
 800a6b4:	2500      	movs	r5, #0
 800a6b6:	0028      	movs	r0, r5
 800a6b8:	bd70      	pop	{r4, r5, r6, pc}
 800a6ba:	2800      	cmp	r0, #0
 800a6bc:	d004      	beq.n	800a6c8 <_fflush_r+0x20>
 800a6be:	6a03      	ldr	r3, [r0, #32]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <_fflush_r+0x20>
 800a6c4:	f7fc ff8c 	bl	80075e0 <__sinit>
 800a6c8:	220c      	movs	r2, #12
 800a6ca:	5ea3      	ldrsh	r3, [r4, r2]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d0f1      	beq.n	800a6b4 <_fflush_r+0xc>
 800a6d0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6d2:	07d2      	lsls	r2, r2, #31
 800a6d4:	d404      	bmi.n	800a6e0 <_fflush_r+0x38>
 800a6d6:	059b      	lsls	r3, r3, #22
 800a6d8:	d402      	bmi.n	800a6e0 <_fflush_r+0x38>
 800a6da:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6dc:	f7fd f9b7 	bl	8007a4e <__retarget_lock_acquire_recursive>
 800a6e0:	0028      	movs	r0, r5
 800a6e2:	0021      	movs	r1, r4
 800a6e4:	f7ff ff5a 	bl	800a59c <__sflush_r>
 800a6e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6ea:	0005      	movs	r5, r0
 800a6ec:	07db      	lsls	r3, r3, #31
 800a6ee:	d4e2      	bmi.n	800a6b6 <_fflush_r+0xe>
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	059b      	lsls	r3, r3, #22
 800a6f4:	d4df      	bmi.n	800a6b6 <_fflush_r+0xe>
 800a6f6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6f8:	f7fd f9aa 	bl	8007a50 <__retarget_lock_release_recursive>
 800a6fc:	e7db      	b.n	800a6b6 <_fflush_r+0xe>
	...

0800a700 <__swhatbuf_r>:
 800a700:	b570      	push	{r4, r5, r6, lr}
 800a702:	000e      	movs	r6, r1
 800a704:	001d      	movs	r5, r3
 800a706:	230e      	movs	r3, #14
 800a708:	5ec9      	ldrsh	r1, [r1, r3]
 800a70a:	0014      	movs	r4, r2
 800a70c:	b096      	sub	sp, #88	@ 0x58
 800a70e:	2900      	cmp	r1, #0
 800a710:	da0c      	bge.n	800a72c <__swhatbuf_r+0x2c>
 800a712:	89b2      	ldrh	r2, [r6, #12]
 800a714:	2380      	movs	r3, #128	@ 0x80
 800a716:	0011      	movs	r1, r2
 800a718:	4019      	ands	r1, r3
 800a71a:	421a      	tst	r2, r3
 800a71c:	d114      	bne.n	800a748 <__swhatbuf_r+0x48>
 800a71e:	2380      	movs	r3, #128	@ 0x80
 800a720:	00db      	lsls	r3, r3, #3
 800a722:	2000      	movs	r0, #0
 800a724:	6029      	str	r1, [r5, #0]
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	b016      	add	sp, #88	@ 0x58
 800a72a:	bd70      	pop	{r4, r5, r6, pc}
 800a72c:	466a      	mov	r2, sp
 800a72e:	f000 f875 	bl	800a81c <_fstat_r>
 800a732:	2800      	cmp	r0, #0
 800a734:	dbed      	blt.n	800a712 <__swhatbuf_r+0x12>
 800a736:	23f0      	movs	r3, #240	@ 0xf0
 800a738:	9901      	ldr	r1, [sp, #4]
 800a73a:	021b      	lsls	r3, r3, #8
 800a73c:	4019      	ands	r1, r3
 800a73e:	4b04      	ldr	r3, [pc, #16]	@ (800a750 <__swhatbuf_r+0x50>)
 800a740:	18c9      	adds	r1, r1, r3
 800a742:	424b      	negs	r3, r1
 800a744:	4159      	adcs	r1, r3
 800a746:	e7ea      	b.n	800a71e <__swhatbuf_r+0x1e>
 800a748:	2100      	movs	r1, #0
 800a74a:	2340      	movs	r3, #64	@ 0x40
 800a74c:	e7e9      	b.n	800a722 <__swhatbuf_r+0x22>
 800a74e:	46c0      	nop			@ (mov r8, r8)
 800a750:	ffffe000 	.word	0xffffe000

0800a754 <__smakebuf_r>:
 800a754:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a756:	2602      	movs	r6, #2
 800a758:	898b      	ldrh	r3, [r1, #12]
 800a75a:	0005      	movs	r5, r0
 800a75c:	000c      	movs	r4, r1
 800a75e:	b085      	sub	sp, #20
 800a760:	4233      	tst	r3, r6
 800a762:	d007      	beq.n	800a774 <__smakebuf_r+0x20>
 800a764:	0023      	movs	r3, r4
 800a766:	3347      	adds	r3, #71	@ 0x47
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	6123      	str	r3, [r4, #16]
 800a76c:	2301      	movs	r3, #1
 800a76e:	6163      	str	r3, [r4, #20]
 800a770:	b005      	add	sp, #20
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a774:	ab03      	add	r3, sp, #12
 800a776:	aa02      	add	r2, sp, #8
 800a778:	f7ff ffc2 	bl	800a700 <__swhatbuf_r>
 800a77c:	9f02      	ldr	r7, [sp, #8]
 800a77e:	9001      	str	r0, [sp, #4]
 800a780:	0039      	movs	r1, r7
 800a782:	0028      	movs	r0, r5
 800a784:	f7fe f86a 	bl	800885c <_malloc_r>
 800a788:	2800      	cmp	r0, #0
 800a78a:	d108      	bne.n	800a79e <__smakebuf_r+0x4a>
 800a78c:	220c      	movs	r2, #12
 800a78e:	5ea3      	ldrsh	r3, [r4, r2]
 800a790:	059a      	lsls	r2, r3, #22
 800a792:	d4ed      	bmi.n	800a770 <__smakebuf_r+0x1c>
 800a794:	2203      	movs	r2, #3
 800a796:	4393      	bics	r3, r2
 800a798:	431e      	orrs	r6, r3
 800a79a:	81a6      	strh	r6, [r4, #12]
 800a79c:	e7e2      	b.n	800a764 <__smakebuf_r+0x10>
 800a79e:	2380      	movs	r3, #128	@ 0x80
 800a7a0:	89a2      	ldrh	r2, [r4, #12]
 800a7a2:	6020      	str	r0, [r4, #0]
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	81a3      	strh	r3, [r4, #12]
 800a7a8:	9b03      	ldr	r3, [sp, #12]
 800a7aa:	6120      	str	r0, [r4, #16]
 800a7ac:	6167      	str	r7, [r4, #20]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00c      	beq.n	800a7cc <__smakebuf_r+0x78>
 800a7b2:	0028      	movs	r0, r5
 800a7b4:	230e      	movs	r3, #14
 800a7b6:	5ee1      	ldrsh	r1, [r4, r3]
 800a7b8:	f000 f842 	bl	800a840 <_isatty_r>
 800a7bc:	2800      	cmp	r0, #0
 800a7be:	d005      	beq.n	800a7cc <__smakebuf_r+0x78>
 800a7c0:	2303      	movs	r3, #3
 800a7c2:	89a2      	ldrh	r2, [r4, #12]
 800a7c4:	439a      	bics	r2, r3
 800a7c6:	3b02      	subs	r3, #2
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	81a3      	strh	r3, [r4, #12]
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	9a01      	ldr	r2, [sp, #4]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	e7cc      	b.n	800a770 <__smakebuf_r+0x1c>

0800a7d6 <memmove>:
 800a7d6:	b510      	push	{r4, lr}
 800a7d8:	4288      	cmp	r0, r1
 800a7da:	d902      	bls.n	800a7e2 <memmove+0xc>
 800a7dc:	188b      	adds	r3, r1, r2
 800a7de:	4298      	cmp	r0, r3
 800a7e0:	d308      	bcc.n	800a7f4 <memmove+0x1e>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d007      	beq.n	800a7f8 <memmove+0x22>
 800a7e8:	5ccc      	ldrb	r4, [r1, r3]
 800a7ea:	54c4      	strb	r4, [r0, r3]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	e7f9      	b.n	800a7e4 <memmove+0xe>
 800a7f0:	5c8b      	ldrb	r3, [r1, r2]
 800a7f2:	5483      	strb	r3, [r0, r2]
 800a7f4:	3a01      	subs	r2, #1
 800a7f6:	d2fb      	bcs.n	800a7f0 <memmove+0x1a>
 800a7f8:	bd10      	pop	{r4, pc}

0800a7fa <strncmp>:
 800a7fa:	b530      	push	{r4, r5, lr}
 800a7fc:	0005      	movs	r5, r0
 800a7fe:	1e10      	subs	r0, r2, #0
 800a800:	d00b      	beq.n	800a81a <strncmp+0x20>
 800a802:	2400      	movs	r4, #0
 800a804:	3a01      	subs	r2, #1
 800a806:	5d2b      	ldrb	r3, [r5, r4]
 800a808:	5d08      	ldrb	r0, [r1, r4]
 800a80a:	4283      	cmp	r3, r0
 800a80c:	d104      	bne.n	800a818 <strncmp+0x1e>
 800a80e:	4294      	cmp	r4, r2
 800a810:	d002      	beq.n	800a818 <strncmp+0x1e>
 800a812:	3401      	adds	r4, #1
 800a814:	2b00      	cmp	r3, #0
 800a816:	d1f6      	bne.n	800a806 <strncmp+0xc>
 800a818:	1a18      	subs	r0, r3, r0
 800a81a:	bd30      	pop	{r4, r5, pc}

0800a81c <_fstat_r>:
 800a81c:	2300      	movs	r3, #0
 800a81e:	b570      	push	{r4, r5, r6, lr}
 800a820:	4d06      	ldr	r5, [pc, #24]	@ (800a83c <_fstat_r+0x20>)
 800a822:	0004      	movs	r4, r0
 800a824:	0008      	movs	r0, r1
 800a826:	0011      	movs	r1, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f7f9 fc0d 	bl	8004048 <_fstat>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d103      	bne.n	800a83a <_fstat_r+0x1e>
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d000      	beq.n	800a83a <_fstat_r+0x1e>
 800a838:	6023      	str	r3, [r4, #0]
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	200004d8 	.word	0x200004d8

0800a840 <_isatty_r>:
 800a840:	2300      	movs	r3, #0
 800a842:	b570      	push	{r4, r5, r6, lr}
 800a844:	4d06      	ldr	r5, [pc, #24]	@ (800a860 <_isatty_r+0x20>)
 800a846:	0004      	movs	r4, r0
 800a848:	0008      	movs	r0, r1
 800a84a:	602b      	str	r3, [r5, #0]
 800a84c:	f7f9 fc0a 	bl	8004064 <_isatty>
 800a850:	1c43      	adds	r3, r0, #1
 800a852:	d103      	bne.n	800a85c <_isatty_r+0x1c>
 800a854:	682b      	ldr	r3, [r5, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d000      	beq.n	800a85c <_isatty_r+0x1c>
 800a85a:	6023      	str	r3, [r4, #0]
 800a85c:	bd70      	pop	{r4, r5, r6, pc}
 800a85e:	46c0      	nop			@ (mov r8, r8)
 800a860:	200004d8 	.word	0x200004d8

0800a864 <_sbrk_r>:
 800a864:	2300      	movs	r3, #0
 800a866:	b570      	push	{r4, r5, r6, lr}
 800a868:	4d06      	ldr	r5, [pc, #24]	@ (800a884 <_sbrk_r+0x20>)
 800a86a:	0004      	movs	r4, r0
 800a86c:	0008      	movs	r0, r1
 800a86e:	602b      	str	r3, [r5, #0]
 800a870:	f7f9 fc0c 	bl	800408c <_sbrk>
 800a874:	1c43      	adds	r3, r0, #1
 800a876:	d103      	bne.n	800a880 <_sbrk_r+0x1c>
 800a878:	682b      	ldr	r3, [r5, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d000      	beq.n	800a880 <_sbrk_r+0x1c>
 800a87e:	6023      	str	r3, [r4, #0]
 800a880:	bd70      	pop	{r4, r5, r6, pc}
 800a882:	46c0      	nop			@ (mov r8, r8)
 800a884:	200004d8 	.word	0x200004d8

0800a888 <nan>:
 800a888:	2000      	movs	r0, #0
 800a88a:	4901      	ldr	r1, [pc, #4]	@ (800a890 <nan+0x8>)
 800a88c:	4770      	bx	lr
 800a88e:	46c0      	nop			@ (mov r8, r8)
 800a890:	7ff80000 	.word	0x7ff80000

0800a894 <__assert_func>:
 800a894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a896:	0014      	movs	r4, r2
 800a898:	001a      	movs	r2, r3
 800a89a:	4b09      	ldr	r3, [pc, #36]	@ (800a8c0 <__assert_func+0x2c>)
 800a89c:	0005      	movs	r5, r0
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	000e      	movs	r6, r1
 800a8a2:	68d8      	ldr	r0, [r3, #12]
 800a8a4:	4b07      	ldr	r3, [pc, #28]	@ (800a8c4 <__assert_func+0x30>)
 800a8a6:	2c00      	cmp	r4, #0
 800a8a8:	d101      	bne.n	800a8ae <__assert_func+0x1a>
 800a8aa:	4b07      	ldr	r3, [pc, #28]	@ (800a8c8 <__assert_func+0x34>)
 800a8ac:	001c      	movs	r4, r3
 800a8ae:	4907      	ldr	r1, [pc, #28]	@ (800a8cc <__assert_func+0x38>)
 800a8b0:	9301      	str	r3, [sp, #4]
 800a8b2:	9402      	str	r4, [sp, #8]
 800a8b4:	002b      	movs	r3, r5
 800a8b6:	9600      	str	r6, [sp, #0]
 800a8b8:	f000 fbe2 	bl	800b080 <fiprintf>
 800a8bc:	f000 fbf0 	bl	800b0a0 <abort>
 800a8c0:	20000018 	.word	0x20000018
 800a8c4:	0800b5c6 	.word	0x0800b5c6
 800a8c8:	0800b601 	.word	0x0800b601
 800a8cc:	0800b5d3 	.word	0x0800b5d3

0800a8d0 <_calloc_r>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	0c0b      	lsrs	r3, r1, #16
 800a8d4:	0c15      	lsrs	r5, r2, #16
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d11e      	bne.n	800a918 <_calloc_r+0x48>
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	d10c      	bne.n	800a8f8 <_calloc_r+0x28>
 800a8de:	b289      	uxth	r1, r1
 800a8e0:	b294      	uxth	r4, r2
 800a8e2:	434c      	muls	r4, r1
 800a8e4:	0021      	movs	r1, r4
 800a8e6:	f7fd ffb9 	bl	800885c <_malloc_r>
 800a8ea:	1e05      	subs	r5, r0, #0
 800a8ec:	d01b      	beq.n	800a926 <_calloc_r+0x56>
 800a8ee:	0022      	movs	r2, r4
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	f7fd f827 	bl	8007944 <memset>
 800a8f6:	e016      	b.n	800a926 <_calloc_r+0x56>
 800a8f8:	1c2b      	adds	r3, r5, #0
 800a8fa:	1c0c      	adds	r4, r1, #0
 800a8fc:	b289      	uxth	r1, r1
 800a8fe:	b292      	uxth	r2, r2
 800a900:	434a      	muls	r2, r1
 800a902:	b29b      	uxth	r3, r3
 800a904:	b2a1      	uxth	r1, r4
 800a906:	4359      	muls	r1, r3
 800a908:	0c14      	lsrs	r4, r2, #16
 800a90a:	190c      	adds	r4, r1, r4
 800a90c:	0c23      	lsrs	r3, r4, #16
 800a90e:	d107      	bne.n	800a920 <_calloc_r+0x50>
 800a910:	0424      	lsls	r4, r4, #16
 800a912:	b292      	uxth	r2, r2
 800a914:	4314      	orrs	r4, r2
 800a916:	e7e5      	b.n	800a8e4 <_calloc_r+0x14>
 800a918:	2d00      	cmp	r5, #0
 800a91a:	d101      	bne.n	800a920 <_calloc_r+0x50>
 800a91c:	1c14      	adds	r4, r2, #0
 800a91e:	e7ed      	b.n	800a8fc <_calloc_r+0x2c>
 800a920:	230c      	movs	r3, #12
 800a922:	2500      	movs	r5, #0
 800a924:	6003      	str	r3, [r0, #0]
 800a926:	0028      	movs	r0, r5
 800a928:	bd70      	pop	{r4, r5, r6, pc}

0800a92a <rshift>:
 800a92a:	0002      	movs	r2, r0
 800a92c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a92e:	6904      	ldr	r4, [r0, #16]
 800a930:	b085      	sub	sp, #20
 800a932:	3214      	adds	r2, #20
 800a934:	114b      	asrs	r3, r1, #5
 800a936:	0016      	movs	r6, r2
 800a938:	9302      	str	r3, [sp, #8]
 800a93a:	429c      	cmp	r4, r3
 800a93c:	dd31      	ble.n	800a9a2 <rshift+0x78>
 800a93e:	261f      	movs	r6, #31
 800a940:	000f      	movs	r7, r1
 800a942:	009b      	lsls	r3, r3, #2
 800a944:	00a5      	lsls	r5, r4, #2
 800a946:	18d3      	adds	r3, r2, r3
 800a948:	4037      	ands	r7, r6
 800a94a:	1955      	adds	r5, r2, r5
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	9701      	str	r7, [sp, #4]
 800a950:	4231      	tst	r1, r6
 800a952:	d10d      	bne.n	800a970 <rshift+0x46>
 800a954:	0016      	movs	r6, r2
 800a956:	0019      	movs	r1, r3
 800a958:	428d      	cmp	r5, r1
 800a95a:	d836      	bhi.n	800a9ca <rshift+0xa0>
 800a95c:	9b00      	ldr	r3, [sp, #0]
 800a95e:	2600      	movs	r6, #0
 800a960:	3b03      	subs	r3, #3
 800a962:	429d      	cmp	r5, r3
 800a964:	d302      	bcc.n	800a96c <rshift+0x42>
 800a966:	9b02      	ldr	r3, [sp, #8]
 800a968:	1ae4      	subs	r4, r4, r3
 800a96a:	00a6      	lsls	r6, r4, #2
 800a96c:	1996      	adds	r6, r2, r6
 800a96e:	e018      	b.n	800a9a2 <rshift+0x78>
 800a970:	2120      	movs	r1, #32
 800a972:	9e01      	ldr	r6, [sp, #4]
 800a974:	9f01      	ldr	r7, [sp, #4]
 800a976:	1b89      	subs	r1, r1, r6
 800a978:	9e00      	ldr	r6, [sp, #0]
 800a97a:	9103      	str	r1, [sp, #12]
 800a97c:	ce02      	ldmia	r6!, {r1}
 800a97e:	4694      	mov	ip, r2
 800a980:	40f9      	lsrs	r1, r7
 800a982:	42b5      	cmp	r5, r6
 800a984:	d816      	bhi.n	800a9b4 <rshift+0x8a>
 800a986:	9b00      	ldr	r3, [sp, #0]
 800a988:	2600      	movs	r6, #0
 800a98a:	3301      	adds	r3, #1
 800a98c:	429d      	cmp	r5, r3
 800a98e:	d303      	bcc.n	800a998 <rshift+0x6e>
 800a990:	9b02      	ldr	r3, [sp, #8]
 800a992:	1ae4      	subs	r4, r4, r3
 800a994:	00a6      	lsls	r6, r4, #2
 800a996:	3e04      	subs	r6, #4
 800a998:	1996      	adds	r6, r2, r6
 800a99a:	6031      	str	r1, [r6, #0]
 800a99c:	2900      	cmp	r1, #0
 800a99e:	d000      	beq.n	800a9a2 <rshift+0x78>
 800a9a0:	3604      	adds	r6, #4
 800a9a2:	1ab1      	subs	r1, r6, r2
 800a9a4:	1089      	asrs	r1, r1, #2
 800a9a6:	6101      	str	r1, [r0, #16]
 800a9a8:	4296      	cmp	r6, r2
 800a9aa:	d101      	bne.n	800a9b0 <rshift+0x86>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	6143      	str	r3, [r0, #20]
 800a9b0:	b005      	add	sp, #20
 800a9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9b4:	6837      	ldr	r7, [r6, #0]
 800a9b6:	9b03      	ldr	r3, [sp, #12]
 800a9b8:	409f      	lsls	r7, r3
 800a9ba:	430f      	orrs	r7, r1
 800a9bc:	4661      	mov	r1, ip
 800a9be:	c180      	stmia	r1!, {r7}
 800a9c0:	468c      	mov	ip, r1
 800a9c2:	9b01      	ldr	r3, [sp, #4]
 800a9c4:	ce02      	ldmia	r6!, {r1}
 800a9c6:	40d9      	lsrs	r1, r3
 800a9c8:	e7db      	b.n	800a982 <rshift+0x58>
 800a9ca:	c980      	ldmia	r1!, {r7}
 800a9cc:	c680      	stmia	r6!, {r7}
 800a9ce:	e7c3      	b.n	800a958 <rshift+0x2e>

0800a9d0 <__hexdig_fun>:
 800a9d0:	0002      	movs	r2, r0
 800a9d2:	3a30      	subs	r2, #48	@ 0x30
 800a9d4:	0003      	movs	r3, r0
 800a9d6:	2a09      	cmp	r2, #9
 800a9d8:	d802      	bhi.n	800a9e0 <__hexdig_fun+0x10>
 800a9da:	3b20      	subs	r3, #32
 800a9dc:	b2d8      	uxtb	r0, r3
 800a9de:	4770      	bx	lr
 800a9e0:	0002      	movs	r2, r0
 800a9e2:	3a61      	subs	r2, #97	@ 0x61
 800a9e4:	2a05      	cmp	r2, #5
 800a9e6:	d801      	bhi.n	800a9ec <__hexdig_fun+0x1c>
 800a9e8:	3b47      	subs	r3, #71	@ 0x47
 800a9ea:	e7f7      	b.n	800a9dc <__hexdig_fun+0xc>
 800a9ec:	001a      	movs	r2, r3
 800a9ee:	3a41      	subs	r2, #65	@ 0x41
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	2a05      	cmp	r2, #5
 800a9f4:	d8f3      	bhi.n	800a9de <__hexdig_fun+0xe>
 800a9f6:	3b27      	subs	r3, #39	@ 0x27
 800a9f8:	e7f0      	b.n	800a9dc <__hexdig_fun+0xc>
	...

0800a9fc <__gethex>:
 800a9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9fe:	b089      	sub	sp, #36	@ 0x24
 800aa00:	9307      	str	r3, [sp, #28]
 800aa02:	680b      	ldr	r3, [r1, #0]
 800aa04:	9201      	str	r2, [sp, #4]
 800aa06:	9003      	str	r0, [sp, #12]
 800aa08:	9106      	str	r1, [sp, #24]
 800aa0a:	1c9a      	adds	r2, r3, #2
 800aa0c:	0011      	movs	r1, r2
 800aa0e:	3201      	adds	r2, #1
 800aa10:	1e50      	subs	r0, r2, #1
 800aa12:	7800      	ldrb	r0, [r0, #0]
 800aa14:	2830      	cmp	r0, #48	@ 0x30
 800aa16:	d0f9      	beq.n	800aa0c <__gethex+0x10>
 800aa18:	1acb      	subs	r3, r1, r3
 800aa1a:	3b02      	subs	r3, #2
 800aa1c:	9305      	str	r3, [sp, #20]
 800aa1e:	9100      	str	r1, [sp, #0]
 800aa20:	f7ff ffd6 	bl	800a9d0 <__hexdig_fun>
 800aa24:	2300      	movs	r3, #0
 800aa26:	001d      	movs	r5, r3
 800aa28:	9302      	str	r3, [sp, #8]
 800aa2a:	4298      	cmp	r0, r3
 800aa2c:	d11e      	bne.n	800aa6c <__gethex+0x70>
 800aa2e:	2201      	movs	r2, #1
 800aa30:	49a6      	ldr	r1, [pc, #664]	@ (800accc <__gethex+0x2d0>)
 800aa32:	9800      	ldr	r0, [sp, #0]
 800aa34:	f7ff fee1 	bl	800a7fa <strncmp>
 800aa38:	0007      	movs	r7, r0
 800aa3a:	42a8      	cmp	r0, r5
 800aa3c:	d000      	beq.n	800aa40 <__gethex+0x44>
 800aa3e:	e06a      	b.n	800ab16 <__gethex+0x11a>
 800aa40:	9b00      	ldr	r3, [sp, #0]
 800aa42:	7858      	ldrb	r0, [r3, #1]
 800aa44:	1c5c      	adds	r4, r3, #1
 800aa46:	f7ff ffc3 	bl	800a9d0 <__hexdig_fun>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	9302      	str	r3, [sp, #8]
 800aa4e:	42a8      	cmp	r0, r5
 800aa50:	d02f      	beq.n	800aab2 <__gethex+0xb6>
 800aa52:	9400      	str	r4, [sp, #0]
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	7818      	ldrb	r0, [r3, #0]
 800aa58:	2830      	cmp	r0, #48	@ 0x30
 800aa5a:	d009      	beq.n	800aa70 <__gethex+0x74>
 800aa5c:	f7ff ffb8 	bl	800a9d0 <__hexdig_fun>
 800aa60:	4242      	negs	r2, r0
 800aa62:	4142      	adcs	r2, r0
 800aa64:	2301      	movs	r3, #1
 800aa66:	0025      	movs	r5, r4
 800aa68:	9202      	str	r2, [sp, #8]
 800aa6a:	9305      	str	r3, [sp, #20]
 800aa6c:	9c00      	ldr	r4, [sp, #0]
 800aa6e:	e004      	b.n	800aa7a <__gethex+0x7e>
 800aa70:	9b00      	ldr	r3, [sp, #0]
 800aa72:	3301      	adds	r3, #1
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	e7ed      	b.n	800aa54 <__gethex+0x58>
 800aa78:	3401      	adds	r4, #1
 800aa7a:	7820      	ldrb	r0, [r4, #0]
 800aa7c:	f7ff ffa8 	bl	800a9d0 <__hexdig_fun>
 800aa80:	1e07      	subs	r7, r0, #0
 800aa82:	d1f9      	bne.n	800aa78 <__gethex+0x7c>
 800aa84:	2201      	movs	r2, #1
 800aa86:	0020      	movs	r0, r4
 800aa88:	4990      	ldr	r1, [pc, #576]	@ (800accc <__gethex+0x2d0>)
 800aa8a:	f7ff feb6 	bl	800a7fa <strncmp>
 800aa8e:	2800      	cmp	r0, #0
 800aa90:	d10d      	bne.n	800aaae <__gethex+0xb2>
 800aa92:	2d00      	cmp	r5, #0
 800aa94:	d106      	bne.n	800aaa4 <__gethex+0xa8>
 800aa96:	3401      	adds	r4, #1
 800aa98:	0025      	movs	r5, r4
 800aa9a:	7820      	ldrb	r0, [r4, #0]
 800aa9c:	f7ff ff98 	bl	800a9d0 <__hexdig_fun>
 800aaa0:	2800      	cmp	r0, #0
 800aaa2:	d102      	bne.n	800aaaa <__gethex+0xae>
 800aaa4:	1b2d      	subs	r5, r5, r4
 800aaa6:	00af      	lsls	r7, r5, #2
 800aaa8:	e003      	b.n	800aab2 <__gethex+0xb6>
 800aaaa:	3401      	adds	r4, #1
 800aaac:	e7f5      	b.n	800aa9a <__gethex+0x9e>
 800aaae:	2d00      	cmp	r5, #0
 800aab0:	d1f8      	bne.n	800aaa4 <__gethex+0xa8>
 800aab2:	2220      	movs	r2, #32
 800aab4:	7823      	ldrb	r3, [r4, #0]
 800aab6:	0026      	movs	r6, r4
 800aab8:	4393      	bics	r3, r2
 800aaba:	2b50      	cmp	r3, #80	@ 0x50
 800aabc:	d11d      	bne.n	800aafa <__gethex+0xfe>
 800aabe:	7863      	ldrb	r3, [r4, #1]
 800aac0:	2b2b      	cmp	r3, #43	@ 0x2b
 800aac2:	d02d      	beq.n	800ab20 <__gethex+0x124>
 800aac4:	2b2d      	cmp	r3, #45	@ 0x2d
 800aac6:	d02f      	beq.n	800ab28 <__gethex+0x12c>
 800aac8:	2300      	movs	r3, #0
 800aaca:	1c66      	adds	r6, r4, #1
 800aacc:	9304      	str	r3, [sp, #16]
 800aace:	7830      	ldrb	r0, [r6, #0]
 800aad0:	f7ff ff7e 	bl	800a9d0 <__hexdig_fun>
 800aad4:	1e43      	subs	r3, r0, #1
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	0005      	movs	r5, r0
 800aada:	2b18      	cmp	r3, #24
 800aadc:	d82a      	bhi.n	800ab34 <__gethex+0x138>
 800aade:	7870      	ldrb	r0, [r6, #1]
 800aae0:	f7ff ff76 	bl	800a9d0 <__hexdig_fun>
 800aae4:	1e43      	subs	r3, r0, #1
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	3601      	adds	r6, #1
 800aaea:	3d10      	subs	r5, #16
 800aaec:	2b18      	cmp	r3, #24
 800aaee:	d91d      	bls.n	800ab2c <__gethex+0x130>
 800aaf0:	9b04      	ldr	r3, [sp, #16]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d000      	beq.n	800aaf8 <__gethex+0xfc>
 800aaf6:	426d      	negs	r5, r5
 800aaf8:	197f      	adds	r7, r7, r5
 800aafa:	9b06      	ldr	r3, [sp, #24]
 800aafc:	601e      	str	r6, [r3, #0]
 800aafe:	9b02      	ldr	r3, [sp, #8]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d019      	beq.n	800ab38 <__gethex+0x13c>
 800ab04:	9b05      	ldr	r3, [sp, #20]
 800ab06:	2606      	movs	r6, #6
 800ab08:	425a      	negs	r2, r3
 800ab0a:	4153      	adcs	r3, r2
 800ab0c:	425b      	negs	r3, r3
 800ab0e:	401e      	ands	r6, r3
 800ab10:	0030      	movs	r0, r6
 800ab12:	b009      	add	sp, #36	@ 0x24
 800ab14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab16:	2301      	movs	r3, #1
 800ab18:	2700      	movs	r7, #0
 800ab1a:	9c00      	ldr	r4, [sp, #0]
 800ab1c:	9302      	str	r3, [sp, #8]
 800ab1e:	e7c8      	b.n	800aab2 <__gethex+0xb6>
 800ab20:	2300      	movs	r3, #0
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	1ca6      	adds	r6, r4, #2
 800ab26:	e7d2      	b.n	800aace <__gethex+0xd2>
 800ab28:	2301      	movs	r3, #1
 800ab2a:	e7fa      	b.n	800ab22 <__gethex+0x126>
 800ab2c:	230a      	movs	r3, #10
 800ab2e:	435d      	muls	r5, r3
 800ab30:	182d      	adds	r5, r5, r0
 800ab32:	e7d4      	b.n	800aade <__gethex+0xe2>
 800ab34:	0026      	movs	r6, r4
 800ab36:	e7e0      	b.n	800aafa <__gethex+0xfe>
 800ab38:	9b00      	ldr	r3, [sp, #0]
 800ab3a:	9902      	ldr	r1, [sp, #8]
 800ab3c:	1ae3      	subs	r3, r4, r3
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	2b07      	cmp	r3, #7
 800ab42:	dc0a      	bgt.n	800ab5a <__gethex+0x15e>
 800ab44:	9803      	ldr	r0, [sp, #12]
 800ab46:	f7fd ff19 	bl	800897c <_Balloc>
 800ab4a:	1e05      	subs	r5, r0, #0
 800ab4c:	d108      	bne.n	800ab60 <__gethex+0x164>
 800ab4e:	002a      	movs	r2, r5
 800ab50:	21e4      	movs	r1, #228	@ 0xe4
 800ab52:	4b5f      	ldr	r3, [pc, #380]	@ (800acd0 <__gethex+0x2d4>)
 800ab54:	485f      	ldr	r0, [pc, #380]	@ (800acd4 <__gethex+0x2d8>)
 800ab56:	f7ff fe9d 	bl	800a894 <__assert_func>
 800ab5a:	3101      	adds	r1, #1
 800ab5c:	105b      	asrs	r3, r3, #1
 800ab5e:	e7ef      	b.n	800ab40 <__gethex+0x144>
 800ab60:	0003      	movs	r3, r0
 800ab62:	3314      	adds	r3, #20
 800ab64:	9302      	str	r3, [sp, #8]
 800ab66:	9305      	str	r3, [sp, #20]
 800ab68:	2300      	movs	r3, #0
 800ab6a:	001e      	movs	r6, r3
 800ab6c:	9304      	str	r3, [sp, #16]
 800ab6e:	9b00      	ldr	r3, [sp, #0]
 800ab70:	42a3      	cmp	r3, r4
 800ab72:	d338      	bcc.n	800abe6 <__gethex+0x1ea>
 800ab74:	9c05      	ldr	r4, [sp, #20]
 800ab76:	9b02      	ldr	r3, [sp, #8]
 800ab78:	c440      	stmia	r4!, {r6}
 800ab7a:	1ae4      	subs	r4, r4, r3
 800ab7c:	10a4      	asrs	r4, r4, #2
 800ab7e:	0030      	movs	r0, r6
 800ab80:	612c      	str	r4, [r5, #16]
 800ab82:	f7fd fff3 	bl	8008b6c <__hi0bits>
 800ab86:	9b01      	ldr	r3, [sp, #4]
 800ab88:	0164      	lsls	r4, r4, #5
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	1a26      	subs	r6, r4, r0
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	429e      	cmp	r6, r3
 800ab92:	dd52      	ble.n	800ac3a <__gethex+0x23e>
 800ab94:	1af6      	subs	r6, r6, r3
 800ab96:	0031      	movs	r1, r6
 800ab98:	0028      	movs	r0, r5
 800ab9a:	f7fe fb8e 	bl	80092ba <__any_on>
 800ab9e:	1e04      	subs	r4, r0, #0
 800aba0:	d00f      	beq.n	800abc2 <__gethex+0x1c6>
 800aba2:	2401      	movs	r4, #1
 800aba4:	211f      	movs	r1, #31
 800aba6:	0020      	movs	r0, r4
 800aba8:	1e73      	subs	r3, r6, #1
 800abaa:	4019      	ands	r1, r3
 800abac:	4088      	lsls	r0, r1
 800abae:	0001      	movs	r1, r0
 800abb0:	115a      	asrs	r2, r3, #5
 800abb2:	9802      	ldr	r0, [sp, #8]
 800abb4:	0092      	lsls	r2, r2, #2
 800abb6:	5812      	ldr	r2, [r2, r0]
 800abb8:	420a      	tst	r2, r1
 800abba:	d002      	beq.n	800abc2 <__gethex+0x1c6>
 800abbc:	42a3      	cmp	r3, r4
 800abbe:	dc34      	bgt.n	800ac2a <__gethex+0x22e>
 800abc0:	2402      	movs	r4, #2
 800abc2:	0031      	movs	r1, r6
 800abc4:	0028      	movs	r0, r5
 800abc6:	f7ff feb0 	bl	800a92a <rshift>
 800abca:	19bf      	adds	r7, r7, r6
 800abcc:	9b01      	ldr	r3, [sp, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	42bb      	cmp	r3, r7
 800abd2:	da42      	bge.n	800ac5a <__gethex+0x25e>
 800abd4:	0029      	movs	r1, r5
 800abd6:	9803      	ldr	r0, [sp, #12]
 800abd8:	f7fd ff14 	bl	8008a04 <_Bfree>
 800abdc:	2300      	movs	r3, #0
 800abde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abe0:	26a3      	movs	r6, #163	@ 0xa3
 800abe2:	6013      	str	r3, [r2, #0]
 800abe4:	e794      	b.n	800ab10 <__gethex+0x114>
 800abe6:	3c01      	subs	r4, #1
 800abe8:	7823      	ldrb	r3, [r4, #0]
 800abea:	2b2e      	cmp	r3, #46	@ 0x2e
 800abec:	d012      	beq.n	800ac14 <__gethex+0x218>
 800abee:	9b04      	ldr	r3, [sp, #16]
 800abf0:	2b20      	cmp	r3, #32
 800abf2:	d104      	bne.n	800abfe <__gethex+0x202>
 800abf4:	9b05      	ldr	r3, [sp, #20]
 800abf6:	c340      	stmia	r3!, {r6}
 800abf8:	2600      	movs	r6, #0
 800abfa:	9305      	str	r3, [sp, #20]
 800abfc:	9604      	str	r6, [sp, #16]
 800abfe:	7820      	ldrb	r0, [r4, #0]
 800ac00:	f7ff fee6 	bl	800a9d0 <__hexdig_fun>
 800ac04:	230f      	movs	r3, #15
 800ac06:	4018      	ands	r0, r3
 800ac08:	9b04      	ldr	r3, [sp, #16]
 800ac0a:	4098      	lsls	r0, r3
 800ac0c:	3304      	adds	r3, #4
 800ac0e:	4306      	orrs	r6, r0
 800ac10:	9304      	str	r3, [sp, #16]
 800ac12:	e7ac      	b.n	800ab6e <__gethex+0x172>
 800ac14:	9b00      	ldr	r3, [sp, #0]
 800ac16:	42a3      	cmp	r3, r4
 800ac18:	d8e9      	bhi.n	800abee <__gethex+0x1f2>
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	0020      	movs	r0, r4
 800ac1e:	492b      	ldr	r1, [pc, #172]	@ (800accc <__gethex+0x2d0>)
 800ac20:	f7ff fdeb 	bl	800a7fa <strncmp>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	d1e2      	bne.n	800abee <__gethex+0x1f2>
 800ac28:	e7a1      	b.n	800ab6e <__gethex+0x172>
 800ac2a:	0028      	movs	r0, r5
 800ac2c:	1eb1      	subs	r1, r6, #2
 800ac2e:	f7fe fb44 	bl	80092ba <__any_on>
 800ac32:	2800      	cmp	r0, #0
 800ac34:	d0c4      	beq.n	800abc0 <__gethex+0x1c4>
 800ac36:	2403      	movs	r4, #3
 800ac38:	e7c3      	b.n	800abc2 <__gethex+0x1c6>
 800ac3a:	9b00      	ldr	r3, [sp, #0]
 800ac3c:	2400      	movs	r4, #0
 800ac3e:	429e      	cmp	r6, r3
 800ac40:	dac4      	bge.n	800abcc <__gethex+0x1d0>
 800ac42:	1b9e      	subs	r6, r3, r6
 800ac44:	0029      	movs	r1, r5
 800ac46:	0032      	movs	r2, r6
 800ac48:	9803      	ldr	r0, [sp, #12]
 800ac4a:	f7fe f8fd 	bl	8008e48 <__lshift>
 800ac4e:	0003      	movs	r3, r0
 800ac50:	3314      	adds	r3, #20
 800ac52:	0005      	movs	r5, r0
 800ac54:	1bbf      	subs	r7, r7, r6
 800ac56:	9302      	str	r3, [sp, #8]
 800ac58:	e7b8      	b.n	800abcc <__gethex+0x1d0>
 800ac5a:	9b01      	ldr	r3, [sp, #4]
 800ac5c:	685e      	ldr	r6, [r3, #4]
 800ac5e:	42be      	cmp	r6, r7
 800ac60:	dd6f      	ble.n	800ad42 <__gethex+0x346>
 800ac62:	9b00      	ldr	r3, [sp, #0]
 800ac64:	1bf6      	subs	r6, r6, r7
 800ac66:	42b3      	cmp	r3, r6
 800ac68:	dc36      	bgt.n	800acd8 <__gethex+0x2dc>
 800ac6a:	9b01      	ldr	r3, [sp, #4]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d024      	beq.n	800acbc <__gethex+0x2c0>
 800ac72:	2b03      	cmp	r3, #3
 800ac74:	d026      	beq.n	800acc4 <__gethex+0x2c8>
 800ac76:	2b01      	cmp	r3, #1
 800ac78:	d117      	bne.n	800acaa <__gethex+0x2ae>
 800ac7a:	9b00      	ldr	r3, [sp, #0]
 800ac7c:	42b3      	cmp	r3, r6
 800ac7e:	d114      	bne.n	800acaa <__gethex+0x2ae>
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d10b      	bne.n	800ac9c <__gethex+0x2a0>
 800ac84:	9b01      	ldr	r3, [sp, #4]
 800ac86:	9a07      	ldr	r2, [sp, #28]
 800ac88:	685b      	ldr	r3, [r3, #4]
 800ac8a:	2662      	movs	r6, #98	@ 0x62
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	2301      	movs	r3, #1
 800ac90:	9a02      	ldr	r2, [sp, #8]
 800ac92:	612b      	str	r3, [r5, #16]
 800ac94:	6013      	str	r3, [r2, #0]
 800ac96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac98:	601d      	str	r5, [r3, #0]
 800ac9a:	e739      	b.n	800ab10 <__gethex+0x114>
 800ac9c:	9900      	ldr	r1, [sp, #0]
 800ac9e:	0028      	movs	r0, r5
 800aca0:	3901      	subs	r1, #1
 800aca2:	f7fe fb0a 	bl	80092ba <__any_on>
 800aca6:	2800      	cmp	r0, #0
 800aca8:	d1ec      	bne.n	800ac84 <__gethex+0x288>
 800acaa:	0029      	movs	r1, r5
 800acac:	9803      	ldr	r0, [sp, #12]
 800acae:	f7fd fea9 	bl	8008a04 <_Bfree>
 800acb2:	2300      	movs	r3, #0
 800acb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800acb6:	2650      	movs	r6, #80	@ 0x50
 800acb8:	6013      	str	r3, [r2, #0]
 800acba:	e729      	b.n	800ab10 <__gethex+0x114>
 800acbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d1f3      	bne.n	800acaa <__gethex+0x2ae>
 800acc2:	e7df      	b.n	800ac84 <__gethex+0x288>
 800acc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d1dc      	bne.n	800ac84 <__gethex+0x288>
 800acca:	e7ee      	b.n	800acaa <__gethex+0x2ae>
 800accc:	0800b5ab 	.word	0x0800b5ab
 800acd0:	0800b541 	.word	0x0800b541
 800acd4:	0800b602 	.word	0x0800b602
 800acd8:	1e77      	subs	r7, r6, #1
 800acda:	2c00      	cmp	r4, #0
 800acdc:	d12f      	bne.n	800ad3e <__gethex+0x342>
 800acde:	2f00      	cmp	r7, #0
 800ace0:	d004      	beq.n	800acec <__gethex+0x2f0>
 800ace2:	0039      	movs	r1, r7
 800ace4:	0028      	movs	r0, r5
 800ace6:	f7fe fae8 	bl	80092ba <__any_on>
 800acea:	0004      	movs	r4, r0
 800acec:	231f      	movs	r3, #31
 800acee:	117a      	asrs	r2, r7, #5
 800acf0:	401f      	ands	r7, r3
 800acf2:	3b1e      	subs	r3, #30
 800acf4:	40bb      	lsls	r3, r7
 800acf6:	9902      	ldr	r1, [sp, #8]
 800acf8:	0092      	lsls	r2, r2, #2
 800acfa:	5852      	ldr	r2, [r2, r1]
 800acfc:	421a      	tst	r2, r3
 800acfe:	d001      	beq.n	800ad04 <__gethex+0x308>
 800ad00:	2302      	movs	r3, #2
 800ad02:	431c      	orrs	r4, r3
 800ad04:	9b00      	ldr	r3, [sp, #0]
 800ad06:	0031      	movs	r1, r6
 800ad08:	1b9b      	subs	r3, r3, r6
 800ad0a:	2602      	movs	r6, #2
 800ad0c:	0028      	movs	r0, r5
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	f7ff fe0b 	bl	800a92a <rshift>
 800ad14:	9b01      	ldr	r3, [sp, #4]
 800ad16:	685f      	ldr	r7, [r3, #4]
 800ad18:	2c00      	cmp	r4, #0
 800ad1a:	d03f      	beq.n	800ad9c <__gethex+0x3a0>
 800ad1c:	9b01      	ldr	r3, [sp, #4]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	2b02      	cmp	r3, #2
 800ad22:	d010      	beq.n	800ad46 <__gethex+0x34a>
 800ad24:	2b03      	cmp	r3, #3
 800ad26:	d012      	beq.n	800ad4e <__gethex+0x352>
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d106      	bne.n	800ad3a <__gethex+0x33e>
 800ad2c:	07a2      	lsls	r2, r4, #30
 800ad2e:	d504      	bpl.n	800ad3a <__gethex+0x33e>
 800ad30:	9a02      	ldr	r2, [sp, #8]
 800ad32:	6812      	ldr	r2, [r2, #0]
 800ad34:	4314      	orrs	r4, r2
 800ad36:	421c      	tst	r4, r3
 800ad38:	d10c      	bne.n	800ad54 <__gethex+0x358>
 800ad3a:	2310      	movs	r3, #16
 800ad3c:	e02d      	b.n	800ad9a <__gethex+0x39e>
 800ad3e:	2401      	movs	r4, #1
 800ad40:	e7d4      	b.n	800acec <__gethex+0x2f0>
 800ad42:	2601      	movs	r6, #1
 800ad44:	e7e8      	b.n	800ad18 <__gethex+0x31c>
 800ad46:	2301      	movs	r3, #1
 800ad48:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ad4a:	1a9b      	subs	r3, r3, r2
 800ad4c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800ad4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d0f2      	beq.n	800ad3a <__gethex+0x33e>
 800ad54:	692b      	ldr	r3, [r5, #16]
 800ad56:	2000      	movs	r0, #0
 800ad58:	9302      	str	r3, [sp, #8]
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	9304      	str	r3, [sp, #16]
 800ad5e:	002b      	movs	r3, r5
 800ad60:	9a04      	ldr	r2, [sp, #16]
 800ad62:	3314      	adds	r3, #20
 800ad64:	1899      	adds	r1, r3, r2
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	1c54      	adds	r4, r2, #1
 800ad6a:	d01c      	beq.n	800ada6 <__gethex+0x3aa>
 800ad6c:	3201      	adds	r2, #1
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	002b      	movs	r3, r5
 800ad72:	3314      	adds	r3, #20
 800ad74:	2e02      	cmp	r6, #2
 800ad76:	d13f      	bne.n	800adf8 <__gethex+0x3fc>
 800ad78:	9a01      	ldr	r2, [sp, #4]
 800ad7a:	9900      	ldr	r1, [sp, #0]
 800ad7c:	6812      	ldr	r2, [r2, #0]
 800ad7e:	3a01      	subs	r2, #1
 800ad80:	428a      	cmp	r2, r1
 800ad82:	d109      	bne.n	800ad98 <__gethex+0x39c>
 800ad84:	000a      	movs	r2, r1
 800ad86:	201f      	movs	r0, #31
 800ad88:	4010      	ands	r0, r2
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	4082      	lsls	r2, r0
 800ad8e:	1149      	asrs	r1, r1, #5
 800ad90:	0089      	lsls	r1, r1, #2
 800ad92:	58cb      	ldr	r3, [r1, r3]
 800ad94:	4213      	tst	r3, r2
 800ad96:	d13d      	bne.n	800ae14 <__gethex+0x418>
 800ad98:	2320      	movs	r3, #32
 800ad9a:	431e      	orrs	r6, r3
 800ad9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ad9e:	601d      	str	r5, [r3, #0]
 800ada0:	9b07      	ldr	r3, [sp, #28]
 800ada2:	601f      	str	r7, [r3, #0]
 800ada4:	e6b4      	b.n	800ab10 <__gethex+0x114>
 800ada6:	c301      	stmia	r3!, {r0}
 800ada8:	4299      	cmp	r1, r3
 800adaa:	d8dc      	bhi.n	800ad66 <__gethex+0x36a>
 800adac:	68ab      	ldr	r3, [r5, #8]
 800adae:	9a02      	ldr	r2, [sp, #8]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	db18      	blt.n	800ade6 <__gethex+0x3ea>
 800adb4:	6869      	ldr	r1, [r5, #4]
 800adb6:	9803      	ldr	r0, [sp, #12]
 800adb8:	3101      	adds	r1, #1
 800adba:	f7fd fddf 	bl	800897c <_Balloc>
 800adbe:	1e04      	subs	r4, r0, #0
 800adc0:	d104      	bne.n	800adcc <__gethex+0x3d0>
 800adc2:	0022      	movs	r2, r4
 800adc4:	2184      	movs	r1, #132	@ 0x84
 800adc6:	4b1d      	ldr	r3, [pc, #116]	@ (800ae3c <__gethex+0x440>)
 800adc8:	481d      	ldr	r0, [pc, #116]	@ (800ae40 <__gethex+0x444>)
 800adca:	e6c4      	b.n	800ab56 <__gethex+0x15a>
 800adcc:	0029      	movs	r1, r5
 800adce:	692a      	ldr	r2, [r5, #16]
 800add0:	310c      	adds	r1, #12
 800add2:	3202      	adds	r2, #2
 800add4:	0092      	lsls	r2, r2, #2
 800add6:	300c      	adds	r0, #12
 800add8:	f7fc fe46 	bl	8007a68 <memcpy>
 800addc:	0029      	movs	r1, r5
 800adde:	9803      	ldr	r0, [sp, #12]
 800ade0:	f7fd fe10 	bl	8008a04 <_Bfree>
 800ade4:	0025      	movs	r5, r4
 800ade6:	692b      	ldr	r3, [r5, #16]
 800ade8:	1c5a      	adds	r2, r3, #1
 800adea:	612a      	str	r2, [r5, #16]
 800adec:	2201      	movs	r2, #1
 800adee:	3304      	adds	r3, #4
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	18eb      	adds	r3, r5, r3
 800adf4:	605a      	str	r2, [r3, #4]
 800adf6:	e7bb      	b.n	800ad70 <__gethex+0x374>
 800adf8:	692a      	ldr	r2, [r5, #16]
 800adfa:	9902      	ldr	r1, [sp, #8]
 800adfc:	428a      	cmp	r2, r1
 800adfe:	dd0b      	ble.n	800ae18 <__gethex+0x41c>
 800ae00:	2101      	movs	r1, #1
 800ae02:	0028      	movs	r0, r5
 800ae04:	f7ff fd91 	bl	800a92a <rshift>
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	3701      	adds	r7, #1
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	42bb      	cmp	r3, r7
 800ae10:	da00      	bge.n	800ae14 <__gethex+0x418>
 800ae12:	e6df      	b.n	800abd4 <__gethex+0x1d8>
 800ae14:	2601      	movs	r6, #1
 800ae16:	e7bf      	b.n	800ad98 <__gethex+0x39c>
 800ae18:	221f      	movs	r2, #31
 800ae1a:	9c00      	ldr	r4, [sp, #0]
 800ae1c:	9900      	ldr	r1, [sp, #0]
 800ae1e:	4014      	ands	r4, r2
 800ae20:	4211      	tst	r1, r2
 800ae22:	d0f7      	beq.n	800ae14 <__gethex+0x418>
 800ae24:	9a04      	ldr	r2, [sp, #16]
 800ae26:	189b      	adds	r3, r3, r2
 800ae28:	3b04      	subs	r3, #4
 800ae2a:	6818      	ldr	r0, [r3, #0]
 800ae2c:	f7fd fe9e 	bl	8008b6c <__hi0bits>
 800ae30:	2320      	movs	r3, #32
 800ae32:	1b1b      	subs	r3, r3, r4
 800ae34:	4298      	cmp	r0, r3
 800ae36:	dbe3      	blt.n	800ae00 <__gethex+0x404>
 800ae38:	e7ec      	b.n	800ae14 <__gethex+0x418>
 800ae3a:	46c0      	nop			@ (mov r8, r8)
 800ae3c:	0800b541 	.word	0x0800b541
 800ae40:	0800b602 	.word	0x0800b602

0800ae44 <L_shift>:
 800ae44:	2308      	movs	r3, #8
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	2520      	movs	r5, #32
 800ae4a:	1a9a      	subs	r2, r3, r2
 800ae4c:	0092      	lsls	r2, r2, #2
 800ae4e:	1aad      	subs	r5, r5, r2
 800ae50:	6843      	ldr	r3, [r0, #4]
 800ae52:	6804      	ldr	r4, [r0, #0]
 800ae54:	001e      	movs	r6, r3
 800ae56:	40ae      	lsls	r6, r5
 800ae58:	40d3      	lsrs	r3, r2
 800ae5a:	4334      	orrs	r4, r6
 800ae5c:	6004      	str	r4, [r0, #0]
 800ae5e:	6043      	str	r3, [r0, #4]
 800ae60:	3004      	adds	r0, #4
 800ae62:	4288      	cmp	r0, r1
 800ae64:	d3f4      	bcc.n	800ae50 <L_shift+0xc>
 800ae66:	bd70      	pop	{r4, r5, r6, pc}

0800ae68 <__match>:
 800ae68:	b530      	push	{r4, r5, lr}
 800ae6a:	6803      	ldr	r3, [r0, #0]
 800ae6c:	780c      	ldrb	r4, [r1, #0]
 800ae6e:	3301      	adds	r3, #1
 800ae70:	2c00      	cmp	r4, #0
 800ae72:	d102      	bne.n	800ae7a <__match+0x12>
 800ae74:	6003      	str	r3, [r0, #0]
 800ae76:	2001      	movs	r0, #1
 800ae78:	bd30      	pop	{r4, r5, pc}
 800ae7a:	781a      	ldrb	r2, [r3, #0]
 800ae7c:	0015      	movs	r5, r2
 800ae7e:	3d41      	subs	r5, #65	@ 0x41
 800ae80:	2d19      	cmp	r5, #25
 800ae82:	d800      	bhi.n	800ae86 <__match+0x1e>
 800ae84:	3220      	adds	r2, #32
 800ae86:	3101      	adds	r1, #1
 800ae88:	42a2      	cmp	r2, r4
 800ae8a:	d0ef      	beq.n	800ae6c <__match+0x4>
 800ae8c:	2000      	movs	r0, #0
 800ae8e:	e7f3      	b.n	800ae78 <__match+0x10>

0800ae90 <__hexnan>:
 800ae90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae92:	680b      	ldr	r3, [r1, #0]
 800ae94:	b08b      	sub	sp, #44	@ 0x2c
 800ae96:	9201      	str	r2, [sp, #4]
 800ae98:	9901      	ldr	r1, [sp, #4]
 800ae9a:	115a      	asrs	r2, r3, #5
 800ae9c:	0092      	lsls	r2, r2, #2
 800ae9e:	188a      	adds	r2, r1, r2
 800aea0:	9202      	str	r2, [sp, #8]
 800aea2:	0019      	movs	r1, r3
 800aea4:	221f      	movs	r2, #31
 800aea6:	4011      	ands	r1, r2
 800aea8:	9008      	str	r0, [sp, #32]
 800aeaa:	9106      	str	r1, [sp, #24]
 800aeac:	4213      	tst	r3, r2
 800aeae:	d002      	beq.n	800aeb6 <__hexnan+0x26>
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	9302      	str	r3, [sp, #8]
 800aeb6:	9b02      	ldr	r3, [sp, #8]
 800aeb8:	2500      	movs	r5, #0
 800aeba:	1f1f      	subs	r7, r3, #4
 800aebc:	003e      	movs	r6, r7
 800aebe:	003c      	movs	r4, r7
 800aec0:	9b08      	ldr	r3, [sp, #32]
 800aec2:	603d      	str	r5, [r7, #0]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	9507      	str	r5, [sp, #28]
 800aec8:	9305      	str	r3, [sp, #20]
 800aeca:	9503      	str	r5, [sp, #12]
 800aecc:	9b05      	ldr	r3, [sp, #20]
 800aece:	3301      	adds	r3, #1
 800aed0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed2:	9b05      	ldr	r3, [sp, #20]
 800aed4:	785b      	ldrb	r3, [r3, #1]
 800aed6:	9304      	str	r3, [sp, #16]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d028      	beq.n	800af2e <__hexnan+0x9e>
 800aedc:	9804      	ldr	r0, [sp, #16]
 800aede:	f7ff fd77 	bl	800a9d0 <__hexdig_fun>
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d155      	bne.n	800af92 <__hexnan+0x102>
 800aee6:	9b04      	ldr	r3, [sp, #16]
 800aee8:	2b20      	cmp	r3, #32
 800aeea:	d819      	bhi.n	800af20 <__hexnan+0x90>
 800aeec:	9b03      	ldr	r3, [sp, #12]
 800aeee:	9a07      	ldr	r2, [sp, #28]
 800aef0:	4293      	cmp	r3, r2
 800aef2:	dd12      	ble.n	800af1a <__hexnan+0x8a>
 800aef4:	42b4      	cmp	r4, r6
 800aef6:	d206      	bcs.n	800af06 <__hexnan+0x76>
 800aef8:	2d07      	cmp	r5, #7
 800aefa:	dc04      	bgt.n	800af06 <__hexnan+0x76>
 800aefc:	002a      	movs	r2, r5
 800aefe:	0031      	movs	r1, r6
 800af00:	0020      	movs	r0, r4
 800af02:	f7ff ff9f 	bl	800ae44 <L_shift>
 800af06:	9b01      	ldr	r3, [sp, #4]
 800af08:	2508      	movs	r5, #8
 800af0a:	429c      	cmp	r4, r3
 800af0c:	d905      	bls.n	800af1a <__hexnan+0x8a>
 800af0e:	1f26      	subs	r6, r4, #4
 800af10:	2500      	movs	r5, #0
 800af12:	0034      	movs	r4, r6
 800af14:	9b03      	ldr	r3, [sp, #12]
 800af16:	6035      	str	r5, [r6, #0]
 800af18:	9307      	str	r3, [sp, #28]
 800af1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1c:	9305      	str	r3, [sp, #20]
 800af1e:	e7d5      	b.n	800aecc <__hexnan+0x3c>
 800af20:	9b04      	ldr	r3, [sp, #16]
 800af22:	2b29      	cmp	r3, #41	@ 0x29
 800af24:	d15a      	bne.n	800afdc <__hexnan+0x14c>
 800af26:	9b05      	ldr	r3, [sp, #20]
 800af28:	9a08      	ldr	r2, [sp, #32]
 800af2a:	3302      	adds	r3, #2
 800af2c:	6013      	str	r3, [r2, #0]
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d053      	beq.n	800afdc <__hexnan+0x14c>
 800af34:	42b4      	cmp	r4, r6
 800af36:	d206      	bcs.n	800af46 <__hexnan+0xb6>
 800af38:	2d07      	cmp	r5, #7
 800af3a:	dc04      	bgt.n	800af46 <__hexnan+0xb6>
 800af3c:	002a      	movs	r2, r5
 800af3e:	0031      	movs	r1, r6
 800af40:	0020      	movs	r0, r4
 800af42:	f7ff ff7f 	bl	800ae44 <L_shift>
 800af46:	9b01      	ldr	r3, [sp, #4]
 800af48:	429c      	cmp	r4, r3
 800af4a:	d936      	bls.n	800afba <__hexnan+0x12a>
 800af4c:	001a      	movs	r2, r3
 800af4e:	0023      	movs	r3, r4
 800af50:	cb02      	ldmia	r3!, {r1}
 800af52:	c202      	stmia	r2!, {r1}
 800af54:	429f      	cmp	r7, r3
 800af56:	d2fb      	bcs.n	800af50 <__hexnan+0xc0>
 800af58:	9b02      	ldr	r3, [sp, #8]
 800af5a:	1c62      	adds	r2, r4, #1
 800af5c:	1ed9      	subs	r1, r3, #3
 800af5e:	2304      	movs	r3, #4
 800af60:	4291      	cmp	r1, r2
 800af62:	d305      	bcc.n	800af70 <__hexnan+0xe0>
 800af64:	9b02      	ldr	r3, [sp, #8]
 800af66:	3b04      	subs	r3, #4
 800af68:	1b1b      	subs	r3, r3, r4
 800af6a:	089b      	lsrs	r3, r3, #2
 800af6c:	3301      	adds	r3, #1
 800af6e:	009b      	lsls	r3, r3, #2
 800af70:	9a01      	ldr	r2, [sp, #4]
 800af72:	18d3      	adds	r3, r2, r3
 800af74:	2200      	movs	r2, #0
 800af76:	c304      	stmia	r3!, {r2}
 800af78:	429f      	cmp	r7, r3
 800af7a:	d2fc      	bcs.n	800af76 <__hexnan+0xe6>
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d104      	bne.n	800af8c <__hexnan+0xfc>
 800af82:	9b01      	ldr	r3, [sp, #4]
 800af84:	429f      	cmp	r7, r3
 800af86:	d127      	bne.n	800afd8 <__hexnan+0x148>
 800af88:	2301      	movs	r3, #1
 800af8a:	603b      	str	r3, [r7, #0]
 800af8c:	2005      	movs	r0, #5
 800af8e:	b00b      	add	sp, #44	@ 0x2c
 800af90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af92:	9b03      	ldr	r3, [sp, #12]
 800af94:	3501      	adds	r5, #1
 800af96:	3301      	adds	r3, #1
 800af98:	9303      	str	r3, [sp, #12]
 800af9a:	2d08      	cmp	r5, #8
 800af9c:	dd06      	ble.n	800afac <__hexnan+0x11c>
 800af9e:	9b01      	ldr	r3, [sp, #4]
 800afa0:	429c      	cmp	r4, r3
 800afa2:	d9ba      	bls.n	800af1a <__hexnan+0x8a>
 800afa4:	2300      	movs	r3, #0
 800afa6:	2501      	movs	r5, #1
 800afa8:	3c04      	subs	r4, #4
 800afaa:	6023      	str	r3, [r4, #0]
 800afac:	220f      	movs	r2, #15
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	4010      	ands	r0, r2
 800afb2:	011b      	lsls	r3, r3, #4
 800afb4:	4303      	orrs	r3, r0
 800afb6:	6023      	str	r3, [r4, #0]
 800afb8:	e7af      	b.n	800af1a <__hexnan+0x8a>
 800afba:	9b06      	ldr	r3, [sp, #24]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d0dd      	beq.n	800af7c <__hexnan+0xec>
 800afc0:	2320      	movs	r3, #32
 800afc2:	9a06      	ldr	r2, [sp, #24]
 800afc4:	9902      	ldr	r1, [sp, #8]
 800afc6:	1a9b      	subs	r3, r3, r2
 800afc8:	2201      	movs	r2, #1
 800afca:	4252      	negs	r2, r2
 800afcc:	40da      	lsrs	r2, r3
 800afce:	3904      	subs	r1, #4
 800afd0:	680b      	ldr	r3, [r1, #0]
 800afd2:	4013      	ands	r3, r2
 800afd4:	600b      	str	r3, [r1, #0]
 800afd6:	e7d1      	b.n	800af7c <__hexnan+0xec>
 800afd8:	3f04      	subs	r7, #4
 800afda:	e7cf      	b.n	800af7c <__hexnan+0xec>
 800afdc:	2004      	movs	r0, #4
 800afde:	e7d6      	b.n	800af8e <__hexnan+0xfe>

0800afe0 <__ascii_mbtowc>:
 800afe0:	b082      	sub	sp, #8
 800afe2:	2900      	cmp	r1, #0
 800afe4:	d100      	bne.n	800afe8 <__ascii_mbtowc+0x8>
 800afe6:	a901      	add	r1, sp, #4
 800afe8:	1e10      	subs	r0, r2, #0
 800afea:	d006      	beq.n	800affa <__ascii_mbtowc+0x1a>
 800afec:	2b00      	cmp	r3, #0
 800afee:	d006      	beq.n	800affe <__ascii_mbtowc+0x1e>
 800aff0:	7813      	ldrb	r3, [r2, #0]
 800aff2:	600b      	str	r3, [r1, #0]
 800aff4:	7810      	ldrb	r0, [r2, #0]
 800aff6:	1e43      	subs	r3, r0, #1
 800aff8:	4198      	sbcs	r0, r3
 800affa:	b002      	add	sp, #8
 800affc:	4770      	bx	lr
 800affe:	2002      	movs	r0, #2
 800b000:	4240      	negs	r0, r0
 800b002:	e7fa      	b.n	800affa <__ascii_mbtowc+0x1a>

0800b004 <_realloc_r>:
 800b004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b006:	0006      	movs	r6, r0
 800b008:	000c      	movs	r4, r1
 800b00a:	0015      	movs	r5, r2
 800b00c:	2900      	cmp	r1, #0
 800b00e:	d105      	bne.n	800b01c <_realloc_r+0x18>
 800b010:	0011      	movs	r1, r2
 800b012:	f7fd fc23 	bl	800885c <_malloc_r>
 800b016:	0004      	movs	r4, r0
 800b018:	0020      	movs	r0, r4
 800b01a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b01c:	2a00      	cmp	r2, #0
 800b01e:	d103      	bne.n	800b028 <_realloc_r+0x24>
 800b020:	f7fd fba6 	bl	8008770 <_free_r>
 800b024:	002c      	movs	r4, r5
 800b026:	e7f7      	b.n	800b018 <_realloc_r+0x14>
 800b028:	f000 f841 	bl	800b0ae <_malloc_usable_size_r>
 800b02c:	0007      	movs	r7, r0
 800b02e:	4285      	cmp	r5, r0
 800b030:	d802      	bhi.n	800b038 <_realloc_r+0x34>
 800b032:	0843      	lsrs	r3, r0, #1
 800b034:	42ab      	cmp	r3, r5
 800b036:	d3ef      	bcc.n	800b018 <_realloc_r+0x14>
 800b038:	0029      	movs	r1, r5
 800b03a:	0030      	movs	r0, r6
 800b03c:	f7fd fc0e 	bl	800885c <_malloc_r>
 800b040:	9001      	str	r0, [sp, #4]
 800b042:	2800      	cmp	r0, #0
 800b044:	d101      	bne.n	800b04a <_realloc_r+0x46>
 800b046:	9c01      	ldr	r4, [sp, #4]
 800b048:	e7e6      	b.n	800b018 <_realloc_r+0x14>
 800b04a:	002a      	movs	r2, r5
 800b04c:	42bd      	cmp	r5, r7
 800b04e:	d900      	bls.n	800b052 <_realloc_r+0x4e>
 800b050:	003a      	movs	r2, r7
 800b052:	0021      	movs	r1, r4
 800b054:	9801      	ldr	r0, [sp, #4]
 800b056:	f7fc fd07 	bl	8007a68 <memcpy>
 800b05a:	0021      	movs	r1, r4
 800b05c:	0030      	movs	r0, r6
 800b05e:	f7fd fb87 	bl	8008770 <_free_r>
 800b062:	e7f0      	b.n	800b046 <_realloc_r+0x42>

0800b064 <__ascii_wctomb>:
 800b064:	0003      	movs	r3, r0
 800b066:	1e08      	subs	r0, r1, #0
 800b068:	d005      	beq.n	800b076 <__ascii_wctomb+0x12>
 800b06a:	2aff      	cmp	r2, #255	@ 0xff
 800b06c:	d904      	bls.n	800b078 <__ascii_wctomb+0x14>
 800b06e:	228a      	movs	r2, #138	@ 0x8a
 800b070:	2001      	movs	r0, #1
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	4240      	negs	r0, r0
 800b076:	4770      	bx	lr
 800b078:	2001      	movs	r0, #1
 800b07a:	700a      	strb	r2, [r1, #0]
 800b07c:	e7fb      	b.n	800b076 <__ascii_wctomb+0x12>
	...

0800b080 <fiprintf>:
 800b080:	b40e      	push	{r1, r2, r3}
 800b082:	b517      	push	{r0, r1, r2, r4, lr}
 800b084:	4c05      	ldr	r4, [pc, #20]	@ (800b09c <fiprintf+0x1c>)
 800b086:	ab05      	add	r3, sp, #20
 800b088:	cb04      	ldmia	r3!, {r2}
 800b08a:	0001      	movs	r1, r0
 800b08c:	6820      	ldr	r0, [r4, #0]
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	f7ff f968 	bl	800a364 <_vfiprintf_r>
 800b094:	bc1e      	pop	{r1, r2, r3, r4}
 800b096:	bc08      	pop	{r3}
 800b098:	b003      	add	sp, #12
 800b09a:	4718      	bx	r3
 800b09c:	20000018 	.word	0x20000018

0800b0a0 <abort>:
 800b0a0:	2006      	movs	r0, #6
 800b0a2:	b510      	push	{r4, lr}
 800b0a4:	f000 f834 	bl	800b110 <raise>
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	f7f8 ff99 	bl	8003fe0 <_exit>

0800b0ae <_malloc_usable_size_r>:
 800b0ae:	1f0b      	subs	r3, r1, #4
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	1f18      	subs	r0, r3, #4
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	da01      	bge.n	800b0bc <_malloc_usable_size_r+0xe>
 800b0b8:	580b      	ldr	r3, [r1, r0]
 800b0ba:	18c0      	adds	r0, r0, r3
 800b0bc:	4770      	bx	lr

0800b0be <_raise_r>:
 800b0be:	b570      	push	{r4, r5, r6, lr}
 800b0c0:	0004      	movs	r4, r0
 800b0c2:	000d      	movs	r5, r1
 800b0c4:	291f      	cmp	r1, #31
 800b0c6:	d904      	bls.n	800b0d2 <_raise_r+0x14>
 800b0c8:	2316      	movs	r3, #22
 800b0ca:	6003      	str	r3, [r0, #0]
 800b0cc:	2001      	movs	r0, #1
 800b0ce:	4240      	negs	r0, r0
 800b0d0:	bd70      	pop	{r4, r5, r6, pc}
 800b0d2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d004      	beq.n	800b0e2 <_raise_r+0x24>
 800b0d8:	008a      	lsls	r2, r1, #2
 800b0da:	189b      	adds	r3, r3, r2
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	2a00      	cmp	r2, #0
 800b0e0:	d108      	bne.n	800b0f4 <_raise_r+0x36>
 800b0e2:	0020      	movs	r0, r4
 800b0e4:	f000 f830 	bl	800b148 <_getpid_r>
 800b0e8:	002a      	movs	r2, r5
 800b0ea:	0001      	movs	r1, r0
 800b0ec:	0020      	movs	r0, r4
 800b0ee:	f000 f819 	bl	800b124 <_kill_r>
 800b0f2:	e7ed      	b.n	800b0d0 <_raise_r+0x12>
 800b0f4:	2a01      	cmp	r2, #1
 800b0f6:	d009      	beq.n	800b10c <_raise_r+0x4e>
 800b0f8:	1c51      	adds	r1, r2, #1
 800b0fa:	d103      	bne.n	800b104 <_raise_r+0x46>
 800b0fc:	2316      	movs	r3, #22
 800b0fe:	6003      	str	r3, [r0, #0]
 800b100:	2001      	movs	r0, #1
 800b102:	e7e5      	b.n	800b0d0 <_raise_r+0x12>
 800b104:	2100      	movs	r1, #0
 800b106:	0028      	movs	r0, r5
 800b108:	6019      	str	r1, [r3, #0]
 800b10a:	4790      	blx	r2
 800b10c:	2000      	movs	r0, #0
 800b10e:	e7df      	b.n	800b0d0 <_raise_r+0x12>

0800b110 <raise>:
 800b110:	b510      	push	{r4, lr}
 800b112:	4b03      	ldr	r3, [pc, #12]	@ (800b120 <raise+0x10>)
 800b114:	0001      	movs	r1, r0
 800b116:	6818      	ldr	r0, [r3, #0]
 800b118:	f7ff ffd1 	bl	800b0be <_raise_r>
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	46c0      	nop			@ (mov r8, r8)
 800b120:	20000018 	.word	0x20000018

0800b124 <_kill_r>:
 800b124:	2300      	movs	r3, #0
 800b126:	b570      	push	{r4, r5, r6, lr}
 800b128:	4d06      	ldr	r5, [pc, #24]	@ (800b144 <_kill_r+0x20>)
 800b12a:	0004      	movs	r4, r0
 800b12c:	0008      	movs	r0, r1
 800b12e:	0011      	movs	r1, r2
 800b130:	602b      	str	r3, [r5, #0]
 800b132:	f7f8 ff45 	bl	8003fc0 <_kill>
 800b136:	1c43      	adds	r3, r0, #1
 800b138:	d103      	bne.n	800b142 <_kill_r+0x1e>
 800b13a:	682b      	ldr	r3, [r5, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d000      	beq.n	800b142 <_kill_r+0x1e>
 800b140:	6023      	str	r3, [r4, #0]
 800b142:	bd70      	pop	{r4, r5, r6, pc}
 800b144:	200004d8 	.word	0x200004d8

0800b148 <_getpid_r>:
 800b148:	b510      	push	{r4, lr}
 800b14a:	f7f8 ff33 	bl	8003fb4 <_getpid>
 800b14e:	bd10      	pop	{r4, pc}

0800b150 <_init>:
 800b150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b152:	46c0      	nop			@ (mov r8, r8)
 800b154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b156:	bc08      	pop	{r3}
 800b158:	469e      	mov	lr, r3
 800b15a:	4770      	bx	lr

0800b15c <_fini>:
 800b15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b15e:	46c0      	nop			@ (mov r8, r8)
 800b160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b162:	bc08      	pop	{r3}
 800b164:	469e      	mov	lr, r3
 800b166:	4770      	bx	lr
