
SleepMode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d54  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08002e14  08002e14  00003e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ebc  08002ebc  0000406c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002ebc  08002ebc  0000406c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002ebc  08002ebc  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ebc  08002ebc  00003ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002ec4  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000006c  08002f30  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08002f30  0000425c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005547  00000000  00000000  00004094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000157e  00000000  00000000  000095db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000ab60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000004f5  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000cf52  00000000  00000000  0000b715  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d43  00000000  00000000  00018667  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00046339  00000000  00000000  000203aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000666e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001db8  00000000  00000000  00066728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000684e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dfc 	.word	0x08002dfc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08002dfc 	.word	0x08002dfc

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// redirect output of fprint() to UART2
	int _write(int file, char *ptr, int len)
	{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
		HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	b29a      	uxth	r2, r3
 8000244:	2301      	movs	r3, #1
 8000246:	425b      	negs	r3, r3
 8000248:	68b9      	ldr	r1, [r7, #8]
 800024a:	4804      	ldr	r0, [pc, #16]	@ (800025c <_write+0x28>)
 800024c:	f001 fad0 	bl	80017f0 <HAL_UART_Transmit>
		return len;
 8000250:	687b      	ldr	r3, [r7, #4]
	}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b004      	add	sp, #16
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			@ (mov r8, r8)
 800025c:	20000088 	.word	0x20000088

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 faa1 	bl	80007ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f83f 	bl	80002ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f000 f8b7 	bl	80003e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000272:	f000 f885 	bl	8000380 <MX_USART2_UART_Init>

  /* USER CODE BEGIN 2 */
  __HAL_RCC_PWR_CLK_ENABLE();   // enable PWR clock
 8000276:	4b1a      	ldr	r3, [pc, #104]	@ (80002e0 <main+0x80>)
 8000278:	69da      	ldr	r2, [r3, #28]
 800027a:	4b19      	ldr	r3, [pc, #100]	@ (80002e0 <main+0x80>)
 800027c:	2180      	movs	r1, #128	@ 0x80
 800027e:	0549      	lsls	r1, r1, #21
 8000280:	430a      	orrs	r2, r1
 8000282:	61da      	str	r2, [r3, #28]
 8000284:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <main+0x80>)
 8000286:	69da      	ldr	r2, [r3, #28]
 8000288:	2380      	movs	r3, #128	@ 0x80
 800028a:	055b      	lsls	r3, r3, #21
 800028c:	4013      	ands	r3, r2
 800028e:	607b      	str	r3, [r7, #4]
 8000290:	687b      	ldr	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (PWRstate == low)
 8000292:	4b14      	ldr	r3, [pc, #80]	@ (80002e4 <main+0x84>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d114      	bne.n	80002c6 <main+0x66>
		  // EXTI handler notify us that we should go to sleep
	  		{
				printf("Tick %d. Entering SleepMode\r\n", HAL_GetTick());
 800029c:	f000 fae0 	bl	8000860 <HAL_GetTick>
 80002a0:	0002      	movs	r2, r0
 80002a2:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <main+0x88>)
 80002a4:	0011      	movs	r1, r2
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 ff0c 	bl	80020c4 <iprintf>
				HAL_SuspendTick();
 80002ac:	f000 fb06 	bl	80008bc <HAL_SuspendTick>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80002b0:	2390      	movs	r3, #144	@ 0x90
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	2200      	movs	r2, #0
 80002b6:	2120      	movs	r1, #32
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 fd69 	bl	8000d90 <HAL_GPIO_WritePin>
				//HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI); // for stop mode
				HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80002be:	2101      	movs	r1, #1
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 fdb9 	bl	8000e38 <HAL_PWR_EnterSLEEPMode>
	  		}

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80002c6:	2390      	movs	r3, #144	@ 0x90
 80002c8:	05db      	lsls	r3, r3, #23
 80002ca:	2120      	movs	r1, #32
 80002cc:	0018      	movs	r0, r3
 80002ce:	f000 fd7c 	bl	8000dca <HAL_GPIO_TogglePin>
	  HAL_Delay(333);
 80002d2:	234e      	movs	r3, #78	@ 0x4e
 80002d4:	33ff      	adds	r3, #255	@ 0xff
 80002d6:	0018      	movs	r0, r3
 80002d8:	f000 facc 	bl	8000874 <HAL_Delay>
	  if (PWRstate == low)
 80002dc:	e7d9      	b.n	8000292 <main+0x32>
 80002de:	46c0      	nop			@ (mov r8, r8)
 80002e0:	40021000 	.word	0x40021000
 80002e4:	20000000 	.word	0x20000000
 80002e8:	08002e14 	.word	0x08002e14

080002ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002ec:	b590      	push	{r4, r7, lr}
 80002ee:	b091      	sub	sp, #68	@ 0x44
 80002f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f2:	2410      	movs	r4, #16
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	0018      	movs	r0, r3
 80002f8:	2330      	movs	r3, #48	@ 0x30
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f001 ff3d 	bl	800217c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000302:	003b      	movs	r3, r7
 8000304:	0018      	movs	r0, r3
 8000306:	2310      	movs	r3, #16
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f001 ff36 	bl	800217c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000310:	0021      	movs	r1, r4
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2202      	movs	r2, #2
 8000316:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2201      	movs	r2, #1
 800031c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2210      	movs	r2, #16
 8000322:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	2202      	movs	r2, #2
 8000328:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800032a:	187b      	adds	r3, r7, r1
 800032c:	2200      	movs	r2, #0
 800032e:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000330:	187b      	adds	r3, r7, r1
 8000332:	22a0      	movs	r2, #160	@ 0xa0
 8000334:	0392      	lsls	r2, r2, #14
 8000336:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000338:	187b      	adds	r3, r7, r1
 800033a:	2200      	movs	r2, #0
 800033c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800033e:	187b      	adds	r3, r7, r1
 8000340:	0018      	movs	r0, r3
 8000342:	f000 fd95 	bl	8000e70 <HAL_RCC_OscConfig>
 8000346:	1e03      	subs	r3, r0, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800034a:	f000 f8e7 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800034e:	003b      	movs	r3, r7
 8000350:	2207      	movs	r2, #7
 8000352:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000354:	003b      	movs	r3, r7
 8000356:	2202      	movs	r2, #2
 8000358:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800035a:	003b      	movs	r3, r7
 800035c:	2200      	movs	r2, #0
 800035e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000360:	003b      	movs	r3, r7
 8000362:	2200      	movs	r2, #0
 8000364:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000366:	003b      	movs	r3, r7
 8000368:	2101      	movs	r1, #1
 800036a:	0018      	movs	r0, r3
 800036c:	f001 f89a 	bl	80014a4 <HAL_RCC_ClockConfig>
 8000370:	1e03      	subs	r3, r0, #0
 8000372:	d001      	beq.n	8000378 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000374:	f000 f8d2 	bl	800051c <Error_Handler>
  }
}
 8000378:	46c0      	nop			@ (mov r8, r8)
 800037a:	46bd      	mov	sp, r7
 800037c:	b011      	add	sp, #68	@ 0x44
 800037e:	bd90      	pop	{r4, r7, pc}

08000380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000384:	4b14      	ldr	r3, [pc, #80]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 8000386:	4a15      	ldr	r2, [pc, #84]	@ (80003dc <MX_USART2_UART_Init+0x5c>)
 8000388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800038a:	4b13      	ldr	r3, [pc, #76]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 800038c:	2296      	movs	r2, #150	@ 0x96
 800038e:	0212      	lsls	r2, r2, #8
 8000390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000392:	4b11      	ldr	r3, [pc, #68]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 800039a:	2200      	movs	r2, #0
 800039c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800039e:	4b0e      	ldr	r3, [pc, #56]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80003a4:	4b0c      	ldr	r3, [pc, #48]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003a6:	220c      	movs	r2, #12
 80003a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003b0:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003b6:	4b08      	ldr	r3, [pc, #32]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003bc:	4b06      	ldr	r3, [pc, #24]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003be:	2200      	movs	r2, #0
 80003c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003c2:	4b05      	ldr	r3, [pc, #20]	@ (80003d8 <MX_USART2_UART_Init+0x58>)
 80003c4:	0018      	movs	r0, r3
 80003c6:	f001 f9bf 	bl	8001748 <HAL_UART_Init>
 80003ca:	1e03      	subs	r3, r0, #0
 80003cc:	d001      	beq.n	80003d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003ce:	f000 f8a5 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003d2:	46c0      	nop			@ (mov r8, r8)
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	20000088 	.word	0x20000088
 80003dc:	40004400 	.word	0x40004400

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b590      	push	{r4, r7, lr}
 80003e2:	b089      	sub	sp, #36	@ 0x24
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	240c      	movs	r4, #12
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	0018      	movs	r0, r3
 80003ec:	2314      	movs	r3, #20
 80003ee:	001a      	movs	r2, r3
 80003f0:	2100      	movs	r1, #0
 80003f2:	f001 fec3 	bl	800217c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f6:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 80003f8:	695a      	ldr	r2, [r3, #20]
 80003fa:	4b2f      	ldr	r3, [pc, #188]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 80003fc:	2180      	movs	r1, #128	@ 0x80
 80003fe:	0309      	lsls	r1, r1, #12
 8000400:	430a      	orrs	r2, r1
 8000402:	615a      	str	r2, [r3, #20]
 8000404:	4b2c      	ldr	r3, [pc, #176]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 8000406:	695a      	ldr	r2, [r3, #20]
 8000408:	2380      	movs	r3, #128	@ 0x80
 800040a:	031b      	lsls	r3, r3, #12
 800040c:	4013      	ands	r3, r2
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000412:	4b29      	ldr	r3, [pc, #164]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 8000414:	695a      	ldr	r2, [r3, #20]
 8000416:	4b28      	ldr	r3, [pc, #160]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 8000418:	2180      	movs	r1, #128	@ 0x80
 800041a:	03c9      	lsls	r1, r1, #15
 800041c:	430a      	orrs	r2, r1
 800041e:	615a      	str	r2, [r3, #20]
 8000420:	4b25      	ldr	r3, [pc, #148]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 8000422:	695a      	ldr	r2, [r3, #20]
 8000424:	2380      	movs	r3, #128	@ 0x80
 8000426:	03db      	lsls	r3, r3, #15
 8000428:	4013      	ands	r3, r2
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	4b21      	ldr	r3, [pc, #132]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 8000434:	2180      	movs	r1, #128	@ 0x80
 8000436:	0289      	lsls	r1, r1, #10
 8000438:	430a      	orrs	r2, r1
 800043a:	615a      	str	r2, [r3, #20]
 800043c:	4b1e      	ldr	r3, [pc, #120]	@ (80004b8 <MX_GPIO_Init+0xd8>)
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	2380      	movs	r3, #128	@ 0x80
 8000442:	029b      	lsls	r3, r3, #10
 8000444:	4013      	ands	r3, r2
 8000446:	603b      	str	r3, [r7, #0]
 8000448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800044a:	2390      	movs	r3, #144	@ 0x90
 800044c:	05db      	lsls	r3, r3, #23
 800044e:	2200      	movs	r2, #0
 8000450:	2120      	movs	r1, #32
 8000452:	0018      	movs	r0, r3
 8000454:	f000 fc9c 	bl	8000d90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000458:	193b      	adds	r3, r7, r4
 800045a:	2280      	movs	r2, #128	@ 0x80
 800045c:	0192      	lsls	r2, r2, #6
 800045e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000460:	193b      	adds	r3, r7, r4
 8000462:	4a16      	ldr	r2, [pc, #88]	@ (80004bc <MX_GPIO_Init+0xdc>)
 8000464:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	193b      	adds	r3, r7, r4
 8000468:	2200      	movs	r2, #0
 800046a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800046c:	193b      	adds	r3, r7, r4
 800046e:	4a14      	ldr	r2, [pc, #80]	@ (80004c0 <MX_GPIO_Init+0xe0>)
 8000470:	0019      	movs	r1, r3
 8000472:	0010      	movs	r0, r2
 8000474:	f000 fb1c 	bl	8000ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000478:	0021      	movs	r1, r4
 800047a:	187b      	adds	r3, r7, r1
 800047c:	2220      	movs	r2, #32
 800047e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000480:	187b      	adds	r3, r7, r1
 8000482:	2201      	movs	r2, #1
 8000484:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000486:	187b      	adds	r3, r7, r1
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	187b      	adds	r3, r7, r1
 800048e:	2200      	movs	r2, #0
 8000490:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000492:	187a      	adds	r2, r7, r1
 8000494:	2390      	movs	r3, #144	@ 0x90
 8000496:	05db      	lsls	r3, r3, #23
 8000498:	0011      	movs	r1, r2
 800049a:	0018      	movs	r0, r3
 800049c:	f000 fb08 	bl	8000ab0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80004a0:	2200      	movs	r2, #0
 80004a2:	2100      	movs	r1, #0
 80004a4:	2007      	movs	r0, #7
 80004a6:	f000 fad1 	bl	8000a4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80004aa:	2007      	movs	r0, #7
 80004ac:	f000 fae3 	bl	8000a76 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b009      	add	sp, #36	@ 0x24
 80004b6:	bd90      	pop	{r4, r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	10210000 	.word	0x10210000
 80004c0:	48000800 	.word	0x48000800

080004c4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	0002      	movs	r2, r0
 80004cc:	1dbb      	adds	r3, r7, #6
 80004ce:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == B1_Pin) {
 80004d0:	1dbb      	adds	r3, r7, #6
 80004d2:	881a      	ldrh	r2, [r3, #0]
 80004d4:	2380      	movs	r3, #128	@ 0x80
 80004d6:	019b      	lsls	r3, r3, #6
 80004d8:	429a      	cmp	r2, r3
 80004da:	d117      	bne.n	800050c <HAL_GPIO_EXTI_Callback+0x48>
		if (PWRstate == low)
 80004dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x50>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d10f      	bne.n	8000506 <HAL_GPIO_EXTI_Callback+0x42>
		{
			// wake up
			HAL_ResumeTick();
 80004e6:	f000 f9f7 	bl	80008d8 <HAL_ResumeTick>
			SystemClock_Config();
 80004ea:	f7ff feff 	bl	80002ec <SystemClock_Config>
			PWRstate  = high;
 80004ee:	4b09      	ldr	r3, [pc, #36]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x50>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
			printf("Tick %d. Waked up by EXTI\r\n", HAL_GetTick());
 80004f4:	f000 f9b4 	bl	8000860 <HAL_GetTick>
 80004f8:	0002      	movs	r2, r0
 80004fa:	4b07      	ldr	r3, [pc, #28]	@ (8000518 <HAL_GPIO_EXTI_Callback+0x54>)
 80004fc:	0011      	movs	r1, r2
 80004fe:	0018      	movs	r0, r3
 8000500:	f001 fde0 	bl	80020c4 <iprintf>
			// do not try to enter low power mode here because this will cause not finished interruption processing
			// just flag that you want main function should send system to sleep
			PWRstate = low;
		}
	}
}
 8000504:	e002      	b.n	800050c <HAL_GPIO_EXTI_Callback+0x48>
			PWRstate = low;
 8000506:	4b03      	ldr	r3, [pc, #12]	@ (8000514 <HAL_GPIO_EXTI_Callback+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
}
 800050c:	46c0      	nop			@ (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000000 	.word	0x20000000
 8000518:	08002e34 	.word	0x08002e34

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	e7fd      	b.n	8000524 <Error_Handler+0x8>

08000528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	@ (800056c <HAL_MspInit+0x44>)
 8000530:	699a      	ldr	r2, [r3, #24]
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <HAL_MspInit+0x44>)
 8000534:	2101      	movs	r1, #1
 8000536:	430a      	orrs	r2, r1
 8000538:	619a      	str	r2, [r3, #24]
 800053a:	4b0c      	ldr	r3, [pc, #48]	@ (800056c <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	2201      	movs	r2, #1
 8000540:	4013      	ands	r3, r2
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	@ (800056c <HAL_MspInit+0x44>)
 8000548:	69da      	ldr	r2, [r3, #28]
 800054a:	4b08      	ldr	r3, [pc, #32]	@ (800056c <HAL_MspInit+0x44>)
 800054c:	2180      	movs	r1, #128	@ 0x80
 800054e:	0549      	lsls	r1, r1, #21
 8000550:	430a      	orrs	r2, r1
 8000552:	61da      	str	r2, [r3, #28]
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <HAL_MspInit+0x44>)
 8000556:	69da      	ldr	r2, [r3, #28]
 8000558:	2380      	movs	r3, #128	@ 0x80
 800055a:	055b      	lsls	r3, r3, #21
 800055c:	4013      	ands	r3, r2
 800055e:	603b      	str	r3, [r7, #0]
 8000560:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	46bd      	mov	sp, r7
 8000566:	b002      	add	sp, #8
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b08b      	sub	sp, #44	@ 0x2c
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2414      	movs	r4, #20
 800057a:	193b      	adds	r3, r7, r4
 800057c:	0018      	movs	r0, r3
 800057e:	2314      	movs	r3, #20
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f001 fdfa 	bl	800217c <memset>
  if(huart->Instance==USART2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1c      	ldr	r2, [pc, #112]	@ (8000600 <HAL_UART_MspInit+0x90>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d132      	bne.n	80005f8 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <HAL_UART_MspInit+0x94>)
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <HAL_UART_MspInit+0x94>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0289      	lsls	r1, r1, #10
 800059c:	430a      	orrs	r2, r1
 800059e:	61da      	str	r2, [r3, #28]
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005a2:	69da      	ldr	r2, [r3, #28]
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	029b      	lsls	r3, r3, #10
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	0289      	lsls	r1, r1, #10
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	2380      	movs	r3, #128	@ 0x80
 80005c2:	029b      	lsls	r3, r3, #10
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	220c      	movs	r2, #12
 80005d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2202      	movs	r2, #2
 80005d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2201      	movs	r2, #1
 80005e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	187a      	adds	r2, r7, r1
 80005ec:	2390      	movs	r3, #144	@ 0x90
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 fa5c 	bl	8000ab0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b00b      	add	sp, #44	@ 0x2c
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40004400 	.word	0x40004400
 8000604:	40021000 	.word	0x40021000

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	e7fd      	b.n	800060c <NMI_Handler+0x4>

08000610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	e7fd      	b.n	8000614 <HardFault_Handler+0x4>

08000618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f904 	bl	800083c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}

0800063a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800063a:	b580      	push	{r7, lr}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800063e:	2380      	movs	r3, #128	@ 0x80
 8000640:	019b      	lsls	r3, r3, #6
 8000642:	0018      	movs	r0, r3
 8000644:	f000 fbdc 	bl	8000e00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}

0800064e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800064e:	b580      	push	{r7, lr}
 8000650:	b086      	sub	sp, #24
 8000652:	af00      	add	r7, sp, #0
 8000654:	60f8      	str	r0, [r7, #12]
 8000656:	60b9      	str	r1, [r7, #8]
 8000658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800065a:	2300      	movs	r3, #0
 800065c:	617b      	str	r3, [r7, #20]
 800065e:	e00a      	b.n	8000676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000660:	e000      	b.n	8000664 <_read+0x16>
 8000662:	bf00      	nop
 8000664:	0001      	movs	r1, r0
 8000666:	68bb      	ldr	r3, [r7, #8]
 8000668:	1c5a      	adds	r2, r3, #1
 800066a:	60ba      	str	r2, [r7, #8]
 800066c:	b2ca      	uxtb	r2, r1
 800066e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000670:	697b      	ldr	r3, [r7, #20]
 8000672:	3301      	adds	r3, #1
 8000674:	617b      	str	r3, [r7, #20]
 8000676:	697a      	ldr	r2, [r7, #20]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	429a      	cmp	r2, r3
 800067c:	dbf0      	blt.n	8000660 <_read+0x12>
  }

  return len;
 800067e:	687b      	ldr	r3, [r7, #4]
}
 8000680:	0018      	movs	r0, r3
 8000682:	46bd      	mov	sp, r7
 8000684:	b006      	add	sp, #24
 8000686:	bd80      	pop	{r7, pc}

08000688 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000690:	2301      	movs	r3, #1
 8000692:	425b      	negs	r3, r3
}
 8000694:	0018      	movs	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	b002      	add	sp, #8
 800069a:	bd80      	pop	{r7, pc}

0800069c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	2280      	movs	r2, #128	@ 0x80
 80006aa:	0192      	lsls	r2, r2, #6
 80006ac:	605a      	str	r2, [r3, #4]
  return 0;
 80006ae:	2300      	movs	r3, #0
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <_isatty>:

int _isatty(int file)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006c0:	2301      	movs	r3, #1
}
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b002      	add	sp, #8
 80006c8:	bd80      	pop	{r7, pc}

080006ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b084      	sub	sp, #16
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	60f8      	str	r0, [r7, #12]
 80006d2:	60b9      	str	r1, [r7, #8]
 80006d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	0018      	movs	r0, r3
 80006da:	46bd      	mov	sp, r7
 80006dc:	b004      	add	sp, #16
 80006de:	bd80      	pop	{r7, pc}

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	@ (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f001 fd8a 	bl	8002228 <__errno>
 8000714:	0003      	movs	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	2301      	movs	r3, #1
 800071c:	425b      	negs	r3, r3
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	18d2      	adds	r2, r2, r3
 800072e:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <_sbrk+0x64>)
 8000730:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b006      	add	sp, #24
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20002000 	.word	0x20002000
 8000740:	00000400 	.word	0x00000400
 8000744:	20000108 	.word	0x20000108
 8000748:	20000260 	.word	0x20000260

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000758:	480d      	ldr	r0, [pc, #52]	@ (8000790 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800075c:	480d      	ldr	r0, [pc, #52]	@ (8000794 <LoopForever+0x6>)
  ldr r1, =_edata
 800075e:	490e      	ldr	r1, [pc, #56]	@ (8000798 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000760:	4a0e      	ldr	r2, [pc, #56]	@ (800079c <LoopForever+0xe>)
  movs r3, #0
 8000762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000764:	e002      	b.n	800076c <LoopCopyDataInit>

08000766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800076a:	3304      	adds	r3, #4

0800076c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800076c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800076e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000770:	d3f9      	bcc.n	8000766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000772:	4a0b      	ldr	r2, [pc, #44]	@ (80007a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000774:	4c0b      	ldr	r4, [pc, #44]	@ (80007a4 <LoopForever+0x16>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000778:	e001      	b.n	800077e <LoopFillZerobss>

0800077a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800077a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800077c:	3204      	adds	r2, #4

0800077e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800077e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000780:	d3fb      	bcc.n	800077a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000782:	f7ff ffe3 	bl	800074c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000786:	f001 fd55 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078a:	f7ff fd69 	bl	8000260 <main>

0800078e <LoopForever>:

LoopForever:
    b LoopForever
 800078e:	e7fe      	b.n	800078e <LoopForever>
  ldr   r0, =_estack
 8000790:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000798:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800079c:	08002ec4 	.word	0x08002ec4
  ldr r2, =_sbss
 80007a0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80007a4:	2000025c 	.word	0x2000025c

080007a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007a8:	e7fe      	b.n	80007a8 <ADC1_IRQHandler>
	...

080007ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b0:	4b07      	ldr	r3, [pc, #28]	@ (80007d0 <HAL_Init+0x24>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <HAL_Init+0x24>)
 80007b6:	2110      	movs	r1, #16
 80007b8:	430a      	orrs	r2, r1
 80007ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80007bc:	2000      	movs	r0, #0
 80007be:	f000 f809 	bl	80007d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007c2:	f7ff feb1 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	0018      	movs	r0, r3
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	40022000 	.word	0x40022000

080007d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007dc:	4b14      	ldr	r3, [pc, #80]	@ (8000830 <HAL_InitTick+0x5c>)
 80007de:	681c      	ldr	r4, [r3, #0]
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <HAL_InitTick+0x60>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	0019      	movs	r1, r3
 80007e6:	23fa      	movs	r3, #250	@ 0xfa
 80007e8:	0098      	lsls	r0, r3, #2
 80007ea:	f7ff fc97 	bl	800011c <__udivsi3>
 80007ee:	0003      	movs	r3, r0
 80007f0:	0019      	movs	r1, r3
 80007f2:	0020      	movs	r0, r4
 80007f4:	f7ff fc92 	bl	800011c <__udivsi3>
 80007f8:	0003      	movs	r3, r0
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 f94b 	bl	8000a96 <HAL_SYSTICK_Config>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000804:	2301      	movs	r3, #1
 8000806:	e00f      	b.n	8000828 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2b03      	cmp	r3, #3
 800080c:	d80b      	bhi.n	8000826 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	2301      	movs	r3, #1
 8000812:	425b      	negs	r3, r3
 8000814:	2200      	movs	r2, #0
 8000816:	0018      	movs	r0, r3
 8000818:	f000 f918 	bl	8000a4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800081c:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <HAL_InitTick+0x64>)
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000822:	2300      	movs	r3, #0
 8000824:	e000      	b.n	8000828 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000826:	2301      	movs	r3, #1
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b003      	add	sp, #12
 800082e:	bd90      	pop	{r4, r7, pc}
 8000830:	20000004 	.word	0x20000004
 8000834:	2000000c 	.word	0x2000000c
 8000838:	20000008 	.word	0x20000008

0800083c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000840:	4b05      	ldr	r3, [pc, #20]	@ (8000858 <HAL_IncTick+0x1c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	001a      	movs	r2, r3
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <HAL_IncTick+0x20>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	18d2      	adds	r2, r2, r3
 800084c:	4b03      	ldr	r3, [pc, #12]	@ (800085c <HAL_IncTick+0x20>)
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	2000000c 	.word	0x2000000c
 800085c:	2000010c 	.word	0x2000010c

08000860 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  return uwTick;
 8000864:	4b02      	ldr	r3, [pc, #8]	@ (8000870 <HAL_GetTick+0x10>)
 8000866:	681b      	ldr	r3, [r3, #0]
}
 8000868:	0018      	movs	r0, r3
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			@ (mov r8, r8)
 8000870:	2000010c 	.word	0x2000010c

08000874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800087c:	f7ff fff0 	bl	8000860 <HAL_GetTick>
 8000880:	0003      	movs	r3, r0
 8000882:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	3301      	adds	r3, #1
 800088c:	d005      	beq.n	800089a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <HAL_Delay+0x44>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	001a      	movs	r2, r3
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	189b      	adds	r3, r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	f7ff ffe0 	bl	8000860 <HAL_GetTick>
 80008a0:	0002      	movs	r2, r0
 80008a2:	68bb      	ldr	r3, [r7, #8]
 80008a4:	1ad3      	subs	r3, r2, r3
 80008a6:	68fa      	ldr	r2, [r7, #12]
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d8f7      	bhi.n	800089c <HAL_Delay+0x28>
  {
  }
}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	46bd      	mov	sp, r7
 80008b2:	b004      	add	sp, #16
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	46c0      	nop			@ (mov r8, r8)
 80008b8:	2000000c 	.word	0x2000000c

080008bc <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80008c0:	4b04      	ldr	r3, [pc, #16]	@ (80008d4 <HAL_SuspendTick+0x18>)
 80008c2:	681a      	ldr	r2, [r3, #0]
 80008c4:	4b03      	ldr	r3, [pc, #12]	@ (80008d4 <HAL_SuspendTick+0x18>)
 80008c6:	2102      	movs	r1, #2
 80008c8:	438a      	bics	r2, r1
 80008ca:	601a      	str	r2, [r3, #0]
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80008dc:	4b04      	ldr	r3, [pc, #16]	@ (80008f0 <HAL_ResumeTick+0x18>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b03      	ldr	r3, [pc, #12]	@ (80008f0 <HAL_ResumeTick+0x18>)
 80008e2:	2102      	movs	r1, #2
 80008e4:	430a      	orrs	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	e000e010 	.word	0xe000e010

080008f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	0002      	movs	r2, r0
 80008fc:	1dfb      	adds	r3, r7, #7
 80008fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b7f      	cmp	r3, #127	@ 0x7f
 8000906:	d809      	bhi.n	800091c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000908:	1dfb      	adds	r3, r7, #7
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	001a      	movs	r2, r3
 800090e:	231f      	movs	r3, #31
 8000910:	401a      	ands	r2, r3
 8000912:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <__NVIC_EnableIRQ+0x30>)
 8000914:	2101      	movs	r1, #1
 8000916:	4091      	lsls	r1, r2
 8000918:	000a      	movs	r2, r1
 800091a:	601a      	str	r2, [r3, #0]
  }
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b002      	add	sp, #8
 8000922:	bd80      	pop	{r7, pc}
 8000924:	e000e100 	.word	0xe000e100

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b590      	push	{r4, r7, lr}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	0002      	movs	r2, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	2b7f      	cmp	r3, #127	@ 0x7f
 800093c:	d828      	bhi.n	8000990 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093e:	4a2f      	ldr	r2, [pc, #188]	@ (80009fc <__NVIC_SetPriority+0xd4>)
 8000940:	1dfb      	adds	r3, r7, #7
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b25b      	sxtb	r3, r3
 8000946:	089b      	lsrs	r3, r3, #2
 8000948:	33c0      	adds	r3, #192	@ 0xc0
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	589b      	ldr	r3, [r3, r2]
 800094e:	1dfa      	adds	r2, r7, #7
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	0011      	movs	r1, r2
 8000954:	2203      	movs	r2, #3
 8000956:	400a      	ands	r2, r1
 8000958:	00d2      	lsls	r2, r2, #3
 800095a:	21ff      	movs	r1, #255	@ 0xff
 800095c:	4091      	lsls	r1, r2
 800095e:	000a      	movs	r2, r1
 8000960:	43d2      	mvns	r2, r2
 8000962:	401a      	ands	r2, r3
 8000964:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	019b      	lsls	r3, r3, #6
 800096a:	22ff      	movs	r2, #255	@ 0xff
 800096c:	401a      	ands	r2, r3
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	0018      	movs	r0, r3
 8000974:	2303      	movs	r3, #3
 8000976:	4003      	ands	r3, r0
 8000978:	00db      	lsls	r3, r3, #3
 800097a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800097c:	481f      	ldr	r0, [pc, #124]	@ (80009fc <__NVIC_SetPriority+0xd4>)
 800097e:	1dfb      	adds	r3, r7, #7
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b25b      	sxtb	r3, r3
 8000984:	089b      	lsrs	r3, r3, #2
 8000986:	430a      	orrs	r2, r1
 8000988:	33c0      	adds	r3, #192	@ 0xc0
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800098e:	e031      	b.n	80009f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000990:	4a1b      	ldr	r2, [pc, #108]	@ (8000a00 <__NVIC_SetPriority+0xd8>)
 8000992:	1dfb      	adds	r3, r7, #7
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	0019      	movs	r1, r3
 8000998:	230f      	movs	r3, #15
 800099a:	400b      	ands	r3, r1
 800099c:	3b08      	subs	r3, #8
 800099e:	089b      	lsrs	r3, r3, #2
 80009a0:	3306      	adds	r3, #6
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	3304      	adds	r3, #4
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	1dfa      	adds	r2, r7, #7
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	0011      	movs	r1, r2
 80009b0:	2203      	movs	r2, #3
 80009b2:	400a      	ands	r2, r1
 80009b4:	00d2      	lsls	r2, r2, #3
 80009b6:	21ff      	movs	r1, #255	@ 0xff
 80009b8:	4091      	lsls	r1, r2
 80009ba:	000a      	movs	r2, r1
 80009bc:	43d2      	mvns	r2, r2
 80009be:	401a      	ands	r2, r3
 80009c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	019b      	lsls	r3, r3, #6
 80009c6:	22ff      	movs	r2, #255	@ 0xff
 80009c8:	401a      	ands	r2, r3
 80009ca:	1dfb      	adds	r3, r7, #7
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	0018      	movs	r0, r3
 80009d0:	2303      	movs	r3, #3
 80009d2:	4003      	ands	r3, r0
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009d8:	4809      	ldr	r0, [pc, #36]	@ (8000a00 <__NVIC_SetPriority+0xd8>)
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	001c      	movs	r4, r3
 80009e0:	230f      	movs	r3, #15
 80009e2:	4023      	ands	r3, r4
 80009e4:	3b08      	subs	r3, #8
 80009e6:	089b      	lsrs	r3, r3, #2
 80009e8:	430a      	orrs	r2, r1
 80009ea:	3306      	adds	r3, #6
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	18c3      	adds	r3, r0, r3
 80009f0:	3304      	adds	r3, #4
 80009f2:	601a      	str	r2, [r3, #0]
}
 80009f4:	46c0      	nop			@ (mov r8, r8)
 80009f6:	46bd      	mov	sp, r7
 80009f8:	b003      	add	sp, #12
 80009fa:	bd90      	pop	{r4, r7, pc}
 80009fc:	e000e100 	.word	0xe000e100
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	1e5a      	subs	r2, r3, #1
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	045b      	lsls	r3, r3, #17
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d301      	bcc.n	8000a1c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e010      	b.n	8000a3e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <SysTick_Config+0x44>)
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	3a01      	subs	r2, #1
 8000a22:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a24:	2301      	movs	r3, #1
 8000a26:	425b      	negs	r3, r3
 8000a28:	2103      	movs	r1, #3
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f7ff ff7c 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a30:	4b05      	ldr	r3, [pc, #20]	@ (8000a48 <SysTick_Config+0x44>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a36:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <SysTick_Config+0x44>)
 8000a38:	2207      	movs	r2, #7
 8000a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	0018      	movs	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	b002      	add	sp, #8
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	e000e010 	.word	0xe000e010

08000a4c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
 8000a56:	210f      	movs	r1, #15
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	1c02      	adds	r2, r0, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	b25b      	sxtb	r3, r3
 8000a66:	0011      	movs	r1, r2
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff ff5d 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	b004      	add	sp, #16
 8000a74:	bd80      	pop	{r7, pc}

08000a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	b082      	sub	sp, #8
 8000a7a:	af00      	add	r7, sp, #0
 8000a7c:	0002      	movs	r2, r0
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f7ff ff33 	bl	80008f4 <__NVIC_EnableIRQ>
}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b002      	add	sp, #8
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b082      	sub	sp, #8
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff ffaf 	bl	8000a04 <SysTick_Config>
 8000aa6:	0003      	movs	r3, r0
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000abe:	e14f      	b.n	8000d60 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	4091      	lsls	r1, r2
 8000aca:	000a      	movs	r2, r1
 8000acc:	4013      	ands	r3, r2
 8000ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d100      	bne.n	8000ad8 <HAL_GPIO_Init+0x28>
 8000ad6:	e140      	b.n	8000d5a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	d003      	beq.n	8000ae8 <HAL_GPIO_Init+0x38>
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	2b12      	cmp	r3, #18
 8000ae6:	d123      	bne.n	8000b30 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	08da      	lsrs	r2, r3, #3
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3208      	adds	r2, #8
 8000af0:	0092      	lsls	r2, r2, #2
 8000af2:	58d3      	ldr	r3, [r2, r3]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	2207      	movs	r2, #7
 8000afa:	4013      	ands	r3, r2
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	409a      	lsls	r2, r3
 8000b02:	0013      	movs	r3, r2
 8000b04:	43da      	mvns	r2, r3
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	691a      	ldr	r2, [r3, #16]
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	2107      	movs	r1, #7
 8000b14:	400b      	ands	r3, r1
 8000b16:	009b      	lsls	r3, r3, #2
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	0013      	movs	r3, r2
 8000b1c:	693a      	ldr	r2, [r7, #16]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	08da      	lsrs	r2, r3, #3
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3208      	adds	r2, #8
 8000b2a:	0092      	lsls	r2, r2, #2
 8000b2c:	6939      	ldr	r1, [r7, #16]
 8000b2e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	2203      	movs	r2, #3
 8000b3c:	409a      	lsls	r2, r3
 8000b3e:	0013      	movs	r3, r2
 8000b40:	43da      	mvns	r2, r3
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	4013      	ands	r3, r2
 8000b46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	2203      	movs	r2, #3
 8000b4e:	401a      	ands	r2, r3
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	005b      	lsls	r3, r3, #1
 8000b54:	409a      	lsls	r2, r3
 8000b56:	0013      	movs	r3, r2
 8000b58:	693a      	ldr	r2, [r7, #16]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	693a      	ldr	r2, [r7, #16]
 8000b62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d00b      	beq.n	8000b84 <HAL_GPIO_Init+0xd4>
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b02      	cmp	r3, #2
 8000b72:	d007      	beq.n	8000b84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b74:	683b      	ldr	r3, [r7, #0]
 8000b76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b78:	2b11      	cmp	r3, #17
 8000b7a:	d003      	beq.n	8000b84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	2b12      	cmp	r3, #18
 8000b82:	d130      	bne.n	8000be6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	2203      	movs	r2, #3
 8000b90:	409a      	lsls	r2, r3
 8000b92:	0013      	movs	r3, r2
 8000b94:	43da      	mvns	r2, r3
 8000b96:	693b      	ldr	r3, [r7, #16]
 8000b98:	4013      	ands	r3, r2
 8000b9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b9c:	683b      	ldr	r3, [r7, #0]
 8000b9e:	68da      	ldr	r2, [r3, #12]
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	409a      	lsls	r2, r3
 8000ba6:	0013      	movs	r3, r2
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4313      	orrs	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	693a      	ldr	r2, [r7, #16]
 8000bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bba:	2201      	movs	r2, #1
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
 8000bc0:	0013      	movs	r3, r2
 8000bc2:	43da      	mvns	r2, r3
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	091b      	lsrs	r3, r3, #4
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
 8000bd8:	0013      	movs	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68db      	ldr	r3, [r3, #12]
 8000bea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	409a      	lsls	r2, r3
 8000bf4:	0013      	movs	r3, r2
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	4013      	ands	r3, r2
 8000bfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689a      	ldr	r2, [r3, #8]
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	005b      	lsls	r3, r3, #1
 8000c06:	409a      	lsls	r2, r3
 8000c08:	0013      	movs	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685a      	ldr	r2, [r3, #4]
 8000c1a:	2380      	movs	r3, #128	@ 0x80
 8000c1c:	055b      	lsls	r3, r3, #21
 8000c1e:	4013      	ands	r3, r2
 8000c20:	d100      	bne.n	8000c24 <HAL_GPIO_Init+0x174>
 8000c22:	e09a      	b.n	8000d5a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c24:	4b54      	ldr	r3, [pc, #336]	@ (8000d78 <HAL_GPIO_Init+0x2c8>)
 8000c26:	699a      	ldr	r2, [r3, #24]
 8000c28:	4b53      	ldr	r3, [pc, #332]	@ (8000d78 <HAL_GPIO_Init+0x2c8>)
 8000c2a:	2101      	movs	r1, #1
 8000c2c:	430a      	orrs	r2, r1
 8000c2e:	619a      	str	r2, [r3, #24]
 8000c30:	4b51      	ldr	r3, [pc, #324]	@ (8000d78 <HAL_GPIO_Init+0x2c8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	2201      	movs	r2, #1
 8000c36:	4013      	ands	r3, r2
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c3c:	4a4f      	ldr	r2, [pc, #316]	@ (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	009b      	lsls	r3, r3, #2
 8000c46:	589b      	ldr	r3, [r3, r2]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	2203      	movs	r2, #3
 8000c4e:	4013      	ands	r3, r2
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	409a      	lsls	r2, r3
 8000c56:	0013      	movs	r3, r2
 8000c58:	43da      	mvns	r2, r3
 8000c5a:	693b      	ldr	r3, [r7, #16]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	2390      	movs	r3, #144	@ 0x90
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d013      	beq.n	8000c92 <HAL_GPIO_Init+0x1e2>
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a44      	ldr	r2, [pc, #272]	@ (8000d80 <HAL_GPIO_Init+0x2d0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d00d      	beq.n	8000c8e <HAL_GPIO_Init+0x1de>
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a43      	ldr	r2, [pc, #268]	@ (8000d84 <HAL_GPIO_Init+0x2d4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d007      	beq.n	8000c8a <HAL_GPIO_Init+0x1da>
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a42      	ldr	r2, [pc, #264]	@ (8000d88 <HAL_GPIO_Init+0x2d8>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d101      	bne.n	8000c86 <HAL_GPIO_Init+0x1d6>
 8000c82:	2303      	movs	r3, #3
 8000c84:	e006      	b.n	8000c94 <HAL_GPIO_Init+0x1e4>
 8000c86:	2305      	movs	r3, #5
 8000c88:	e004      	b.n	8000c94 <HAL_GPIO_Init+0x1e4>
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_Init+0x1e4>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	e000      	b.n	8000c94 <HAL_GPIO_Init+0x1e4>
 8000c92:	2300      	movs	r3, #0
 8000c94:	697a      	ldr	r2, [r7, #20]
 8000c96:	2103      	movs	r1, #3
 8000c98:	400a      	ands	r2, r1
 8000c9a:	0092      	lsls	r2, r2, #2
 8000c9c:	4093      	lsls	r3, r2
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000ca4:	4935      	ldr	r1, [pc, #212]	@ (8000d7c <HAL_GPIO_Init+0x2cc>)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	089b      	lsrs	r3, r3, #2
 8000caa:	3302      	adds	r3, #2
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb2:	4b36      	ldr	r3, [pc, #216]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4013      	ands	r3, r2
 8000cc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	2380      	movs	r3, #128	@ 0x80
 8000cc8:	025b      	lsls	r3, r3, #9
 8000cca:	4013      	ands	r3, r2
 8000ccc:	d003      	beq.n	8000cd6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000cd8:	693a      	ldr	r2, [r7, #16]
 8000cda:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000cdc:	4b2b      	ldr	r3, [pc, #172]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	43da      	mvns	r2, r3
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685a      	ldr	r2, [r3, #4]
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	029b      	lsls	r3, r3, #10
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	d003      	beq.n	8000d00 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000cf8:	693a      	ldr	r2, [r7, #16]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d00:	4b22      	ldr	r3, [pc, #136]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d06:	4b21      	ldr	r3, [pc, #132]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	4013      	ands	r3, r2
 8000d14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	2380      	movs	r3, #128	@ 0x80
 8000d1c:	035b      	lsls	r3, r3, #13
 8000d1e:	4013      	ands	r3, r2
 8000d20:	d003      	beq.n	8000d2a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000d2a:	4b18      	ldr	r3, [pc, #96]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	43da      	mvns	r2, r3
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	2380      	movs	r3, #128	@ 0x80
 8000d46:	039b      	lsls	r3, r3, #14
 8000d48:	4013      	ands	r3, r2
 8000d4a:	d003      	beq.n	8000d54 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	4313      	orrs	r3, r2
 8000d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000d54:	4b0d      	ldr	r3, [pc, #52]	@ (8000d8c <HAL_GPIO_Init+0x2dc>)
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	40da      	lsrs	r2, r3
 8000d68:	1e13      	subs	r3, r2, #0
 8000d6a:	d000      	beq.n	8000d6e <HAL_GPIO_Init+0x2be>
 8000d6c:	e6a8      	b.n	8000ac0 <HAL_GPIO_Init+0x10>
  } 
}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b006      	add	sp, #24
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	40010000 	.word	0x40010000
 8000d80:	48000400 	.word	0x48000400
 8000d84:	48000800 	.word	0x48000800
 8000d88:	48000c00 	.word	0x48000c00
 8000d8c:	40010400 	.word	0x40010400

08000d90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	0008      	movs	r0, r1
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	1cbb      	adds	r3, r7, #2
 8000d9e:	1c02      	adds	r2, r0, #0
 8000da0:	801a      	strh	r2, [r3, #0]
 8000da2:	1c7b      	adds	r3, r7, #1
 8000da4:	1c0a      	adds	r2, r1, #0
 8000da6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da8:	1c7b      	adds	r3, r7, #1
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d004      	beq.n	8000dba <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000db0:	1cbb      	adds	r3, r7, #2
 8000db2:	881a      	ldrh	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000db8:	e003      	b.n	8000dc2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000dba:	1cbb      	adds	r3, r7, #2
 8000dbc:	881a      	ldrh	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000dc2:	46c0      	nop			@ (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b002      	add	sp, #8
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
 8000dd2:	000a      	movs	r2, r1
 8000dd4:	1cbb      	adds	r3, r7, #2
 8000dd6:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	1cba      	adds	r2, r7, #2
 8000dde:	8812      	ldrh	r2, [r2, #0]
 8000de0:	4013      	ands	r3, r2
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000de4:	1cbb      	adds	r3, r7, #2
 8000de6:	881b      	ldrh	r3, [r3, #0]
 8000de8:	041a      	lsls	r2, r3, #16
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000dee:	e003      	b.n	8000df8 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000df0:	1cbb      	adds	r3, r7, #2
 8000df2:	881a      	ldrh	r2, [r3, #0]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	619a      	str	r2, [r3, #24]
}
 8000df8:	46c0      	nop			@ (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	0002      	movs	r2, r0
 8000e08:	1dbb      	adds	r3, r7, #6
 8000e0a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000e0c:	4b09      	ldr	r3, [pc, #36]	@ (8000e34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	1dba      	adds	r2, r7, #6
 8000e12:	8812      	ldrh	r2, [r2, #0]
 8000e14:	4013      	ands	r3, r2
 8000e16:	d008      	beq.n	8000e2a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000e18:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8000e1a:	1dba      	adds	r2, r7, #6
 8000e1c:	8812      	ldrh	r2, [r2, #0]
 8000e1e:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000e20:	1dbb      	adds	r3, r7, #6
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	0018      	movs	r0, r3
 8000e26:	f7ff fb4d 	bl	80004c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000e2a:	46c0      	nop			@ (mov r8, r8)
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	b002      	add	sp, #8
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	46c0      	nop			@ (mov r8, r8)
 8000e34:	40010400 	.word	0x40010400

08000e38 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	000a      	movs	r2, r1
 8000e42:	1cfb      	adds	r3, r7, #3
 8000e44:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <HAL_PWR_EnterSLEEPMode+0x34>)
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_PWR_EnterSLEEPMode+0x34>)
 8000e4c:	2104      	movs	r1, #4
 8000e4e:	438a      	bics	r2, r1
 8000e50:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8000e52:	1cfb      	adds	r3, r7, #3
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d101      	bne.n	8000e5e <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8000e5a:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8000e5c:	e002      	b.n	8000e64 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8000e5e:	bf40      	sev
    __WFE();
 8000e60:	bf20      	wfe
    __WFE();
 8000e62:	bf20      	wfe
}
 8000e64:	46c0      	nop			@ (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b088      	sub	sp, #32
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d101      	bne.n	8000e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e301      	b.n	8001486 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <HAL_RCC_OscConfig+0x1e>
 8000e8c:	e08d      	b.n	8000faa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000e8e:	4bc3      	ldr	r3, [pc, #780]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	220c      	movs	r2, #12
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b04      	cmp	r3, #4
 8000e98:	d00e      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e9a:	4bc0      	ldr	r3, [pc, #768]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	220c      	movs	r2, #12
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	2b08      	cmp	r3, #8
 8000ea4:	d116      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x64>
 8000ea6:	4bbd      	ldr	r3, [pc, #756]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	2380      	movs	r3, #128	@ 0x80
 8000eac:	025b      	lsls	r3, r3, #9
 8000eae:	401a      	ands	r2, r3
 8000eb0:	2380      	movs	r3, #128	@ 0x80
 8000eb2:	025b      	lsls	r3, r3, #9
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	d10d      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eb8:	4bb8      	ldr	r3, [pc, #736]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	029b      	lsls	r3, r3, #10
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d100      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x56>
 8000ec4:	e070      	b.n	8000fa8 <HAL_RCC_OscConfig+0x138>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d000      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x60>
 8000ece:	e06b      	b.n	8000fa8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e2d8      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d107      	bne.n	8000eec <HAL_RCC_OscConfig+0x7c>
 8000edc:	4baf      	ldr	r3, [pc, #700]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4bae      	ldr	r3, [pc, #696]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	2180      	movs	r1, #128	@ 0x80
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	e02f      	b.n	8000f4c <HAL_RCC_OscConfig+0xdc>
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10c      	bne.n	8000f0e <HAL_RCC_OscConfig+0x9e>
 8000ef4:	4ba9      	ldr	r3, [pc, #676]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	4ba8      	ldr	r3, [pc, #672]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000efa:	49a9      	ldr	r1, [pc, #676]	@ (80011a0 <HAL_RCC_OscConfig+0x330>)
 8000efc:	400a      	ands	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	4ba6      	ldr	r3, [pc, #664]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f02:	681a      	ldr	r2, [r3, #0]
 8000f04:	4ba5      	ldr	r3, [pc, #660]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f06:	49a7      	ldr	r1, [pc, #668]	@ (80011a4 <HAL_RCC_OscConfig+0x334>)
 8000f08:	400a      	ands	r2, r1
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e01e      	b.n	8000f4c <HAL_RCC_OscConfig+0xdc>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b05      	cmp	r3, #5
 8000f14:	d10e      	bne.n	8000f34 <HAL_RCC_OscConfig+0xc4>
 8000f16:	4ba1      	ldr	r3, [pc, #644]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4ba0      	ldr	r3, [pc, #640]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	02c9      	lsls	r1, r1, #11
 8000f20:	430a      	orrs	r2, r1
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	4b9d      	ldr	r3, [pc, #628]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b9c      	ldr	r3, [pc, #624]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f2a:	2180      	movs	r1, #128	@ 0x80
 8000f2c:	0249      	lsls	r1, r1, #9
 8000f2e:	430a      	orrs	r2, r1
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	e00b      	b.n	8000f4c <HAL_RCC_OscConfig+0xdc>
 8000f34:	4b99      	ldr	r3, [pc, #612]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b98      	ldr	r3, [pc, #608]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f3a:	4999      	ldr	r1, [pc, #612]	@ (80011a0 <HAL_RCC_OscConfig+0x330>)
 8000f3c:	400a      	ands	r2, r1
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	4b96      	ldr	r3, [pc, #600]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b95      	ldr	r3, [pc, #596]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f46:	4997      	ldr	r1, [pc, #604]	@ (80011a4 <HAL_RCC_OscConfig+0x334>)
 8000f48:	400a      	ands	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d014      	beq.n	8000f7e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f54:	f7ff fc84 	bl	8000860 <HAL_GetTick>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f5c:	e008      	b.n	8000f70 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f5e:	f7ff fc7f 	bl	8000860 <HAL_GetTick>
 8000f62:	0002      	movs	r2, r0
 8000f64:	69bb      	ldr	r3, [r7, #24]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b64      	cmp	r3, #100	@ 0x64
 8000f6a:	d901      	bls.n	8000f70 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	e28a      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f70:	4b8a      	ldr	r3, [pc, #552]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	2380      	movs	r3, #128	@ 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	d0f0      	beq.n	8000f5e <HAL_RCC_OscConfig+0xee>
 8000f7c:	e015      	b.n	8000faa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fc6f 	bl	8000860 <HAL_GetTick>
 8000f82:	0003      	movs	r3, r0
 8000f84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f86:	e008      	b.n	8000f9a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f88:	f7ff fc6a 	bl	8000860 <HAL_GetTick>
 8000f8c:	0002      	movs	r2, r0
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	2b64      	cmp	r3, #100	@ 0x64
 8000f94:	d901      	bls.n	8000f9a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000f96:	2303      	movs	r3, #3
 8000f98:	e275      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f9a:	4b80      	ldr	r3, [pc, #512]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	029b      	lsls	r3, r3, #10
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d1f0      	bne.n	8000f88 <HAL_RCC_OscConfig+0x118>
 8000fa6:	e000      	b.n	8000faa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	d100      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x146>
 8000fb4:	e069      	b.n	800108a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fb6:	4b79      	ldr	r3, [pc, #484]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	220c      	movs	r2, #12
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d00b      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fc0:	4b76      	ldr	r3, [pc, #472]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	220c      	movs	r2, #12
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d11c      	bne.n	8001006 <HAL_RCC_OscConfig+0x196>
 8000fcc:	4b73      	ldr	r3, [pc, #460]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	2380      	movs	r3, #128	@ 0x80
 8000fd2:	025b      	lsls	r3, r3, #9
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	d116      	bne.n	8001006 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fd8:	4b70      	ldr	r3, [pc, #448]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2202      	movs	r2, #2
 8000fde:	4013      	ands	r3, r2
 8000fe0:	d005      	beq.n	8000fee <HAL_RCC_OscConfig+0x17e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d001      	beq.n	8000fee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e24b      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fee:	4b6b      	ldr	r3, [pc, #428]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	22f8      	movs	r2, #248	@ 0xf8
 8000ff4:	4393      	bics	r3, r2
 8000ff6:	0019      	movs	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	00da      	lsls	r2, r3, #3
 8000ffe:	4b67      	ldr	r3, [pc, #412]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001000:	430a      	orrs	r2, r1
 8001002:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001004:	e041      	b.n	800108a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	68db      	ldr	r3, [r3, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d024      	beq.n	8001058 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800100e:	4b63      	ldr	r3, [pc, #396]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b62      	ldr	r3, [pc, #392]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001014:	2101      	movs	r1, #1
 8001016:	430a      	orrs	r2, r1
 8001018:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101a:	f7ff fc21 	bl	8000860 <HAL_GetTick>
 800101e:	0003      	movs	r3, r0
 8001020:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001024:	f7ff fc1c 	bl	8000860 <HAL_GetTick>
 8001028:	0002      	movs	r2, r0
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b02      	cmp	r3, #2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e227      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001036:	4b59      	ldr	r3, [pc, #356]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2202      	movs	r2, #2
 800103c:	4013      	ands	r3, r2
 800103e:	d0f1      	beq.n	8001024 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001040:	4b56      	ldr	r3, [pc, #344]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	22f8      	movs	r2, #248	@ 0xf8
 8001046:	4393      	bics	r3, r2
 8001048:	0019      	movs	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	691b      	ldr	r3, [r3, #16]
 800104e:	00da      	lsls	r2, r3, #3
 8001050:	4b52      	ldr	r3, [pc, #328]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e018      	b.n	800108a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001058:	4b50      	ldr	r3, [pc, #320]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b4f      	ldr	r3, [pc, #316]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 800105e:	2101      	movs	r1, #1
 8001060:	438a      	bics	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fbfc 	bl	8000860 <HAL_GetTick>
 8001068:	0003      	movs	r3, r0
 800106a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800106c:	e008      	b.n	8001080 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800106e:	f7ff fbf7 	bl	8000860 <HAL_GetTick>
 8001072:	0002      	movs	r2, r0
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d901      	bls.n	8001080 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800107c:	2303      	movs	r3, #3
 800107e:	e202      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001080:	4b46      	ldr	r3, [pc, #280]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2202      	movs	r2, #2
 8001086:	4013      	ands	r3, r2
 8001088:	d1f1      	bne.n	800106e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2208      	movs	r2, #8
 8001090:	4013      	ands	r3, r2
 8001092:	d036      	beq.n	8001102 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	69db      	ldr	r3, [r3, #28]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d019      	beq.n	80010d0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800109c:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 800109e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010a0:	4b3e      	ldr	r3, [pc, #248]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 80010a2:	2101      	movs	r1, #1
 80010a4:	430a      	orrs	r2, r1
 80010a6:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a8:	f7ff fbda 	bl	8000860 <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010b0:	e008      	b.n	80010c4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010b2:	f7ff fbd5 	bl	8000860 <HAL_GetTick>
 80010b6:	0002      	movs	r2, r0
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d901      	bls.n	80010c4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80010c0:	2303      	movs	r3, #3
 80010c2:	e1e0      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010c4:	4b35      	ldr	r3, [pc, #212]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 80010c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010c8:	2202      	movs	r2, #2
 80010ca:	4013      	ands	r3, r2
 80010cc:	d0f1      	beq.n	80010b2 <HAL_RCC_OscConfig+0x242>
 80010ce:	e018      	b.n	8001102 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010d0:	4b32      	ldr	r3, [pc, #200]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 80010d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80010d4:	4b31      	ldr	r3, [pc, #196]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	438a      	bics	r2, r1
 80010da:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010dc:	f7ff fbc0 	bl	8000860 <HAL_GetTick>
 80010e0:	0003      	movs	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e4:	e008      	b.n	80010f8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010e6:	f7ff fbbb 	bl	8000860 <HAL_GetTick>
 80010ea:	0002      	movs	r2, r0
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d901      	bls.n	80010f8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80010f4:	2303      	movs	r3, #3
 80010f6:	e1c6      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010f8:	4b28      	ldr	r3, [pc, #160]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 80010fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010fc:	2202      	movs	r2, #2
 80010fe:	4013      	ands	r3, r2
 8001100:	d1f1      	bne.n	80010e6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2204      	movs	r2, #4
 8001108:	4013      	ands	r3, r2
 800110a:	d100      	bne.n	800110e <HAL_RCC_OscConfig+0x29e>
 800110c:	e0b4      	b.n	8001278 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800110e:	201f      	movs	r0, #31
 8001110:	183b      	adds	r3, r7, r0
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001116:	4b21      	ldr	r3, [pc, #132]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001118:	69da      	ldr	r2, [r3, #28]
 800111a:	2380      	movs	r3, #128	@ 0x80
 800111c:	055b      	lsls	r3, r3, #21
 800111e:	4013      	ands	r3, r2
 8001120:	d110      	bne.n	8001144 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001122:	4b1e      	ldr	r3, [pc, #120]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001124:	69da      	ldr	r2, [r3, #28]
 8001126:	4b1d      	ldr	r3, [pc, #116]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001128:	2180      	movs	r1, #128	@ 0x80
 800112a:	0549      	lsls	r1, r1, #21
 800112c:	430a      	orrs	r2, r1
 800112e:	61da      	str	r2, [r3, #28]
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001132:	69da      	ldr	r2, [r3, #28]
 8001134:	2380      	movs	r3, #128	@ 0x80
 8001136:	055b      	lsls	r3, r3, #21
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800113e:	183b      	adds	r3, r7, r0
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001144:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <HAL_RCC_OscConfig+0x338>)
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	2380      	movs	r3, #128	@ 0x80
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4013      	ands	r3, r2
 800114e:	d11a      	bne.n	8001186 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001150:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_RCC_OscConfig+0x338>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4b14      	ldr	r3, [pc, #80]	@ (80011a8 <HAL_RCC_OscConfig+0x338>)
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	0049      	lsls	r1, r1, #1
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800115e:	f7ff fb7f 	bl	8000860 <HAL_GetTick>
 8001162:	0003      	movs	r3, r0
 8001164:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001168:	f7ff fb7a 	bl	8000860 <HAL_GetTick>
 800116c:	0002      	movs	r2, r0
 800116e:	69bb      	ldr	r3, [r7, #24]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b64      	cmp	r3, #100	@ 0x64
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e185      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800117a:	4b0b      	ldr	r3, [pc, #44]	@ (80011a8 <HAL_RCC_OscConfig+0x338>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	2380      	movs	r3, #128	@ 0x80
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	4013      	ands	r3, r2
 8001184:	d0f0      	beq.n	8001168 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d10e      	bne.n	80011ac <HAL_RCC_OscConfig+0x33c>
 800118e:	4b03      	ldr	r3, [pc, #12]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001190:	6a1a      	ldr	r2, [r3, #32]
 8001192:	4b02      	ldr	r3, [pc, #8]	@ (800119c <HAL_RCC_OscConfig+0x32c>)
 8001194:	2101      	movs	r1, #1
 8001196:	430a      	orrs	r2, r1
 8001198:	621a      	str	r2, [r3, #32]
 800119a:	e035      	b.n	8001208 <HAL_RCC_OscConfig+0x398>
 800119c:	40021000 	.word	0x40021000
 80011a0:	fffeffff 	.word	0xfffeffff
 80011a4:	fffbffff 	.word	0xfffbffff
 80011a8:	40007000 	.word	0x40007000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10c      	bne.n	80011ce <HAL_RCC_OscConfig+0x35e>
 80011b4:	4bb6      	ldr	r3, [pc, #728]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011b6:	6a1a      	ldr	r2, [r3, #32]
 80011b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011ba:	2101      	movs	r1, #1
 80011bc:	438a      	bics	r2, r1
 80011be:	621a      	str	r2, [r3, #32]
 80011c0:	4bb3      	ldr	r3, [pc, #716]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011c2:	6a1a      	ldr	r2, [r3, #32]
 80011c4:	4bb2      	ldr	r3, [pc, #712]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011c6:	2104      	movs	r1, #4
 80011c8:	438a      	bics	r2, r1
 80011ca:	621a      	str	r2, [r3, #32]
 80011cc:	e01c      	b.n	8001208 <HAL_RCC_OscConfig+0x398>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2b05      	cmp	r3, #5
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0x380>
 80011d6:	4bae      	ldr	r3, [pc, #696]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011d8:	6a1a      	ldr	r2, [r3, #32]
 80011da:	4bad      	ldr	r3, [pc, #692]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011dc:	2104      	movs	r1, #4
 80011de:	430a      	orrs	r2, r1
 80011e0:	621a      	str	r2, [r3, #32]
 80011e2:	4bab      	ldr	r3, [pc, #684]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011e4:	6a1a      	ldr	r2, [r3, #32]
 80011e6:	4baa      	ldr	r3, [pc, #680]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	430a      	orrs	r2, r1
 80011ec:	621a      	str	r2, [r3, #32]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0x398>
 80011f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011f2:	6a1a      	ldr	r2, [r3, #32]
 80011f4:	4ba6      	ldr	r3, [pc, #664]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011f6:	2101      	movs	r1, #1
 80011f8:	438a      	bics	r2, r1
 80011fa:	621a      	str	r2, [r3, #32]
 80011fc:	4ba4      	ldr	r3, [pc, #656]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80011fe:	6a1a      	ldr	r2, [r3, #32]
 8001200:	4ba3      	ldr	r3, [pc, #652]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001202:	2104      	movs	r1, #4
 8001204:	438a      	bics	r2, r1
 8001206:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d014      	beq.n	800123a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fb26 	bl	8000860 <HAL_GetTick>
 8001214:	0003      	movs	r3, r0
 8001216:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001218:	e009      	b.n	800122e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f7ff fb21 	bl	8000860 <HAL_GetTick>
 800121e:	0002      	movs	r2, r0
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	4a9b      	ldr	r2, [pc, #620]	@ (8001494 <HAL_RCC_OscConfig+0x624>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e12b      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122e:	4b98      	ldr	r3, [pc, #608]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001230:	6a1b      	ldr	r3, [r3, #32]
 8001232:	2202      	movs	r2, #2
 8001234:	4013      	ands	r3, r2
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x3aa>
 8001238:	e013      	b.n	8001262 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fb11 	bl	8000860 <HAL_GetTick>
 800123e:	0003      	movs	r3, r0
 8001240:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001242:	e009      	b.n	8001258 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001244:	f7ff fb0c 	bl	8000860 <HAL_GetTick>
 8001248:	0002      	movs	r2, r0
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4a91      	ldr	r2, [pc, #580]	@ (8001494 <HAL_RCC_OscConfig+0x624>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e116      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b8d      	ldr	r3, [pc, #564]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001262:	231f      	movs	r3, #31
 8001264:	18fb      	adds	r3, r7, r3
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b01      	cmp	r3, #1
 800126a:	d105      	bne.n	8001278 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126c:	4b88      	ldr	r3, [pc, #544]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800126e:	69da      	ldr	r2, [r3, #28]
 8001270:	4b87      	ldr	r3, [pc, #540]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001272:	4989      	ldr	r1, [pc, #548]	@ (8001498 <HAL_RCC_OscConfig+0x628>)
 8001274:	400a      	ands	r2, r1
 8001276:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2210      	movs	r2, #16
 800127e:	4013      	ands	r3, r2
 8001280:	d063      	beq.n	800134a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d12a      	bne.n	80012e0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800128a:	4b81      	ldr	r3, [pc, #516]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800128c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800128e:	4b80      	ldr	r3, [pc, #512]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001290:	2104      	movs	r1, #4
 8001292:	430a      	orrs	r2, r1
 8001294:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001296:	4b7e      	ldr	r3, [pc, #504]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800129a:	4b7d      	ldr	r3, [pc, #500]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800129c:	2101      	movs	r1, #1
 800129e:	430a      	orrs	r2, r1
 80012a0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a2:	f7ff fadd 	bl	8000860 <HAL_GetTick>
 80012a6:	0003      	movs	r3, r0
 80012a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80012ac:	f7ff fad8 	bl	8000860 <HAL_GetTick>
 80012b0:	0002      	movs	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e0e3      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80012be:	4b74      	ldr	r3, [pc, #464]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80012c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c2:	2202      	movs	r2, #2
 80012c4:	4013      	ands	r3, r2
 80012c6:	d0f1      	beq.n	80012ac <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012c8:	4b71      	ldr	r3, [pc, #452]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80012ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012cc:	22f8      	movs	r2, #248	@ 0xf8
 80012ce:	4393      	bics	r3, r2
 80012d0:	0019      	movs	r1, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	00da      	lsls	r2, r3, #3
 80012d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80012da:	430a      	orrs	r2, r1
 80012dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80012de:	e034      	b.n	800134a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	695b      	ldr	r3, [r3, #20]
 80012e4:	3305      	adds	r3, #5
 80012e6:	d111      	bne.n	800130c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80012e8:	4b69      	ldr	r3, [pc, #420]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80012ea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012ec:	4b68      	ldr	r3, [pc, #416]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80012ee:	2104      	movs	r1, #4
 80012f0:	438a      	bics	r2, r1
 80012f2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80012f4:	4b66      	ldr	r3, [pc, #408]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80012f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012f8:	22f8      	movs	r2, #248	@ 0xf8
 80012fa:	4393      	bics	r3, r2
 80012fc:	0019      	movs	r1, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	00da      	lsls	r2, r3, #3
 8001304:	4b62      	ldr	r3, [pc, #392]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001306:	430a      	orrs	r2, r1
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
 800130a:	e01e      	b.n	800134a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800130c:	4b60      	ldr	r3, [pc, #384]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800130e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001310:	4b5f      	ldr	r3, [pc, #380]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001312:	2104      	movs	r1, #4
 8001314:	430a      	orrs	r2, r1
 8001316:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001318:	4b5d      	ldr	r3, [pc, #372]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800131a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800131c:	4b5c      	ldr	r3, [pc, #368]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800131e:	2101      	movs	r1, #1
 8001320:	438a      	bics	r2, r1
 8001322:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001324:	f7ff fa9c 	bl	8000860 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800132e:	f7ff fa97 	bl	8000860 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	69bb      	ldr	r3, [r7, #24]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0a2      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001340:	4b53      	ldr	r3, [pc, #332]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d1f1      	bne.n	800132e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d100      	bne.n	8001354 <HAL_RCC_OscConfig+0x4e4>
 8001352:	e097      	b.n	8001484 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001354:	4b4e      	ldr	r3, [pc, #312]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	220c      	movs	r2, #12
 800135a:	4013      	ands	r3, r2
 800135c:	2b08      	cmp	r3, #8
 800135e:	d100      	bne.n	8001362 <HAL_RCC_OscConfig+0x4f2>
 8001360:	e06b      	b.n	800143a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d14c      	bne.n	8001404 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800136a:	4b49      	ldr	r3, [pc, #292]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	4b48      	ldr	r3, [pc, #288]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001370:	494a      	ldr	r1, [pc, #296]	@ (800149c <HAL_RCC_OscConfig+0x62c>)
 8001372:	400a      	ands	r2, r1
 8001374:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001376:	f7ff fa73 	bl	8000860 <HAL_GetTick>
 800137a:	0003      	movs	r3, r0
 800137c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001380:	f7ff fa6e 	bl	8000860 <HAL_GetTick>
 8001384:	0002      	movs	r2, r0
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e079      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001392:	4b3f      	ldr	r3, [pc, #252]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	2380      	movs	r3, #128	@ 0x80
 8001398:	049b      	lsls	r3, r3, #18
 800139a:	4013      	ands	r3, r2
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800139e:	4b3c      	ldr	r3, [pc, #240]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80013a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013a2:	220f      	movs	r2, #15
 80013a4:	4393      	bics	r3, r2
 80013a6:	0019      	movs	r1, r3
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013ac:	4b38      	ldr	r3, [pc, #224]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80013ae:	430a      	orrs	r2, r1
 80013b0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013b2:	4b37      	ldr	r3, [pc, #220]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	4a3a      	ldr	r2, [pc, #232]	@ (80014a0 <HAL_RCC_OscConfig+0x630>)
 80013b8:	4013      	ands	r3, r2
 80013ba:	0019      	movs	r1, r3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013c4:	431a      	orrs	r2, r3
 80013c6:	4b32      	ldr	r3, [pc, #200]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80013c8:	430a      	orrs	r2, r1
 80013ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013cc:	4b30      	ldr	r3, [pc, #192]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80013d2:	2180      	movs	r1, #128	@ 0x80
 80013d4:	0449      	lsls	r1, r1, #17
 80013d6:	430a      	orrs	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013da:	f7ff fa41 	bl	8000860 <HAL_GetTick>
 80013de:	0003      	movs	r3, r0
 80013e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e4:	f7ff fa3c 	bl	8000860 <HAL_GetTick>
 80013e8:	0002      	movs	r2, r0
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e047      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013f6:	4b26      	ldr	r3, [pc, #152]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	@ 0x80
 80013fc:	049b      	lsls	r3, r3, #18
 80013fe:	4013      	ands	r3, r2
 8001400:	d0f0      	beq.n	80013e4 <HAL_RCC_OscConfig+0x574>
 8001402:	e03f      	b.n	8001484 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001404:	4b22      	ldr	r3, [pc, #136]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b21      	ldr	r3, [pc, #132]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800140a:	4924      	ldr	r1, [pc, #144]	@ (800149c <HAL_RCC_OscConfig+0x62c>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fa26 	bl	8000860 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800141a:	f7ff fa21 	bl	8000860 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e02c      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800142c:	4b18      	ldr	r3, [pc, #96]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	@ 0x80
 8001432:	049b      	lsls	r3, r3, #18
 8001434:	4013      	ands	r3, r2
 8001436:	d1f0      	bne.n	800141a <HAL_RCC_OscConfig+0x5aa>
 8001438:	e024      	b.n	8001484 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a1b      	ldr	r3, [r3, #32]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e01f      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800144c:	4b10      	ldr	r3, [pc, #64]	@ (8001490 <HAL_RCC_OscConfig+0x620>)
 800144e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001450:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001452:	697a      	ldr	r2, [r7, #20]
 8001454:	2380      	movs	r3, #128	@ 0x80
 8001456:	025b      	lsls	r3, r3, #9
 8001458:	401a      	ands	r2, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800145e:	429a      	cmp	r2, r3
 8001460:	d10e      	bne.n	8001480 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	220f      	movs	r2, #15
 8001466:	401a      	ands	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800146c:	429a      	cmp	r2, r3
 800146e:	d107      	bne.n	8001480 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	23f0      	movs	r3, #240	@ 0xf0
 8001474:	039b      	lsls	r3, r3, #14
 8001476:	401a      	ands	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e000      	b.n	8001486 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b008      	add	sp, #32
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			@ (mov r8, r8)
 8001490:	40021000 	.word	0x40021000
 8001494:	00001388 	.word	0x00001388
 8001498:	efffffff 	.word	0xefffffff
 800149c:	feffffff 	.word	0xfeffffff
 80014a0:	ffc2ffff 	.word	0xffc2ffff

080014a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d101      	bne.n	80014b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e0b3      	b.n	8001620 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014b8:	4b5b      	ldr	r3, [pc, #364]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2201      	movs	r2, #1
 80014be:	4013      	ands	r3, r2
 80014c0:	683a      	ldr	r2, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d911      	bls.n	80014ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014c6:	4b58      	ldr	r3, [pc, #352]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	2201      	movs	r2, #1
 80014cc:	4393      	bics	r3, r2
 80014ce:	0019      	movs	r1, r3
 80014d0:	4b55      	ldr	r3, [pc, #340]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80014d2:	683a      	ldr	r2, [r7, #0]
 80014d4:	430a      	orrs	r2, r1
 80014d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014d8:	4b53      	ldr	r3, [pc, #332]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2201      	movs	r2, #1
 80014de:	4013      	ands	r3, r2
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e09a      	b.n	8001620 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2202      	movs	r2, #2
 80014f0:	4013      	ands	r3, r2
 80014f2:	d015      	beq.n	8001520 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2204      	movs	r2, #4
 80014fa:	4013      	ands	r3, r2
 80014fc:	d006      	beq.n	800150c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80014fe:	4b4b      	ldr	r3, [pc, #300]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 8001500:	685a      	ldr	r2, [r3, #4]
 8001502:	4b4a      	ldr	r3, [pc, #296]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 8001504:	21e0      	movs	r1, #224	@ 0xe0
 8001506:	00c9      	lsls	r1, r1, #3
 8001508:	430a      	orrs	r2, r1
 800150a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800150c:	4b47      	ldr	r3, [pc, #284]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	22f0      	movs	r2, #240	@ 0xf0
 8001512:	4393      	bics	r3, r2
 8001514:	0019      	movs	r1, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	4b44      	ldr	r3, [pc, #272]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 800151c:	430a      	orrs	r2, r1
 800151e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2201      	movs	r2, #1
 8001526:	4013      	ands	r3, r2
 8001528:	d040      	beq.n	80015ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d107      	bne.n	8001542 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b3e      	ldr	r3, [pc, #248]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	@ 0x80
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	d114      	bne.n	8001568 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e06e      	b.n	8001620 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b02      	cmp	r3, #2
 8001548:	d107      	bne.n	800155a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154a:	4b38      	ldr	r3, [pc, #224]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	@ 0x80
 8001550:	049b      	lsls	r3, r3, #18
 8001552:	4013      	ands	r3, r2
 8001554:	d108      	bne.n	8001568 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e062      	b.n	8001620 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800155a:	4b34      	ldr	r3, [pc, #208]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2202      	movs	r2, #2
 8001560:	4013      	ands	r3, r2
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e05b      	b.n	8001620 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001568:	4b30      	ldr	r3, [pc, #192]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2203      	movs	r2, #3
 800156e:	4393      	bics	r3, r2
 8001570:	0019      	movs	r1, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 8001578:	430a      	orrs	r2, r1
 800157a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800157c:	f7ff f970 	bl	8000860 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001584:	e009      	b.n	800159a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001586:	f7ff f96b 	bl	8000860 <HAL_GetTick>
 800158a:	0002      	movs	r2, r0
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	4a27      	ldr	r2, [pc, #156]	@ (8001630 <HAL_RCC_ClockConfig+0x18c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d901      	bls.n	800159a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e042      	b.n	8001620 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800159a:	4b24      	ldr	r3, [pc, #144]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	220c      	movs	r2, #12
 80015a0:	401a      	ands	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d1ec      	bne.n	8001586 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2201      	movs	r2, #1
 80015b2:	4013      	ands	r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d211      	bcs.n	80015de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2201      	movs	r2, #1
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015cc:	4b16      	ldr	r3, [pc, #88]	@ (8001628 <HAL_RCC_ClockConfig+0x184>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2201      	movs	r2, #1
 80015d2:	4013      	ands	r3, r2
 80015d4:	683a      	ldr	r2, [r7, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d001      	beq.n	80015de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e020      	b.n	8001620 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4013      	ands	r3, r2
 80015e6:	d009      	beq.n	80015fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	4a11      	ldr	r2, [pc, #68]	@ (8001634 <HAL_RCC_ClockConfig+0x190>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	0019      	movs	r1, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80015fc:	f000 f820 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001600:	0001      	movs	r1, r0
 8001602:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <HAL_RCC_ClockConfig+0x188>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	220f      	movs	r2, #15
 800160a:	4013      	ands	r3, r2
 800160c:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <HAL_RCC_ClockConfig+0x194>)
 800160e:	5cd3      	ldrb	r3, [r2, r3]
 8001610:	000a      	movs	r2, r1
 8001612:	40da      	lsrs	r2, r3
 8001614:	4b09      	ldr	r3, [pc, #36]	@ (800163c <HAL_RCC_ClockConfig+0x198>)
 8001616:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001618:	2000      	movs	r0, #0
 800161a:	f7ff f8db 	bl	80007d4 <HAL_InitTick>
  
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b004      	add	sp, #16
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40022000 	.word	0x40022000
 800162c:	40021000 	.word	0x40021000
 8001630:	00001388 	.word	0x00001388
 8001634:	fffff8ff 	.word	0xfffff8ff
 8001638:	08002e70 	.word	0x08002e70
 800163c:	20000004 	.word	0x20000004

08001640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001640:	b590      	push	{r4, r7, lr}
 8001642:	b08f      	sub	sp, #60	@ 0x3c
 8001644:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001646:	2314      	movs	r3, #20
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	4a2b      	ldr	r2, [pc, #172]	@ (80016f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800164c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800164e:	c313      	stmia	r3!, {r0, r1, r4}
 8001650:	6812      	ldr	r2, [r2, #0]
 8001652:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001654:	1d3b      	adds	r3, r7, #4
 8001656:	4a29      	ldr	r2, [pc, #164]	@ (80016fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001658:	ca13      	ldmia	r2!, {r0, r1, r4}
 800165a:	c313      	stmia	r3!, {r0, r1, r4}
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001668:	2300      	movs	r3, #0
 800166a:	637b      	str	r3, [r7, #52]	@ 0x34
 800166c:	2300      	movs	r3, #0
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 8001674:	4b22      	ldr	r3, [pc, #136]	@ (8001700 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800167a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167c:	220c      	movs	r2, #12
 800167e:	4013      	ands	r3, r2
 8001680:	2b04      	cmp	r3, #4
 8001682:	d002      	beq.n	800168a <HAL_RCC_GetSysClockFreq+0x4a>
 8001684:	2b08      	cmp	r3, #8
 8001686:	d003      	beq.n	8001690 <HAL_RCC_GetSysClockFreq+0x50>
 8001688:	e02d      	b.n	80016e6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800168a:	4b1e      	ldr	r3, [pc, #120]	@ (8001704 <HAL_RCC_GetSysClockFreq+0xc4>)
 800168c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800168e:	e02d      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001692:	0c9b      	lsrs	r3, r3, #18
 8001694:	220f      	movs	r2, #15
 8001696:	4013      	ands	r3, r2
 8001698:	2214      	movs	r2, #20
 800169a:	18ba      	adds	r2, r7, r2
 800169c:	5cd3      	ldrb	r3, [r2, r3]
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <HAL_RCC_GetSysClockFreq+0xc0>)
 80016a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016a4:	220f      	movs	r2, #15
 80016a6:	4013      	ands	r3, r2
 80016a8:	1d3a      	adds	r2, r7, #4
 80016aa:	5cd3      	ldrb	r3, [r2, r3]
 80016ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80016ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	025b      	lsls	r3, r3, #9
 80016b4:	4013      	ands	r3, r2
 80016b6:	d009      	beq.n	80016cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80016b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016bc:	f7fe fd2e 	bl	800011c <__udivsi3>
 80016c0:	0003      	movs	r3, r0
 80016c2:	001a      	movs	r2, r3
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	4353      	muls	r3, r2
 80016c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80016ca:	e009      	b.n	80016e0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80016cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80016ce:	000a      	movs	r2, r1
 80016d0:	0152      	lsls	r2, r2, #5
 80016d2:	1a52      	subs	r2, r2, r1
 80016d4:	0193      	lsls	r3, r2, #6
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	185b      	adds	r3, r3, r1
 80016dc:	021b      	lsls	r3, r3, #8
 80016de:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
      }
      sysclockfreq = pllclk;
 80016e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80016e4:	e002      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80016e6:	4b07      	ldr	r3, [pc, #28]	@ (8001704 <HAL_RCC_GetSysClockFreq+0xc4>)
 80016e8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80016ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80016ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80016ee:	0018      	movs	r0, r3
 80016f0:	46bd      	mov	sp, r7
 80016f2:	b00f      	add	sp, #60	@ 0x3c
 80016f4:	bd90      	pop	{r4, r7, pc}
 80016f6:	46c0      	nop			@ (mov r8, r8)
 80016f8:	08002e50 	.word	0x08002e50
 80016fc:	08002e60 	.word	0x08002e60
 8001700:	40021000 	.word	0x40021000
 8001704:	007a1200 	.word	0x007a1200

08001708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800170c:	4b02      	ldr	r3, [pc, #8]	@ (8001718 <HAL_RCC_GetHCLKFreq+0x10>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	20000004 	.word	0x20000004

0800171c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001720:	f7ff fff2 	bl	8001708 <HAL_RCC_GetHCLKFreq>
 8001724:	0001      	movs	r1, r0
 8001726:	4b06      	ldr	r3, [pc, #24]	@ (8001740 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	2207      	movs	r2, #7
 800172e:	4013      	ands	r3, r2
 8001730:	4a04      	ldr	r2, [pc, #16]	@ (8001744 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001732:	5cd3      	ldrb	r3, [r2, r3]
 8001734:	40d9      	lsrs	r1, r3
 8001736:	000b      	movs	r3, r1
}    
 8001738:	0018      	movs	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	40021000 	.word	0x40021000
 8001744:	08002e80 	.word	0x08002e80

08001748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e044      	b.n	80017e4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800175e:	2b00      	cmp	r3, #0
 8001760:	d107      	bne.n	8001772 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2270      	movs	r2, #112	@ 0x70
 8001766:	2100      	movs	r1, #0
 8001768:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	0018      	movs	r0, r3
 800176e:	f7fe feff 	bl	8000570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2224      	movs	r2, #36	@ 0x24
 8001776:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2101      	movs	r1, #1
 8001784:	438a      	bics	r2, r1
 8001786:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	0018      	movs	r0, r3
 800178c:	f000 f8d8 	bl	8001940 <UART_SetConfig>
 8001790:	0003      	movs	r3, r0
 8001792:	2b01      	cmp	r3, #1
 8001794:	d101      	bne.n	800179a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e024      	b.n	80017e4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	0018      	movs	r0, r3
 80017a6:	f000 fa53 	bl	8001c50 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	490d      	ldr	r1, [pc, #52]	@ (80017ec <HAL_UART_Init+0xa4>)
 80017b6:	400a      	ands	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2108      	movs	r1, #8
 80017c6:	438a      	bics	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2101      	movs	r1, #1
 80017d6:	430a      	orrs	r2, r1
 80017d8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	0018      	movs	r0, r3
 80017de:	f000 faeb 	bl	8001db8 <UART_CheckIdleState>
 80017e2:	0003      	movs	r3, r0
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	fffff7ff 	.word	0xfffff7ff

080017f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	603b      	str	r3, [r7, #0]
 80017fc:	1dbb      	adds	r3, r7, #6
 80017fe:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001804:	2b20      	cmp	r3, #32
 8001806:	d000      	beq.n	800180a <HAL_UART_Transmit+0x1a>
 8001808:	e094      	b.n	8001934 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <HAL_UART_Transmit+0x28>
 8001810:	1dbb      	adds	r3, r7, #6
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d101      	bne.n	800181c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e08c      	b.n	8001936 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	2380      	movs	r3, #128	@ 0x80
 8001822:	015b      	lsls	r3, r3, #5
 8001824:	429a      	cmp	r2, r3
 8001826:	d109      	bne.n	800183c <HAL_UART_Transmit+0x4c>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d105      	bne.n	800183c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2201      	movs	r2, #1
 8001834:	4013      	ands	r3, r2
 8001836:	d001      	beq.n	800183c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e07c      	b.n	8001936 <HAL_UART_Transmit+0x146>
      }
    }

    __HAL_LOCK(huart);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2270      	movs	r2, #112	@ 0x70
 8001840:	5c9b      	ldrb	r3, [r3, r2]
 8001842:	2b01      	cmp	r3, #1
 8001844:	d101      	bne.n	800184a <HAL_UART_Transmit+0x5a>
 8001846:	2302      	movs	r3, #2
 8001848:	e075      	b.n	8001936 <HAL_UART_Transmit+0x146>
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2270      	movs	r2, #112	@ 0x70
 800184e:	2101      	movs	r1, #1
 8001850:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2200      	movs	r2, #0
 8001856:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2221      	movs	r2, #33	@ 0x21
 800185c:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800185e:	f7fe ffff 	bl	8000860 <HAL_GetTick>
 8001862:	0003      	movs	r3, r0
 8001864:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1dba      	adds	r2, r7, #6
 800186a:	2150      	movs	r1, #80	@ 0x50
 800186c:	8812      	ldrh	r2, [r2, #0]
 800186e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	1dba      	adds	r2, r7, #6
 8001874:	2152      	movs	r1, #82	@ 0x52
 8001876:	8812      	ldrh	r2, [r2, #0]
 8001878:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	2380      	movs	r3, #128	@ 0x80
 8001880:	015b      	lsls	r3, r3, #5
 8001882:	429a      	cmp	r2, r3
 8001884:	d108      	bne.n	8001898 <HAL_UART_Transmit+0xa8>
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d104      	bne.n	8001898 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	e003      	b.n	80018a0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80018a0:	e02c      	b.n	80018fc <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	68f8      	ldr	r0, [r7, #12]
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	0013      	movs	r3, r2
 80018ac:	2200      	movs	r2, #0
 80018ae:	2180      	movs	r1, #128	@ 0x80
 80018b0:	f000 fac6 	bl	8001e40 <UART_WaitOnFlagUntilTimeout>
 80018b4:	1e03      	subs	r3, r0, #0
 80018b6:	d001      	beq.n	80018bc <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e03c      	b.n	8001936 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10b      	bne.n	80018da <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	881a      	ldrh	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	05d2      	lsls	r2, r2, #23
 80018cc:	0dd2      	lsrs	r2, r2, #23
 80018ce:	b292      	uxth	r2, r2
 80018d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	3302      	adds	r3, #2
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	e007      	b.n	80018ea <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	781a      	ldrb	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	3301      	adds	r3, #1
 80018e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2252      	movs	r2, #82	@ 0x52
 80018ee:	5a9b      	ldrh	r3, [r3, r2]
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	3b01      	subs	r3, #1
 80018f4:	b299      	uxth	r1, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2252      	movs	r2, #82	@ 0x52
 80018fa:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2252      	movs	r2, #82	@ 0x52
 8001900:	5a9b      	ldrh	r3, [r3, r2]
 8001902:	b29b      	uxth	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1cc      	bne.n	80018a2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	0013      	movs	r3, r2
 8001912:	2200      	movs	r2, #0
 8001914:	2140      	movs	r1, #64	@ 0x40
 8001916:	f000 fa93 	bl	8001e40 <UART_WaitOnFlagUntilTimeout>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d001      	beq.n	8001922 <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e009      	b.n	8001936 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2220      	movs	r2, #32
 8001926:	675a      	str	r2, [r3, #116]	@ 0x74

    __HAL_UNLOCK(huart);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2270      	movs	r2, #112	@ 0x70
 800192c:	2100      	movs	r1, #0
 800192e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8001934:	2302      	movs	r3, #2
  }
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b008      	add	sp, #32
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800194c:	2317      	movs	r3, #23
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	69db      	ldr	r3, [r3, #28]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4aaf      	ldr	r2, [pc, #700]	@ (8001c30 <UART_SetConfig+0x2f0>)
 8001974:	4013      	ands	r3, r2
 8001976:	0019      	movs	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4aaa      	ldr	r2, [pc, #680]	@ (8001c34 <UART_SetConfig+0x2f4>)
 800198a:	4013      	ands	r3, r2
 800198c:	0019      	movs	r1, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	4aa1      	ldr	r2, [pc, #644]	@ (8001c38 <UART_SetConfig+0x2f8>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	693a      	ldr	r2, [r7, #16]
 80019bc:	430a      	orrs	r2, r1
 80019be:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a9d      	ldr	r2, [pc, #628]	@ (8001c3c <UART_SetConfig+0x2fc>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d127      	bne.n	8001a1a <UART_SetConfig+0xda>
 80019ca:	4b9d      	ldr	r3, [pc, #628]	@ (8001c40 <UART_SetConfig+0x300>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	2203      	movs	r2, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d00d      	beq.n	80019f2 <UART_SetConfig+0xb2>
 80019d6:	d81b      	bhi.n	8001a10 <UART_SetConfig+0xd0>
 80019d8:	2b02      	cmp	r3, #2
 80019da:	d014      	beq.n	8001a06 <UART_SetConfig+0xc6>
 80019dc:	d818      	bhi.n	8001a10 <UART_SetConfig+0xd0>
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <UART_SetConfig+0xa8>
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d00a      	beq.n	80019fc <UART_SetConfig+0xbc>
 80019e6:	e013      	b.n	8001a10 <UART_SetConfig+0xd0>
 80019e8:	231f      	movs	r3, #31
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	2200      	movs	r2, #0
 80019ee:	701a      	strb	r2, [r3, #0]
 80019f0:	e021      	b.n	8001a36 <UART_SetConfig+0xf6>
 80019f2:	231f      	movs	r3, #31
 80019f4:	18fb      	adds	r3, r7, r3
 80019f6:	2202      	movs	r2, #2
 80019f8:	701a      	strb	r2, [r3, #0]
 80019fa:	e01c      	b.n	8001a36 <UART_SetConfig+0xf6>
 80019fc:	231f      	movs	r3, #31
 80019fe:	18fb      	adds	r3, r7, r3
 8001a00:	2204      	movs	r2, #4
 8001a02:	701a      	strb	r2, [r3, #0]
 8001a04:	e017      	b.n	8001a36 <UART_SetConfig+0xf6>
 8001a06:	231f      	movs	r3, #31
 8001a08:	18fb      	adds	r3, r7, r3
 8001a0a:	2208      	movs	r2, #8
 8001a0c:	701a      	strb	r2, [r3, #0]
 8001a0e:	e012      	b.n	8001a36 <UART_SetConfig+0xf6>
 8001a10:	231f      	movs	r3, #31
 8001a12:	18fb      	adds	r3, r7, r3
 8001a14:	2210      	movs	r2, #16
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e00d      	b.n	8001a36 <UART_SetConfig+0xf6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a89      	ldr	r2, [pc, #548]	@ (8001c44 <UART_SetConfig+0x304>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d104      	bne.n	8001a2e <UART_SetConfig+0xee>
 8001a24:	231f      	movs	r3, #31
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
 8001a2c:	e003      	b.n	8001a36 <UART_SetConfig+0xf6>
 8001a2e:	231f      	movs	r3, #31
 8001a30:	18fb      	adds	r3, r7, r3
 8001a32:	2210      	movs	r2, #16
 8001a34:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69da      	ldr	r2, [r3, #28]
 8001a3a:	2380      	movs	r3, #128	@ 0x80
 8001a3c:	021b      	lsls	r3, r3, #8
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d000      	beq.n	8001a44 <UART_SetConfig+0x104>
 8001a42:	e07e      	b.n	8001b42 <UART_SetConfig+0x202>
  {
    switch (clocksource)
 8001a44:	231f      	movs	r3, #31
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b08      	cmp	r3, #8
 8001a4c:	d03f      	beq.n	8001ace <UART_SetConfig+0x18e>
 8001a4e:	dc4e      	bgt.n	8001aee <UART_SetConfig+0x1ae>
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d028      	beq.n	8001aa6 <UART_SetConfig+0x166>
 8001a54:	dc4b      	bgt.n	8001aee <UART_SetConfig+0x1ae>
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d002      	beq.n	8001a60 <UART_SetConfig+0x120>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d014      	beq.n	8001a88 <UART_SetConfig+0x148>
 8001a5e:	e046      	b.n	8001aee <UART_SetConfig+0x1ae>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001a60:	f7ff fe5c 	bl	800171c <HAL_RCC_GetPCLK1Freq>
 8001a64:	0003      	movs	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	005a      	lsls	r2, r3, #1
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	085b      	lsrs	r3, r3, #1
 8001a72:	18d2      	adds	r2, r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	0019      	movs	r1, r3
 8001a7a:	0010      	movs	r0, r2
 8001a7c:	f7fe fb4e 	bl	800011c <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	61bb      	str	r3, [r7, #24]
        break;
 8001a86:	e037      	b.n	8001af8 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c48 <UART_SetConfig+0x308>)
 8001a90:	189a      	adds	r2, r3, r2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0019      	movs	r1, r3
 8001a98:	0010      	movs	r0, r2
 8001a9a:	f7fe fb3f 	bl	800011c <__udivsi3>
 8001a9e:	0003      	movs	r3, r0
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	61bb      	str	r3, [r7, #24]
        break;
 8001aa4:	e028      	b.n	8001af8 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001aa6:	f7ff fdcb 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	005a      	lsls	r2, r3, #1
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	085b      	lsrs	r3, r3, #1
 8001ab8:	18d2      	adds	r2, r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0019      	movs	r1, r3
 8001ac0:	0010      	movs	r0, r2
 8001ac2:	f7fe fb2b 	bl	800011c <__udivsi3>
 8001ac6:	0003      	movs	r3, r0
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	61bb      	str	r3, [r7, #24]
        break;
 8001acc:	e014      	b.n	8001af8 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	2280      	movs	r2, #128	@ 0x80
 8001ad6:	0252      	lsls	r2, r2, #9
 8001ad8:	189a      	adds	r2, r3, r2
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	0019      	movs	r1, r3
 8001ae0:	0010      	movs	r0, r2
 8001ae2:	f7fe fb1b 	bl	800011c <__udivsi3>
 8001ae6:	0003      	movs	r3, r0
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	61bb      	str	r3, [r7, #24]
        break;
 8001aec:	e004      	b.n	8001af8 <UART_SetConfig+0x1b8>
      default:
        ret = HAL_ERROR;
 8001aee:	2317      	movs	r3, #23
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	2201      	movs	r2, #1
 8001af4:	701a      	strb	r2, [r3, #0]
        break;
 8001af6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b0f      	cmp	r3, #15
 8001afc:	d91c      	bls.n	8001b38 <UART_SetConfig+0x1f8>
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	2380      	movs	r3, #128	@ 0x80
 8001b02:	025b      	lsls	r3, r3, #9
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d217      	bcs.n	8001b38 <UART_SetConfig+0x1f8>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	200a      	movs	r0, #10
 8001b0e:	183b      	adds	r3, r7, r0
 8001b10:	210f      	movs	r1, #15
 8001b12:	438a      	bics	r2, r1
 8001b14:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	085b      	lsrs	r3, r3, #1
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	2207      	movs	r2, #7
 8001b1e:	4013      	ands	r3, r2
 8001b20:	b299      	uxth	r1, r3
 8001b22:	183b      	adds	r3, r7, r0
 8001b24:	183a      	adds	r2, r7, r0
 8001b26:	8812      	ldrh	r2, [r2, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	183a      	adds	r2, r7, r0
 8001b32:	8812      	ldrh	r2, [r2, #0]
 8001b34:	60da      	str	r2, [r3, #12]
 8001b36:	e06d      	b.n	8001c14 <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 8001b38:	2317      	movs	r3, #23
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	701a      	strb	r2, [r3, #0]
 8001b40:	e068      	b.n	8001c14 <UART_SetConfig+0x2d4>
    }
  }
  else
  {
    switch (clocksource)
 8001b42:	231f      	movs	r3, #31
 8001b44:	18fb      	adds	r3, r7, r3
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b08      	cmp	r3, #8
 8001b4a:	d03d      	beq.n	8001bc8 <UART_SetConfig+0x288>
 8001b4c:	dc4c      	bgt.n	8001be8 <UART_SetConfig+0x2a8>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d027      	beq.n	8001ba2 <UART_SetConfig+0x262>
 8001b52:	dc49      	bgt.n	8001be8 <UART_SetConfig+0x2a8>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <UART_SetConfig+0x21e>
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d013      	beq.n	8001b84 <UART_SetConfig+0x244>
 8001b5c:	e044      	b.n	8001be8 <UART_SetConfig+0x2a8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001b5e:	f7ff fddd 	bl	800171c <HAL_RCC_GetPCLK1Freq>
 8001b62:	0003      	movs	r3, r0
 8001b64:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	085a      	lsrs	r2, r3, #1
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	18d2      	adds	r2, r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	0019      	movs	r1, r3
 8001b76:	0010      	movs	r0, r2
 8001b78:	f7fe fad0 	bl	800011c <__udivsi3>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	61bb      	str	r3, [r7, #24]
        break;
 8001b82:	e036      	b.n	8001bf2 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	085b      	lsrs	r3, r3, #1
 8001b8a:	4a30      	ldr	r2, [pc, #192]	@ (8001c4c <UART_SetConfig+0x30c>)
 8001b8c:	189a      	adds	r2, r3, r2
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	0019      	movs	r1, r3
 8001b94:	0010      	movs	r0, r2
 8001b96:	f7fe fac1 	bl	800011c <__udivsi3>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	61bb      	str	r3, [r7, #24]
        break;
 8001ba0:	e027      	b.n	8001bf2 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001ba2:	f7ff fd4d 	bl	8001640 <HAL_RCC_GetSysClockFreq>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	085a      	lsrs	r2, r3, #1
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	18d2      	adds	r2, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	0019      	movs	r1, r3
 8001bba:	0010      	movs	r0, r2
 8001bbc:	f7fe faae 	bl	800011c <__udivsi3>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	61bb      	str	r3, [r7, #24]
        break;
 8001bc6:	e014      	b.n	8001bf2 <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	2280      	movs	r2, #128	@ 0x80
 8001bd0:	0212      	lsls	r2, r2, #8
 8001bd2:	189a      	adds	r2, r3, r2
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	0019      	movs	r1, r3
 8001bda:	0010      	movs	r0, r2
 8001bdc:	f7fe fa9e 	bl	800011c <__udivsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	61bb      	str	r3, [r7, #24]
        break;
 8001be6:	e004      	b.n	8001bf2 <UART_SetConfig+0x2b2>
      default:
        ret = HAL_ERROR;
 8001be8:	2317      	movs	r3, #23
 8001bea:	18fb      	adds	r3, r7, r3
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]
        break;
 8001bf0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d909      	bls.n	8001c0c <UART_SetConfig+0x2cc>
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	2380      	movs	r3, #128	@ 0x80
 8001bfc:	025b      	lsls	r3, r3, #9
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d204      	bcs.n	8001c0c <UART_SetConfig+0x2cc>
    {
      huart->Instance->BRR = usartdiv;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	e003      	b.n	8001c14 <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 8001c0c:	2317      	movs	r3, #23
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	781b      	ldrb	r3, [r3, #0]
}
 8001c26:	0018      	movs	r0, r3
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	b008      	add	sp, #32
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			@ (mov r8, r8)
 8001c30:	ffff69f3 	.word	0xffff69f3
 8001c34:	ffffcfff 	.word	0xffffcfff
 8001c38:	fffff4ff 	.word	0xfffff4ff
 8001c3c:	40013800 	.word	0x40013800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40004400 	.word	0x40004400
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	007a1200 	.word	0x007a1200

08001c50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d00b      	beq.n	8001c7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	4a4a      	ldr	r2, [pc, #296]	@ (8001d94 <UART_AdvFeatureConfig+0x144>)
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c7e:	2202      	movs	r2, #2
 8001c80:	4013      	ands	r3, r2
 8001c82:	d00b      	beq.n	8001c9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	4a43      	ldr	r2, [pc, #268]	@ (8001d98 <UART_AdvFeatureConfig+0x148>)
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	0019      	movs	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	2204      	movs	r2, #4
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d00b      	beq.n	8001cbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	4a3b      	ldr	r2, [pc, #236]	@ (8001d9c <UART_AdvFeatureConfig+0x14c>)
 8001cae:	4013      	ands	r3, r2
 8001cb0:	0019      	movs	r1, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc2:	2208      	movs	r2, #8
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	d00b      	beq.n	8001ce0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a34      	ldr	r2, [pc, #208]	@ (8001da0 <UART_AdvFeatureConfig+0x150>)
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	0019      	movs	r1, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	2210      	movs	r2, #16
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	d00b      	beq.n	8001d02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8001da4 <UART_AdvFeatureConfig+0x154>)
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	0019      	movs	r1, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d06:	2220      	movs	r2, #32
 8001d08:	4013      	ands	r3, r2
 8001d0a:	d00b      	beq.n	8001d24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4a25      	ldr	r2, [pc, #148]	@ (8001da8 <UART_AdvFeatureConfig+0x158>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d28:	2240      	movs	r2, #64	@ 0x40
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d01d      	beq.n	8001d6a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	4a1d      	ldr	r2, [pc, #116]	@ (8001dac <UART_AdvFeatureConfig+0x15c>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	0019      	movs	r1, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	430a      	orrs	r2, r1
 8001d44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d4a:	2380      	movs	r3, #128	@ 0x80
 8001d4c:	035b      	lsls	r3, r3, #13
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d10b      	bne.n	8001d6a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4a15      	ldr	r2, [pc, #84]	@ (8001db0 <UART_AdvFeatureConfig+0x160>)
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	0019      	movs	r1, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d6e:	2280      	movs	r2, #128	@ 0x80
 8001d70:	4013      	ands	r3, r2
 8001d72:	d00b      	beq.n	8001d8c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a0e      	ldr	r2, [pc, #56]	@ (8001db4 <UART_AdvFeatureConfig+0x164>)
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	0019      	movs	r1, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]
  }
}
 8001d8c:	46c0      	nop			@ (mov r8, r8)
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	b002      	add	sp, #8
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	fffdffff 	.word	0xfffdffff
 8001d98:	fffeffff 	.word	0xfffeffff
 8001d9c:	fffbffff 	.word	0xfffbffff
 8001da0:	ffff7fff 	.word	0xffff7fff
 8001da4:	ffffefff 	.word	0xffffefff
 8001da8:	ffffdfff 	.word	0xffffdfff
 8001dac:	ffefffff 	.word	0xffefffff
 8001db0:	ff9fffff 	.word	0xff9fffff
 8001db4:	fff7ffff 	.word	0xfff7ffff

08001db8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af02      	add	r7, sp, #8
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001dc6:	f7fe fd4b 	bl	8000860 <HAL_GetTick>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2208      	movs	r2, #8
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d10c      	bne.n	8001df6 <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2280      	movs	r2, #128	@ 0x80
 8001de0:	0391      	lsls	r1, r2, #14
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	4a15      	ldr	r2, [pc, #84]	@ (8001e3c <UART_CheckIdleState+0x84>)
 8001de6:	9200      	str	r2, [sp, #0]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f000 f829 	bl	8001e40 <UART_WaitOnFlagUntilTimeout>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d001      	beq.n	8001df6 <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e01e      	b.n	8001e34 <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d10c      	bne.n	8001e1e <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2280      	movs	r2, #128	@ 0x80
 8001e08:	03d1      	lsls	r1, r2, #15
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e3c <UART_CheckIdleState+0x84>)
 8001e0e:	9200      	str	r2, [sp, #0]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f000 f815 	bl	8001e40 <UART_WaitOnFlagUntilTimeout>
 8001e16:	1e03      	subs	r3, r0, #0
 8001e18:	d001      	beq.n	8001e1e <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e00a      	b.n	8001e34 <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2270      	movs	r2, #112	@ 0x70
 8001e2e:	2100      	movs	r1, #0
 8001e30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	0018      	movs	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b004      	add	sp, #16
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	01ffffff 	.word	0x01ffffff

08001e40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	603b      	str	r3, [r7, #0]
 8001e4c:	1dfb      	adds	r3, r7, #7
 8001e4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e50:	e05d      	b.n	8001f0e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	3301      	adds	r3, #1
 8001e56:	d05a      	beq.n	8001f0e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e58:	f7fe fd02 	bl	8000860 <HAL_GetTick>
 8001e5c:	0002      	movs	r2, r0
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d302      	bcc.n	8001e6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d11b      	bne.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	492f      	ldr	r1, [pc, #188]	@ (8001f38 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	2101      	movs	r1, #1
 8001e8a:	438a      	bics	r2, r1
 8001e8c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2220      	movs	r2, #32
 8001e92:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2220      	movs	r2, #32
 8001e98:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	2270      	movs	r2, #112	@ 0x70
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e043      	b.n	8001f2e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2204      	movs	r2, #4
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d02d      	beq.n	8001f0e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	69da      	ldr	r2, [r3, #28]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	2380      	movs	r3, #128	@ 0x80
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d123      	bne.n	8001f0e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2280      	movs	r2, #128	@ 0x80
 8001ecc:	0112      	lsls	r2, r2, #4
 8001ece:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4917      	ldr	r1, [pc, #92]	@ (8001f38 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8001edc:	400a      	ands	r2, r1
 8001ede:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	689a      	ldr	r2, [r3, #8]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2101      	movs	r1, #1
 8001eec:	438a      	bics	r2, r1
 8001eee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2220      	movs	r2, #32
 8001f00:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2270      	movs	r2, #112	@ 0x70
 8001f06:	2100      	movs	r1, #0
 8001f08:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e00f      	b.n	8001f2e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69db      	ldr	r3, [r3, #28]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	4013      	ands	r3, r2
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	425a      	negs	r2, r3
 8001f1e:	4153      	adcs	r3, r2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	001a      	movs	r2, r3
 8001f24:	1dfb      	adds	r3, r7, #7
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d092      	beq.n	8001e52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	0018      	movs	r0, r3
 8001f30:	46bd      	mov	sp, r7
 8001f32:	b004      	add	sp, #16
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	46c0      	nop			@ (mov r8, r8)
 8001f38:	fffffe5f 	.word	0xfffffe5f

08001f3c <std>:
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	0004      	movs	r4, r0
 8001f42:	6003      	str	r3, [r0, #0]
 8001f44:	6043      	str	r3, [r0, #4]
 8001f46:	6083      	str	r3, [r0, #8]
 8001f48:	8181      	strh	r1, [r0, #12]
 8001f4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8001f4c:	81c2      	strh	r2, [r0, #14]
 8001f4e:	6103      	str	r3, [r0, #16]
 8001f50:	6143      	str	r3, [r0, #20]
 8001f52:	6183      	str	r3, [r0, #24]
 8001f54:	0019      	movs	r1, r3
 8001f56:	2208      	movs	r2, #8
 8001f58:	305c      	adds	r0, #92	@ 0x5c
 8001f5a:	f000 f90f 	bl	800217c <memset>
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f8c <std+0x50>)
 8001f60:	6224      	str	r4, [r4, #32]
 8001f62:	6263      	str	r3, [r4, #36]	@ 0x24
 8001f64:	4b0a      	ldr	r3, [pc, #40]	@ (8001f90 <std+0x54>)
 8001f66:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001f68:	4b0a      	ldr	r3, [pc, #40]	@ (8001f94 <std+0x58>)
 8001f6a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <std+0x5c>)
 8001f6e:	6323      	str	r3, [r4, #48]	@ 0x30
 8001f70:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <std+0x60>)
 8001f72:	429c      	cmp	r4, r3
 8001f74:	d005      	beq.n	8001f82 <std+0x46>
 8001f76:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa0 <std+0x64>)
 8001f78:	429c      	cmp	r4, r3
 8001f7a:	d002      	beq.n	8001f82 <std+0x46>
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <std+0x68>)
 8001f7e:	429c      	cmp	r4, r3
 8001f80:	d103      	bne.n	8001f8a <std+0x4e>
 8001f82:	0020      	movs	r0, r4
 8001f84:	3058      	adds	r0, #88	@ 0x58
 8001f86:	f000 f979 	bl	800227c <__retarget_lock_init_recursive>
 8001f8a:	bd10      	pop	{r4, pc}
 8001f8c:	080020e5 	.word	0x080020e5
 8001f90:	0800210d 	.word	0x0800210d
 8001f94:	08002145 	.word	0x08002145
 8001f98:	08002171 	.word	0x08002171
 8001f9c:	20000110 	.word	0x20000110
 8001fa0:	20000178 	.word	0x20000178
 8001fa4:	200001e0 	.word	0x200001e0

08001fa8 <stdio_exit_handler>:
 8001fa8:	b510      	push	{r4, lr}
 8001faa:	4a03      	ldr	r2, [pc, #12]	@ (8001fb8 <stdio_exit_handler+0x10>)
 8001fac:	4903      	ldr	r1, [pc, #12]	@ (8001fbc <stdio_exit_handler+0x14>)
 8001fae:	4804      	ldr	r0, [pc, #16]	@ (8001fc0 <stdio_exit_handler+0x18>)
 8001fb0:	f000 f86c 	bl	800208c <_fwalk_sglue>
 8001fb4:	bd10      	pop	{r4, pc}
 8001fb6:	46c0      	nop			@ (mov r8, r8)
 8001fb8:	20000010 	.word	0x20000010
 8001fbc:	08002b09 	.word	0x08002b09
 8001fc0:	20000020 	.word	0x20000020

08001fc4 <cleanup_stdio>:
 8001fc4:	6841      	ldr	r1, [r0, #4]
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <cleanup_stdio+0x30>)
 8001fc8:	b510      	push	{r4, lr}
 8001fca:	0004      	movs	r4, r0
 8001fcc:	4299      	cmp	r1, r3
 8001fce:	d001      	beq.n	8001fd4 <cleanup_stdio+0x10>
 8001fd0:	f000 fd9a 	bl	8002b08 <_fflush_r>
 8001fd4:	68a1      	ldr	r1, [r4, #8]
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <cleanup_stdio+0x34>)
 8001fd8:	4299      	cmp	r1, r3
 8001fda:	d002      	beq.n	8001fe2 <cleanup_stdio+0x1e>
 8001fdc:	0020      	movs	r0, r4
 8001fde:	f000 fd93 	bl	8002b08 <_fflush_r>
 8001fe2:	68e1      	ldr	r1, [r4, #12]
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <cleanup_stdio+0x38>)
 8001fe6:	4299      	cmp	r1, r3
 8001fe8:	d002      	beq.n	8001ff0 <cleanup_stdio+0x2c>
 8001fea:	0020      	movs	r0, r4
 8001fec:	f000 fd8c 	bl	8002b08 <_fflush_r>
 8001ff0:	bd10      	pop	{r4, pc}
 8001ff2:	46c0      	nop			@ (mov r8, r8)
 8001ff4:	20000110 	.word	0x20000110
 8001ff8:	20000178 	.word	0x20000178
 8001ffc:	200001e0 	.word	0x200001e0

08002000 <global_stdio_init.part.0>:
 8002000:	b510      	push	{r4, lr}
 8002002:	4b09      	ldr	r3, [pc, #36]	@ (8002028 <global_stdio_init.part.0+0x28>)
 8002004:	4a09      	ldr	r2, [pc, #36]	@ (800202c <global_stdio_init.part.0+0x2c>)
 8002006:	2104      	movs	r1, #4
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	4809      	ldr	r0, [pc, #36]	@ (8002030 <global_stdio_init.part.0+0x30>)
 800200c:	2200      	movs	r2, #0
 800200e:	f7ff ff95 	bl	8001f3c <std>
 8002012:	2201      	movs	r2, #1
 8002014:	2109      	movs	r1, #9
 8002016:	4807      	ldr	r0, [pc, #28]	@ (8002034 <global_stdio_init.part.0+0x34>)
 8002018:	f7ff ff90 	bl	8001f3c <std>
 800201c:	2202      	movs	r2, #2
 800201e:	2112      	movs	r1, #18
 8002020:	4805      	ldr	r0, [pc, #20]	@ (8002038 <global_stdio_init.part.0+0x38>)
 8002022:	f7ff ff8b 	bl	8001f3c <std>
 8002026:	bd10      	pop	{r4, pc}
 8002028:	20000248 	.word	0x20000248
 800202c:	08001fa9 	.word	0x08001fa9
 8002030:	20000110 	.word	0x20000110
 8002034:	20000178 	.word	0x20000178
 8002038:	200001e0 	.word	0x200001e0

0800203c <__sfp_lock_acquire>:
 800203c:	b510      	push	{r4, lr}
 800203e:	4802      	ldr	r0, [pc, #8]	@ (8002048 <__sfp_lock_acquire+0xc>)
 8002040:	f000 f91d 	bl	800227e <__retarget_lock_acquire_recursive>
 8002044:	bd10      	pop	{r4, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	20000251 	.word	0x20000251

0800204c <__sfp_lock_release>:
 800204c:	b510      	push	{r4, lr}
 800204e:	4802      	ldr	r0, [pc, #8]	@ (8002058 <__sfp_lock_release+0xc>)
 8002050:	f000 f916 	bl	8002280 <__retarget_lock_release_recursive>
 8002054:	bd10      	pop	{r4, pc}
 8002056:	46c0      	nop			@ (mov r8, r8)
 8002058:	20000251 	.word	0x20000251

0800205c <__sinit>:
 800205c:	b510      	push	{r4, lr}
 800205e:	0004      	movs	r4, r0
 8002060:	f7ff ffec 	bl	800203c <__sfp_lock_acquire>
 8002064:	6a23      	ldr	r3, [r4, #32]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d002      	beq.n	8002070 <__sinit+0x14>
 800206a:	f7ff ffef 	bl	800204c <__sfp_lock_release>
 800206e:	bd10      	pop	{r4, pc}
 8002070:	4b04      	ldr	r3, [pc, #16]	@ (8002084 <__sinit+0x28>)
 8002072:	6223      	str	r3, [r4, #32]
 8002074:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <__sinit+0x2c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f6      	bne.n	800206a <__sinit+0xe>
 800207c:	f7ff ffc0 	bl	8002000 <global_stdio_init.part.0>
 8002080:	e7f3      	b.n	800206a <__sinit+0xe>
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	08001fc5 	.word	0x08001fc5
 8002088:	20000248 	.word	0x20000248

0800208c <_fwalk_sglue>:
 800208c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800208e:	0014      	movs	r4, r2
 8002090:	2600      	movs	r6, #0
 8002092:	9000      	str	r0, [sp, #0]
 8002094:	9101      	str	r1, [sp, #4]
 8002096:	68a5      	ldr	r5, [r4, #8]
 8002098:	6867      	ldr	r7, [r4, #4]
 800209a:	3f01      	subs	r7, #1
 800209c:	d504      	bpl.n	80020a8 <_fwalk_sglue+0x1c>
 800209e:	6824      	ldr	r4, [r4, #0]
 80020a0:	2c00      	cmp	r4, #0
 80020a2:	d1f8      	bne.n	8002096 <_fwalk_sglue+0xa>
 80020a4:	0030      	movs	r0, r6
 80020a6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020a8:	89ab      	ldrh	r3, [r5, #12]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d908      	bls.n	80020c0 <_fwalk_sglue+0x34>
 80020ae:	220e      	movs	r2, #14
 80020b0:	5eab      	ldrsh	r3, [r5, r2]
 80020b2:	3301      	adds	r3, #1
 80020b4:	d004      	beq.n	80020c0 <_fwalk_sglue+0x34>
 80020b6:	0029      	movs	r1, r5
 80020b8:	9800      	ldr	r0, [sp, #0]
 80020ba:	9b01      	ldr	r3, [sp, #4]
 80020bc:	4798      	blx	r3
 80020be:	4306      	orrs	r6, r0
 80020c0:	3568      	adds	r5, #104	@ 0x68
 80020c2:	e7ea      	b.n	800209a <_fwalk_sglue+0xe>

080020c4 <iprintf>:
 80020c4:	b40f      	push	{r0, r1, r2, r3}
 80020c6:	b507      	push	{r0, r1, r2, lr}
 80020c8:	4905      	ldr	r1, [pc, #20]	@ (80020e0 <iprintf+0x1c>)
 80020ca:	ab04      	add	r3, sp, #16
 80020cc:	6808      	ldr	r0, [r1, #0]
 80020ce:	cb04      	ldmia	r3!, {r2}
 80020d0:	6881      	ldr	r1, [r0, #8]
 80020d2:	9301      	str	r3, [sp, #4]
 80020d4:	f000 f9fa 	bl	80024cc <_vfiprintf_r>
 80020d8:	b003      	add	sp, #12
 80020da:	bc08      	pop	{r3}
 80020dc:	b004      	add	sp, #16
 80020de:	4718      	bx	r3
 80020e0:	2000001c 	.word	0x2000001c

080020e4 <__sread>:
 80020e4:	b570      	push	{r4, r5, r6, lr}
 80020e6:	000c      	movs	r4, r1
 80020e8:	250e      	movs	r5, #14
 80020ea:	5f49      	ldrsh	r1, [r1, r5]
 80020ec:	f000 f874 	bl	80021d8 <_read_r>
 80020f0:	2800      	cmp	r0, #0
 80020f2:	db03      	blt.n	80020fc <__sread+0x18>
 80020f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020f6:	181b      	adds	r3, r3, r0
 80020f8:	6563      	str	r3, [r4, #84]	@ 0x54
 80020fa:	bd70      	pop	{r4, r5, r6, pc}
 80020fc:	89a3      	ldrh	r3, [r4, #12]
 80020fe:	4a02      	ldr	r2, [pc, #8]	@ (8002108 <__sread+0x24>)
 8002100:	4013      	ands	r3, r2
 8002102:	81a3      	strh	r3, [r4, #12]
 8002104:	e7f9      	b.n	80020fa <__sread+0x16>
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	ffffefff 	.word	0xffffefff

0800210c <__swrite>:
 800210c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210e:	001f      	movs	r7, r3
 8002110:	898b      	ldrh	r3, [r1, #12]
 8002112:	0005      	movs	r5, r0
 8002114:	000c      	movs	r4, r1
 8002116:	0016      	movs	r6, r2
 8002118:	05db      	lsls	r3, r3, #23
 800211a:	d505      	bpl.n	8002128 <__swrite+0x1c>
 800211c:	230e      	movs	r3, #14
 800211e:	5ec9      	ldrsh	r1, [r1, r3]
 8002120:	2200      	movs	r2, #0
 8002122:	2302      	movs	r3, #2
 8002124:	f000 f844 	bl	80021b0 <_lseek_r>
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <__swrite+0x34>)
 800212c:	0028      	movs	r0, r5
 800212e:	4013      	ands	r3, r2
 8002130:	81a3      	strh	r3, [r4, #12]
 8002132:	0032      	movs	r2, r6
 8002134:	230e      	movs	r3, #14
 8002136:	5ee1      	ldrsh	r1, [r4, r3]
 8002138:	003b      	movs	r3, r7
 800213a:	f000 f861 	bl	8002200 <_write_r>
 800213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002140:	ffffefff 	.word	0xffffefff

08002144 <__sseek>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	000c      	movs	r4, r1
 8002148:	250e      	movs	r5, #14
 800214a:	5f49      	ldrsh	r1, [r1, r5]
 800214c:	f000 f830 	bl	80021b0 <_lseek_r>
 8002150:	89a3      	ldrh	r3, [r4, #12]
 8002152:	1c42      	adds	r2, r0, #1
 8002154:	d103      	bne.n	800215e <__sseek+0x1a>
 8002156:	4a05      	ldr	r2, [pc, #20]	@ (800216c <__sseek+0x28>)
 8002158:	4013      	ands	r3, r2
 800215a:	81a3      	strh	r3, [r4, #12]
 800215c:	bd70      	pop	{r4, r5, r6, pc}
 800215e:	2280      	movs	r2, #128	@ 0x80
 8002160:	0152      	lsls	r2, r2, #5
 8002162:	4313      	orrs	r3, r2
 8002164:	81a3      	strh	r3, [r4, #12]
 8002166:	6560      	str	r0, [r4, #84]	@ 0x54
 8002168:	e7f8      	b.n	800215c <__sseek+0x18>
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	ffffefff 	.word	0xffffefff

08002170 <__sclose>:
 8002170:	b510      	push	{r4, lr}
 8002172:	230e      	movs	r3, #14
 8002174:	5ec9      	ldrsh	r1, [r1, r3]
 8002176:	f000 f809 	bl	800218c <_close_r>
 800217a:	bd10      	pop	{r4, pc}

0800217c <memset>:
 800217c:	0003      	movs	r3, r0
 800217e:	1882      	adds	r2, r0, r2
 8002180:	4293      	cmp	r3, r2
 8002182:	d100      	bne.n	8002186 <memset+0xa>
 8002184:	4770      	bx	lr
 8002186:	7019      	strb	r1, [r3, #0]
 8002188:	3301      	adds	r3, #1
 800218a:	e7f9      	b.n	8002180 <memset+0x4>

0800218c <_close_r>:
 800218c:	2300      	movs	r3, #0
 800218e:	b570      	push	{r4, r5, r6, lr}
 8002190:	4d06      	ldr	r5, [pc, #24]	@ (80021ac <_close_r+0x20>)
 8002192:	0004      	movs	r4, r0
 8002194:	0008      	movs	r0, r1
 8002196:	602b      	str	r3, [r5, #0]
 8002198:	f7fe fa76 	bl	8000688 <_close>
 800219c:	1c43      	adds	r3, r0, #1
 800219e:	d103      	bne.n	80021a8 <_close_r+0x1c>
 80021a0:	682b      	ldr	r3, [r5, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d000      	beq.n	80021a8 <_close_r+0x1c>
 80021a6:	6023      	str	r3, [r4, #0]
 80021a8:	bd70      	pop	{r4, r5, r6, pc}
 80021aa:	46c0      	nop			@ (mov r8, r8)
 80021ac:	2000024c 	.word	0x2000024c

080021b0 <_lseek_r>:
 80021b0:	b570      	push	{r4, r5, r6, lr}
 80021b2:	0004      	movs	r4, r0
 80021b4:	0008      	movs	r0, r1
 80021b6:	0011      	movs	r1, r2
 80021b8:	001a      	movs	r2, r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	4d05      	ldr	r5, [pc, #20]	@ (80021d4 <_lseek_r+0x24>)
 80021be:	602b      	str	r3, [r5, #0]
 80021c0:	f7fe fa83 	bl	80006ca <_lseek>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d103      	bne.n	80021d0 <_lseek_r+0x20>
 80021c8:	682b      	ldr	r3, [r5, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d000      	beq.n	80021d0 <_lseek_r+0x20>
 80021ce:	6023      	str	r3, [r4, #0]
 80021d0:	bd70      	pop	{r4, r5, r6, pc}
 80021d2:	46c0      	nop			@ (mov r8, r8)
 80021d4:	2000024c 	.word	0x2000024c

080021d8 <_read_r>:
 80021d8:	b570      	push	{r4, r5, r6, lr}
 80021da:	0004      	movs	r4, r0
 80021dc:	0008      	movs	r0, r1
 80021de:	0011      	movs	r1, r2
 80021e0:	001a      	movs	r2, r3
 80021e2:	2300      	movs	r3, #0
 80021e4:	4d05      	ldr	r5, [pc, #20]	@ (80021fc <_read_r+0x24>)
 80021e6:	602b      	str	r3, [r5, #0]
 80021e8:	f7fe fa31 	bl	800064e <_read>
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	d103      	bne.n	80021f8 <_read_r+0x20>
 80021f0:	682b      	ldr	r3, [r5, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d000      	beq.n	80021f8 <_read_r+0x20>
 80021f6:	6023      	str	r3, [r4, #0]
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
 80021fa:	46c0      	nop			@ (mov r8, r8)
 80021fc:	2000024c 	.word	0x2000024c

08002200 <_write_r>:
 8002200:	b570      	push	{r4, r5, r6, lr}
 8002202:	0004      	movs	r4, r0
 8002204:	0008      	movs	r0, r1
 8002206:	0011      	movs	r1, r2
 8002208:	001a      	movs	r2, r3
 800220a:	2300      	movs	r3, #0
 800220c:	4d05      	ldr	r5, [pc, #20]	@ (8002224 <_write_r+0x24>)
 800220e:	602b      	str	r3, [r5, #0]
 8002210:	f7fe f810 	bl	8000234 <_write>
 8002214:	1c43      	adds	r3, r0, #1
 8002216:	d103      	bne.n	8002220 <_write_r+0x20>
 8002218:	682b      	ldr	r3, [r5, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d000      	beq.n	8002220 <_write_r+0x20>
 800221e:	6023      	str	r3, [r4, #0]
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	2000024c 	.word	0x2000024c

08002228 <__errno>:
 8002228:	4b01      	ldr	r3, [pc, #4]	@ (8002230 <__errno+0x8>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	4770      	bx	lr
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	2000001c 	.word	0x2000001c

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4c0c      	ldr	r4, [pc, #48]	@ (800226c <__libc_init_array+0x38>)
 800223a:	4d0d      	ldr	r5, [pc, #52]	@ (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	2600      	movs	r6, #0
 8002246:	f000 fdd9 	bl	8002dfc <_init>
 800224a:	4c0a      	ldr	r4, [pc, #40]	@ (8002274 <__libc_init_array+0x40>)
 800224c:	4d0a      	ldr	r5, [pc, #40]	@ (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	00b3      	lsls	r3, r6, #2
 800225a:	58eb      	ldr	r3, [r5, r3]
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	00b3      	lsls	r3, r6, #2
 8002264:	58eb      	ldr	r3, [r5, r3]
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	08002ebc 	.word	0x08002ebc
 8002270:	08002ebc 	.word	0x08002ebc
 8002274:	08002ec0 	.word	0x08002ec0
 8002278:	08002ebc 	.word	0x08002ebc

0800227c <__retarget_lock_init_recursive>:
 800227c:	4770      	bx	lr

0800227e <__retarget_lock_acquire_recursive>:
 800227e:	4770      	bx	lr

08002280 <__retarget_lock_release_recursive>:
 8002280:	4770      	bx	lr
	...

08002284 <_free_r>:
 8002284:	b570      	push	{r4, r5, r6, lr}
 8002286:	0005      	movs	r5, r0
 8002288:	1e0c      	subs	r4, r1, #0
 800228a:	d010      	beq.n	80022ae <_free_r+0x2a>
 800228c:	3c04      	subs	r4, #4
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da00      	bge.n	8002296 <_free_r+0x12>
 8002294:	18e4      	adds	r4, r4, r3
 8002296:	0028      	movs	r0, r5
 8002298:	f000 f8e0 	bl	800245c <__malloc_lock>
 800229c:	4a1d      	ldr	r2, [pc, #116]	@ (8002314 <_free_r+0x90>)
 800229e:	6813      	ldr	r3, [r2, #0]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d105      	bne.n	80022b0 <_free_r+0x2c>
 80022a4:	6063      	str	r3, [r4, #4]
 80022a6:	6014      	str	r4, [r2, #0]
 80022a8:	0028      	movs	r0, r5
 80022aa:	f000 f8df 	bl	800246c <__malloc_unlock>
 80022ae:	bd70      	pop	{r4, r5, r6, pc}
 80022b0:	42a3      	cmp	r3, r4
 80022b2:	d908      	bls.n	80022c6 <_free_r+0x42>
 80022b4:	6820      	ldr	r0, [r4, #0]
 80022b6:	1821      	adds	r1, r4, r0
 80022b8:	428b      	cmp	r3, r1
 80022ba:	d1f3      	bne.n	80022a4 <_free_r+0x20>
 80022bc:	6819      	ldr	r1, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	1809      	adds	r1, r1, r0
 80022c2:	6021      	str	r1, [r4, #0]
 80022c4:	e7ee      	b.n	80022a4 <_free_r+0x20>
 80022c6:	001a      	movs	r2, r3
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <_free_r+0x4e>
 80022ce:	42a3      	cmp	r3, r4
 80022d0:	d9f9      	bls.n	80022c6 <_free_r+0x42>
 80022d2:	6811      	ldr	r1, [r2, #0]
 80022d4:	1850      	adds	r0, r2, r1
 80022d6:	42a0      	cmp	r0, r4
 80022d8:	d10b      	bne.n	80022f2 <_free_r+0x6e>
 80022da:	6820      	ldr	r0, [r4, #0]
 80022dc:	1809      	adds	r1, r1, r0
 80022de:	1850      	adds	r0, r2, r1
 80022e0:	6011      	str	r1, [r2, #0]
 80022e2:	4283      	cmp	r3, r0
 80022e4:	d1e0      	bne.n	80022a8 <_free_r+0x24>
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	1841      	adds	r1, r0, r1
 80022ec:	6011      	str	r1, [r2, #0]
 80022ee:	6053      	str	r3, [r2, #4]
 80022f0:	e7da      	b.n	80022a8 <_free_r+0x24>
 80022f2:	42a0      	cmp	r0, r4
 80022f4:	d902      	bls.n	80022fc <_free_r+0x78>
 80022f6:	230c      	movs	r3, #12
 80022f8:	602b      	str	r3, [r5, #0]
 80022fa:	e7d5      	b.n	80022a8 <_free_r+0x24>
 80022fc:	6820      	ldr	r0, [r4, #0]
 80022fe:	1821      	adds	r1, r4, r0
 8002300:	428b      	cmp	r3, r1
 8002302:	d103      	bne.n	800230c <_free_r+0x88>
 8002304:	6819      	ldr	r1, [r3, #0]
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	1809      	adds	r1, r1, r0
 800230a:	6021      	str	r1, [r4, #0]
 800230c:	6063      	str	r3, [r4, #4]
 800230e:	6054      	str	r4, [r2, #4]
 8002310:	e7ca      	b.n	80022a8 <_free_r+0x24>
 8002312:	46c0      	nop			@ (mov r8, r8)
 8002314:	20000258 	.word	0x20000258

08002318 <sbrk_aligned>:
 8002318:	b570      	push	{r4, r5, r6, lr}
 800231a:	4e0f      	ldr	r6, [pc, #60]	@ (8002358 <sbrk_aligned+0x40>)
 800231c:	000d      	movs	r5, r1
 800231e:	6831      	ldr	r1, [r6, #0]
 8002320:	0004      	movs	r4, r0
 8002322:	2900      	cmp	r1, #0
 8002324:	d102      	bne.n	800232c <sbrk_aligned+0x14>
 8002326:	f000 fcbb 	bl	8002ca0 <_sbrk_r>
 800232a:	6030      	str	r0, [r6, #0]
 800232c:	0029      	movs	r1, r5
 800232e:	0020      	movs	r0, r4
 8002330:	f000 fcb6 	bl	8002ca0 <_sbrk_r>
 8002334:	1c43      	adds	r3, r0, #1
 8002336:	d103      	bne.n	8002340 <sbrk_aligned+0x28>
 8002338:	2501      	movs	r5, #1
 800233a:	426d      	negs	r5, r5
 800233c:	0028      	movs	r0, r5
 800233e:	bd70      	pop	{r4, r5, r6, pc}
 8002340:	2303      	movs	r3, #3
 8002342:	1cc5      	adds	r5, r0, #3
 8002344:	439d      	bics	r5, r3
 8002346:	42a8      	cmp	r0, r5
 8002348:	d0f8      	beq.n	800233c <sbrk_aligned+0x24>
 800234a:	1a29      	subs	r1, r5, r0
 800234c:	0020      	movs	r0, r4
 800234e:	f000 fca7 	bl	8002ca0 <_sbrk_r>
 8002352:	3001      	adds	r0, #1
 8002354:	d1f2      	bne.n	800233c <sbrk_aligned+0x24>
 8002356:	e7ef      	b.n	8002338 <sbrk_aligned+0x20>
 8002358:	20000254 	.word	0x20000254

0800235c <_malloc_r>:
 800235c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800235e:	2203      	movs	r2, #3
 8002360:	1ccb      	adds	r3, r1, #3
 8002362:	4393      	bics	r3, r2
 8002364:	3308      	adds	r3, #8
 8002366:	0005      	movs	r5, r0
 8002368:	001f      	movs	r7, r3
 800236a:	2b0c      	cmp	r3, #12
 800236c:	d234      	bcs.n	80023d8 <_malloc_r+0x7c>
 800236e:	270c      	movs	r7, #12
 8002370:	42b9      	cmp	r1, r7
 8002372:	d833      	bhi.n	80023dc <_malloc_r+0x80>
 8002374:	0028      	movs	r0, r5
 8002376:	f000 f871 	bl	800245c <__malloc_lock>
 800237a:	4e37      	ldr	r6, [pc, #220]	@ (8002458 <_malloc_r+0xfc>)
 800237c:	6833      	ldr	r3, [r6, #0]
 800237e:	001c      	movs	r4, r3
 8002380:	2c00      	cmp	r4, #0
 8002382:	d12f      	bne.n	80023e4 <_malloc_r+0x88>
 8002384:	0039      	movs	r1, r7
 8002386:	0028      	movs	r0, r5
 8002388:	f7ff ffc6 	bl	8002318 <sbrk_aligned>
 800238c:	0004      	movs	r4, r0
 800238e:	1c43      	adds	r3, r0, #1
 8002390:	d15f      	bne.n	8002452 <_malloc_r+0xf6>
 8002392:	6834      	ldr	r4, [r6, #0]
 8002394:	9400      	str	r4, [sp, #0]
 8002396:	9b00      	ldr	r3, [sp, #0]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d14a      	bne.n	8002432 <_malloc_r+0xd6>
 800239c:	2c00      	cmp	r4, #0
 800239e:	d052      	beq.n	8002446 <_malloc_r+0xea>
 80023a0:	6823      	ldr	r3, [r4, #0]
 80023a2:	0028      	movs	r0, r5
 80023a4:	18e3      	adds	r3, r4, r3
 80023a6:	9900      	ldr	r1, [sp, #0]
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	f000 fc79 	bl	8002ca0 <_sbrk_r>
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	4283      	cmp	r3, r0
 80023b2:	d148      	bne.n	8002446 <_malloc_r+0xea>
 80023b4:	6823      	ldr	r3, [r4, #0]
 80023b6:	0028      	movs	r0, r5
 80023b8:	1aff      	subs	r7, r7, r3
 80023ba:	0039      	movs	r1, r7
 80023bc:	f7ff ffac 	bl	8002318 <sbrk_aligned>
 80023c0:	3001      	adds	r0, #1
 80023c2:	d040      	beq.n	8002446 <_malloc_r+0xea>
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	19db      	adds	r3, r3, r7
 80023c8:	6023      	str	r3, [r4, #0]
 80023ca:	6833      	ldr	r3, [r6, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	2a00      	cmp	r2, #0
 80023d0:	d133      	bne.n	800243a <_malloc_r+0xde>
 80023d2:	9b00      	ldr	r3, [sp, #0]
 80023d4:	6033      	str	r3, [r6, #0]
 80023d6:	e019      	b.n	800240c <_malloc_r+0xb0>
 80023d8:	2b00      	cmp	r3, #0
 80023da:	dac9      	bge.n	8002370 <_malloc_r+0x14>
 80023dc:	230c      	movs	r3, #12
 80023de:	602b      	str	r3, [r5, #0]
 80023e0:	2000      	movs	r0, #0
 80023e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023e4:	6821      	ldr	r1, [r4, #0]
 80023e6:	1bc9      	subs	r1, r1, r7
 80023e8:	d420      	bmi.n	800242c <_malloc_r+0xd0>
 80023ea:	290b      	cmp	r1, #11
 80023ec:	d90a      	bls.n	8002404 <_malloc_r+0xa8>
 80023ee:	19e2      	adds	r2, r4, r7
 80023f0:	6027      	str	r7, [r4, #0]
 80023f2:	42a3      	cmp	r3, r4
 80023f4:	d104      	bne.n	8002400 <_malloc_r+0xa4>
 80023f6:	6032      	str	r2, [r6, #0]
 80023f8:	6863      	ldr	r3, [r4, #4]
 80023fa:	6011      	str	r1, [r2, #0]
 80023fc:	6053      	str	r3, [r2, #4]
 80023fe:	e005      	b.n	800240c <_malloc_r+0xb0>
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	e7f9      	b.n	80023f8 <_malloc_r+0x9c>
 8002404:	6862      	ldr	r2, [r4, #4]
 8002406:	42a3      	cmp	r3, r4
 8002408:	d10e      	bne.n	8002428 <_malloc_r+0xcc>
 800240a:	6032      	str	r2, [r6, #0]
 800240c:	0028      	movs	r0, r5
 800240e:	f000 f82d 	bl	800246c <__malloc_unlock>
 8002412:	0020      	movs	r0, r4
 8002414:	2207      	movs	r2, #7
 8002416:	300b      	adds	r0, #11
 8002418:	1d23      	adds	r3, r4, #4
 800241a:	4390      	bics	r0, r2
 800241c:	1ac2      	subs	r2, r0, r3
 800241e:	4298      	cmp	r0, r3
 8002420:	d0df      	beq.n	80023e2 <_malloc_r+0x86>
 8002422:	1a1b      	subs	r3, r3, r0
 8002424:	50a3      	str	r3, [r4, r2]
 8002426:	e7dc      	b.n	80023e2 <_malloc_r+0x86>
 8002428:	605a      	str	r2, [r3, #4]
 800242a:	e7ef      	b.n	800240c <_malloc_r+0xb0>
 800242c:	0023      	movs	r3, r4
 800242e:	6864      	ldr	r4, [r4, #4]
 8002430:	e7a6      	b.n	8002380 <_malloc_r+0x24>
 8002432:	9c00      	ldr	r4, [sp, #0]
 8002434:	6863      	ldr	r3, [r4, #4]
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	e7ad      	b.n	8002396 <_malloc_r+0x3a>
 800243a:	001a      	movs	r2, r3
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	42a3      	cmp	r3, r4
 8002440:	d1fb      	bne.n	800243a <_malloc_r+0xde>
 8002442:	2300      	movs	r3, #0
 8002444:	e7da      	b.n	80023fc <_malloc_r+0xa0>
 8002446:	230c      	movs	r3, #12
 8002448:	0028      	movs	r0, r5
 800244a:	602b      	str	r3, [r5, #0]
 800244c:	f000 f80e 	bl	800246c <__malloc_unlock>
 8002450:	e7c6      	b.n	80023e0 <_malloc_r+0x84>
 8002452:	6007      	str	r7, [r0, #0]
 8002454:	e7da      	b.n	800240c <_malloc_r+0xb0>
 8002456:	46c0      	nop			@ (mov r8, r8)
 8002458:	20000258 	.word	0x20000258

0800245c <__malloc_lock>:
 800245c:	b510      	push	{r4, lr}
 800245e:	4802      	ldr	r0, [pc, #8]	@ (8002468 <__malloc_lock+0xc>)
 8002460:	f7ff ff0d 	bl	800227e <__retarget_lock_acquire_recursive>
 8002464:	bd10      	pop	{r4, pc}
 8002466:	46c0      	nop			@ (mov r8, r8)
 8002468:	20000250 	.word	0x20000250

0800246c <__malloc_unlock>:
 800246c:	b510      	push	{r4, lr}
 800246e:	4802      	ldr	r0, [pc, #8]	@ (8002478 <__malloc_unlock+0xc>)
 8002470:	f7ff ff06 	bl	8002280 <__retarget_lock_release_recursive>
 8002474:	bd10      	pop	{r4, pc}
 8002476:	46c0      	nop			@ (mov r8, r8)
 8002478:	20000250 	.word	0x20000250

0800247c <__sfputc_r>:
 800247c:	6893      	ldr	r3, [r2, #8]
 800247e:	b510      	push	{r4, lr}
 8002480:	3b01      	subs	r3, #1
 8002482:	6093      	str	r3, [r2, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	da04      	bge.n	8002492 <__sfputc_r+0x16>
 8002488:	6994      	ldr	r4, [r2, #24]
 800248a:	42a3      	cmp	r3, r4
 800248c:	db07      	blt.n	800249e <__sfputc_r+0x22>
 800248e:	290a      	cmp	r1, #10
 8002490:	d005      	beq.n	800249e <__sfputc_r+0x22>
 8002492:	6813      	ldr	r3, [r2, #0]
 8002494:	1c58      	adds	r0, r3, #1
 8002496:	6010      	str	r0, [r2, #0]
 8002498:	7019      	strb	r1, [r3, #0]
 800249a:	0008      	movs	r0, r1
 800249c:	bd10      	pop	{r4, pc}
 800249e:	f000 fb5e 	bl	8002b5e <__swbuf_r>
 80024a2:	0001      	movs	r1, r0
 80024a4:	e7f9      	b.n	800249a <__sfputc_r+0x1e>

080024a6 <__sfputs_r>:
 80024a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a8:	0006      	movs	r6, r0
 80024aa:	000f      	movs	r7, r1
 80024ac:	0014      	movs	r4, r2
 80024ae:	18d5      	adds	r5, r2, r3
 80024b0:	42ac      	cmp	r4, r5
 80024b2:	d101      	bne.n	80024b8 <__sfputs_r+0x12>
 80024b4:	2000      	movs	r0, #0
 80024b6:	e007      	b.n	80024c8 <__sfputs_r+0x22>
 80024b8:	7821      	ldrb	r1, [r4, #0]
 80024ba:	003a      	movs	r2, r7
 80024bc:	0030      	movs	r0, r6
 80024be:	f7ff ffdd 	bl	800247c <__sfputc_r>
 80024c2:	3401      	adds	r4, #1
 80024c4:	1c43      	adds	r3, r0, #1
 80024c6:	d1f3      	bne.n	80024b0 <__sfputs_r+0xa>
 80024c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080024cc <_vfiprintf_r>:
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	b0a1      	sub	sp, #132	@ 0x84
 80024d0:	000f      	movs	r7, r1
 80024d2:	0015      	movs	r5, r2
 80024d4:	001e      	movs	r6, r3
 80024d6:	9003      	str	r0, [sp, #12]
 80024d8:	2800      	cmp	r0, #0
 80024da:	d004      	beq.n	80024e6 <_vfiprintf_r+0x1a>
 80024dc:	6a03      	ldr	r3, [r0, #32]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <_vfiprintf_r+0x1a>
 80024e2:	f7ff fdbb 	bl	800205c <__sinit>
 80024e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024e8:	07db      	lsls	r3, r3, #31
 80024ea:	d405      	bmi.n	80024f8 <_vfiprintf_r+0x2c>
 80024ec:	89bb      	ldrh	r3, [r7, #12]
 80024ee:	059b      	lsls	r3, r3, #22
 80024f0:	d402      	bmi.n	80024f8 <_vfiprintf_r+0x2c>
 80024f2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80024f4:	f7ff fec3 	bl	800227e <__retarget_lock_acquire_recursive>
 80024f8:	89bb      	ldrh	r3, [r7, #12]
 80024fa:	071b      	lsls	r3, r3, #28
 80024fc:	d502      	bpl.n	8002504 <_vfiprintf_r+0x38>
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d113      	bne.n	800252c <_vfiprintf_r+0x60>
 8002504:	0039      	movs	r1, r7
 8002506:	9803      	ldr	r0, [sp, #12]
 8002508:	f000 fb6c 	bl	8002be4 <__swsetup_r>
 800250c:	2800      	cmp	r0, #0
 800250e:	d00d      	beq.n	800252c <_vfiprintf_r+0x60>
 8002510:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002512:	07db      	lsls	r3, r3, #31
 8002514:	d503      	bpl.n	800251e <_vfiprintf_r+0x52>
 8002516:	2001      	movs	r0, #1
 8002518:	4240      	negs	r0, r0
 800251a:	b021      	add	sp, #132	@ 0x84
 800251c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800251e:	89bb      	ldrh	r3, [r7, #12]
 8002520:	059b      	lsls	r3, r3, #22
 8002522:	d4f8      	bmi.n	8002516 <_vfiprintf_r+0x4a>
 8002524:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8002526:	f7ff feab 	bl	8002280 <__retarget_lock_release_recursive>
 800252a:	e7f4      	b.n	8002516 <_vfiprintf_r+0x4a>
 800252c:	2300      	movs	r3, #0
 800252e:	ac08      	add	r4, sp, #32
 8002530:	6163      	str	r3, [r4, #20]
 8002532:	3320      	adds	r3, #32
 8002534:	7663      	strb	r3, [r4, #25]
 8002536:	3310      	adds	r3, #16
 8002538:	76a3      	strb	r3, [r4, #26]
 800253a:	9607      	str	r6, [sp, #28]
 800253c:	002e      	movs	r6, r5
 800253e:	7833      	ldrb	r3, [r6, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <_vfiprintf_r+0x7c>
 8002544:	2b25      	cmp	r3, #37	@ 0x25
 8002546:	d148      	bne.n	80025da <_vfiprintf_r+0x10e>
 8002548:	1b73      	subs	r3, r6, r5
 800254a:	9305      	str	r3, [sp, #20]
 800254c:	42ae      	cmp	r6, r5
 800254e:	d00b      	beq.n	8002568 <_vfiprintf_r+0x9c>
 8002550:	002a      	movs	r2, r5
 8002552:	0039      	movs	r1, r7
 8002554:	9803      	ldr	r0, [sp, #12]
 8002556:	f7ff ffa6 	bl	80024a6 <__sfputs_r>
 800255a:	3001      	adds	r0, #1
 800255c:	d100      	bne.n	8002560 <_vfiprintf_r+0x94>
 800255e:	e0ae      	b.n	80026be <_vfiprintf_r+0x1f2>
 8002560:	6963      	ldr	r3, [r4, #20]
 8002562:	9a05      	ldr	r2, [sp, #20]
 8002564:	189b      	adds	r3, r3, r2
 8002566:	6163      	str	r3, [r4, #20]
 8002568:	7833      	ldrb	r3, [r6, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <_vfiprintf_r+0xa4>
 800256e:	e0a6      	b.n	80026be <_vfiprintf_r+0x1f2>
 8002570:	2201      	movs	r2, #1
 8002572:	2300      	movs	r3, #0
 8002574:	4252      	negs	r2, r2
 8002576:	6062      	str	r2, [r4, #4]
 8002578:	a904      	add	r1, sp, #16
 800257a:	3254      	adds	r2, #84	@ 0x54
 800257c:	1852      	adds	r2, r2, r1
 800257e:	1c75      	adds	r5, r6, #1
 8002580:	6023      	str	r3, [r4, #0]
 8002582:	60e3      	str	r3, [r4, #12]
 8002584:	60a3      	str	r3, [r4, #8]
 8002586:	7013      	strb	r3, [r2, #0]
 8002588:	65a3      	str	r3, [r4, #88]	@ 0x58
 800258a:	4b59      	ldr	r3, [pc, #356]	@ (80026f0 <_vfiprintf_r+0x224>)
 800258c:	2205      	movs	r2, #5
 800258e:	0018      	movs	r0, r3
 8002590:	7829      	ldrb	r1, [r5, #0]
 8002592:	9305      	str	r3, [sp, #20]
 8002594:	f000 fb96 	bl	8002cc4 <memchr>
 8002598:	1c6e      	adds	r6, r5, #1
 800259a:	2800      	cmp	r0, #0
 800259c:	d11f      	bne.n	80025de <_vfiprintf_r+0x112>
 800259e:	6822      	ldr	r2, [r4, #0]
 80025a0:	06d3      	lsls	r3, r2, #27
 80025a2:	d504      	bpl.n	80025ae <_vfiprintf_r+0xe2>
 80025a4:	2353      	movs	r3, #83	@ 0x53
 80025a6:	a904      	add	r1, sp, #16
 80025a8:	185b      	adds	r3, r3, r1
 80025aa:	2120      	movs	r1, #32
 80025ac:	7019      	strb	r1, [r3, #0]
 80025ae:	0713      	lsls	r3, r2, #28
 80025b0:	d504      	bpl.n	80025bc <_vfiprintf_r+0xf0>
 80025b2:	2353      	movs	r3, #83	@ 0x53
 80025b4:	a904      	add	r1, sp, #16
 80025b6:	185b      	adds	r3, r3, r1
 80025b8:	212b      	movs	r1, #43	@ 0x2b
 80025ba:	7019      	strb	r1, [r3, #0]
 80025bc:	782b      	ldrb	r3, [r5, #0]
 80025be:	2b2a      	cmp	r3, #42	@ 0x2a
 80025c0:	d016      	beq.n	80025f0 <_vfiprintf_r+0x124>
 80025c2:	002e      	movs	r6, r5
 80025c4:	2100      	movs	r1, #0
 80025c6:	200a      	movs	r0, #10
 80025c8:	68e3      	ldr	r3, [r4, #12]
 80025ca:	7832      	ldrb	r2, [r6, #0]
 80025cc:	1c75      	adds	r5, r6, #1
 80025ce:	3a30      	subs	r2, #48	@ 0x30
 80025d0:	2a09      	cmp	r2, #9
 80025d2:	d950      	bls.n	8002676 <_vfiprintf_r+0x1aa>
 80025d4:	2900      	cmp	r1, #0
 80025d6:	d111      	bne.n	80025fc <_vfiprintf_r+0x130>
 80025d8:	e017      	b.n	800260a <_vfiprintf_r+0x13e>
 80025da:	3601      	adds	r6, #1
 80025dc:	e7af      	b.n	800253e <_vfiprintf_r+0x72>
 80025de:	9b05      	ldr	r3, [sp, #20]
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	1ac0      	subs	r0, r0, r3
 80025e4:	2301      	movs	r3, #1
 80025e6:	4083      	lsls	r3, r0
 80025e8:	4313      	orrs	r3, r2
 80025ea:	0035      	movs	r5, r6
 80025ec:	6023      	str	r3, [r4, #0]
 80025ee:	e7cc      	b.n	800258a <_vfiprintf_r+0xbe>
 80025f0:	9b07      	ldr	r3, [sp, #28]
 80025f2:	1d19      	adds	r1, r3, #4
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	9107      	str	r1, [sp, #28]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db01      	blt.n	8002600 <_vfiprintf_r+0x134>
 80025fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80025fe:	e004      	b.n	800260a <_vfiprintf_r+0x13e>
 8002600:	425b      	negs	r3, r3
 8002602:	60e3      	str	r3, [r4, #12]
 8002604:	2302      	movs	r3, #2
 8002606:	4313      	orrs	r3, r2
 8002608:	6023      	str	r3, [r4, #0]
 800260a:	7833      	ldrb	r3, [r6, #0]
 800260c:	2b2e      	cmp	r3, #46	@ 0x2e
 800260e:	d10c      	bne.n	800262a <_vfiprintf_r+0x15e>
 8002610:	7873      	ldrb	r3, [r6, #1]
 8002612:	2b2a      	cmp	r3, #42	@ 0x2a
 8002614:	d134      	bne.n	8002680 <_vfiprintf_r+0x1b4>
 8002616:	9b07      	ldr	r3, [sp, #28]
 8002618:	3602      	adds	r6, #2
 800261a:	1d1a      	adds	r2, r3, #4
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	9207      	str	r2, [sp, #28]
 8002620:	2b00      	cmp	r3, #0
 8002622:	da01      	bge.n	8002628 <_vfiprintf_r+0x15c>
 8002624:	2301      	movs	r3, #1
 8002626:	425b      	negs	r3, r3
 8002628:	9309      	str	r3, [sp, #36]	@ 0x24
 800262a:	4d32      	ldr	r5, [pc, #200]	@ (80026f4 <_vfiprintf_r+0x228>)
 800262c:	2203      	movs	r2, #3
 800262e:	0028      	movs	r0, r5
 8002630:	7831      	ldrb	r1, [r6, #0]
 8002632:	f000 fb47 	bl	8002cc4 <memchr>
 8002636:	2800      	cmp	r0, #0
 8002638:	d006      	beq.n	8002648 <_vfiprintf_r+0x17c>
 800263a:	2340      	movs	r3, #64	@ 0x40
 800263c:	1b40      	subs	r0, r0, r5
 800263e:	4083      	lsls	r3, r0
 8002640:	6822      	ldr	r2, [r4, #0]
 8002642:	3601      	adds	r6, #1
 8002644:	4313      	orrs	r3, r2
 8002646:	6023      	str	r3, [r4, #0]
 8002648:	7831      	ldrb	r1, [r6, #0]
 800264a:	2206      	movs	r2, #6
 800264c:	482a      	ldr	r0, [pc, #168]	@ (80026f8 <_vfiprintf_r+0x22c>)
 800264e:	1c75      	adds	r5, r6, #1
 8002650:	7621      	strb	r1, [r4, #24]
 8002652:	f000 fb37 	bl	8002cc4 <memchr>
 8002656:	2800      	cmp	r0, #0
 8002658:	d040      	beq.n	80026dc <_vfiprintf_r+0x210>
 800265a:	4b28      	ldr	r3, [pc, #160]	@ (80026fc <_vfiprintf_r+0x230>)
 800265c:	2b00      	cmp	r3, #0
 800265e:	d122      	bne.n	80026a6 <_vfiprintf_r+0x1da>
 8002660:	2207      	movs	r2, #7
 8002662:	9b07      	ldr	r3, [sp, #28]
 8002664:	3307      	adds	r3, #7
 8002666:	4393      	bics	r3, r2
 8002668:	3308      	adds	r3, #8
 800266a:	9307      	str	r3, [sp, #28]
 800266c:	6963      	ldr	r3, [r4, #20]
 800266e:	9a04      	ldr	r2, [sp, #16]
 8002670:	189b      	adds	r3, r3, r2
 8002672:	6163      	str	r3, [r4, #20]
 8002674:	e762      	b.n	800253c <_vfiprintf_r+0x70>
 8002676:	4343      	muls	r3, r0
 8002678:	002e      	movs	r6, r5
 800267a:	2101      	movs	r1, #1
 800267c:	189b      	adds	r3, r3, r2
 800267e:	e7a4      	b.n	80025ca <_vfiprintf_r+0xfe>
 8002680:	2300      	movs	r3, #0
 8002682:	200a      	movs	r0, #10
 8002684:	0019      	movs	r1, r3
 8002686:	3601      	adds	r6, #1
 8002688:	6063      	str	r3, [r4, #4]
 800268a:	7832      	ldrb	r2, [r6, #0]
 800268c:	1c75      	adds	r5, r6, #1
 800268e:	3a30      	subs	r2, #48	@ 0x30
 8002690:	2a09      	cmp	r2, #9
 8002692:	d903      	bls.n	800269c <_vfiprintf_r+0x1d0>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0c8      	beq.n	800262a <_vfiprintf_r+0x15e>
 8002698:	9109      	str	r1, [sp, #36]	@ 0x24
 800269a:	e7c6      	b.n	800262a <_vfiprintf_r+0x15e>
 800269c:	4341      	muls	r1, r0
 800269e:	002e      	movs	r6, r5
 80026a0:	2301      	movs	r3, #1
 80026a2:	1889      	adds	r1, r1, r2
 80026a4:	e7f1      	b.n	800268a <_vfiprintf_r+0x1be>
 80026a6:	aa07      	add	r2, sp, #28
 80026a8:	9200      	str	r2, [sp, #0]
 80026aa:	0021      	movs	r1, r4
 80026ac:	003a      	movs	r2, r7
 80026ae:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <_vfiprintf_r+0x234>)
 80026b0:	9803      	ldr	r0, [sp, #12]
 80026b2:	e000      	b.n	80026b6 <_vfiprintf_r+0x1ea>
 80026b4:	bf00      	nop
 80026b6:	9004      	str	r0, [sp, #16]
 80026b8:	9b04      	ldr	r3, [sp, #16]
 80026ba:	3301      	adds	r3, #1
 80026bc:	d1d6      	bne.n	800266c <_vfiprintf_r+0x1a0>
 80026be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026c0:	07db      	lsls	r3, r3, #31
 80026c2:	d405      	bmi.n	80026d0 <_vfiprintf_r+0x204>
 80026c4:	89bb      	ldrh	r3, [r7, #12]
 80026c6:	059b      	lsls	r3, r3, #22
 80026c8:	d402      	bmi.n	80026d0 <_vfiprintf_r+0x204>
 80026ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80026cc:	f7ff fdd8 	bl	8002280 <__retarget_lock_release_recursive>
 80026d0:	89bb      	ldrh	r3, [r7, #12]
 80026d2:	065b      	lsls	r3, r3, #25
 80026d4:	d500      	bpl.n	80026d8 <_vfiprintf_r+0x20c>
 80026d6:	e71e      	b.n	8002516 <_vfiprintf_r+0x4a>
 80026d8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80026da:	e71e      	b.n	800251a <_vfiprintf_r+0x4e>
 80026dc:	aa07      	add	r2, sp, #28
 80026de:	9200      	str	r2, [sp, #0]
 80026e0:	0021      	movs	r1, r4
 80026e2:	003a      	movs	r2, r7
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <_vfiprintf_r+0x234>)
 80026e6:	9803      	ldr	r0, [sp, #12]
 80026e8:	f000 f87c 	bl	80027e4 <_printf_i>
 80026ec:	e7e3      	b.n	80026b6 <_vfiprintf_r+0x1ea>
 80026ee:	46c0      	nop			@ (mov r8, r8)
 80026f0:	08002e88 	.word	0x08002e88
 80026f4:	08002e8e 	.word	0x08002e8e
 80026f8:	08002e92 	.word	0x08002e92
 80026fc:	00000000 	.word	0x00000000
 8002700:	080024a7 	.word	0x080024a7

08002704 <_printf_common>:
 8002704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002706:	0016      	movs	r6, r2
 8002708:	9301      	str	r3, [sp, #4]
 800270a:	688a      	ldr	r2, [r1, #8]
 800270c:	690b      	ldr	r3, [r1, #16]
 800270e:	000c      	movs	r4, r1
 8002710:	9000      	str	r0, [sp, #0]
 8002712:	4293      	cmp	r3, r2
 8002714:	da00      	bge.n	8002718 <_printf_common+0x14>
 8002716:	0013      	movs	r3, r2
 8002718:	0022      	movs	r2, r4
 800271a:	6033      	str	r3, [r6, #0]
 800271c:	3243      	adds	r2, #67	@ 0x43
 800271e:	7812      	ldrb	r2, [r2, #0]
 8002720:	2a00      	cmp	r2, #0
 8002722:	d001      	beq.n	8002728 <_printf_common+0x24>
 8002724:	3301      	adds	r3, #1
 8002726:	6033      	str	r3, [r6, #0]
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	069b      	lsls	r3, r3, #26
 800272c:	d502      	bpl.n	8002734 <_printf_common+0x30>
 800272e:	6833      	ldr	r3, [r6, #0]
 8002730:	3302      	adds	r3, #2
 8002732:	6033      	str	r3, [r6, #0]
 8002734:	6822      	ldr	r2, [r4, #0]
 8002736:	2306      	movs	r3, #6
 8002738:	0015      	movs	r5, r2
 800273a:	401d      	ands	r5, r3
 800273c:	421a      	tst	r2, r3
 800273e:	d027      	beq.n	8002790 <_printf_common+0x8c>
 8002740:	0023      	movs	r3, r4
 8002742:	3343      	adds	r3, #67	@ 0x43
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	1e5a      	subs	r2, r3, #1
 8002748:	4193      	sbcs	r3, r2
 800274a:	6822      	ldr	r2, [r4, #0]
 800274c:	0692      	lsls	r2, r2, #26
 800274e:	d430      	bmi.n	80027b2 <_printf_common+0xae>
 8002750:	0022      	movs	r2, r4
 8002752:	9901      	ldr	r1, [sp, #4]
 8002754:	9800      	ldr	r0, [sp, #0]
 8002756:	9d08      	ldr	r5, [sp, #32]
 8002758:	3243      	adds	r2, #67	@ 0x43
 800275a:	47a8      	blx	r5
 800275c:	3001      	adds	r0, #1
 800275e:	d025      	beq.n	80027ac <_printf_common+0xa8>
 8002760:	2206      	movs	r2, #6
 8002762:	6823      	ldr	r3, [r4, #0]
 8002764:	2500      	movs	r5, #0
 8002766:	4013      	ands	r3, r2
 8002768:	2b04      	cmp	r3, #4
 800276a:	d105      	bne.n	8002778 <_printf_common+0x74>
 800276c:	6833      	ldr	r3, [r6, #0]
 800276e:	68e5      	ldr	r5, [r4, #12]
 8002770:	1aed      	subs	r5, r5, r3
 8002772:	43eb      	mvns	r3, r5
 8002774:	17db      	asrs	r3, r3, #31
 8002776:	401d      	ands	r5, r3
 8002778:	68a3      	ldr	r3, [r4, #8]
 800277a:	6922      	ldr	r2, [r4, #16]
 800277c:	4293      	cmp	r3, r2
 800277e:	dd01      	ble.n	8002784 <_printf_common+0x80>
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	18ed      	adds	r5, r5, r3
 8002784:	2600      	movs	r6, #0
 8002786:	42b5      	cmp	r5, r6
 8002788:	d120      	bne.n	80027cc <_printf_common+0xc8>
 800278a:	2000      	movs	r0, #0
 800278c:	e010      	b.n	80027b0 <_printf_common+0xac>
 800278e:	3501      	adds	r5, #1
 8002790:	68e3      	ldr	r3, [r4, #12]
 8002792:	6832      	ldr	r2, [r6, #0]
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	42ab      	cmp	r3, r5
 8002798:	ddd2      	ble.n	8002740 <_printf_common+0x3c>
 800279a:	0022      	movs	r2, r4
 800279c:	2301      	movs	r3, #1
 800279e:	9901      	ldr	r1, [sp, #4]
 80027a0:	9800      	ldr	r0, [sp, #0]
 80027a2:	9f08      	ldr	r7, [sp, #32]
 80027a4:	3219      	adds	r2, #25
 80027a6:	47b8      	blx	r7
 80027a8:	3001      	adds	r0, #1
 80027aa:	d1f0      	bne.n	800278e <_printf_common+0x8a>
 80027ac:	2001      	movs	r0, #1
 80027ae:	4240      	negs	r0, r0
 80027b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027b2:	2030      	movs	r0, #48	@ 0x30
 80027b4:	18e1      	adds	r1, r4, r3
 80027b6:	3143      	adds	r1, #67	@ 0x43
 80027b8:	7008      	strb	r0, [r1, #0]
 80027ba:	0021      	movs	r1, r4
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	3145      	adds	r1, #69	@ 0x45
 80027c0:	7809      	ldrb	r1, [r1, #0]
 80027c2:	18a2      	adds	r2, r4, r2
 80027c4:	3243      	adds	r2, #67	@ 0x43
 80027c6:	3302      	adds	r3, #2
 80027c8:	7011      	strb	r1, [r2, #0]
 80027ca:	e7c1      	b.n	8002750 <_printf_common+0x4c>
 80027cc:	0022      	movs	r2, r4
 80027ce:	2301      	movs	r3, #1
 80027d0:	9901      	ldr	r1, [sp, #4]
 80027d2:	9800      	ldr	r0, [sp, #0]
 80027d4:	9f08      	ldr	r7, [sp, #32]
 80027d6:	321a      	adds	r2, #26
 80027d8:	47b8      	blx	r7
 80027da:	3001      	adds	r0, #1
 80027dc:	d0e6      	beq.n	80027ac <_printf_common+0xa8>
 80027de:	3601      	adds	r6, #1
 80027e0:	e7d1      	b.n	8002786 <_printf_common+0x82>
	...

080027e4 <_printf_i>:
 80027e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027e6:	b08b      	sub	sp, #44	@ 0x2c
 80027e8:	9206      	str	r2, [sp, #24]
 80027ea:	000a      	movs	r2, r1
 80027ec:	3243      	adds	r2, #67	@ 0x43
 80027ee:	9307      	str	r3, [sp, #28]
 80027f0:	9005      	str	r0, [sp, #20]
 80027f2:	9203      	str	r2, [sp, #12]
 80027f4:	7e0a      	ldrb	r2, [r1, #24]
 80027f6:	000c      	movs	r4, r1
 80027f8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80027fa:	2a78      	cmp	r2, #120	@ 0x78
 80027fc:	d809      	bhi.n	8002812 <_printf_i+0x2e>
 80027fe:	2a62      	cmp	r2, #98	@ 0x62
 8002800:	d80b      	bhi.n	800281a <_printf_i+0x36>
 8002802:	2a00      	cmp	r2, #0
 8002804:	d100      	bne.n	8002808 <_printf_i+0x24>
 8002806:	e0ba      	b.n	800297e <_printf_i+0x19a>
 8002808:	497a      	ldr	r1, [pc, #488]	@ (80029f4 <_printf_i+0x210>)
 800280a:	9104      	str	r1, [sp, #16]
 800280c:	2a58      	cmp	r2, #88	@ 0x58
 800280e:	d100      	bne.n	8002812 <_printf_i+0x2e>
 8002810:	e08e      	b.n	8002930 <_printf_i+0x14c>
 8002812:	0025      	movs	r5, r4
 8002814:	3542      	adds	r5, #66	@ 0x42
 8002816:	702a      	strb	r2, [r5, #0]
 8002818:	e022      	b.n	8002860 <_printf_i+0x7c>
 800281a:	0010      	movs	r0, r2
 800281c:	3863      	subs	r0, #99	@ 0x63
 800281e:	2815      	cmp	r0, #21
 8002820:	d8f7      	bhi.n	8002812 <_printf_i+0x2e>
 8002822:	f7fd fc71 	bl	8000108 <__gnu_thumb1_case_shi>
 8002826:	0016      	.short	0x0016
 8002828:	fff6001f 	.word	0xfff6001f
 800282c:	fff6fff6 	.word	0xfff6fff6
 8002830:	001ffff6 	.word	0x001ffff6
 8002834:	fff6fff6 	.word	0xfff6fff6
 8002838:	fff6fff6 	.word	0xfff6fff6
 800283c:	0036009f 	.word	0x0036009f
 8002840:	fff6007e 	.word	0xfff6007e
 8002844:	00b0fff6 	.word	0x00b0fff6
 8002848:	0036fff6 	.word	0x0036fff6
 800284c:	fff6fff6 	.word	0xfff6fff6
 8002850:	0082      	.short	0x0082
 8002852:	0025      	movs	r5, r4
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	3542      	adds	r5, #66	@ 0x42
 8002858:	1d11      	adds	r1, r2, #4
 800285a:	6019      	str	r1, [r3, #0]
 800285c:	6813      	ldr	r3, [r2, #0]
 800285e:	702b      	strb	r3, [r5, #0]
 8002860:	2301      	movs	r3, #1
 8002862:	e09e      	b.n	80029a2 <_printf_i+0x1be>
 8002864:	6818      	ldr	r0, [r3, #0]
 8002866:	6809      	ldr	r1, [r1, #0]
 8002868:	1d02      	adds	r2, r0, #4
 800286a:	060d      	lsls	r5, r1, #24
 800286c:	d50b      	bpl.n	8002886 <_printf_i+0xa2>
 800286e:	6806      	ldr	r6, [r0, #0]
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	2e00      	cmp	r6, #0
 8002874:	da03      	bge.n	800287e <_printf_i+0x9a>
 8002876:	232d      	movs	r3, #45	@ 0x2d
 8002878:	9a03      	ldr	r2, [sp, #12]
 800287a:	4276      	negs	r6, r6
 800287c:	7013      	strb	r3, [r2, #0]
 800287e:	4b5d      	ldr	r3, [pc, #372]	@ (80029f4 <_printf_i+0x210>)
 8002880:	270a      	movs	r7, #10
 8002882:	9304      	str	r3, [sp, #16]
 8002884:	e018      	b.n	80028b8 <_printf_i+0xd4>
 8002886:	6806      	ldr	r6, [r0, #0]
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	0649      	lsls	r1, r1, #25
 800288c:	d5f1      	bpl.n	8002872 <_printf_i+0x8e>
 800288e:	b236      	sxth	r6, r6
 8002890:	e7ef      	b.n	8002872 <_printf_i+0x8e>
 8002892:	6808      	ldr	r0, [r1, #0]
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	c940      	ldmia	r1!, {r6}
 8002898:	0605      	lsls	r5, r0, #24
 800289a:	d402      	bmi.n	80028a2 <_printf_i+0xbe>
 800289c:	0640      	lsls	r0, r0, #25
 800289e:	d500      	bpl.n	80028a2 <_printf_i+0xbe>
 80028a0:	b2b6      	uxth	r6, r6
 80028a2:	6019      	str	r1, [r3, #0]
 80028a4:	4b53      	ldr	r3, [pc, #332]	@ (80029f4 <_printf_i+0x210>)
 80028a6:	270a      	movs	r7, #10
 80028a8:	9304      	str	r3, [sp, #16]
 80028aa:	2a6f      	cmp	r2, #111	@ 0x6f
 80028ac:	d100      	bne.n	80028b0 <_printf_i+0xcc>
 80028ae:	3f02      	subs	r7, #2
 80028b0:	0023      	movs	r3, r4
 80028b2:	2200      	movs	r2, #0
 80028b4:	3343      	adds	r3, #67	@ 0x43
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	6863      	ldr	r3, [r4, #4]
 80028ba:	60a3      	str	r3, [r4, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	db06      	blt.n	80028ce <_printf_i+0xea>
 80028c0:	2104      	movs	r1, #4
 80028c2:	6822      	ldr	r2, [r4, #0]
 80028c4:	9d03      	ldr	r5, [sp, #12]
 80028c6:	438a      	bics	r2, r1
 80028c8:	6022      	str	r2, [r4, #0]
 80028ca:	4333      	orrs	r3, r6
 80028cc:	d00c      	beq.n	80028e8 <_printf_i+0x104>
 80028ce:	9d03      	ldr	r5, [sp, #12]
 80028d0:	0030      	movs	r0, r6
 80028d2:	0039      	movs	r1, r7
 80028d4:	f7fd fca8 	bl	8000228 <__aeabi_uidivmod>
 80028d8:	9b04      	ldr	r3, [sp, #16]
 80028da:	3d01      	subs	r5, #1
 80028dc:	5c5b      	ldrb	r3, [r3, r1]
 80028de:	702b      	strb	r3, [r5, #0]
 80028e0:	0033      	movs	r3, r6
 80028e2:	0006      	movs	r6, r0
 80028e4:	429f      	cmp	r7, r3
 80028e6:	d9f3      	bls.n	80028d0 <_printf_i+0xec>
 80028e8:	2f08      	cmp	r7, #8
 80028ea:	d109      	bne.n	8002900 <_printf_i+0x11c>
 80028ec:	6823      	ldr	r3, [r4, #0]
 80028ee:	07db      	lsls	r3, r3, #31
 80028f0:	d506      	bpl.n	8002900 <_printf_i+0x11c>
 80028f2:	6862      	ldr	r2, [r4, #4]
 80028f4:	6923      	ldr	r3, [r4, #16]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	dc02      	bgt.n	8002900 <_printf_i+0x11c>
 80028fa:	2330      	movs	r3, #48	@ 0x30
 80028fc:	3d01      	subs	r5, #1
 80028fe:	702b      	strb	r3, [r5, #0]
 8002900:	9b03      	ldr	r3, [sp, #12]
 8002902:	1b5b      	subs	r3, r3, r5
 8002904:	6123      	str	r3, [r4, #16]
 8002906:	9b07      	ldr	r3, [sp, #28]
 8002908:	0021      	movs	r1, r4
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	9805      	ldr	r0, [sp, #20]
 800290e:	9b06      	ldr	r3, [sp, #24]
 8002910:	aa09      	add	r2, sp, #36	@ 0x24
 8002912:	f7ff fef7 	bl	8002704 <_printf_common>
 8002916:	3001      	adds	r0, #1
 8002918:	d148      	bne.n	80029ac <_printf_i+0x1c8>
 800291a:	2001      	movs	r0, #1
 800291c:	4240      	negs	r0, r0
 800291e:	b00b      	add	sp, #44	@ 0x2c
 8002920:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002922:	2220      	movs	r2, #32
 8002924:	6809      	ldr	r1, [r1, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	6022      	str	r2, [r4, #0]
 800292a:	2278      	movs	r2, #120	@ 0x78
 800292c:	4932      	ldr	r1, [pc, #200]	@ (80029f8 <_printf_i+0x214>)
 800292e:	9104      	str	r1, [sp, #16]
 8002930:	0021      	movs	r1, r4
 8002932:	3145      	adds	r1, #69	@ 0x45
 8002934:	700a      	strb	r2, [r1, #0]
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	6822      	ldr	r2, [r4, #0]
 800293a:	c940      	ldmia	r1!, {r6}
 800293c:	0610      	lsls	r0, r2, #24
 800293e:	d402      	bmi.n	8002946 <_printf_i+0x162>
 8002940:	0650      	lsls	r0, r2, #25
 8002942:	d500      	bpl.n	8002946 <_printf_i+0x162>
 8002944:	b2b6      	uxth	r6, r6
 8002946:	6019      	str	r1, [r3, #0]
 8002948:	07d3      	lsls	r3, r2, #31
 800294a:	d502      	bpl.n	8002952 <_printf_i+0x16e>
 800294c:	2320      	movs	r3, #32
 800294e:	4313      	orrs	r3, r2
 8002950:	6023      	str	r3, [r4, #0]
 8002952:	2e00      	cmp	r6, #0
 8002954:	d001      	beq.n	800295a <_printf_i+0x176>
 8002956:	2710      	movs	r7, #16
 8002958:	e7aa      	b.n	80028b0 <_printf_i+0xcc>
 800295a:	2220      	movs	r2, #32
 800295c:	6823      	ldr	r3, [r4, #0]
 800295e:	4393      	bics	r3, r2
 8002960:	6023      	str	r3, [r4, #0]
 8002962:	e7f8      	b.n	8002956 <_printf_i+0x172>
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	680d      	ldr	r5, [r1, #0]
 8002968:	1d10      	adds	r0, r2, #4
 800296a:	6949      	ldr	r1, [r1, #20]
 800296c:	6018      	str	r0, [r3, #0]
 800296e:	6813      	ldr	r3, [r2, #0]
 8002970:	062e      	lsls	r6, r5, #24
 8002972:	d501      	bpl.n	8002978 <_printf_i+0x194>
 8002974:	6019      	str	r1, [r3, #0]
 8002976:	e002      	b.n	800297e <_printf_i+0x19a>
 8002978:	066d      	lsls	r5, r5, #25
 800297a:	d5fb      	bpl.n	8002974 <_printf_i+0x190>
 800297c:	8019      	strh	r1, [r3, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	9d03      	ldr	r5, [sp, #12]
 8002982:	6123      	str	r3, [r4, #16]
 8002984:	e7bf      	b.n	8002906 <_printf_i+0x122>
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	1d11      	adds	r1, r2, #4
 800298a:	6019      	str	r1, [r3, #0]
 800298c:	6815      	ldr	r5, [r2, #0]
 800298e:	2100      	movs	r1, #0
 8002990:	0028      	movs	r0, r5
 8002992:	6862      	ldr	r2, [r4, #4]
 8002994:	f000 f996 	bl	8002cc4 <memchr>
 8002998:	2800      	cmp	r0, #0
 800299a:	d001      	beq.n	80029a0 <_printf_i+0x1bc>
 800299c:	1b40      	subs	r0, r0, r5
 800299e:	6060      	str	r0, [r4, #4]
 80029a0:	6863      	ldr	r3, [r4, #4]
 80029a2:	6123      	str	r3, [r4, #16]
 80029a4:	2300      	movs	r3, #0
 80029a6:	9a03      	ldr	r2, [sp, #12]
 80029a8:	7013      	strb	r3, [r2, #0]
 80029aa:	e7ac      	b.n	8002906 <_printf_i+0x122>
 80029ac:	002a      	movs	r2, r5
 80029ae:	6923      	ldr	r3, [r4, #16]
 80029b0:	9906      	ldr	r1, [sp, #24]
 80029b2:	9805      	ldr	r0, [sp, #20]
 80029b4:	9d07      	ldr	r5, [sp, #28]
 80029b6:	47a8      	blx	r5
 80029b8:	3001      	adds	r0, #1
 80029ba:	d0ae      	beq.n	800291a <_printf_i+0x136>
 80029bc:	6823      	ldr	r3, [r4, #0]
 80029be:	079b      	lsls	r3, r3, #30
 80029c0:	d415      	bmi.n	80029ee <_printf_i+0x20a>
 80029c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029c4:	68e0      	ldr	r0, [r4, #12]
 80029c6:	4298      	cmp	r0, r3
 80029c8:	daa9      	bge.n	800291e <_printf_i+0x13a>
 80029ca:	0018      	movs	r0, r3
 80029cc:	e7a7      	b.n	800291e <_printf_i+0x13a>
 80029ce:	0022      	movs	r2, r4
 80029d0:	2301      	movs	r3, #1
 80029d2:	9906      	ldr	r1, [sp, #24]
 80029d4:	9805      	ldr	r0, [sp, #20]
 80029d6:	9e07      	ldr	r6, [sp, #28]
 80029d8:	3219      	adds	r2, #25
 80029da:	47b0      	blx	r6
 80029dc:	3001      	adds	r0, #1
 80029de:	d09c      	beq.n	800291a <_printf_i+0x136>
 80029e0:	3501      	adds	r5, #1
 80029e2:	68e3      	ldr	r3, [r4, #12]
 80029e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029e6:	1a9b      	subs	r3, r3, r2
 80029e8:	42ab      	cmp	r3, r5
 80029ea:	dcf0      	bgt.n	80029ce <_printf_i+0x1ea>
 80029ec:	e7e9      	b.n	80029c2 <_printf_i+0x1de>
 80029ee:	2500      	movs	r5, #0
 80029f0:	e7f7      	b.n	80029e2 <_printf_i+0x1fe>
 80029f2:	46c0      	nop			@ (mov r8, r8)
 80029f4:	08002e99 	.word	0x08002e99
 80029f8:	08002eaa 	.word	0x08002eaa

080029fc <__sflush_r>:
 80029fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029fe:	220c      	movs	r2, #12
 8002a00:	5e8b      	ldrsh	r3, [r1, r2]
 8002a02:	0005      	movs	r5, r0
 8002a04:	000c      	movs	r4, r1
 8002a06:	071a      	lsls	r2, r3, #28
 8002a08:	d456      	bmi.n	8002ab8 <__sflush_r+0xbc>
 8002a0a:	684a      	ldr	r2, [r1, #4]
 8002a0c:	2a00      	cmp	r2, #0
 8002a0e:	dc02      	bgt.n	8002a16 <__sflush_r+0x1a>
 8002a10:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8002a12:	2a00      	cmp	r2, #0
 8002a14:	dd4e      	ble.n	8002ab4 <__sflush_r+0xb8>
 8002a16:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002a18:	2f00      	cmp	r7, #0
 8002a1a:	d04b      	beq.n	8002ab4 <__sflush_r+0xb8>
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2080      	movs	r0, #128	@ 0x80
 8002a20:	682e      	ldr	r6, [r5, #0]
 8002a22:	602a      	str	r2, [r5, #0]
 8002a24:	001a      	movs	r2, r3
 8002a26:	0140      	lsls	r0, r0, #5
 8002a28:	6a21      	ldr	r1, [r4, #32]
 8002a2a:	4002      	ands	r2, r0
 8002a2c:	4203      	tst	r3, r0
 8002a2e:	d033      	beq.n	8002a98 <__sflush_r+0x9c>
 8002a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002a32:	89a3      	ldrh	r3, [r4, #12]
 8002a34:	075b      	lsls	r3, r3, #29
 8002a36:	d506      	bpl.n	8002a46 <__sflush_r+0x4a>
 8002a38:	6863      	ldr	r3, [r4, #4]
 8002a3a:	1ad2      	subs	r2, r2, r3
 8002a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <__sflush_r+0x4a>
 8002a42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002a44:	1ad2      	subs	r2, r2, r3
 8002a46:	2300      	movs	r3, #0
 8002a48:	0028      	movs	r0, r5
 8002a4a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8002a4c:	6a21      	ldr	r1, [r4, #32]
 8002a4e:	47b8      	blx	r7
 8002a50:	89a2      	ldrh	r2, [r4, #12]
 8002a52:	1c43      	adds	r3, r0, #1
 8002a54:	d106      	bne.n	8002a64 <__sflush_r+0x68>
 8002a56:	6829      	ldr	r1, [r5, #0]
 8002a58:	291d      	cmp	r1, #29
 8002a5a:	d846      	bhi.n	8002aea <__sflush_r+0xee>
 8002a5c:	4b29      	ldr	r3, [pc, #164]	@ (8002b04 <__sflush_r+0x108>)
 8002a5e:	40cb      	lsrs	r3, r1
 8002a60:	07db      	lsls	r3, r3, #31
 8002a62:	d542      	bpl.n	8002aea <__sflush_r+0xee>
 8002a64:	2300      	movs	r3, #0
 8002a66:	6063      	str	r3, [r4, #4]
 8002a68:	6923      	ldr	r3, [r4, #16]
 8002a6a:	6023      	str	r3, [r4, #0]
 8002a6c:	04d2      	lsls	r2, r2, #19
 8002a6e:	d505      	bpl.n	8002a7c <__sflush_r+0x80>
 8002a70:	1c43      	adds	r3, r0, #1
 8002a72:	d102      	bne.n	8002a7a <__sflush_r+0x7e>
 8002a74:	682b      	ldr	r3, [r5, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d100      	bne.n	8002a7c <__sflush_r+0x80>
 8002a7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8002a7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002a7e:	602e      	str	r6, [r5, #0]
 8002a80:	2900      	cmp	r1, #0
 8002a82:	d017      	beq.n	8002ab4 <__sflush_r+0xb8>
 8002a84:	0023      	movs	r3, r4
 8002a86:	3344      	adds	r3, #68	@ 0x44
 8002a88:	4299      	cmp	r1, r3
 8002a8a:	d002      	beq.n	8002a92 <__sflush_r+0x96>
 8002a8c:	0028      	movs	r0, r5
 8002a8e:	f7ff fbf9 	bl	8002284 <_free_r>
 8002a92:	2300      	movs	r3, #0
 8002a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8002a96:	e00d      	b.n	8002ab4 <__sflush_r+0xb8>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	0028      	movs	r0, r5
 8002a9c:	47b8      	blx	r7
 8002a9e:	0002      	movs	r2, r0
 8002aa0:	1c43      	adds	r3, r0, #1
 8002aa2:	d1c6      	bne.n	8002a32 <__sflush_r+0x36>
 8002aa4:	682b      	ldr	r3, [r5, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d0c3      	beq.n	8002a32 <__sflush_r+0x36>
 8002aaa:	2b1d      	cmp	r3, #29
 8002aac:	d001      	beq.n	8002ab2 <__sflush_r+0xb6>
 8002aae:	2b16      	cmp	r3, #22
 8002ab0:	d11a      	bne.n	8002ae8 <__sflush_r+0xec>
 8002ab2:	602e      	str	r6, [r5, #0]
 8002ab4:	2000      	movs	r0, #0
 8002ab6:	e01e      	b.n	8002af6 <__sflush_r+0xfa>
 8002ab8:	690e      	ldr	r6, [r1, #16]
 8002aba:	2e00      	cmp	r6, #0
 8002abc:	d0fa      	beq.n	8002ab4 <__sflush_r+0xb8>
 8002abe:	680f      	ldr	r7, [r1, #0]
 8002ac0:	600e      	str	r6, [r1, #0]
 8002ac2:	1bba      	subs	r2, r7, r6
 8002ac4:	9201      	str	r2, [sp, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	079b      	lsls	r3, r3, #30
 8002aca:	d100      	bne.n	8002ace <__sflush_r+0xd2>
 8002acc:	694a      	ldr	r2, [r1, #20]
 8002ace:	60a2      	str	r2, [r4, #8]
 8002ad0:	9b01      	ldr	r3, [sp, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	ddee      	ble.n	8002ab4 <__sflush_r+0xb8>
 8002ad6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002ad8:	0032      	movs	r2, r6
 8002ada:	001f      	movs	r7, r3
 8002adc:	0028      	movs	r0, r5
 8002ade:	9b01      	ldr	r3, [sp, #4]
 8002ae0:	6a21      	ldr	r1, [r4, #32]
 8002ae2:	47b8      	blx	r7
 8002ae4:	2800      	cmp	r0, #0
 8002ae6:	dc07      	bgt.n	8002af8 <__sflush_r+0xfc>
 8002ae8:	89a2      	ldrh	r2, [r4, #12]
 8002aea:	2340      	movs	r3, #64	@ 0x40
 8002aec:	2001      	movs	r0, #1
 8002aee:	4313      	orrs	r3, r2
 8002af0:	b21b      	sxth	r3, r3
 8002af2:	81a3      	strh	r3, [r4, #12]
 8002af4:	4240      	negs	r0, r0
 8002af6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002af8:	9b01      	ldr	r3, [sp, #4]
 8002afa:	1836      	adds	r6, r6, r0
 8002afc:	1a1b      	subs	r3, r3, r0
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	e7e6      	b.n	8002ad0 <__sflush_r+0xd4>
 8002b02:	46c0      	nop			@ (mov r8, r8)
 8002b04:	20400001 	.word	0x20400001

08002b08 <_fflush_r>:
 8002b08:	690b      	ldr	r3, [r1, #16]
 8002b0a:	b570      	push	{r4, r5, r6, lr}
 8002b0c:	0005      	movs	r5, r0
 8002b0e:	000c      	movs	r4, r1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d102      	bne.n	8002b1a <_fflush_r+0x12>
 8002b14:	2500      	movs	r5, #0
 8002b16:	0028      	movs	r0, r5
 8002b18:	bd70      	pop	{r4, r5, r6, pc}
 8002b1a:	2800      	cmp	r0, #0
 8002b1c:	d004      	beq.n	8002b28 <_fflush_r+0x20>
 8002b1e:	6a03      	ldr	r3, [r0, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <_fflush_r+0x20>
 8002b24:	f7ff fa9a 	bl	800205c <__sinit>
 8002b28:	220c      	movs	r2, #12
 8002b2a:	5ea3      	ldrsh	r3, [r4, r2]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d0f1      	beq.n	8002b14 <_fflush_r+0xc>
 8002b30:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002b32:	07d2      	lsls	r2, r2, #31
 8002b34:	d404      	bmi.n	8002b40 <_fflush_r+0x38>
 8002b36:	059b      	lsls	r3, r3, #22
 8002b38:	d402      	bmi.n	8002b40 <_fflush_r+0x38>
 8002b3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b3c:	f7ff fb9f 	bl	800227e <__retarget_lock_acquire_recursive>
 8002b40:	0028      	movs	r0, r5
 8002b42:	0021      	movs	r1, r4
 8002b44:	f7ff ff5a 	bl	80029fc <__sflush_r>
 8002b48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002b4a:	0005      	movs	r5, r0
 8002b4c:	07db      	lsls	r3, r3, #31
 8002b4e:	d4e2      	bmi.n	8002b16 <_fflush_r+0xe>
 8002b50:	89a3      	ldrh	r3, [r4, #12]
 8002b52:	059b      	lsls	r3, r3, #22
 8002b54:	d4df      	bmi.n	8002b16 <_fflush_r+0xe>
 8002b56:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002b58:	f7ff fb92 	bl	8002280 <__retarget_lock_release_recursive>
 8002b5c:	e7db      	b.n	8002b16 <_fflush_r+0xe>

08002b5e <__swbuf_r>:
 8002b5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b60:	0006      	movs	r6, r0
 8002b62:	000d      	movs	r5, r1
 8002b64:	0014      	movs	r4, r2
 8002b66:	2800      	cmp	r0, #0
 8002b68:	d004      	beq.n	8002b74 <__swbuf_r+0x16>
 8002b6a:	6a03      	ldr	r3, [r0, #32]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <__swbuf_r+0x16>
 8002b70:	f7ff fa74 	bl	800205c <__sinit>
 8002b74:	69a3      	ldr	r3, [r4, #24]
 8002b76:	60a3      	str	r3, [r4, #8]
 8002b78:	89a3      	ldrh	r3, [r4, #12]
 8002b7a:	071b      	lsls	r3, r3, #28
 8002b7c:	d502      	bpl.n	8002b84 <__swbuf_r+0x26>
 8002b7e:	6923      	ldr	r3, [r4, #16]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <__swbuf_r+0x3a>
 8002b84:	0021      	movs	r1, r4
 8002b86:	0030      	movs	r0, r6
 8002b88:	f000 f82c 	bl	8002be4 <__swsetup_r>
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d003      	beq.n	8002b98 <__swbuf_r+0x3a>
 8002b90:	2501      	movs	r5, #1
 8002b92:	426d      	negs	r5, r5
 8002b94:	0028      	movs	r0, r5
 8002b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b98:	6923      	ldr	r3, [r4, #16]
 8002b9a:	6820      	ldr	r0, [r4, #0]
 8002b9c:	b2ef      	uxtb	r7, r5
 8002b9e:	1ac0      	subs	r0, r0, r3
 8002ba0:	6963      	ldr	r3, [r4, #20]
 8002ba2:	b2ed      	uxtb	r5, r5
 8002ba4:	4283      	cmp	r3, r0
 8002ba6:	dc05      	bgt.n	8002bb4 <__swbuf_r+0x56>
 8002ba8:	0021      	movs	r1, r4
 8002baa:	0030      	movs	r0, r6
 8002bac:	f7ff ffac 	bl	8002b08 <_fflush_r>
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d1ed      	bne.n	8002b90 <__swbuf_r+0x32>
 8002bb4:	68a3      	ldr	r3, [r4, #8]
 8002bb6:	3001      	adds	r0, #1
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60a3      	str	r3, [r4, #8]
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	6022      	str	r2, [r4, #0]
 8002bc2:	701f      	strb	r7, [r3, #0]
 8002bc4:	6963      	ldr	r3, [r4, #20]
 8002bc6:	4283      	cmp	r3, r0
 8002bc8:	d004      	beq.n	8002bd4 <__swbuf_r+0x76>
 8002bca:	89a3      	ldrh	r3, [r4, #12]
 8002bcc:	07db      	lsls	r3, r3, #31
 8002bce:	d5e1      	bpl.n	8002b94 <__swbuf_r+0x36>
 8002bd0:	2d0a      	cmp	r5, #10
 8002bd2:	d1df      	bne.n	8002b94 <__swbuf_r+0x36>
 8002bd4:	0021      	movs	r1, r4
 8002bd6:	0030      	movs	r0, r6
 8002bd8:	f7ff ff96 	bl	8002b08 <_fflush_r>
 8002bdc:	2800      	cmp	r0, #0
 8002bde:	d0d9      	beq.n	8002b94 <__swbuf_r+0x36>
 8002be0:	e7d6      	b.n	8002b90 <__swbuf_r+0x32>
	...

08002be4 <__swsetup_r>:
 8002be4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c9c <__swsetup_r+0xb8>)
 8002be6:	b570      	push	{r4, r5, r6, lr}
 8002be8:	0005      	movs	r5, r0
 8002bea:	6818      	ldr	r0, [r3, #0]
 8002bec:	000c      	movs	r4, r1
 8002bee:	2800      	cmp	r0, #0
 8002bf0:	d004      	beq.n	8002bfc <__swsetup_r+0x18>
 8002bf2:	6a03      	ldr	r3, [r0, #32]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <__swsetup_r+0x18>
 8002bf8:	f7ff fa30 	bl	800205c <__sinit>
 8002bfc:	220c      	movs	r2, #12
 8002bfe:	5ea3      	ldrsh	r3, [r4, r2]
 8002c00:	071a      	lsls	r2, r3, #28
 8002c02:	d423      	bmi.n	8002c4c <__swsetup_r+0x68>
 8002c04:	06da      	lsls	r2, r3, #27
 8002c06:	d407      	bmi.n	8002c18 <__swsetup_r+0x34>
 8002c08:	2209      	movs	r2, #9
 8002c0a:	602a      	str	r2, [r5, #0]
 8002c0c:	2240      	movs	r2, #64	@ 0x40
 8002c0e:	2001      	movs	r0, #1
 8002c10:	4313      	orrs	r3, r2
 8002c12:	81a3      	strh	r3, [r4, #12]
 8002c14:	4240      	negs	r0, r0
 8002c16:	e03a      	b.n	8002c8e <__swsetup_r+0xaa>
 8002c18:	075b      	lsls	r3, r3, #29
 8002c1a:	d513      	bpl.n	8002c44 <__swsetup_r+0x60>
 8002c1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002c1e:	2900      	cmp	r1, #0
 8002c20:	d008      	beq.n	8002c34 <__swsetup_r+0x50>
 8002c22:	0023      	movs	r3, r4
 8002c24:	3344      	adds	r3, #68	@ 0x44
 8002c26:	4299      	cmp	r1, r3
 8002c28:	d002      	beq.n	8002c30 <__swsetup_r+0x4c>
 8002c2a:	0028      	movs	r0, r5
 8002c2c:	f7ff fb2a 	bl	8002284 <_free_r>
 8002c30:	2300      	movs	r3, #0
 8002c32:	6363      	str	r3, [r4, #52]	@ 0x34
 8002c34:	2224      	movs	r2, #36	@ 0x24
 8002c36:	89a3      	ldrh	r3, [r4, #12]
 8002c38:	4393      	bics	r3, r2
 8002c3a:	81a3      	strh	r3, [r4, #12]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	6063      	str	r3, [r4, #4]
 8002c40:	6923      	ldr	r3, [r4, #16]
 8002c42:	6023      	str	r3, [r4, #0]
 8002c44:	2308      	movs	r3, #8
 8002c46:	89a2      	ldrh	r2, [r4, #12]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	81a3      	strh	r3, [r4, #12]
 8002c4c:	6923      	ldr	r3, [r4, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10b      	bne.n	8002c6a <__swsetup_r+0x86>
 8002c52:	21a0      	movs	r1, #160	@ 0xa0
 8002c54:	2280      	movs	r2, #128	@ 0x80
 8002c56:	89a3      	ldrh	r3, [r4, #12]
 8002c58:	0089      	lsls	r1, r1, #2
 8002c5a:	0092      	lsls	r2, r2, #2
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d003      	beq.n	8002c6a <__swsetup_r+0x86>
 8002c62:	0021      	movs	r1, r4
 8002c64:	0028      	movs	r0, r5
 8002c66:	f000 f863 	bl	8002d30 <__smakebuf_r>
 8002c6a:	220c      	movs	r2, #12
 8002c6c:	5ea3      	ldrsh	r3, [r4, r2]
 8002c6e:	2101      	movs	r1, #1
 8002c70:	001a      	movs	r2, r3
 8002c72:	400a      	ands	r2, r1
 8002c74:	420b      	tst	r3, r1
 8002c76:	d00b      	beq.n	8002c90 <__swsetup_r+0xac>
 8002c78:	2200      	movs	r2, #0
 8002c7a:	60a2      	str	r2, [r4, #8]
 8002c7c:	6962      	ldr	r2, [r4, #20]
 8002c7e:	4252      	negs	r2, r2
 8002c80:	61a2      	str	r2, [r4, #24]
 8002c82:	2000      	movs	r0, #0
 8002c84:	6922      	ldr	r2, [r4, #16]
 8002c86:	4282      	cmp	r2, r0
 8002c88:	d101      	bne.n	8002c8e <__swsetup_r+0xaa>
 8002c8a:	061a      	lsls	r2, r3, #24
 8002c8c:	d4be      	bmi.n	8002c0c <__swsetup_r+0x28>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	0799      	lsls	r1, r3, #30
 8002c92:	d400      	bmi.n	8002c96 <__swsetup_r+0xb2>
 8002c94:	6962      	ldr	r2, [r4, #20]
 8002c96:	60a2      	str	r2, [r4, #8]
 8002c98:	e7f3      	b.n	8002c82 <__swsetup_r+0x9e>
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	2000001c 	.word	0x2000001c

08002ca0 <_sbrk_r>:
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	b570      	push	{r4, r5, r6, lr}
 8002ca4:	4d06      	ldr	r5, [pc, #24]	@ (8002cc0 <_sbrk_r+0x20>)
 8002ca6:	0004      	movs	r4, r0
 8002ca8:	0008      	movs	r0, r1
 8002caa:	602b      	str	r3, [r5, #0]
 8002cac:	f7fd fd18 	bl	80006e0 <_sbrk>
 8002cb0:	1c43      	adds	r3, r0, #1
 8002cb2:	d103      	bne.n	8002cbc <_sbrk_r+0x1c>
 8002cb4:	682b      	ldr	r3, [r5, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d000      	beq.n	8002cbc <_sbrk_r+0x1c>
 8002cba:	6023      	str	r3, [r4, #0]
 8002cbc:	bd70      	pop	{r4, r5, r6, pc}
 8002cbe:	46c0      	nop			@ (mov r8, r8)
 8002cc0:	2000024c 	.word	0x2000024c

08002cc4 <memchr>:
 8002cc4:	b2c9      	uxtb	r1, r1
 8002cc6:	1882      	adds	r2, r0, r2
 8002cc8:	4290      	cmp	r0, r2
 8002cca:	d101      	bne.n	8002cd0 <memchr+0xc>
 8002ccc:	2000      	movs	r0, #0
 8002cce:	4770      	bx	lr
 8002cd0:	7803      	ldrb	r3, [r0, #0]
 8002cd2:	428b      	cmp	r3, r1
 8002cd4:	d0fb      	beq.n	8002cce <memchr+0xa>
 8002cd6:	3001      	adds	r0, #1
 8002cd8:	e7f6      	b.n	8002cc8 <memchr+0x4>
	...

08002cdc <__swhatbuf_r>:
 8002cdc:	b570      	push	{r4, r5, r6, lr}
 8002cde:	000e      	movs	r6, r1
 8002ce0:	001d      	movs	r5, r3
 8002ce2:	230e      	movs	r3, #14
 8002ce4:	5ec9      	ldrsh	r1, [r1, r3]
 8002ce6:	0014      	movs	r4, r2
 8002ce8:	b096      	sub	sp, #88	@ 0x58
 8002cea:	2900      	cmp	r1, #0
 8002cec:	da0c      	bge.n	8002d08 <__swhatbuf_r+0x2c>
 8002cee:	89b2      	ldrh	r2, [r6, #12]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	0011      	movs	r1, r2
 8002cf4:	4019      	ands	r1, r3
 8002cf6:	421a      	tst	r2, r3
 8002cf8:	d114      	bne.n	8002d24 <__swhatbuf_r+0x48>
 8002cfa:	2380      	movs	r3, #128	@ 0x80
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	2000      	movs	r0, #0
 8002d00:	6029      	str	r1, [r5, #0]
 8002d02:	6023      	str	r3, [r4, #0]
 8002d04:	b016      	add	sp, #88	@ 0x58
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	466a      	mov	r2, sp
 8002d0a:	f000 f853 	bl	8002db4 <_fstat_r>
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	dbed      	blt.n	8002cee <__swhatbuf_r+0x12>
 8002d12:	23f0      	movs	r3, #240	@ 0xf0
 8002d14:	9901      	ldr	r1, [sp, #4]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	4019      	ands	r1, r3
 8002d1a:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <__swhatbuf_r+0x50>)
 8002d1c:	18c9      	adds	r1, r1, r3
 8002d1e:	424b      	negs	r3, r1
 8002d20:	4159      	adcs	r1, r3
 8002d22:	e7ea      	b.n	8002cfa <__swhatbuf_r+0x1e>
 8002d24:	2100      	movs	r1, #0
 8002d26:	2340      	movs	r3, #64	@ 0x40
 8002d28:	e7e9      	b.n	8002cfe <__swhatbuf_r+0x22>
 8002d2a:	46c0      	nop			@ (mov r8, r8)
 8002d2c:	ffffe000 	.word	0xffffe000

08002d30 <__smakebuf_r>:
 8002d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d32:	2602      	movs	r6, #2
 8002d34:	898b      	ldrh	r3, [r1, #12]
 8002d36:	0005      	movs	r5, r0
 8002d38:	000c      	movs	r4, r1
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	4233      	tst	r3, r6
 8002d3e:	d007      	beq.n	8002d50 <__smakebuf_r+0x20>
 8002d40:	0023      	movs	r3, r4
 8002d42:	3347      	adds	r3, #71	@ 0x47
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	6123      	str	r3, [r4, #16]
 8002d48:	2301      	movs	r3, #1
 8002d4a:	6163      	str	r3, [r4, #20]
 8002d4c:	b005      	add	sp, #20
 8002d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d50:	ab03      	add	r3, sp, #12
 8002d52:	aa02      	add	r2, sp, #8
 8002d54:	f7ff ffc2 	bl	8002cdc <__swhatbuf_r>
 8002d58:	9f02      	ldr	r7, [sp, #8]
 8002d5a:	9001      	str	r0, [sp, #4]
 8002d5c:	0039      	movs	r1, r7
 8002d5e:	0028      	movs	r0, r5
 8002d60:	f7ff fafc 	bl	800235c <_malloc_r>
 8002d64:	2800      	cmp	r0, #0
 8002d66:	d108      	bne.n	8002d7a <__smakebuf_r+0x4a>
 8002d68:	220c      	movs	r2, #12
 8002d6a:	5ea3      	ldrsh	r3, [r4, r2]
 8002d6c:	059a      	lsls	r2, r3, #22
 8002d6e:	d4ed      	bmi.n	8002d4c <__smakebuf_r+0x1c>
 8002d70:	2203      	movs	r2, #3
 8002d72:	4393      	bics	r3, r2
 8002d74:	431e      	orrs	r6, r3
 8002d76:	81a6      	strh	r6, [r4, #12]
 8002d78:	e7e2      	b.n	8002d40 <__smakebuf_r+0x10>
 8002d7a:	2380      	movs	r3, #128	@ 0x80
 8002d7c:	89a2      	ldrh	r2, [r4, #12]
 8002d7e:	6020      	str	r0, [r4, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	81a3      	strh	r3, [r4, #12]
 8002d84:	9b03      	ldr	r3, [sp, #12]
 8002d86:	6120      	str	r0, [r4, #16]
 8002d88:	6167      	str	r7, [r4, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <__smakebuf_r+0x78>
 8002d8e:	0028      	movs	r0, r5
 8002d90:	230e      	movs	r3, #14
 8002d92:	5ee1      	ldrsh	r1, [r4, r3]
 8002d94:	f000 f820 	bl	8002dd8 <_isatty_r>
 8002d98:	2800      	cmp	r0, #0
 8002d9a:	d005      	beq.n	8002da8 <__smakebuf_r+0x78>
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	89a2      	ldrh	r2, [r4, #12]
 8002da0:	439a      	bics	r2, r3
 8002da2:	3b02      	subs	r3, #2
 8002da4:	4313      	orrs	r3, r2
 8002da6:	81a3      	strh	r3, [r4, #12]
 8002da8:	89a3      	ldrh	r3, [r4, #12]
 8002daa:	9a01      	ldr	r2, [sp, #4]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	81a3      	strh	r3, [r4, #12]
 8002db0:	e7cc      	b.n	8002d4c <__smakebuf_r+0x1c>
	...

08002db4 <_fstat_r>:
 8002db4:	2300      	movs	r3, #0
 8002db6:	b570      	push	{r4, r5, r6, lr}
 8002db8:	4d06      	ldr	r5, [pc, #24]	@ (8002dd4 <_fstat_r+0x20>)
 8002dba:	0004      	movs	r4, r0
 8002dbc:	0008      	movs	r0, r1
 8002dbe:	0011      	movs	r1, r2
 8002dc0:	602b      	str	r3, [r5, #0]
 8002dc2:	f7fd fc6b 	bl	800069c <_fstat>
 8002dc6:	1c43      	adds	r3, r0, #1
 8002dc8:	d103      	bne.n	8002dd2 <_fstat_r+0x1e>
 8002dca:	682b      	ldr	r3, [r5, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d000      	beq.n	8002dd2 <_fstat_r+0x1e>
 8002dd0:	6023      	str	r3, [r4, #0]
 8002dd2:	bd70      	pop	{r4, r5, r6, pc}
 8002dd4:	2000024c 	.word	0x2000024c

08002dd8 <_isatty_r>:
 8002dd8:	2300      	movs	r3, #0
 8002dda:	b570      	push	{r4, r5, r6, lr}
 8002ddc:	4d06      	ldr	r5, [pc, #24]	@ (8002df8 <_isatty_r+0x20>)
 8002dde:	0004      	movs	r4, r0
 8002de0:	0008      	movs	r0, r1
 8002de2:	602b      	str	r3, [r5, #0]
 8002de4:	f7fd fc68 	bl	80006b8 <_isatty>
 8002de8:	1c43      	adds	r3, r0, #1
 8002dea:	d103      	bne.n	8002df4 <_isatty_r+0x1c>
 8002dec:	682b      	ldr	r3, [r5, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d000      	beq.n	8002df4 <_isatty_r+0x1c>
 8002df2:	6023      	str	r3, [r4, #0]
 8002df4:	bd70      	pop	{r4, r5, r6, pc}
 8002df6:	46c0      	nop			@ (mov r8, r8)
 8002df8:	2000024c 	.word	0x2000024c

08002dfc <_init>:
 8002dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dfe:	46c0      	nop			@ (mov r8, r8)
 8002e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e02:	bc08      	pop	{r3}
 8002e04:	469e      	mov	lr, r3
 8002e06:	4770      	bx	lr

08002e08 <_fini>:
 8002e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e0a:	46c0      	nop			@ (mov r8, r8)
 8002e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e0e:	bc08      	pop	{r3}
 8002e10:	469e      	mov	lr, r3
 8002e12:	4770      	bx	lr
