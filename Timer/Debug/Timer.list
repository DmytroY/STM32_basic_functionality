
Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a64  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002b24  08002b24  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002bb4  08002bb4  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002bb4  08002bb4  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002bb4  08002bb4  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bb4  08002bb4  00003bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002bb8  08002bb8  00003bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002bbc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  2000005c  08002c18  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08002c18  00004288  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ab9  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018a8  00000000  00000000  0000cb3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0000e3e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000833  00000000  00000000  0000eea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c3b6  00000000  00000000  0000f6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a90d  00000000  00000000  0001ba89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004b86f  00000000  00000000  00026396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00071c05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b48  00000000  00000000  00071c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00074790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b0c 	.word	0x08002b0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08002b0c 	.word	0x08002b0c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b08e      	sub	sp, #56	@ 0x38
 8000238:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800023a:	f000 fa71 	bl	8000720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023e:	f000 f823 	bl	8000288 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000242:	f000 f8c5 	bl	80003d0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000246:	f000 f893 	bl	8000370 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800024a:	f000 f867 	bl	800031c <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	  // Just let know it is started
	  uart_buffer_length = sprintf(uart_buffer, "Serial started at %d baud rate.\r\n", huart2.Init.BaudRate);
 800024e:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <main+0x48>)
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	490b      	ldr	r1, [pc, #44]	@ (8000280 <main+0x4c>)
 8000254:	003b      	movs	r3, r7
 8000256:	0018      	movs	r0, r3
 8000258:	f001 ffbc 	bl	80021d4 <siprintf>
 800025c:	0003      	movs	r3, r0
 800025e:	637b      	str	r3, [r7, #52]	@ 0x34
	  HAL_UART_Transmit(&huart2, &uart_buffer, uart_buffer_length, 100);
 8000260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000262:	b29a      	uxth	r2, r3
 8000264:	0039      	movs	r1, r7
 8000266:	4805      	ldr	r0, [pc, #20]	@ (800027c <main+0x48>)
 8000268:	2364      	movs	r3, #100	@ 0x64
 800026a:	f001 fc0d 	bl	8001a88 <HAL_UART_Transmit>

	  // Start timer
	  HAL_TIM_Base_Start_IT(&htim16);
 800026e:	4b05      	ldr	r3, [pc, #20]	@ (8000284 <main+0x50>)
 8000270:	0018      	movs	r0, r3
 8000272:	f001 f9d7 	bl	8001624 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	e7fd      	b.n	8000276 <main+0x42>
 800027a:	46c0      	nop			@ (mov r8, r8)
 800027c:	200000b8 	.word	0x200000b8
 8000280:	08002b24 	.word	0x08002b24
 8000284:	20000078 	.word	0x20000078

08000288 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000288:	b590      	push	{r4, r7, lr}
 800028a:	b091      	sub	sp, #68	@ 0x44
 800028c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028e:	2410      	movs	r4, #16
 8000290:	193b      	adds	r3, r7, r4
 8000292:	0018      	movs	r0, r3
 8000294:	2330      	movs	r3, #48	@ 0x30
 8000296:	001a      	movs	r2, r3
 8000298:	2100      	movs	r1, #0
 800029a:	f001 ffbd 	bl	8002218 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029e:	003b      	movs	r3, r7
 80002a0:	0018      	movs	r0, r3
 80002a2:	2310      	movs	r3, #16
 80002a4:	001a      	movs	r2, r3
 80002a6:	2100      	movs	r1, #0
 80002a8:	f001 ffb6 	bl	8002218 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ac:	0021      	movs	r1, r4
 80002ae:	187b      	adds	r3, r7, r1
 80002b0:	2202      	movs	r2, #2
 80002b2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002b4:	187b      	adds	r3, r7, r1
 80002b6:	2201      	movs	r2, #1
 80002b8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2210      	movs	r2, #16
 80002be:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2202      	movs	r2, #2
 80002c4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	22a0      	movs	r2, #160	@ 0xa0
 80002d0:	0392      	lsls	r2, r2, #14
 80002d2:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2200      	movs	r2, #0
 80002d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fd09 	bl	8000cf4 <HAL_RCC_OscConfig>
 80002e2:	1e03      	subs	r3, r0, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002e6:	f000 f8f1 	bl	80004cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	003b      	movs	r3, r7
 80002ec:	2207      	movs	r2, #7
 80002ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f0:	003b      	movs	r3, r7
 80002f2:	2202      	movs	r2, #2
 80002f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f6:	003b      	movs	r3, r7
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002fc:	003b      	movs	r3, r7
 80002fe:	2200      	movs	r2, #0
 8000300:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000302:	003b      	movs	r3, r7
 8000304:	2101      	movs	r1, #1
 8000306:	0018      	movs	r0, r3
 8000308:	f001 f80e 	bl	8001328 <HAL_RCC_ClockConfig>
 800030c:	1e03      	subs	r3, r0, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000310:	f000 f8dc 	bl	80004cc <Error_Handler>
  }
}
 8000314:	46c0      	nop			@ (mov r8, r8)
 8000316:	46bd      	mov	sp, r7
 8000318:	b011      	add	sp, #68	@ 0x44
 800031a:	bd90      	pop	{r4, r7, pc}

0800031c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000320:	4b10      	ldr	r3, [pc, #64]	@ (8000364 <MX_TIM16_Init+0x48>)
 8000322:	4a11      	ldr	r2, [pc, #68]	@ (8000368 <MX_TIM16_Init+0x4c>)
 8000324:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 48000-1;
 8000326:	4b0f      	ldr	r3, [pc, #60]	@ (8000364 <MX_TIM16_Init+0x48>)
 8000328:	4a10      	ldr	r2, [pc, #64]	@ (800036c <MX_TIM16_Init+0x50>)
 800032a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800032c:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <MX_TIM16_Init+0x48>)
 800032e:	2200      	movs	r2, #0
 8000330:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000332:	4b0c      	ldr	r3, [pc, #48]	@ (8000364 <MX_TIM16_Init+0x48>)
 8000334:	22fa      	movs	r2, #250	@ 0xfa
 8000336:	0092      	lsls	r2, r2, #2
 8000338:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800033a:	4b0a      	ldr	r3, [pc, #40]	@ (8000364 <MX_TIM16_Init+0x48>)
 800033c:	2200      	movs	r2, #0
 800033e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <MX_TIM16_Init+0x48>)
 8000342:	2200      	movs	r2, #0
 8000344:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000346:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <MX_TIM16_Init+0x48>)
 8000348:	2200      	movs	r2, #0
 800034a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800034c:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <MX_TIM16_Init+0x48>)
 800034e:	0018      	movs	r0, r3
 8000350:	f001 f93c 	bl	80015cc <HAL_TIM_Base_Init>
 8000354:	1e03      	subs	r3, r0, #0
 8000356:	d001      	beq.n	800035c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000358:	f000 f8b8 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800035c:	46c0      	nop			@ (mov r8, r8)
 800035e:	46bd      	mov	sp, r7
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			@ (mov r8, r8)
 8000364:	20000078 	.word	0x20000078
 8000368:	40014400 	.word	0x40014400
 800036c:	0000bb7f 	.word	0x0000bb7f

08000370 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000374:	4b14      	ldr	r3, [pc, #80]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000376:	4a15      	ldr	r2, [pc, #84]	@ (80003cc <MX_USART2_UART_Init+0x5c>)
 8000378:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800037a:	4b13      	ldr	r3, [pc, #76]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 800037c:	2296      	movs	r2, #150	@ 0x96
 800037e:	0212      	lsls	r2, r2, #8
 8000380:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000382:	4b11      	ldr	r3, [pc, #68]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000384:	2200      	movs	r2, #0
 8000386:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000388:	4b0f      	ldr	r3, [pc, #60]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 800038a:	2200      	movs	r2, #0
 800038c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800038e:	4b0e      	ldr	r3, [pc, #56]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000390:	2200      	movs	r2, #0
 8000392:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000394:	4b0c      	ldr	r3, [pc, #48]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 8000396:	220c      	movs	r2, #12
 8000398:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800039a:	4b0b      	ldr	r3, [pc, #44]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 800039c:	2200      	movs	r2, #0
 800039e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a0:	4b09      	ldr	r3, [pc, #36]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80003a6:	4b08      	ldr	r3, [pc, #32]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80003ac:	4b06      	ldr	r3, [pc, #24]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80003b2:	4b05      	ldr	r3, [pc, #20]	@ (80003c8 <MX_USART2_UART_Init+0x58>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fb13 	bl	80019e0 <HAL_UART_Init>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80003be:	f000 f885 	bl	80004cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80003c2:	46c0      	nop			@ (mov r8, r8)
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	200000b8 	.word	0x200000b8
 80003cc:	40004400 	.word	0x40004400

080003d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d0:	b590      	push	{r4, r7, lr}
 80003d2:	b089      	sub	sp, #36	@ 0x24
 80003d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d6:	240c      	movs	r4, #12
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	0018      	movs	r0, r3
 80003dc:	2314      	movs	r3, #20
 80003de:	001a      	movs	r2, r3
 80003e0:	2100      	movs	r1, #0
 80003e2:	f001 ff19 	bl	8002218 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <MX_GPIO_Init+0xc8>)
 80003e8:	695a      	ldr	r2, [r3, #20]
 80003ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000498 <MX_GPIO_Init+0xc8>)
 80003ec:	2180      	movs	r1, #128	@ 0x80
 80003ee:	0309      	lsls	r1, r1, #12
 80003f0:	430a      	orrs	r2, r1
 80003f2:	615a      	str	r2, [r3, #20]
 80003f4:	4b28      	ldr	r3, [pc, #160]	@ (8000498 <MX_GPIO_Init+0xc8>)
 80003f6:	695a      	ldr	r2, [r3, #20]
 80003f8:	2380      	movs	r3, #128	@ 0x80
 80003fa:	031b      	lsls	r3, r3, #12
 80003fc:	4013      	ands	r3, r2
 80003fe:	60bb      	str	r3, [r7, #8]
 8000400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000402:	4b25      	ldr	r3, [pc, #148]	@ (8000498 <MX_GPIO_Init+0xc8>)
 8000404:	695a      	ldr	r2, [r3, #20]
 8000406:	4b24      	ldr	r3, [pc, #144]	@ (8000498 <MX_GPIO_Init+0xc8>)
 8000408:	2180      	movs	r1, #128	@ 0x80
 800040a:	03c9      	lsls	r1, r1, #15
 800040c:	430a      	orrs	r2, r1
 800040e:	615a      	str	r2, [r3, #20]
 8000410:	4b21      	ldr	r3, [pc, #132]	@ (8000498 <MX_GPIO_Init+0xc8>)
 8000412:	695a      	ldr	r2, [r3, #20]
 8000414:	2380      	movs	r3, #128	@ 0x80
 8000416:	03db      	lsls	r3, r3, #15
 8000418:	4013      	ands	r3, r2
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041e:	4b1e      	ldr	r3, [pc, #120]	@ (8000498 <MX_GPIO_Init+0xc8>)
 8000420:	695a      	ldr	r2, [r3, #20]
 8000422:	4b1d      	ldr	r3, [pc, #116]	@ (8000498 <MX_GPIO_Init+0xc8>)
 8000424:	2180      	movs	r1, #128	@ 0x80
 8000426:	0289      	lsls	r1, r1, #10
 8000428:	430a      	orrs	r2, r1
 800042a:	615a      	str	r2, [r3, #20]
 800042c:	4b1a      	ldr	r3, [pc, #104]	@ (8000498 <MX_GPIO_Init+0xc8>)
 800042e:	695a      	ldr	r2, [r3, #20]
 8000430:	2380      	movs	r3, #128	@ 0x80
 8000432:	029b      	lsls	r3, r3, #10
 8000434:	4013      	ands	r3, r2
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800043a:	2390      	movs	r3, #144	@ 0x90
 800043c:	05db      	lsls	r3, r3, #23
 800043e:	2200      	movs	r2, #0
 8000440:	2120      	movs	r1, #32
 8000442:	0018      	movs	r0, r3
 8000444:	f000 fc1e 	bl	8000c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	0192      	lsls	r2, r2, #6
 800044e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	4a12      	ldr	r2, [pc, #72]	@ (800049c <MX_GPIO_Init+0xcc>)
 8000454:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2200      	movs	r2, #0
 800045a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800045c:	193b      	adds	r3, r7, r4
 800045e:	4a10      	ldr	r2, [pc, #64]	@ (80004a0 <MX_GPIO_Init+0xd0>)
 8000460:	0019      	movs	r1, r3
 8000462:	0010      	movs	r0, r2
 8000464:	f000 fa9e 	bl	80009a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000468:	0021      	movs	r1, r4
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2220      	movs	r2, #32
 800046e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2201      	movs	r2, #1
 8000474:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2200      	movs	r2, #0
 8000480:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000482:	187a      	adds	r2, r7, r1
 8000484:	2390      	movs	r3, #144	@ 0x90
 8000486:	05db      	lsls	r3, r3, #23
 8000488:	0011      	movs	r1, r2
 800048a:	0018      	movs	r0, r3
 800048c:	f000 fa8a 	bl	80009a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000490:	46c0      	nop			@ (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	b009      	add	sp, #36	@ 0x24
 8000496:	bd90      	pop	{r4, r7, pc}
 8000498:	40021000 	.word	0x40021000
 800049c:	10210000 	.word	0x10210000
 80004a0:	48000800 	.word	0x48000800

080004a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Calback function called by timer interruptions
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
	// Check which version of timer triggered this callback and do something
	if(htim == &htim16) {
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	4b06      	ldr	r3, [pc, #24]	@ (80004c8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80004b0:	429a      	cmp	r2, r3
 80004b2:	d105      	bne.n	80004c0 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004b4:	2390      	movs	r3, #144	@ 0x90
 80004b6:	05db      	lsls	r3, r3, #23
 80004b8:	2120      	movs	r1, #32
 80004ba:	0018      	movs	r0, r3
 80004bc:	f000 fbff 	bl	8000cbe <HAL_GPIO_TogglePin>
	}

}
 80004c0:	46c0      	nop			@ (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b002      	add	sp, #8
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20000078 	.word	0x20000078

080004cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004d0:	b672      	cpsid	i
}
 80004d2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	e7fd      	b.n	80004d4 <Error_Handler+0x8>

080004d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004de:	4b0f      	ldr	r3, [pc, #60]	@ (800051c <HAL_MspInit+0x44>)
 80004e0:	699a      	ldr	r2, [r3, #24]
 80004e2:	4b0e      	ldr	r3, [pc, #56]	@ (800051c <HAL_MspInit+0x44>)
 80004e4:	2101      	movs	r1, #1
 80004e6:	430a      	orrs	r2, r1
 80004e8:	619a      	str	r2, [r3, #24]
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <HAL_MspInit+0x44>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	2201      	movs	r2, #1
 80004f0:	4013      	ands	r3, r2
 80004f2:	607b      	str	r3, [r7, #4]
 80004f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004f6:	4b09      	ldr	r3, [pc, #36]	@ (800051c <HAL_MspInit+0x44>)
 80004f8:	69da      	ldr	r2, [r3, #28]
 80004fa:	4b08      	ldr	r3, [pc, #32]	@ (800051c <HAL_MspInit+0x44>)
 80004fc:	2180      	movs	r1, #128	@ 0x80
 80004fe:	0549      	lsls	r1, r1, #21
 8000500:	430a      	orrs	r2, r1
 8000502:	61da      	str	r2, [r3, #28]
 8000504:	4b05      	ldr	r3, [pc, #20]	@ (800051c <HAL_MspInit+0x44>)
 8000506:	69da      	ldr	r2, [r3, #28]
 8000508:	2380      	movs	r3, #128	@ 0x80
 800050a:	055b      	lsls	r3, r3, #21
 800050c:	4013      	ands	r3, r2
 800050e:	603b      	str	r3, [r7, #0]
 8000510:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000512:	46c0      	nop			@ (mov r8, r8)
 8000514:	46bd      	mov	sp, r7
 8000516:	b002      	add	sp, #8
 8000518:	bd80      	pop	{r7, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	40021000 	.word	0x40021000

08000520 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0e      	ldr	r2, [pc, #56]	@ (8000568 <HAL_TIM_Base_MspInit+0x48>)
 800052e:	4293      	cmp	r3, r2
 8000530:	d115      	bne.n	800055e <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM16_MspInit 0 */

    /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000532:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <HAL_TIM_Base_MspInit+0x4c>)
 8000534:	699a      	ldr	r2, [r3, #24]
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <HAL_TIM_Base_MspInit+0x4c>)
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	0289      	lsls	r1, r1, #10
 800053c:	430a      	orrs	r2, r1
 800053e:	619a      	str	r2, [r3, #24]
 8000540:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <HAL_TIM_Base_MspInit+0x4c>)
 8000542:	699a      	ldr	r2, [r3, #24]
 8000544:	2380      	movs	r3, #128	@ 0x80
 8000546:	029b      	lsls	r3, r3, #10
 8000548:	4013      	ands	r3, r2
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	2015      	movs	r0, #21
 8000554:	f000 f9f4 	bl	8000940 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000558:	2015      	movs	r0, #21
 800055a:	f000 fa06 	bl	800096a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM16_MspInit 1 */

  }

}
 800055e:	46c0      	nop			@ (mov r8, r8)
 8000560:	46bd      	mov	sp, r7
 8000562:	b004      	add	sp, #16
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	40014400 	.word	0x40014400
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000570:	b590      	push	{r4, r7, lr}
 8000572:	b08b      	sub	sp, #44	@ 0x2c
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	2414      	movs	r4, #20
 800057a:	193b      	adds	r3, r7, r4
 800057c:	0018      	movs	r0, r3
 800057e:	2314      	movs	r3, #20
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f001 fe48 	bl	8002218 <memset>
  if(huart->Instance==USART2)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a1c      	ldr	r2, [pc, #112]	@ (8000600 <HAL_UART_MspInit+0x90>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d132      	bne.n	80005f8 <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <HAL_UART_MspInit+0x94>)
 8000594:	69da      	ldr	r2, [r3, #28]
 8000596:	4b1b      	ldr	r3, [pc, #108]	@ (8000604 <HAL_UART_MspInit+0x94>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0289      	lsls	r1, r1, #10
 800059c:	430a      	orrs	r2, r1
 800059e:	61da      	str	r2, [r3, #28]
 80005a0:	4b18      	ldr	r3, [pc, #96]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005a2:	69da      	ldr	r2, [r3, #28]
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	029b      	lsls	r3, r3, #10
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ae:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b14      	ldr	r3, [pc, #80]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	0289      	lsls	r1, r1, #10
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <HAL_UART_MspInit+0x94>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	2380      	movs	r3, #128	@ 0x80
 80005c2:	029b      	lsls	r3, r3, #10
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005ca:	0021      	movs	r1, r4
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	220c      	movs	r2, #12
 80005d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2202      	movs	r2, #2
 80005d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2201      	movs	r2, #1
 80005e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	187a      	adds	r2, r7, r1
 80005ec:	2390      	movs	r3, #144	@ 0x90
 80005ee:	05db      	lsls	r3, r3, #23
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f000 f9d6 	bl	80009a4 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80005f8:	46c0      	nop			@ (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b00b      	add	sp, #44	@ 0x2c
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40004400 	.word	0x40004400
 8000604:	40021000 	.word	0x40021000

08000608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800060c:	46c0      	nop			@ (mov r8, r8)
 800060e:	e7fd      	b.n	800060c <NMI_Handler+0x4>

08000610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	e7fd      	b.n	8000614 <HardFault_Handler+0x4>

08000618 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000626:	46c0      	nop			@ (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000630:	f000 f8be 	bl	80007b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
	...

0800063c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000640:	4b03      	ldr	r3, [pc, #12]	@ (8000650 <TIM16_IRQHandler+0x14>)
 8000642:	0018      	movs	r0, r3
 8000644:	f001 f810 	bl	8001668 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8000648:	46c0      	nop			@ (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	20000078 	.word	0x20000078

08000654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800065c:	4a14      	ldr	r2, [pc, #80]	@ (80006b0 <_sbrk+0x5c>)
 800065e:	4b15      	ldr	r3, [pc, #84]	@ (80006b4 <_sbrk+0x60>)
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000668:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <_sbrk+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000670:	4b11      	ldr	r3, [pc, #68]	@ (80006b8 <_sbrk+0x64>)
 8000672:	4a12      	ldr	r2, [pc, #72]	@ (80006bc <_sbrk+0x68>)
 8000674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <_sbrk+0x64>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	18d3      	adds	r3, r2, r3
 800067e:	693a      	ldr	r2, [r7, #16]
 8000680:	429a      	cmp	r2, r3
 8000682:	d207      	bcs.n	8000694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000684:	f001 fdd0 	bl	8002228 <__errno>
 8000688:	0003      	movs	r3, r0
 800068a:	220c      	movs	r2, #12
 800068c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800068e:	2301      	movs	r3, #1
 8000690:	425b      	negs	r3, r3
 8000692:	e009      	b.n	80006a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <_sbrk+0x64>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800069a:	4b07      	ldr	r3, [pc, #28]	@ (80006b8 <_sbrk+0x64>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	18d2      	adds	r2, r2, r3
 80006a2:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <_sbrk+0x64>)
 80006a4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80006a6:	68fb      	ldr	r3, [r7, #12]
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b006      	add	sp, #24
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20002000 	.word	0x20002000
 80006b4:	00000400 	.word	0x00000400
 80006b8:	20000138 	.word	0x20000138
 80006bc:	20000288 	.word	0x20000288

080006c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80006c4:	46c0      	nop			@ (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006cc:	480d      	ldr	r0, [pc, #52]	@ (8000704 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d0:	480d      	ldr	r0, [pc, #52]	@ (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d2:	490e      	ldr	r1, [pc, #56]	@ (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d4:	4a0e      	ldr	r2, [pc, #56]	@ (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006d8:	e002      	b.n	80006e0 <LoopCopyDataInit>

080006da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006de:	3304      	adds	r3, #4

080006e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e4:	d3f9      	bcc.n	80006da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006e8:	4c0b      	ldr	r4, [pc, #44]	@ (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006ec:	e001      	b.n	80006f2 <LoopFillZerobss>

080006ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f0:	3204      	adds	r2, #4

080006f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f4:	d3fb      	bcc.n	80006ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006f6:	f7ff ffe3 	bl	80006c0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80006fa:	f001 fd9b 	bl	8002234 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006fe:	f7ff fd99 	bl	8000234 <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   r0, =_estack
 8000704:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000710:	08002bbc 	.word	0x08002bbc
  ldr r2, =_sbss
 8000714:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000718:	20000288 	.word	0x20000288

0800071c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_IRQHandler>
	...

08000720 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <HAL_Init+0x24>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <HAL_Init+0x24>)
 800072a:	2110      	movs	r1, #16
 800072c:	430a      	orrs	r2, r1
 800072e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000730:	2000      	movs	r0, #0
 8000732:	f000 f809 	bl	8000748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000736:	f7ff fecf 	bl	80004d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800073a:	2300      	movs	r3, #0
}
 800073c:	0018      	movs	r0, r3
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	40022000 	.word	0x40022000

08000748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000748:	b590      	push	{r4, r7, lr}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000750:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <HAL_InitTick+0x5c>)
 8000752:	681c      	ldr	r4, [r3, #0]
 8000754:	4b14      	ldr	r3, [pc, #80]	@ (80007a8 <HAL_InitTick+0x60>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	0019      	movs	r1, r3
 800075a:	23fa      	movs	r3, #250	@ 0xfa
 800075c:	0098      	lsls	r0, r3, #2
 800075e:	f7ff fcdd 	bl	800011c <__udivsi3>
 8000762:	0003      	movs	r3, r0
 8000764:	0019      	movs	r1, r3
 8000766:	0020      	movs	r0, r4
 8000768:	f7ff fcd8 	bl	800011c <__udivsi3>
 800076c:	0003      	movs	r3, r0
 800076e:	0018      	movs	r0, r3
 8000770:	f000 f90b 	bl	800098a <HAL_SYSTICK_Config>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000778:	2301      	movs	r3, #1
 800077a:	e00f      	b.n	800079c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b03      	cmp	r3, #3
 8000780:	d80b      	bhi.n	800079a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	2301      	movs	r3, #1
 8000786:	425b      	negs	r3, r3
 8000788:	2200      	movs	r2, #0
 800078a:	0018      	movs	r0, r3
 800078c:	f000 f8d8 	bl	8000940 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <HAL_InitTick+0x64>)
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000796:	2300      	movs	r3, #0
 8000798:	e000      	b.n	800079c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800079a:	2301      	movs	r3, #1
}
 800079c:	0018      	movs	r0, r3
 800079e:	46bd      	mov	sp, r7
 80007a0:	b003      	add	sp, #12
 80007a2:	bd90      	pop	{r4, r7, pc}
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000008 	.word	0x20000008
 80007ac:	20000004 	.word	0x20000004

080007b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007b4:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <HAL_IncTick+0x1c>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	001a      	movs	r2, r3
 80007ba:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <HAL_IncTick+0x20>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	18d2      	adds	r2, r2, r3
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <HAL_IncTick+0x20>)
 80007c2:	601a      	str	r2, [r3, #0]
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000008 	.word	0x20000008
 80007d0:	2000013c 	.word	0x2000013c

080007d4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;
 80007d8:	4b02      	ldr	r3, [pc, #8]	@ (80007e4 <HAL_GetTick+0x10>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	0018      	movs	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	46c0      	nop			@ (mov r8, r8)
 80007e4:	2000013c 	.word	0x2000013c

080007e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	0002      	movs	r2, r0
 80007f0:	1dfb      	adds	r3, r7, #7
 80007f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80007f4:	1dfb      	adds	r3, r7, #7
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80007fa:	d809      	bhi.n	8000810 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	001a      	movs	r2, r3
 8000802:	231f      	movs	r3, #31
 8000804:	401a      	ands	r2, r3
 8000806:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <__NVIC_EnableIRQ+0x30>)
 8000808:	2101      	movs	r1, #1
 800080a:	4091      	lsls	r1, r2
 800080c:	000a      	movs	r2, r1
 800080e:	601a      	str	r2, [r3, #0]
  }
}
 8000810:	46c0      	nop			@ (mov r8, r8)
 8000812:	46bd      	mov	sp, r7
 8000814:	b002      	add	sp, #8
 8000816:	bd80      	pop	{r7, pc}
 8000818:	e000e100 	.word	0xe000e100

0800081c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800081c:	b590      	push	{r4, r7, lr}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
 8000822:	0002      	movs	r2, r0
 8000824:	6039      	str	r1, [r7, #0]
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800082a:	1dfb      	adds	r3, r7, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000830:	d828      	bhi.n	8000884 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000832:	4a2f      	ldr	r2, [pc, #188]	@ (80008f0 <__NVIC_SetPriority+0xd4>)
 8000834:	1dfb      	adds	r3, r7, #7
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	b25b      	sxtb	r3, r3
 800083a:	089b      	lsrs	r3, r3, #2
 800083c:	33c0      	adds	r3, #192	@ 0xc0
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	589b      	ldr	r3, [r3, r2]
 8000842:	1dfa      	adds	r2, r7, #7
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	0011      	movs	r1, r2
 8000848:	2203      	movs	r2, #3
 800084a:	400a      	ands	r2, r1
 800084c:	00d2      	lsls	r2, r2, #3
 800084e:	21ff      	movs	r1, #255	@ 0xff
 8000850:	4091      	lsls	r1, r2
 8000852:	000a      	movs	r2, r1
 8000854:	43d2      	mvns	r2, r2
 8000856:	401a      	ands	r2, r3
 8000858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	019b      	lsls	r3, r3, #6
 800085e:	22ff      	movs	r2, #255	@ 0xff
 8000860:	401a      	ands	r2, r3
 8000862:	1dfb      	adds	r3, r7, #7
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	0018      	movs	r0, r3
 8000868:	2303      	movs	r3, #3
 800086a:	4003      	ands	r3, r0
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000870:	481f      	ldr	r0, [pc, #124]	@ (80008f0 <__NVIC_SetPriority+0xd4>)
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	b25b      	sxtb	r3, r3
 8000878:	089b      	lsrs	r3, r3, #2
 800087a:	430a      	orrs	r2, r1
 800087c:	33c0      	adds	r3, #192	@ 0xc0
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000882:	e031      	b.n	80008e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000884:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <__NVIC_SetPriority+0xd8>)
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	0019      	movs	r1, r3
 800088c:	230f      	movs	r3, #15
 800088e:	400b      	ands	r3, r1
 8000890:	3b08      	subs	r3, #8
 8000892:	089b      	lsrs	r3, r3, #2
 8000894:	3306      	adds	r3, #6
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	18d3      	adds	r3, r2, r3
 800089a:	3304      	adds	r3, #4
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	1dfa      	adds	r2, r7, #7
 80008a0:	7812      	ldrb	r2, [r2, #0]
 80008a2:	0011      	movs	r1, r2
 80008a4:	2203      	movs	r2, #3
 80008a6:	400a      	ands	r2, r1
 80008a8:	00d2      	lsls	r2, r2, #3
 80008aa:	21ff      	movs	r1, #255	@ 0xff
 80008ac:	4091      	lsls	r1, r2
 80008ae:	000a      	movs	r2, r1
 80008b0:	43d2      	mvns	r2, r2
 80008b2:	401a      	ands	r2, r3
 80008b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	22ff      	movs	r2, #255	@ 0xff
 80008bc:	401a      	ands	r2, r3
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	0018      	movs	r0, r3
 80008c4:	2303      	movs	r3, #3
 80008c6:	4003      	ands	r3, r0
 80008c8:	00db      	lsls	r3, r3, #3
 80008ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008cc:	4809      	ldr	r0, [pc, #36]	@ (80008f4 <__NVIC_SetPriority+0xd8>)
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	001c      	movs	r4, r3
 80008d4:	230f      	movs	r3, #15
 80008d6:	4023      	ands	r3, r4
 80008d8:	3b08      	subs	r3, #8
 80008da:	089b      	lsrs	r3, r3, #2
 80008dc:	430a      	orrs	r2, r1
 80008de:	3306      	adds	r3, #6
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	18c3      	adds	r3, r0, r3
 80008e4:	3304      	adds	r3, #4
 80008e6:	601a      	str	r2, [r3, #0]
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b003      	add	sp, #12
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	e000e100 	.word	0xe000e100
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	2380      	movs	r3, #128	@ 0x80
 8000906:	045b      	lsls	r3, r3, #17
 8000908:	429a      	cmp	r2, r3
 800090a:	d301      	bcc.n	8000910 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800090c:	2301      	movs	r3, #1
 800090e:	e010      	b.n	8000932 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000910:	4b0a      	ldr	r3, [pc, #40]	@ (800093c <SysTick_Config+0x44>)
 8000912:	687a      	ldr	r2, [r7, #4]
 8000914:	3a01      	subs	r2, #1
 8000916:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000918:	2301      	movs	r3, #1
 800091a:	425b      	negs	r3, r3
 800091c:	2103      	movs	r1, #3
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff ff7c 	bl	800081c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <SysTick_Config+0x44>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800092a:	4b04      	ldr	r3, [pc, #16]	@ (800093c <SysTick_Config+0x44>)
 800092c:	2207      	movs	r2, #7
 800092e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000930:	2300      	movs	r3, #0
}
 8000932:	0018      	movs	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	b002      	add	sp, #8
 8000938:	bd80      	pop	{r7, pc}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	e000e010 	.word	0xe000e010

08000940 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
 800094a:	210f      	movs	r1, #15
 800094c:	187b      	adds	r3, r7, r1
 800094e:	1c02      	adds	r2, r0, #0
 8000950:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	187b      	adds	r3, r7, r1
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b25b      	sxtb	r3, r3
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff ff5d 	bl	800081c <__NVIC_SetPriority>
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b004      	add	sp, #16
 8000968:	bd80      	pop	{r7, pc}

0800096a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	b082      	sub	sp, #8
 800096e:	af00      	add	r7, sp, #0
 8000970:	0002      	movs	r2, r0
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000976:	1dfb      	adds	r3, r7, #7
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b25b      	sxtb	r3, r3
 800097c:	0018      	movs	r0, r3
 800097e:	f7ff ff33 	bl	80007e8 <__NVIC_EnableIRQ>
}
 8000982:	46c0      	nop			@ (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	b002      	add	sp, #8
 8000988:	bd80      	pop	{r7, pc}

0800098a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	0018      	movs	r0, r3
 8000996:	f7ff ffaf 	bl	80008f8 <SysTick_Config>
 800099a:	0003      	movs	r3, r0
}
 800099c:	0018      	movs	r0, r3
 800099e:	46bd      	mov	sp, r7
 80009a0:	b002      	add	sp, #8
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009ae:	2300      	movs	r3, #0
 80009b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009b2:	e14f      	b.n	8000c54 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2101      	movs	r1, #1
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	4091      	lsls	r1, r2
 80009be:	000a      	movs	r2, r1
 80009c0:	4013      	ands	r3, r2
 80009c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d100      	bne.n	80009cc <HAL_GPIO_Init+0x28>
 80009ca:	e140      	b.n	8000c4e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	d003      	beq.n	80009dc <HAL_GPIO_Init+0x38>
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	2b12      	cmp	r3, #18
 80009da:	d123      	bne.n	8000a24 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	08da      	lsrs	r2, r3, #3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	3208      	adds	r2, #8
 80009e4:	0092      	lsls	r2, r2, #2
 80009e6:	58d3      	ldr	r3, [r2, r3]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	2207      	movs	r2, #7
 80009ee:	4013      	ands	r3, r2
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	220f      	movs	r2, #15
 80009f4:	409a      	lsls	r2, r3
 80009f6:	0013      	movs	r3, r2
 80009f8:	43da      	mvns	r2, r3
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	691a      	ldr	r2, [r3, #16]
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	2107      	movs	r1, #7
 8000a08:	400b      	ands	r3, r1
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	409a      	lsls	r2, r3
 8000a0e:	0013      	movs	r3, r2
 8000a10:	693a      	ldr	r2, [r7, #16]
 8000a12:	4313      	orrs	r3, r2
 8000a14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	08da      	lsrs	r2, r3, #3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	3208      	adds	r2, #8
 8000a1e:	0092      	lsls	r2, r2, #2
 8000a20:	6939      	ldr	r1, [r7, #16]
 8000a22:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	2203      	movs	r2, #3
 8000a30:	409a      	lsls	r2, r3
 8000a32:	0013      	movs	r3, r2
 8000a34:	43da      	mvns	r2, r3
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	2203      	movs	r2, #3
 8000a42:	401a      	ands	r2, r3
 8000a44:	697b      	ldr	r3, [r7, #20]
 8000a46:	005b      	lsls	r3, r3, #1
 8000a48:	409a      	lsls	r2, r3
 8000a4a:	0013      	movs	r3, r2
 8000a4c:	693a      	ldr	r2, [r7, #16]
 8000a4e:	4313      	orrs	r3, r2
 8000a50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d00b      	beq.n	8000a78 <HAL_GPIO_Init+0xd4>
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685b      	ldr	r3, [r3, #4]
 8000a64:	2b02      	cmp	r3, #2
 8000a66:	d007      	beq.n	8000a78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a6c:	2b11      	cmp	r3, #17
 8000a6e:	d003      	beq.n	8000a78 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	2b12      	cmp	r3, #18
 8000a76:	d130      	bne.n	8000ada <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	689b      	ldr	r3, [r3, #8]
 8000a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	2203      	movs	r2, #3
 8000a84:	409a      	lsls	r2, r3
 8000a86:	0013      	movs	r3, r2
 8000a88:	43da      	mvns	r2, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	409a      	lsls	r2, r3
 8000a9a:	0013      	movs	r3, r2
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aae:	2201      	movs	r2, #1
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	409a      	lsls	r2, r3
 8000ab4:	0013      	movs	r3, r2
 8000ab6:	43da      	mvns	r2, r3
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	091b      	lsrs	r3, r3, #4
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	401a      	ands	r2, r3
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	409a      	lsls	r2, r3
 8000acc:	0013      	movs	r3, r2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ae0:	697b      	ldr	r3, [r7, #20]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	2203      	movs	r2, #3
 8000ae6:	409a      	lsls	r2, r3
 8000ae8:	0013      	movs	r3, r2
 8000aea:	43da      	mvns	r2, r3
 8000aec:	693b      	ldr	r3, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	689a      	ldr	r2, [r3, #8]
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	409a      	lsls	r2, r3
 8000afc:	0013      	movs	r3, r2
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4313      	orrs	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	685a      	ldr	r2, [r3, #4]
 8000b0e:	2380      	movs	r3, #128	@ 0x80
 8000b10:	055b      	lsls	r3, r3, #21
 8000b12:	4013      	ands	r3, r2
 8000b14:	d100      	bne.n	8000b18 <HAL_GPIO_Init+0x174>
 8000b16:	e09a      	b.n	8000c4e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b18:	4b54      	ldr	r3, [pc, #336]	@ (8000c6c <HAL_GPIO_Init+0x2c8>)
 8000b1a:	699a      	ldr	r2, [r3, #24]
 8000b1c:	4b53      	ldr	r3, [pc, #332]	@ (8000c6c <HAL_GPIO_Init+0x2c8>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	430a      	orrs	r2, r1
 8000b22:	619a      	str	r2, [r3, #24]
 8000b24:	4b51      	ldr	r3, [pc, #324]	@ (8000c6c <HAL_GPIO_Init+0x2c8>)
 8000b26:	699b      	ldr	r3, [r3, #24]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b30:	4a4f      	ldr	r2, [pc, #316]	@ (8000c70 <HAL_GPIO_Init+0x2cc>)
 8000b32:	697b      	ldr	r3, [r7, #20]
 8000b34:	089b      	lsrs	r3, r3, #2
 8000b36:	3302      	adds	r3, #2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	589b      	ldr	r3, [r3, r2]
 8000b3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	2203      	movs	r2, #3
 8000b42:	4013      	ands	r3, r2
 8000b44:	009b      	lsls	r3, r3, #2
 8000b46:	220f      	movs	r2, #15
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	43da      	mvns	r2, r3
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b54:	687a      	ldr	r2, [r7, #4]
 8000b56:	2390      	movs	r3, #144	@ 0x90
 8000b58:	05db      	lsls	r3, r3, #23
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0x1e2>
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	4a44      	ldr	r2, [pc, #272]	@ (8000c74 <HAL_GPIO_Init+0x2d0>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d00d      	beq.n	8000b82 <HAL_GPIO_Init+0x1de>
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4a43      	ldr	r2, [pc, #268]	@ (8000c78 <HAL_GPIO_Init+0x2d4>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d007      	beq.n	8000b7e <HAL_GPIO_Init+0x1da>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4a42      	ldr	r2, [pc, #264]	@ (8000c7c <HAL_GPIO_Init+0x2d8>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d101      	bne.n	8000b7a <HAL_GPIO_Init+0x1d6>
 8000b76:	2303      	movs	r3, #3
 8000b78:	e006      	b.n	8000b88 <HAL_GPIO_Init+0x1e4>
 8000b7a:	2305      	movs	r3, #5
 8000b7c:	e004      	b.n	8000b88 <HAL_GPIO_Init+0x1e4>
 8000b7e:	2302      	movs	r3, #2
 8000b80:	e002      	b.n	8000b88 <HAL_GPIO_Init+0x1e4>
 8000b82:	2301      	movs	r3, #1
 8000b84:	e000      	b.n	8000b88 <HAL_GPIO_Init+0x1e4>
 8000b86:	2300      	movs	r3, #0
 8000b88:	697a      	ldr	r2, [r7, #20]
 8000b8a:	2103      	movs	r1, #3
 8000b8c:	400a      	ands	r2, r1
 8000b8e:	0092      	lsls	r2, r2, #2
 8000b90:	4093      	lsls	r3, r2
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b98:	4935      	ldr	r1, [pc, #212]	@ (8000c70 <HAL_GPIO_Init+0x2cc>)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	089b      	lsrs	r3, r3, #2
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ba6:	4b36      	ldr	r3, [pc, #216]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	43da      	mvns	r2, r3
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	2380      	movs	r3, #128	@ 0x80
 8000bbc:	025b      	lsls	r3, r3, #9
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	d003      	beq.n	8000bca <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bca:	4b2d      	ldr	r3, [pc, #180]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000bd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	43da      	mvns	r2, r3
 8000bda:	693b      	ldr	r3, [r7, #16]
 8000bdc:	4013      	ands	r3, r2
 8000bde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	029b      	lsls	r3, r3, #10
 8000be8:	4013      	ands	r3, r2
 8000bea:	d003      	beq.n	8000bf4 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf4:	4b22      	ldr	r3, [pc, #136]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000bfa:	4b21      	ldr	r3, [pc, #132]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000bfc:	689b      	ldr	r3, [r3, #8]
 8000bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	43da      	mvns	r2, r3
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	4013      	ands	r3, r2
 8000c08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	2380      	movs	r3, #128	@ 0x80
 8000c10:	035b      	lsls	r3, r3, #13
 8000c12:	4013      	ands	r3, r2
 8000c14:	d003      	beq.n	8000c1e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000c24:	4b16      	ldr	r3, [pc, #88]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	43da      	mvns	r2, r3
 8000c2e:	693b      	ldr	r3, [r7, #16]
 8000c30:	4013      	ands	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685a      	ldr	r2, [r3, #4]
 8000c38:	2380      	movs	r3, #128	@ 0x80
 8000c3a:	039b      	lsls	r3, r3, #14
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	d003      	beq.n	8000c48 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c48:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_GPIO_Init+0x2dc>)
 8000c4a:	693a      	ldr	r2, [r7, #16]
 8000c4c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8000c4e:	697b      	ldr	r3, [r7, #20]
 8000c50:	3301      	adds	r3, #1
 8000c52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	40da      	lsrs	r2, r3
 8000c5c:	1e13      	subs	r3, r2, #0
 8000c5e:	d000      	beq.n	8000c62 <HAL_GPIO_Init+0x2be>
 8000c60:	e6a8      	b.n	80009b4 <HAL_GPIO_Init+0x10>
  } 
}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b006      	add	sp, #24
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	40010000 	.word	0x40010000
 8000c74:	48000400 	.word	0x48000400
 8000c78:	48000800 	.word	0x48000800
 8000c7c:	48000c00 	.word	0x48000c00
 8000c80:	40010400 	.word	0x40010400

08000c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
 8000c8c:	0008      	movs	r0, r1
 8000c8e:	0011      	movs	r1, r2
 8000c90:	1cbb      	adds	r3, r7, #2
 8000c92:	1c02      	adds	r2, r0, #0
 8000c94:	801a      	strh	r2, [r3, #0]
 8000c96:	1c7b      	adds	r3, r7, #1
 8000c98:	1c0a      	adds	r2, r1, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c9c:	1c7b      	adds	r3, r7, #1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d004      	beq.n	8000cae <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca4:	1cbb      	adds	r3, r7, #2
 8000ca6:	881a      	ldrh	r2, [r3, #0]
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000cac:	e003      	b.n	8000cb6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cae:	1cbb      	adds	r3, r7, #2
 8000cb0:	881a      	ldrh	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b002      	add	sp, #8
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
 8000cc6:	000a      	movs	r2, r1
 8000cc8:	1cbb      	adds	r3, r7, #2
 8000cca:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	695b      	ldr	r3, [r3, #20]
 8000cd0:	1cba      	adds	r2, r7, #2
 8000cd2:	8812      	ldrh	r2, [r2, #0]
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	d005      	beq.n	8000ce4 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000cd8:	1cbb      	adds	r3, r7, #2
 8000cda:	881b      	ldrh	r3, [r3, #0]
 8000cdc:	041a      	lsls	r2, r3, #16
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce2:	e003      	b.n	8000cec <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ce4:	1cbb      	adds	r3, r7, #2
 8000ce6:	881a      	ldrh	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	619a      	str	r2, [r3, #24]
}
 8000cec:	46c0      	nop			@ (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b088      	sub	sp, #32
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d101      	bne.n	8000d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
 8000d04:	e301      	b.n	800130a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	d100      	bne.n	8000d12 <HAL_RCC_OscConfig+0x1e>
 8000d10:	e08d      	b.n	8000e2e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d12:	4bc3      	ldr	r3, [pc, #780]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d14:	685b      	ldr	r3, [r3, #4]
 8000d16:	220c      	movs	r2, #12
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d00e      	beq.n	8000d3c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d1e:	4bc0      	ldr	r3, [pc, #768]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	220c      	movs	r2, #12
 8000d24:	4013      	ands	r3, r2
 8000d26:	2b08      	cmp	r3, #8
 8000d28:	d116      	bne.n	8000d58 <HAL_RCC_OscConfig+0x64>
 8000d2a:	4bbd      	ldr	r3, [pc, #756]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	025b      	lsls	r3, r3, #9
 8000d32:	401a      	ands	r2, r3
 8000d34:	2380      	movs	r3, #128	@ 0x80
 8000d36:	025b      	lsls	r3, r3, #9
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d10d      	bne.n	8000d58 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3c:	4bb8      	ldr	r3, [pc, #736]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2380      	movs	r3, #128	@ 0x80
 8000d42:	029b      	lsls	r3, r3, #10
 8000d44:	4013      	ands	r3, r2
 8000d46:	d100      	bne.n	8000d4a <HAL_RCC_OscConfig+0x56>
 8000d48:	e070      	b.n	8000e2c <HAL_RCC_OscConfig+0x138>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d000      	beq.n	8000d54 <HAL_RCC_OscConfig+0x60>
 8000d52:	e06b      	b.n	8000e2c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e2d8      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d107      	bne.n	8000d70 <HAL_RCC_OscConfig+0x7c>
 8000d60:	4baf      	ldr	r3, [pc, #700]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4bae      	ldr	r3, [pc, #696]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d66:	2180      	movs	r1, #128	@ 0x80
 8000d68:	0249      	lsls	r1, r1, #9
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	601a      	str	r2, [r3, #0]
 8000d6e:	e02f      	b.n	8000dd0 <HAL_RCC_OscConfig+0xdc>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10c      	bne.n	8000d92 <HAL_RCC_OscConfig+0x9e>
 8000d78:	4ba9      	ldr	r3, [pc, #676]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4ba8      	ldr	r3, [pc, #672]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d7e:	49a9      	ldr	r1, [pc, #676]	@ (8001024 <HAL_RCC_OscConfig+0x330>)
 8000d80:	400a      	ands	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	4ba6      	ldr	r3, [pc, #664]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	4ba5      	ldr	r3, [pc, #660]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d8a:	49a7      	ldr	r1, [pc, #668]	@ (8001028 <HAL_RCC_OscConfig+0x334>)
 8000d8c:	400a      	ands	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e01e      	b.n	8000dd0 <HAL_RCC_OscConfig+0xdc>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	2b05      	cmp	r3, #5
 8000d98:	d10e      	bne.n	8000db8 <HAL_RCC_OscConfig+0xc4>
 8000d9a:	4ba1      	ldr	r3, [pc, #644]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	4ba0      	ldr	r3, [pc, #640]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000da0:	2180      	movs	r1, #128	@ 0x80
 8000da2:	02c9      	lsls	r1, r1, #11
 8000da4:	430a      	orrs	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	4b9d      	ldr	r3, [pc, #628]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b9c      	ldr	r3, [pc, #624]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000dae:	2180      	movs	r1, #128	@ 0x80
 8000db0:	0249      	lsls	r1, r1, #9
 8000db2:	430a      	orrs	r2, r1
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e00b      	b.n	8000dd0 <HAL_RCC_OscConfig+0xdc>
 8000db8:	4b99      	ldr	r3, [pc, #612]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b98      	ldr	r3, [pc, #608]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000dbe:	4999      	ldr	r1, [pc, #612]	@ (8001024 <HAL_RCC_OscConfig+0x330>)
 8000dc0:	400a      	ands	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	4b96      	ldr	r3, [pc, #600]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b95      	ldr	r3, [pc, #596]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000dca:	4997      	ldr	r1, [pc, #604]	@ (8001028 <HAL_RCC_OscConfig+0x334>)
 8000dcc:	400a      	ands	r2, r1
 8000dce:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d014      	beq.n	8000e02 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fcfc 	bl	80007d4 <HAL_GetTick>
 8000ddc:	0003      	movs	r3, r0
 8000dde:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de0:	e008      	b.n	8000df4 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000de2:	f7ff fcf7 	bl	80007d4 <HAL_GetTick>
 8000de6:	0002      	movs	r2, r0
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	2b64      	cmp	r3, #100	@ 0x64
 8000dee:	d901      	bls.n	8000df4 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e28a      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000df4:	4b8a      	ldr	r3, [pc, #552]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	2380      	movs	r3, #128	@ 0x80
 8000dfa:	029b      	lsls	r3, r3, #10
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	d0f0      	beq.n	8000de2 <HAL_RCC_OscConfig+0xee>
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e02:	f7ff fce7 	bl	80007d4 <HAL_GetTick>
 8000e06:	0003      	movs	r3, r0
 8000e08:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0a:	e008      	b.n	8000e1e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e0c:	f7ff fce2 	bl	80007d4 <HAL_GetTick>
 8000e10:	0002      	movs	r2, r0
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b64      	cmp	r3, #100	@ 0x64
 8000e18:	d901      	bls.n	8000e1e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	e275      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e1e:	4b80      	ldr	r3, [pc, #512]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	2380      	movs	r3, #128	@ 0x80
 8000e24:	029b      	lsls	r3, r3, #10
 8000e26:	4013      	ands	r3, r2
 8000e28:	d1f0      	bne.n	8000e0c <HAL_RCC_OscConfig+0x118>
 8000e2a:	e000      	b.n	8000e2e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e2c:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2202      	movs	r2, #2
 8000e34:	4013      	ands	r3, r2
 8000e36:	d100      	bne.n	8000e3a <HAL_RCC_OscConfig+0x146>
 8000e38:	e069      	b.n	8000f0e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000e3a:	4b79      	ldr	r3, [pc, #484]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	220c      	movs	r2, #12
 8000e40:	4013      	ands	r3, r2
 8000e42:	d00b      	beq.n	8000e5c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000e44:	4b76      	ldr	r3, [pc, #472]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	220c      	movs	r2, #12
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	2b08      	cmp	r3, #8
 8000e4e:	d11c      	bne.n	8000e8a <HAL_RCC_OscConfig+0x196>
 8000e50:	4b73      	ldr	r3, [pc, #460]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e52:	685a      	ldr	r2, [r3, #4]
 8000e54:	2380      	movs	r3, #128	@ 0x80
 8000e56:	025b      	lsls	r3, r3, #9
 8000e58:	4013      	ands	r3, r2
 8000e5a:	d116      	bne.n	8000e8a <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5c:	4b70      	ldr	r3, [pc, #448]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2202      	movs	r2, #2
 8000e62:	4013      	ands	r3, r2
 8000e64:	d005      	beq.n	8000e72 <HAL_RCC_OscConfig+0x17e>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d001      	beq.n	8000e72 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e24b      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e72:	4b6b      	ldr	r3, [pc, #428]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	22f8      	movs	r2, #248	@ 0xf8
 8000e78:	4393      	bics	r3, r2
 8000e7a:	0019      	movs	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	00da      	lsls	r2, r3, #3
 8000e82:	4b67      	ldr	r3, [pc, #412]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e84:	430a      	orrs	r2, r1
 8000e86:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e88:	e041      	b.n	8000f0e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	68db      	ldr	r3, [r3, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d024      	beq.n	8000edc <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e92:	4b63      	ldr	r3, [pc, #396]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b62      	ldr	r3, [pc, #392]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000e98:	2101      	movs	r1, #1
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9e:	f7ff fc99 	bl	80007d4 <HAL_GetTick>
 8000ea2:	0003      	movs	r3, r0
 8000ea4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ea8:	f7ff fc94 	bl	80007d4 <HAL_GetTick>
 8000eac:	0002      	movs	r2, r0
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e227      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eba:	4b59      	ldr	r3, [pc, #356]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	d0f1      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ec4:	4b56      	ldr	r3, [pc, #344]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	22f8      	movs	r2, #248	@ 0xf8
 8000eca:	4393      	bics	r3, r2
 8000ecc:	0019      	movs	r1, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	691b      	ldr	r3, [r3, #16]
 8000ed2:	00da      	lsls	r2, r3, #3
 8000ed4:	4b52      	ldr	r3, [pc, #328]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	e018      	b.n	8000f0e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000edc:	4b50      	ldr	r3, [pc, #320]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b4f      	ldr	r3, [pc, #316]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	438a      	bics	r2, r1
 8000ee6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee8:	f7ff fc74 	bl	80007d4 <HAL_GetTick>
 8000eec:	0003      	movs	r3, r0
 8000eee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef0:	e008      	b.n	8000f04 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ef2:	f7ff fc6f 	bl	80007d4 <HAL_GetTick>
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d901      	bls.n	8000f04 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8000f00:	2303      	movs	r3, #3
 8000f02:	e202      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f04:	4b46      	ldr	r3, [pc, #280]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2202      	movs	r2, #2
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	d1f1      	bne.n	8000ef2 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2208      	movs	r2, #8
 8000f14:	4013      	ands	r3, r2
 8000f16:	d036      	beq.n	8000f86 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	69db      	ldr	r3, [r3, #28]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d019      	beq.n	8000f54 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f20:	4b3f      	ldr	r3, [pc, #252]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f22:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f24:	4b3e      	ldr	r3, [pc, #248]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f26:	2101      	movs	r1, #1
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f2c:	f7ff fc52 	bl	80007d4 <HAL_GetTick>
 8000f30:	0003      	movs	r3, r0
 8000f32:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f34:	e008      	b.n	8000f48 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f36:	f7ff fc4d 	bl	80007d4 <HAL_GetTick>
 8000f3a:	0002      	movs	r2, r0
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d901      	bls.n	8000f48 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000f44:	2303      	movs	r3, #3
 8000f46:	e1e0      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f48:	4b35      	ldr	r3, [pc, #212]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	4013      	ands	r3, r2
 8000f50:	d0f1      	beq.n	8000f36 <HAL_RCC_OscConfig+0x242>
 8000f52:	e018      	b.n	8000f86 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f54:	4b32      	ldr	r3, [pc, #200]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000f58:	4b31      	ldr	r3, [pc, #196]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	438a      	bics	r2, r1
 8000f5e:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fc38 	bl	80007d4 <HAL_GetTick>
 8000f64:	0003      	movs	r3, r0
 8000f66:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f68:	e008      	b.n	8000f7c <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f6a:	f7ff fc33 	bl	80007d4 <HAL_GetTick>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	1ad3      	subs	r3, r2, r3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d901      	bls.n	8000f7c <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	e1c6      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7c:	4b28      	ldr	r3, [pc, #160]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f80:	2202      	movs	r2, #2
 8000f82:	4013      	ands	r3, r2
 8000f84:	d1f1      	bne.n	8000f6a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2204      	movs	r2, #4
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	d100      	bne.n	8000f92 <HAL_RCC_OscConfig+0x29e>
 8000f90:	e0b4      	b.n	80010fc <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f92:	201f      	movs	r0, #31
 8000f94:	183b      	adds	r3, r7, r0
 8000f96:	2200      	movs	r2, #0
 8000f98:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f9a:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000f9c:	69da      	ldr	r2, [r3, #28]
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	055b      	lsls	r3, r3, #21
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	d110      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000fa8:	69da      	ldr	r2, [r3, #28]
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000fac:	2180      	movs	r1, #128	@ 0x80
 8000fae:	0549      	lsls	r1, r1, #21
 8000fb0:	430a      	orrs	r2, r1
 8000fb2:	61da      	str	r2, [r3, #28]
 8000fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8000fb6:	69da      	ldr	r2, [r3, #28]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	055b      	lsls	r3, r3, #21
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fc2:	183b      	adds	r3, r7, r0
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_RCC_OscConfig+0x338>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d11a      	bne.n	800100a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fd4:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_RCC_OscConfig+0x338>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b14      	ldr	r3, [pc, #80]	@ (800102c <HAL_RCC_OscConfig+0x338>)
 8000fda:	2180      	movs	r1, #128	@ 0x80
 8000fdc:	0049      	lsls	r1, r1, #1
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fe2:	f7ff fbf7 	bl	80007d4 <HAL_GetTick>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fec:	f7ff fbf2 	bl	80007d4 <HAL_GetTick>
 8000ff0:	0002      	movs	r2, r0
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b64      	cmp	r3, #100	@ 0x64
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e185      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_RCC_OscConfig+0x338>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	2380      	movs	r3, #128	@ 0x80
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4013      	ands	r3, r2
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d10e      	bne.n	8001030 <HAL_RCC_OscConfig+0x33c>
 8001012:	4b03      	ldr	r3, [pc, #12]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8001014:	6a1a      	ldr	r2, [r3, #32]
 8001016:	4b02      	ldr	r3, [pc, #8]	@ (8001020 <HAL_RCC_OscConfig+0x32c>)
 8001018:	2101      	movs	r1, #1
 800101a:	430a      	orrs	r2, r1
 800101c:	621a      	str	r2, [r3, #32]
 800101e:	e035      	b.n	800108c <HAL_RCC_OscConfig+0x398>
 8001020:	40021000 	.word	0x40021000
 8001024:	fffeffff 	.word	0xfffeffff
 8001028:	fffbffff 	.word	0xfffbffff
 800102c:	40007000 	.word	0x40007000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10c      	bne.n	8001052 <HAL_RCC_OscConfig+0x35e>
 8001038:	4bb6      	ldr	r3, [pc, #728]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800103a:	6a1a      	ldr	r2, [r3, #32]
 800103c:	4bb5      	ldr	r3, [pc, #724]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800103e:	2101      	movs	r1, #1
 8001040:	438a      	bics	r2, r1
 8001042:	621a      	str	r2, [r3, #32]
 8001044:	4bb3      	ldr	r3, [pc, #716]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001046:	6a1a      	ldr	r2, [r3, #32]
 8001048:	4bb2      	ldr	r3, [pc, #712]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800104a:	2104      	movs	r1, #4
 800104c:	438a      	bics	r2, r1
 800104e:	621a      	str	r2, [r3, #32]
 8001050:	e01c      	b.n	800108c <HAL_RCC_OscConfig+0x398>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	2b05      	cmp	r3, #5
 8001058:	d10c      	bne.n	8001074 <HAL_RCC_OscConfig+0x380>
 800105a:	4bae      	ldr	r3, [pc, #696]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800105c:	6a1a      	ldr	r2, [r3, #32]
 800105e:	4bad      	ldr	r3, [pc, #692]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001060:	2104      	movs	r1, #4
 8001062:	430a      	orrs	r2, r1
 8001064:	621a      	str	r2, [r3, #32]
 8001066:	4bab      	ldr	r3, [pc, #684]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001068:	6a1a      	ldr	r2, [r3, #32]
 800106a:	4baa      	ldr	r3, [pc, #680]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800106c:	2101      	movs	r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	621a      	str	r2, [r3, #32]
 8001072:	e00b      	b.n	800108c <HAL_RCC_OscConfig+0x398>
 8001074:	4ba7      	ldr	r3, [pc, #668]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	4ba6      	ldr	r3, [pc, #664]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800107a:	2101      	movs	r1, #1
 800107c:	438a      	bics	r2, r1
 800107e:	621a      	str	r2, [r3, #32]
 8001080:	4ba4      	ldr	r3, [pc, #656]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001082:	6a1a      	ldr	r2, [r3, #32]
 8001084:	4ba3      	ldr	r3, [pc, #652]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001086:	2104      	movs	r1, #4
 8001088:	438a      	bics	r2, r1
 800108a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d014      	beq.n	80010be <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001094:	f7ff fb9e 	bl	80007d4 <HAL_GetTick>
 8001098:	0003      	movs	r3, r0
 800109a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800109c:	e009      	b.n	80010b2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800109e:	f7ff fb99 	bl	80007d4 <HAL_GetTick>
 80010a2:	0002      	movs	r2, r0
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	1ad3      	subs	r3, r2, r3
 80010a8:	4a9b      	ldr	r2, [pc, #620]	@ (8001318 <HAL_RCC_OscConfig+0x624>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80010ae:	2303      	movs	r3, #3
 80010b0:	e12b      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010b2:	4b98      	ldr	r3, [pc, #608]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	2202      	movs	r2, #2
 80010b8:	4013      	ands	r3, r2
 80010ba:	d0f0      	beq.n	800109e <HAL_RCC_OscConfig+0x3aa>
 80010bc:	e013      	b.n	80010e6 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010be:	f7ff fb89 	bl	80007d4 <HAL_GetTick>
 80010c2:	0003      	movs	r3, r0
 80010c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010c6:	e009      	b.n	80010dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010c8:	f7ff fb84 	bl	80007d4 <HAL_GetTick>
 80010cc:	0002      	movs	r2, r0
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	4a91      	ldr	r2, [pc, #580]	@ (8001318 <HAL_RCC_OscConfig+0x624>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e116      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80010de:	6a1b      	ldr	r3, [r3, #32]
 80010e0:	2202      	movs	r2, #2
 80010e2:	4013      	ands	r3, r2
 80010e4:	d1f0      	bne.n	80010c8 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80010e6:	231f      	movs	r3, #31
 80010e8:	18fb      	adds	r3, r7, r3
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d105      	bne.n	80010fc <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010f0:	4b88      	ldr	r3, [pc, #544]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80010f2:	69da      	ldr	r2, [r3, #28]
 80010f4:	4b87      	ldr	r3, [pc, #540]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80010f6:	4989      	ldr	r1, [pc, #548]	@ (800131c <HAL_RCC_OscConfig+0x628>)
 80010f8:	400a      	ands	r2, r1
 80010fa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	2210      	movs	r2, #16
 8001102:	4013      	ands	r3, r2
 8001104:	d063      	beq.n	80011ce <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d12a      	bne.n	8001164 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800110e:	4b81      	ldr	r3, [pc, #516]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001110:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001112:	4b80      	ldr	r3, [pc, #512]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001114:	2104      	movs	r1, #4
 8001116:	430a      	orrs	r2, r1
 8001118:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800111a:	4b7e      	ldr	r3, [pc, #504]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800111c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800111e:	4b7d      	ldr	r3, [pc, #500]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001120:	2101      	movs	r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001126:	f7ff fb55 	bl	80007d4 <HAL_GetTick>
 800112a:	0003      	movs	r3, r0
 800112c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001130:	f7ff fb50 	bl	80007d4 <HAL_GetTick>
 8001134:	0002      	movs	r2, r0
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b02      	cmp	r3, #2
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e0e3      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001142:	4b74      	ldr	r3, [pc, #464]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001146:	2202      	movs	r2, #2
 8001148:	4013      	ands	r3, r2
 800114a:	d0f1      	beq.n	8001130 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800114c:	4b71      	ldr	r3, [pc, #452]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800114e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001150:	22f8      	movs	r2, #248	@ 0xf8
 8001152:	4393      	bics	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	00da      	lsls	r2, r3, #3
 800115c:	4b6d      	ldr	r3, [pc, #436]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800115e:	430a      	orrs	r2, r1
 8001160:	635a      	str	r2, [r3, #52]	@ 0x34
 8001162:	e034      	b.n	80011ce <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	695b      	ldr	r3, [r3, #20]
 8001168:	3305      	adds	r3, #5
 800116a:	d111      	bne.n	8001190 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800116c:	4b69      	ldr	r3, [pc, #420]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800116e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001170:	4b68      	ldr	r3, [pc, #416]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001172:	2104      	movs	r1, #4
 8001174:	438a      	bics	r2, r1
 8001176:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001178:	4b66      	ldr	r3, [pc, #408]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800117a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800117c:	22f8      	movs	r2, #248	@ 0xf8
 800117e:	4393      	bics	r3, r2
 8001180:	0019      	movs	r1, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	699b      	ldr	r3, [r3, #24]
 8001186:	00da      	lsls	r2, r3, #3
 8001188:	4b62      	ldr	r3, [pc, #392]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800118a:	430a      	orrs	r2, r1
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34
 800118e:	e01e      	b.n	80011ce <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001190:	4b60      	ldr	r3, [pc, #384]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001192:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001194:	4b5f      	ldr	r3, [pc, #380]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001196:	2104      	movs	r1, #4
 8001198:	430a      	orrs	r2, r1
 800119a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800119c:	4b5d      	ldr	r3, [pc, #372]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800119e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80011a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80011a2:	2101      	movs	r1, #1
 80011a4:	438a      	bics	r2, r1
 80011a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a8:	f7ff fb14 	bl	80007d4 <HAL_GetTick>
 80011ac:	0003      	movs	r3, r0
 80011ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011b0:	e008      	b.n	80011c4 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80011b2:	f7ff fb0f 	bl	80007d4 <HAL_GetTick>
 80011b6:	0002      	movs	r2, r0
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	1ad3      	subs	r3, r2, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d901      	bls.n	80011c4 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80011c0:	2303      	movs	r3, #3
 80011c2:	e0a2      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80011c4:	4b53      	ldr	r3, [pc, #332]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80011c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011c8:	2202      	movs	r2, #2
 80011ca:	4013      	ands	r3, r2
 80011cc:	d1f1      	bne.n	80011b2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d100      	bne.n	80011d8 <HAL_RCC_OscConfig+0x4e4>
 80011d6:	e097      	b.n	8001308 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	220c      	movs	r2, #12
 80011de:	4013      	ands	r3, r2
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d100      	bne.n	80011e6 <HAL_RCC_OscConfig+0x4f2>
 80011e4:	e06b      	b.n	80012be <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d14c      	bne.n	8001288 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ee:	4b49      	ldr	r3, [pc, #292]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4b48      	ldr	r3, [pc, #288]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80011f4:	494a      	ldr	r1, [pc, #296]	@ (8001320 <HAL_RCC_OscConfig+0x62c>)
 80011f6:	400a      	ands	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff faeb 	bl	80007d4 <HAL_GetTick>
 80011fe:	0003      	movs	r3, r0
 8001200:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001202:	e008      	b.n	8001216 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001204:	f7ff fae6 	bl	80007d4 <HAL_GetTick>
 8001208:	0002      	movs	r2, r0
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	2b02      	cmp	r3, #2
 8001210:	d901      	bls.n	8001216 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e079      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001216:	4b3f      	ldr	r3, [pc, #252]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	2380      	movs	r3, #128	@ 0x80
 800121c:	049b      	lsls	r3, r3, #18
 800121e:	4013      	ands	r3, r2
 8001220:	d1f0      	bne.n	8001204 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001222:	4b3c      	ldr	r3, [pc, #240]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001226:	220f      	movs	r2, #15
 8001228:	4393      	bics	r3, r2
 800122a:	0019      	movs	r1, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001230:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001232:	430a      	orrs	r2, r1
 8001234:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001236:	4b37      	ldr	r3, [pc, #220]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	4a3a      	ldr	r2, [pc, #232]	@ (8001324 <HAL_RCC_OscConfig+0x630>)
 800123c:	4013      	ands	r3, r2
 800123e:	0019      	movs	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001248:	431a      	orrs	r2, r3
 800124a:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800124c:	430a      	orrs	r2, r1
 800124e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001250:	4b30      	ldr	r3, [pc, #192]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 8001256:	2180      	movs	r1, #128	@ 0x80
 8001258:	0449      	lsls	r1, r1, #17
 800125a:	430a      	orrs	r2, r1
 800125c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125e:	f7ff fab9 	bl	80007d4 <HAL_GetTick>
 8001262:	0003      	movs	r3, r0
 8001264:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001266:	e008      	b.n	800127a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001268:	f7ff fab4 	bl	80007d4 <HAL_GetTick>
 800126c:	0002      	movs	r2, r0
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	2b02      	cmp	r3, #2
 8001274:	d901      	bls.n	800127a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001276:	2303      	movs	r3, #3
 8001278:	e047      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800127a:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	2380      	movs	r3, #128	@ 0x80
 8001280:	049b      	lsls	r3, r3, #18
 8001282:	4013      	ands	r3, r2
 8001284:	d0f0      	beq.n	8001268 <HAL_RCC_OscConfig+0x574>
 8001286:	e03f      	b.n	8001308 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 800128e:	4924      	ldr	r1, [pc, #144]	@ (8001320 <HAL_RCC_OscConfig+0x62c>)
 8001290:	400a      	ands	r2, r1
 8001292:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001294:	f7ff fa9e 	bl	80007d4 <HAL_GetTick>
 8001298:	0003      	movs	r3, r0
 800129a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800129c:	e008      	b.n	80012b0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800129e:	f7ff fa99 	bl	80007d4 <HAL_GetTick>
 80012a2:	0002      	movs	r2, r0
 80012a4:	69bb      	ldr	r3, [r7, #24]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d901      	bls.n	80012b0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e02c      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b0:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	2380      	movs	r3, #128	@ 0x80
 80012b6:	049b      	lsls	r3, r3, #18
 80012b8:	4013      	ands	r3, r2
 80012ba:	d1f0      	bne.n	800129e <HAL_RCC_OscConfig+0x5aa>
 80012bc:	e024      	b.n	8001308 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1b      	ldr	r3, [r3, #32]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e01f      	b.n	800130a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80012ca:	4b12      	ldr	r3, [pc, #72]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_RCC_OscConfig+0x620>)
 80012d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012d4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012d6:	697a      	ldr	r2, [r7, #20]
 80012d8:	2380      	movs	r3, #128	@ 0x80
 80012da:	025b      	lsls	r3, r3, #9
 80012dc:	401a      	ands	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d10e      	bne.n	8001304 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	220f      	movs	r2, #15
 80012ea:	401a      	ands	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d107      	bne.n	8001304 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	23f0      	movs	r3, #240	@ 0xf0
 80012f8:	039b      	lsls	r3, r3, #14
 80012fa:	401a      	ands	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001300:	429a      	cmp	r2, r3
 8001302:	d001      	beq.n	8001308 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	e000      	b.n	800130a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	0018      	movs	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	b008      	add	sp, #32
 8001310:	bd80      	pop	{r7, pc}
 8001312:	46c0      	nop			@ (mov r8, r8)
 8001314:	40021000 	.word	0x40021000
 8001318:	00001388 	.word	0x00001388
 800131c:	efffffff 	.word	0xefffffff
 8001320:	feffffff 	.word	0xfeffffff
 8001324:	ffc2ffff 	.word	0xffc2ffff

08001328 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0b3      	b.n	80014a4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800133c:	4b5b      	ldr	r3, [pc, #364]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2201      	movs	r2, #1
 8001342:	4013      	ands	r3, r2
 8001344:	683a      	ldr	r2, [r7, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d911      	bls.n	800136e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800134a:	4b58      	ldr	r3, [pc, #352]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2201      	movs	r2, #1
 8001350:	4393      	bics	r3, r2
 8001352:	0019      	movs	r1, r3
 8001354:	4b55      	ldr	r3, [pc, #340]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800135c:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2201      	movs	r2, #1
 8001362:	4013      	ands	r3, r2
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	429a      	cmp	r2, r3
 8001368:	d001      	beq.n	800136e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e09a      	b.n	80014a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d015      	beq.n	80013a4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2204      	movs	r2, #4
 800137e:	4013      	ands	r3, r2
 8001380:	d006      	beq.n	8001390 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001382:	4b4b      	ldr	r3, [pc, #300]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	4b4a      	ldr	r3, [pc, #296]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 8001388:	21e0      	movs	r1, #224	@ 0xe0
 800138a:	00c9      	lsls	r1, r1, #3
 800138c:	430a      	orrs	r2, r1
 800138e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001390:	4b47      	ldr	r3, [pc, #284]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	22f0      	movs	r2, #240	@ 0xf0
 8001396:	4393      	bics	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 80013a0:	430a      	orrs	r2, r1
 80013a2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2201      	movs	r2, #1
 80013aa:	4013      	ands	r3, r2
 80013ac:	d040      	beq.n	8001430 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d107      	bne.n	80013c6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b6:	4b3e      	ldr	r3, [pc, #248]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d114      	bne.n	80013ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e06e      	b.n	80014a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d107      	bne.n	80013de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013ce:	4b38      	ldr	r3, [pc, #224]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	@ 0x80
 80013d4:	049b      	lsls	r3, r3, #18
 80013d6:	4013      	ands	r3, r2
 80013d8:	d108      	bne.n	80013ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e062      	b.n	80014a4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d101      	bne.n	80013ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e05b      	b.n	80014a4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	4393      	bics	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	4b2d      	ldr	r3, [pc, #180]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001400:	f7ff f9e8 	bl	80007d4 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001408:	e009      	b.n	800141e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800140a:	f7ff f9e3 	bl	80007d4 <HAL_GetTick>
 800140e:	0002      	movs	r2, r0
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	4a27      	ldr	r2, [pc, #156]	@ (80014b4 <HAL_RCC_ClockConfig+0x18c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d901      	bls.n	800141e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e042      	b.n	80014a4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	220c      	movs	r2, #12
 8001424:	401a      	ands	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	429a      	cmp	r2, r3
 800142e:	d1ec      	bne.n	800140a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001430:	4b1e      	ldr	r3, [pc, #120]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2201      	movs	r2, #1
 8001436:	4013      	ands	r3, r2
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	429a      	cmp	r2, r3
 800143c:	d211      	bcs.n	8001462 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800143e:	4b1b      	ldr	r3, [pc, #108]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2201      	movs	r2, #1
 8001444:	4393      	bics	r3, r2
 8001446:	0019      	movs	r1, r3
 8001448:	4b18      	ldr	r3, [pc, #96]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001450:	4b16      	ldr	r3, [pc, #88]	@ (80014ac <HAL_RCC_ClockConfig+0x184>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2201      	movs	r2, #1
 8001456:	4013      	ands	r3, r2
 8001458:	683a      	ldr	r2, [r7, #0]
 800145a:	429a      	cmp	r2, r3
 800145c:	d001      	beq.n	8001462 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e020      	b.n	80014a4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2204      	movs	r2, #4
 8001468:	4013      	ands	r3, r2
 800146a:	d009      	beq.n	8001480 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800146c:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	4a11      	ldr	r2, [pc, #68]	@ (80014b8 <HAL_RCC_ClockConfig+0x190>)
 8001472:	4013      	ands	r3, r2
 8001474:	0019      	movs	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	4b0d      	ldr	r3, [pc, #52]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 800147c:	430a      	orrs	r2, r1
 800147e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001480:	f000 f820 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 8001484:	0001      	movs	r1, r0
 8001486:	4b0a      	ldr	r3, [pc, #40]	@ (80014b0 <HAL_RCC_ClockConfig+0x188>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	091b      	lsrs	r3, r3, #4
 800148c:	220f      	movs	r2, #15
 800148e:	4013      	ands	r3, r2
 8001490:	4a0a      	ldr	r2, [pc, #40]	@ (80014bc <HAL_RCC_ClockConfig+0x194>)
 8001492:	5cd3      	ldrb	r3, [r2, r3]
 8001494:	000a      	movs	r2, r1
 8001496:	40da      	lsrs	r2, r3
 8001498:	4b09      	ldr	r3, [pc, #36]	@ (80014c0 <HAL_RCC_ClockConfig+0x198>)
 800149a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800149c:	2000      	movs	r0, #0
 800149e:	f7ff f953 	bl	8000748 <HAL_InitTick>
  
  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b004      	add	sp, #16
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40022000 	.word	0x40022000
 80014b0:	40021000 	.word	0x40021000
 80014b4:	00001388 	.word	0x00001388
 80014b8:	fffff8ff 	.word	0xfffff8ff
 80014bc:	08002b68 	.word	0x08002b68
 80014c0:	20000000 	.word	0x20000000

080014c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014c4:	b590      	push	{r4, r7, lr}
 80014c6:	b08f      	sub	sp, #60	@ 0x3c
 80014c8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80014ca:	2314      	movs	r3, #20
 80014cc:	18fb      	adds	r3, r7, r3
 80014ce:	4a2b      	ldr	r2, [pc, #172]	@ (800157c <HAL_RCC_GetSysClockFreq+0xb8>)
 80014d0:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014d2:	c313      	stmia	r3!, {r0, r1, r4}
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	4a29      	ldr	r2, [pc, #164]	@ (8001580 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014dc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80014de:	c313      	stmia	r3!, {r0, r1, r4}
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014e8:	2300      	movs	r3, #0
 80014ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014ec:	2300      	movs	r3, #0
 80014ee:	637b      	str	r3, [r7, #52]	@ 0x34
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 80014f8:	4b22      	ldr	r3, [pc, #136]	@ (8001584 <HAL_RCC_GetSysClockFreq+0xc0>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001500:	220c      	movs	r2, #12
 8001502:	4013      	ands	r3, r2
 8001504:	2b04      	cmp	r3, #4
 8001506:	d002      	beq.n	800150e <HAL_RCC_GetSysClockFreq+0x4a>
 8001508:	2b08      	cmp	r3, #8
 800150a:	d003      	beq.n	8001514 <HAL_RCC_GetSysClockFreq+0x50>
 800150c:	e02d      	b.n	800156a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800150e:	4b1e      	ldr	r3, [pc, #120]	@ (8001588 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001510:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001512:	e02d      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001516:	0c9b      	lsrs	r3, r3, #18
 8001518:	220f      	movs	r2, #15
 800151a:	4013      	ands	r3, r2
 800151c:	2214      	movs	r2, #20
 800151e:	18ba      	adds	r2, r7, r2
 8001520:	5cd3      	ldrb	r3, [r2, r3]
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001524:	4b17      	ldr	r3, [pc, #92]	@ (8001584 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	220f      	movs	r2, #15
 800152a:	4013      	ands	r3, r2
 800152c:	1d3a      	adds	r2, r7, #4
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	025b      	lsls	r3, r3, #9
 8001538:	4013      	ands	r3, r2
 800153a:	d009      	beq.n	8001550 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800153c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800153e:	4812      	ldr	r0, [pc, #72]	@ (8001588 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001540:	f7fe fdec 	bl	800011c <__udivsi3>
 8001544:	0003      	movs	r3, r0
 8001546:	001a      	movs	r2, r3
 8001548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154a:	4353      	muls	r3, r2
 800154c:	637b      	str	r3, [r7, #52]	@ 0x34
 800154e:	e009      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001550:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001552:	000a      	movs	r2, r1
 8001554:	0152      	lsls	r2, r2, #5
 8001556:	1a52      	subs	r2, r2, r1
 8001558:	0193      	lsls	r3, r2, #6
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	185b      	adds	r3, r3, r1
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001566:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001568:	e002      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <HAL_RCC_GetSysClockFreq+0xc4>)
 800156c:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800156e:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001572:	0018      	movs	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	b00f      	add	sp, #60	@ 0x3c
 8001578:	bd90      	pop	{r4, r7, pc}
 800157a:	46c0      	nop			@ (mov r8, r8)
 800157c:	08002b48 	.word	0x08002b48
 8001580:	08002b58 	.word	0x08002b58
 8001584:	40021000 	.word	0x40021000
 8001588:	007a1200 	.word	0x007a1200

0800158c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001590:	4b02      	ldr	r3, [pc, #8]	@ (800159c <HAL_RCC_GetHCLKFreq+0x10>)
 8001592:	681b      	ldr	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			@ (mov r8, r8)
 800159c:	20000000 	.word	0x20000000

080015a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80015a4:	f7ff fff2 	bl	800158c <HAL_RCC_GetHCLKFreq>
 80015a8:	0001      	movs	r1, r0
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	0a1b      	lsrs	r3, r3, #8
 80015b0:	2207      	movs	r2, #7
 80015b2:	4013      	ands	r3, r2
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80015b6:	5cd3      	ldrb	r3, [r2, r3]
 80015b8:	40d9      	lsrs	r1, r3
 80015ba:	000b      	movs	r3, r1
}    
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	46c0      	nop			@ (mov r8, r8)
 80015c4:	40021000 	.word	0x40021000
 80015c8:	08002b78 	.word	0x08002b78

080015cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d101      	bne.n	80015de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e01e      	b.n	800161c <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	223d      	movs	r2, #61	@ 0x3d
 80015e2:	5c9b      	ldrb	r3, [r3, r2]
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d107      	bne.n	80015fa <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	223c      	movs	r2, #60	@ 0x3c
 80015ee:	2100      	movs	r1, #0
 80015f0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	0018      	movs	r0, r3
 80015f6:	f7fe ff93 	bl	8000520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	223d      	movs	r2, #61	@ 0x3d
 80015fe:	2102      	movs	r1, #2
 8001600:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3304      	adds	r3, #4
 800160a:	0019      	movs	r1, r3
 800160c:	0010      	movs	r0, r2
 800160e:	f000 f961 	bl	80018d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	223d      	movs	r2, #61	@ 0x3d
 8001616:	2101      	movs	r1, #1
 8001618:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	68da      	ldr	r2, [r3, #12]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2101      	movs	r1, #1
 8001638:	430a      	orrs	r2, r1
 800163a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2207      	movs	r2, #7
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b06      	cmp	r3, #6
 800164c:	d007      	beq.n	800165e <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	0018      	movs	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	b004      	add	sp, #16
 8001666:	bd80      	pop	{r7, pc}

08001668 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	2b02      	cmp	r3, #2
 800167c:	d124      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	2b02      	cmp	r3, #2
 800168a:	d11d      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2203      	movs	r2, #3
 8001692:	4252      	negs	r2, r2
 8001694:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	2203      	movs	r2, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	d004      	beq.n	80016b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	0018      	movs	r0, r3
 80016ac:	f000 f8fa 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 80016b0:	e007      	b.n	80016c2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	0018      	movs	r0, r3
 80016b6:	f000 f8ed 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	0018      	movs	r0, r3
 80016be:	f000 f8f9 	bl	80018b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2204      	movs	r2, #4
 80016d0:	4013      	ands	r3, r2
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d125      	bne.n	8001722 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	2204      	movs	r2, #4
 80016de:	4013      	ands	r3, r2
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d11e      	bne.n	8001722 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2205      	movs	r2, #5
 80016ea:	4252      	negs	r2, r2
 80016ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2202      	movs	r2, #2
 80016f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699a      	ldr	r2, [r3, #24]
 80016fa:	23c0      	movs	r3, #192	@ 0xc0
 80016fc:	009b      	lsls	r3, r3, #2
 80016fe:	4013      	ands	r3, r2
 8001700:	d004      	beq.n	800170c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	0018      	movs	r0, r3
 8001706:	f000 f8cd 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 800170a:	e007      	b.n	800171c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	0018      	movs	r0, r3
 8001710:	f000 f8c0 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	0018      	movs	r0, r3
 8001718:	f000 f8cc 	bl	80018b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2200      	movs	r2, #0
 8001720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	2208      	movs	r2, #8
 800172a:	4013      	ands	r3, r2
 800172c:	2b08      	cmp	r3, #8
 800172e:	d124      	bne.n	800177a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2208      	movs	r2, #8
 8001738:	4013      	ands	r3, r2
 800173a:	2b08      	cmp	r3, #8
 800173c:	d11d      	bne.n	800177a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2209      	movs	r2, #9
 8001744:	4252      	negs	r2, r2
 8001746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2204      	movs	r2, #4
 800174c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2203      	movs	r2, #3
 8001756:	4013      	ands	r3, r2
 8001758:	d004      	beq.n	8001764 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	0018      	movs	r0, r3
 800175e:	f000 f8a1 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 8001762:	e007      	b.n	8001774 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	0018      	movs	r0, r3
 8001768:	f000 f894 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f8a0 	bl	80018b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	691b      	ldr	r3, [r3, #16]
 8001780:	2210      	movs	r2, #16
 8001782:	4013      	ands	r3, r2
 8001784:	2b10      	cmp	r3, #16
 8001786:	d125      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68db      	ldr	r3, [r3, #12]
 800178e:	2210      	movs	r2, #16
 8001790:	4013      	ands	r3, r2
 8001792:	2b10      	cmp	r3, #16
 8001794:	d11e      	bne.n	80017d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2211      	movs	r2, #17
 800179c:	4252      	negs	r2, r2
 800179e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2208      	movs	r2, #8
 80017a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	69da      	ldr	r2, [r3, #28]
 80017ac:	23c0      	movs	r3, #192	@ 0xc0
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4013      	ands	r3, r2
 80017b2:	d004      	beq.n	80017be <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	0018      	movs	r0, r3
 80017b8:	f000 f874 	bl	80018a4 <HAL_TIM_IC_CaptureCallback>
 80017bc:	e007      	b.n	80017ce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 f867 	bl	8001894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	0018      	movs	r0, r3
 80017ca:	f000 f873 	bl	80018b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2200      	movs	r2, #0
 80017d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2201      	movs	r2, #1
 80017dc:	4013      	ands	r3, r2
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d10f      	bne.n	8001802 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	2201      	movs	r2, #1
 80017ea:	4013      	ands	r3, r2
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d108      	bne.n	8001802 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2202      	movs	r2, #2
 80017f6:	4252      	negs	r2, r2
 80017f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	0018      	movs	r0, r3
 80017fe:	f7fe fe51 	bl	80004a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	2280      	movs	r2, #128	@ 0x80
 800180a:	4013      	ands	r3, r2
 800180c:	2b80      	cmp	r3, #128	@ 0x80
 800180e:	d10f      	bne.n	8001830 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	2280      	movs	r2, #128	@ 0x80
 8001818:	4013      	ands	r3, r2
 800181a:	2b80      	cmp	r3, #128	@ 0x80
 800181c:	d108      	bne.n	8001830 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2281      	movs	r2, #129	@ 0x81
 8001824:	4252      	negs	r2, r2
 8001826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f000 f8d0 	bl	80019d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	2240      	movs	r2, #64	@ 0x40
 8001838:	4013      	ands	r3, r2
 800183a:	2b40      	cmp	r3, #64	@ 0x40
 800183c:	d10f      	bne.n	800185e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	2240      	movs	r2, #64	@ 0x40
 8001846:	4013      	ands	r3, r2
 8001848:	2b40      	cmp	r3, #64	@ 0x40
 800184a:	d108      	bne.n	800185e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2241      	movs	r2, #65	@ 0x41
 8001852:	4252      	negs	r2, r2
 8001854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	0018      	movs	r0, r3
 800185a:	f000 f833 	bl	80018c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	691b      	ldr	r3, [r3, #16]
 8001864:	2220      	movs	r2, #32
 8001866:	4013      	ands	r3, r2
 8001868:	2b20      	cmp	r3, #32
 800186a:	d10f      	bne.n	800188c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	2220      	movs	r2, #32
 8001874:	4013      	ands	r3, r2
 8001876:	2b20      	cmp	r3, #32
 8001878:	d108      	bne.n	800188c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2221      	movs	r2, #33	@ 0x21
 8001880:	4252      	negs	r2, r2
 8001882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	0018      	movs	r0, r3
 8001888:	f000 f89a 	bl	80019c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800188c:	46c0      	nop			@ (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b002      	add	sp, #8
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800189c:	46c0      	nop			@ (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018ac:	46c0      	nop			@ (mov r8, r8)
 80018ae:	46bd      	mov	sp, r7
 80018b0:	b002      	add	sp, #8
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018bc:	46c0      	nop			@ (mov r8, r8)
 80018be:	46bd      	mov	sp, r7
 80018c0:	b002      	add	sp, #8
 80018c2:	bd80      	pop	{r7, pc}

080018c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018cc:	46c0      	nop			@ (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	b002      	add	sp, #8
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a2f      	ldr	r2, [pc, #188]	@ (80019a4 <TIM_Base_SetConfig+0xd0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d003      	beq.n	80018f4 <TIM_Base_SetConfig+0x20>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a2e      	ldr	r2, [pc, #184]	@ (80019a8 <TIM_Base_SetConfig+0xd4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d108      	bne.n	8001906 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2270      	movs	r2, #112	@ 0x70
 80018f8:	4393      	bics	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a26      	ldr	r2, [pc, #152]	@ (80019a4 <TIM_Base_SetConfig+0xd0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d013      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a25      	ldr	r2, [pc, #148]	@ (80019a8 <TIM_Base_SetConfig+0xd4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d00f      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a24      	ldr	r2, [pc, #144]	@ (80019ac <TIM_Base_SetConfig+0xd8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00b      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a23      	ldr	r2, [pc, #140]	@ (80019b0 <TIM_Base_SetConfig+0xdc>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a22      	ldr	r2, [pc, #136]	@ (80019b4 <TIM_Base_SetConfig+0xe0>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d003      	beq.n	8001936 <TIM_Base_SetConfig+0x62>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a21      	ldr	r2, [pc, #132]	@ (80019b8 <TIM_Base_SetConfig+0xe4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d108      	bne.n	8001948 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4a20      	ldr	r2, [pc, #128]	@ (80019bc <TIM_Base_SetConfig+0xe8>)
 800193a:	4013      	ands	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2280      	movs	r2, #128	@ 0x80
 800194c:	4393      	bics	r3, r2
 800194e:	001a      	movs	r2, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	4313      	orrs	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <TIM_Base_SetConfig+0xd0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00b      	beq.n	800198e <TIM_Base_SetConfig+0xba>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a0d      	ldr	r2, [pc, #52]	@ (80019b0 <TIM_Base_SetConfig+0xdc>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d007      	beq.n	800198e <TIM_Base_SetConfig+0xba>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a0c      	ldr	r2, [pc, #48]	@ (80019b4 <TIM_Base_SetConfig+0xe0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d003      	beq.n	800198e <TIM_Base_SetConfig+0xba>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a0b      	ldr	r2, [pc, #44]	@ (80019b8 <TIM_Base_SetConfig+0xe4>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d103      	bne.n	8001996 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	691a      	ldr	r2, [r3, #16]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	615a      	str	r2, [r3, #20]
}
 800199c:	46c0      	nop			@ (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40002000 	.word	0x40002000
 80019b0:	40014000 	.word	0x40014000
 80019b4:	40014400 	.word	0x40014400
 80019b8:	40014800 	.word	0x40014800
 80019bc:	fffffcff 	.word	0xfffffcff

080019c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80019c8:	46c0      	nop			@ (mov r8, r8)
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80019d8:	46c0      	nop			@ (mov r8, r8)
 80019da:	46bd      	mov	sp, r7
 80019dc:	b002      	add	sp, #8
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e044      	b.n	8001a7c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2270      	movs	r2, #112	@ 0x70
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe fdb3 	bl	8000570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2224      	movs	r2, #36	@ 0x24
 8001a0e:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	438a      	bics	r2, r1
 8001a1e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 f8d8 	bl	8001bd8 <UART_SetConfig>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d101      	bne.n	8001a32 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e024      	b.n	8001a7c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d003      	beq.n	8001a42 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	f000 fa53 	bl	8001ee8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	490d      	ldr	r1, [pc, #52]	@ (8001a84 <HAL_UART_Init+0xa4>)
 8001a4e:	400a      	ands	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2108      	movs	r1, #8
 8001a5e:	438a      	bics	r2, r1
 8001a60:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 faeb 	bl	8002050 <UART_CheckIdleState>
 8001a7a:	0003      	movs	r3, r0
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	fffff7ff 	.word	0xfffff7ff

08001a88 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	@ 0x28
 8001a8c:	af02      	add	r7, sp, #8
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	603b      	str	r3, [r7, #0]
 8001a94:	1dbb      	adds	r3, r7, #6
 8001a96:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a9c:	2b20      	cmp	r3, #32
 8001a9e:	d000      	beq.n	8001aa2 <HAL_UART_Transmit+0x1a>
 8001aa0:	e094      	b.n	8001bcc <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_UART_Transmit+0x28>
 8001aa8:	1dbb      	adds	r3, r7, #6
 8001aaa:	881b      	ldrh	r3, [r3, #0]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e08c      	b.n	8001bce <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	2380      	movs	r3, #128	@ 0x80
 8001aba:	015b      	lsls	r3, r3, #5
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d109      	bne.n	8001ad4 <HAL_UART_Transmit+0x4c>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d105      	bne.n	8001ad4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	2201      	movs	r2, #1
 8001acc:	4013      	ands	r3, r2
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e07c      	b.n	8001bce <HAL_UART_Transmit+0x146>
      }
    }

    __HAL_LOCK(huart);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2270      	movs	r2, #112	@ 0x70
 8001ad8:	5c9b      	ldrb	r3, [r3, r2]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_UART_Transmit+0x5a>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e075      	b.n	8001bce <HAL_UART_Transmit+0x146>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2270      	movs	r2, #112	@ 0x70
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2200      	movs	r2, #0
 8001aee:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2221      	movs	r2, #33	@ 0x21
 8001af4:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8001af6:	f7fe fe6d 	bl	80007d4 <HAL_GetTick>
 8001afa:	0003      	movs	r3, r0
 8001afc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	1dba      	adds	r2, r7, #6
 8001b02:	2150      	movs	r1, #80	@ 0x50
 8001b04:	8812      	ldrh	r2, [r2, #0]
 8001b06:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	1dba      	adds	r2, r7, #6
 8001b0c:	2152      	movs	r1, #82	@ 0x52
 8001b0e:	8812      	ldrh	r2, [r2, #0]
 8001b10:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	689a      	ldr	r2, [r3, #8]
 8001b16:	2380      	movs	r3, #128	@ 0x80
 8001b18:	015b      	lsls	r3, r3, #5
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d108      	bne.n	8001b30 <HAL_UART_Transmit+0xa8>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	e003      	b.n	8001b38 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b38:	e02c      	b.n	8001b94 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	0013      	movs	r3, r2
 8001b44:	2200      	movs	r2, #0
 8001b46:	2180      	movs	r1, #128	@ 0x80
 8001b48:	f000 fac6 	bl	80020d8 <UART_WaitOnFlagUntilTimeout>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e03c      	b.n	8001bce <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10b      	bne.n	8001b72 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	881a      	ldrh	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	05d2      	lsls	r2, r2, #23
 8001b64:	0dd2      	lsrs	r2, r2, #23
 8001b66:	b292      	uxth	r2, r2
 8001b68:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001b6a:	69bb      	ldr	r3, [r7, #24]
 8001b6c:	3302      	adds	r3, #2
 8001b6e:	61bb      	str	r3, [r7, #24]
 8001b70:	e007      	b.n	8001b82 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	781a      	ldrb	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2252      	movs	r2, #82	@ 0x52
 8001b86:	5a9b      	ldrh	r3, [r3, r2]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	b299      	uxth	r1, r3
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2252      	movs	r2, #82	@ 0x52
 8001b92:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2252      	movs	r2, #82	@ 0x52
 8001b98:	5a9b      	ldrh	r3, [r3, r2]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1cc      	bne.n	8001b3a <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	0013      	movs	r3, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	2140      	movs	r1, #64	@ 0x40
 8001bae:	f000 fa93 	bl	80020d8 <UART_WaitOnFlagUntilTimeout>
 8001bb2:	1e03      	subs	r3, r0, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e009      	b.n	8001bce <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2220      	movs	r2, #32
 8001bbe:	675a      	str	r2, [r3, #116]	@ 0x74

    __HAL_UNLOCK(huart);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	2270      	movs	r2, #112	@ 0x70
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e000      	b.n	8001bce <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8001bcc:	2302      	movs	r3, #2
  }
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b008      	add	sp, #32
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b088      	sub	sp, #32
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001be4:	2317      	movs	r3, #23
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4aaf      	ldr	r2, [pc, #700]	@ (8001ec8 <UART_SetConfig+0x2f0>)
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4aaa      	ldr	r2, [pc, #680]	@ (8001ecc <UART_SetConfig+0x2f4>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	0019      	movs	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	68da      	ldr	r2, [r3, #12]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	4aa1      	ldr	r2, [pc, #644]	@ (8001ed0 <UART_SetConfig+0x2f8>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a9d      	ldr	r2, [pc, #628]	@ (8001ed4 <UART_SetConfig+0x2fc>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d127      	bne.n	8001cb2 <UART_SetConfig+0xda>
 8001c62:	4b9d      	ldr	r3, [pc, #628]	@ (8001ed8 <UART_SetConfig+0x300>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c66:	2203      	movs	r2, #3
 8001c68:	4013      	ands	r3, r2
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d00d      	beq.n	8001c8a <UART_SetConfig+0xb2>
 8001c6e:	d81b      	bhi.n	8001ca8 <UART_SetConfig+0xd0>
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d014      	beq.n	8001c9e <UART_SetConfig+0xc6>
 8001c74:	d818      	bhi.n	8001ca8 <UART_SetConfig+0xd0>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <UART_SetConfig+0xa8>
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d00a      	beq.n	8001c94 <UART_SetConfig+0xbc>
 8001c7e:	e013      	b.n	8001ca8 <UART_SetConfig+0xd0>
 8001c80:	231f      	movs	r3, #31
 8001c82:	18fb      	adds	r3, r7, r3
 8001c84:	2200      	movs	r2, #0
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e021      	b.n	8001cce <UART_SetConfig+0xf6>
 8001c8a:	231f      	movs	r3, #31
 8001c8c:	18fb      	adds	r3, r7, r3
 8001c8e:	2202      	movs	r2, #2
 8001c90:	701a      	strb	r2, [r3, #0]
 8001c92:	e01c      	b.n	8001cce <UART_SetConfig+0xf6>
 8001c94:	231f      	movs	r3, #31
 8001c96:	18fb      	adds	r3, r7, r3
 8001c98:	2204      	movs	r2, #4
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	e017      	b.n	8001cce <UART_SetConfig+0xf6>
 8001c9e:	231f      	movs	r3, #31
 8001ca0:	18fb      	adds	r3, r7, r3
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	e012      	b.n	8001cce <UART_SetConfig+0xf6>
 8001ca8:	231f      	movs	r3, #31
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	2210      	movs	r2, #16
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e00d      	b.n	8001cce <UART_SetConfig+0xf6>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a89      	ldr	r2, [pc, #548]	@ (8001edc <UART_SetConfig+0x304>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d104      	bne.n	8001cc6 <UART_SetConfig+0xee>
 8001cbc:	231f      	movs	r3, #31
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]
 8001cc4:	e003      	b.n	8001cce <UART_SetConfig+0xf6>
 8001cc6:	231f      	movs	r3, #31
 8001cc8:	18fb      	adds	r3, r7, r3
 8001cca:	2210      	movs	r2, #16
 8001ccc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	2380      	movs	r3, #128	@ 0x80
 8001cd4:	021b      	lsls	r3, r3, #8
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d000      	beq.n	8001cdc <UART_SetConfig+0x104>
 8001cda:	e07e      	b.n	8001dda <UART_SetConfig+0x202>
  {
    switch (clocksource)
 8001cdc:	231f      	movs	r3, #31
 8001cde:	18fb      	adds	r3, r7, r3
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d03f      	beq.n	8001d66 <UART_SetConfig+0x18e>
 8001ce6:	dc4e      	bgt.n	8001d86 <UART_SetConfig+0x1ae>
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d028      	beq.n	8001d3e <UART_SetConfig+0x166>
 8001cec:	dc4b      	bgt.n	8001d86 <UART_SetConfig+0x1ae>
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <UART_SetConfig+0x120>
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d014      	beq.n	8001d20 <UART_SetConfig+0x148>
 8001cf6:	e046      	b.n	8001d86 <UART_SetConfig+0x1ae>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f7ff fc52 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	005a      	lsls	r2, r3, #1
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	085b      	lsrs	r3, r3, #1
 8001d0a:	18d2      	adds	r2, r2, r3
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	0019      	movs	r1, r3
 8001d12:	0010      	movs	r0, r2
 8001d14:	f7fe fa02 	bl	800011c <__udivsi3>
 8001d18:	0003      	movs	r3, r0
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	61bb      	str	r3, [r7, #24]
        break;
 8001d1e:	e037      	b.n	8001d90 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	4a6e      	ldr	r2, [pc, #440]	@ (8001ee0 <UART_SetConfig+0x308>)
 8001d28:	189a      	adds	r2, r3, r2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	0019      	movs	r1, r3
 8001d30:	0010      	movs	r0, r2
 8001d32:	f7fe f9f3 	bl	800011c <__udivsi3>
 8001d36:	0003      	movs	r3, r0
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	61bb      	str	r3, [r7, #24]
        break;
 8001d3c:	e028      	b.n	8001d90 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001d3e:	f7ff fbc1 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 8001d42:	0003      	movs	r3, r0
 8001d44:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	005a      	lsls	r2, r3, #1
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	18d2      	adds	r2, r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	0019      	movs	r1, r3
 8001d58:	0010      	movs	r0, r2
 8001d5a:	f7fe f9df 	bl	800011c <__udivsi3>
 8001d5e:	0003      	movs	r3, r0
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	61bb      	str	r3, [r7, #24]
        break;
 8001d64:	e014      	b.n	8001d90 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	085b      	lsrs	r3, r3, #1
 8001d6c:	2280      	movs	r2, #128	@ 0x80
 8001d6e:	0252      	lsls	r2, r2, #9
 8001d70:	189a      	adds	r2, r3, r2
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	0019      	movs	r1, r3
 8001d78:	0010      	movs	r0, r2
 8001d7a:	f7fe f9cf 	bl	800011c <__udivsi3>
 8001d7e:	0003      	movs	r3, r0
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	61bb      	str	r3, [r7, #24]
        break;
 8001d84:	e004      	b.n	8001d90 <UART_SetConfig+0x1b8>
      default:
        ret = HAL_ERROR;
 8001d86:	2317      	movs	r3, #23
 8001d88:	18fb      	adds	r3, r7, r3
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	701a      	strb	r2, [r3, #0]
        break;
 8001d8e:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	2b0f      	cmp	r3, #15
 8001d94:	d91c      	bls.n	8001dd0 <UART_SetConfig+0x1f8>
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	2380      	movs	r3, #128	@ 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d217      	bcs.n	8001dd0 <UART_SetConfig+0x1f8>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	200a      	movs	r0, #10
 8001da6:	183b      	adds	r3, r7, r0
 8001da8:	210f      	movs	r1, #15
 8001daa:	438a      	bics	r2, r1
 8001dac:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	2207      	movs	r2, #7
 8001db6:	4013      	ands	r3, r2
 8001db8:	b299      	uxth	r1, r3
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	183a      	adds	r2, r7, r0
 8001dbe:	8812      	ldrh	r2, [r2, #0]
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	183a      	adds	r2, r7, r0
 8001dca:	8812      	ldrh	r2, [r2, #0]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	e06d      	b.n	8001eac <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 8001dd0:	2317      	movs	r3, #23
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	e068      	b.n	8001eac <UART_SetConfig+0x2d4>
    }
  }
  else
  {
    switch (clocksource)
 8001dda:	231f      	movs	r3, #31
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d03d      	beq.n	8001e60 <UART_SetConfig+0x288>
 8001de4:	dc4c      	bgt.n	8001e80 <UART_SetConfig+0x2a8>
 8001de6:	2b04      	cmp	r3, #4
 8001de8:	d027      	beq.n	8001e3a <UART_SetConfig+0x262>
 8001dea:	dc49      	bgt.n	8001e80 <UART_SetConfig+0x2a8>
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d002      	beq.n	8001df6 <UART_SetConfig+0x21e>
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d013      	beq.n	8001e1c <UART_SetConfig+0x244>
 8001df4:	e044      	b.n	8001e80 <UART_SetConfig+0x2a8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001df6:	f7ff fbd3 	bl	80015a0 <HAL_RCC_GetPCLK1Freq>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	085a      	lsrs	r2, r3, #1
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	18d2      	adds	r2, r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	0010      	movs	r0, r2
 8001e10:	f7fe f984 	bl	800011c <__udivsi3>
 8001e14:	0003      	movs	r3, r0
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	61bb      	str	r3, [r7, #24]
        break;
 8001e1a:	e036      	b.n	8001e8a <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	4a30      	ldr	r2, [pc, #192]	@ (8001ee4 <UART_SetConfig+0x30c>)
 8001e24:	189a      	adds	r2, r3, r2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	0019      	movs	r1, r3
 8001e2c:	0010      	movs	r0, r2
 8001e2e:	f7fe f975 	bl	800011c <__udivsi3>
 8001e32:	0003      	movs	r3, r0
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	61bb      	str	r3, [r7, #24]
        break;
 8001e38:	e027      	b.n	8001e8a <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001e3a:	f7ff fb43 	bl	80014c4 <HAL_RCC_GetSysClockFreq>
 8001e3e:	0003      	movs	r3, r0
 8001e40:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	085a      	lsrs	r2, r3, #1
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	18d2      	adds	r2, r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	0019      	movs	r1, r3
 8001e52:	0010      	movs	r0, r2
 8001e54:	f7fe f962 	bl	800011c <__udivsi3>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	61bb      	str	r3, [r7, #24]
        break;
 8001e5e:	e014      	b.n	8001e8a <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	085b      	lsrs	r3, r3, #1
 8001e66:	2280      	movs	r2, #128	@ 0x80
 8001e68:	0212      	lsls	r2, r2, #8
 8001e6a:	189a      	adds	r2, r3, r2
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	0019      	movs	r1, r3
 8001e72:	0010      	movs	r0, r2
 8001e74:	f7fe f952 	bl	800011c <__udivsi3>
 8001e78:	0003      	movs	r3, r0
 8001e7a:	b29b      	uxth	r3, r3
 8001e7c:	61bb      	str	r3, [r7, #24]
        break;
 8001e7e:	e004      	b.n	8001e8a <UART_SetConfig+0x2b2>
      default:
        ret = HAL_ERROR;
 8001e80:	2317      	movs	r3, #23
 8001e82:	18fb      	adds	r3, r7, r3
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
        break;
 8001e88:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d909      	bls.n	8001ea4 <UART_SetConfig+0x2cc>
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	2380      	movs	r3, #128	@ 0x80
 8001e94:	025b      	lsls	r3, r3, #9
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d204      	bcs.n	8001ea4 <UART_SetConfig+0x2cc>
    {
      huart->Instance->BRR = usartdiv;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	e003      	b.n	8001eac <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 8001ea4:	2317      	movs	r3, #23
 8001ea6:	18fb      	adds	r3, r7, r3
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8001eb8:	2317      	movs	r3, #23
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	781b      	ldrb	r3, [r3, #0]
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b008      	add	sp, #32
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			@ (mov r8, r8)
 8001ec8:	ffff69f3 	.word	0xffff69f3
 8001ecc:	ffffcfff 	.word	0xffffcfff
 8001ed0:	fffff4ff 	.word	0xfffff4ff
 8001ed4:	40013800 	.word	0x40013800
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	00f42400 	.word	0x00f42400
 8001ee4:	007a1200 	.word	0x007a1200

08001ee8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	d00b      	beq.n	8001f12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	4a4a      	ldr	r2, [pc, #296]	@ (800202c <UART_AdvFeatureConfig+0x144>)
 8001f02:	4013      	ands	r3, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f16:	2202      	movs	r2, #2
 8001f18:	4013      	ands	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4a43      	ldr	r2, [pc, #268]	@ (8002030 <UART_AdvFeatureConfig+0x148>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	0019      	movs	r1, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f38:	2204      	movs	r2, #4
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d00b      	beq.n	8001f56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a3b      	ldr	r2, [pc, #236]	@ (8002034 <UART_AdvFeatureConfig+0x14c>)
 8001f46:	4013      	ands	r3, r2
 8001f48:	0019      	movs	r1, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f5a:	2208      	movs	r2, #8
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d00b      	beq.n	8001f78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4a34      	ldr	r2, [pc, #208]	@ (8002038 <UART_AdvFeatureConfig+0x150>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	0019      	movs	r1, r3
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	@ (800203c <UART_AdvFeatureConfig+0x154>)
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	0019      	movs	r1, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	4a25      	ldr	r2, [pc, #148]	@ (8002040 <UART_AdvFeatureConfig+0x158>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	430a      	orrs	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	2240      	movs	r2, #64	@ 0x40
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d01d      	beq.n	8002002 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a1d      	ldr	r2, [pc, #116]	@ (8002044 <UART_AdvFeatureConfig+0x15c>)
 8001fce:	4013      	ands	r3, r2
 8001fd0:	0019      	movs	r1, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001fe2:	2380      	movs	r3, #128	@ 0x80
 8001fe4:	035b      	lsls	r3, r3, #13
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d10b      	bne.n	8002002 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	4a15      	ldr	r2, [pc, #84]	@ (8002048 <UART_AdvFeatureConfig+0x160>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	0019      	movs	r1, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002006:	2280      	movs	r2, #128	@ 0x80
 8002008:	4013      	ands	r3, r2
 800200a:	d00b      	beq.n	8002024 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4a0e      	ldr	r2, [pc, #56]	@ (800204c <UART_AdvFeatureConfig+0x164>)
 8002014:	4013      	ands	r3, r2
 8002016:	0019      	movs	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	605a      	str	r2, [r3, #4]
  }
}
 8002024:	46c0      	nop			@ (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b002      	add	sp, #8
 800202a:	bd80      	pop	{r7, pc}
 800202c:	fffdffff 	.word	0xfffdffff
 8002030:	fffeffff 	.word	0xfffeffff
 8002034:	fffbffff 	.word	0xfffbffff
 8002038:	ffff7fff 	.word	0xffff7fff
 800203c:	ffffefff 	.word	0xffffefff
 8002040:	ffffdfff 	.word	0xffffdfff
 8002044:	ffefffff 	.word	0xffefffff
 8002048:	ff9fffff 	.word	0xff9fffff
 800204c:	fff7ffff 	.word	0xfff7ffff

08002050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b086      	sub	sp, #24
 8002054:	af02      	add	r7, sp, #8
 8002056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800205e:	f7fe fbb9 	bl	80007d4 <HAL_GetTick>
 8002062:	0003      	movs	r3, r0
 8002064:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2208      	movs	r2, #8
 800206e:	4013      	ands	r3, r2
 8002070:	2b08      	cmp	r3, #8
 8002072:	d10c      	bne.n	800208e <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2280      	movs	r2, #128	@ 0x80
 8002078:	0391      	lsls	r1, r2, #14
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	4a15      	ldr	r2, [pc, #84]	@ (80020d4 <UART_CheckIdleState+0x84>)
 800207e:	9200      	str	r2, [sp, #0]
 8002080:	2200      	movs	r2, #0
 8002082:	f000 f829 	bl	80020d8 <UART_WaitOnFlagUntilTimeout>
 8002086:	1e03      	subs	r3, r0, #0
 8002088:	d001      	beq.n	800208e <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e01e      	b.n	80020cc <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2204      	movs	r2, #4
 8002096:	4013      	ands	r3, r2
 8002098:	2b04      	cmp	r3, #4
 800209a:	d10c      	bne.n	80020b6 <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2280      	movs	r2, #128	@ 0x80
 80020a0:	03d1      	lsls	r1, r2, #15
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4a0b      	ldr	r2, [pc, #44]	@ (80020d4 <UART_CheckIdleState+0x84>)
 80020a6:	9200      	str	r2, [sp, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f000 f815 	bl	80020d8 <UART_WaitOnFlagUntilTimeout>
 80020ae:	1e03      	subs	r3, r0, #0
 80020b0:	d001      	beq.n	80020b6 <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e00a      	b.n	80020cc <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2220      	movs	r2, #32
 80020ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2220      	movs	r2, #32
 80020c0:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2270      	movs	r2, #112	@ 0x70
 80020c6:	2100      	movs	r1, #0
 80020c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	0018      	movs	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	b004      	add	sp, #16
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	01ffffff 	.word	0x01ffffff

080020d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	1dfb      	adds	r3, r7, #7
 80020e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e8:	e05d      	b.n	80021a6 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	3301      	adds	r3, #1
 80020ee:	d05a      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020f0:	f7fe fb70 	bl	80007d4 <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d302      	bcc.n	8002106 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d11b      	bne.n	800213e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	492f      	ldr	r1, [pc, #188]	@ (80021d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002112:	400a      	ands	r2, r1
 8002114:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2101      	movs	r1, #1
 8002122:	438a      	bics	r2, r1
 8002124:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2220      	movs	r2, #32
 800212a:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2220      	movs	r2, #32
 8002130:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2270      	movs	r2, #112	@ 0x70
 8002136:	2100      	movs	r1, #0
 8002138:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e043      	b.n	80021c6 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2204      	movs	r2, #4
 8002146:	4013      	ands	r3, r2
 8002148:	d02d      	beq.n	80021a6 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	011b      	lsls	r3, r3, #4
 8002154:	401a      	ands	r2, r3
 8002156:	2380      	movs	r3, #128	@ 0x80
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	429a      	cmp	r2, r3
 800215c:	d123      	bne.n	80021a6 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	0112      	lsls	r2, r2, #4
 8002166:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4917      	ldr	r1, [pc, #92]	@ (80021d0 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002174:	400a      	ands	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689a      	ldr	r2, [r3, #8]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2101      	movs	r1, #1
 8002184:	438a      	bics	r2, r1
 8002186:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2220      	movs	r2, #32
 8002198:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2270      	movs	r2, #112	@ 0x70
 800219e:	2100      	movs	r1, #0
 80021a0:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e00f      	b.n	80021c6 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	4013      	ands	r3, r2
 80021b0:	68ba      	ldr	r2, [r7, #8]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	425a      	negs	r2, r3
 80021b6:	4153      	adcs	r3, r2
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	001a      	movs	r2, r3
 80021bc:	1dfb      	adds	r3, r7, #7
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d092      	beq.n	80020ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b004      	add	sp, #16
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			@ (mov r8, r8)
 80021d0:	fffffe5f 	.word	0xfffffe5f

080021d4 <siprintf>:
 80021d4:	b40e      	push	{r1, r2, r3}
 80021d6:	b510      	push	{r4, lr}
 80021d8:	2400      	movs	r4, #0
 80021da:	490c      	ldr	r1, [pc, #48]	@ (800220c <siprintf+0x38>)
 80021dc:	b09d      	sub	sp, #116	@ 0x74
 80021de:	ab1f      	add	r3, sp, #124	@ 0x7c
 80021e0:	9002      	str	r0, [sp, #8]
 80021e2:	9006      	str	r0, [sp, #24]
 80021e4:	9107      	str	r1, [sp, #28]
 80021e6:	9104      	str	r1, [sp, #16]
 80021e8:	4809      	ldr	r0, [pc, #36]	@ (8002210 <siprintf+0x3c>)
 80021ea:	490a      	ldr	r1, [pc, #40]	@ (8002214 <siprintf+0x40>)
 80021ec:	cb04      	ldmia	r3!, {r2}
 80021ee:	9105      	str	r1, [sp, #20]
 80021f0:	6800      	ldr	r0, [r0, #0]
 80021f2:	a902      	add	r1, sp, #8
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80021f8:	f000 f99e 	bl	8002538 <_svfiprintf_r>
 80021fc:	9b02      	ldr	r3, [sp, #8]
 80021fe:	701c      	strb	r4, [r3, #0]
 8002200:	b01d      	add	sp, #116	@ 0x74
 8002202:	bc10      	pop	{r4}
 8002204:	bc08      	pop	{r3}
 8002206:	b003      	add	sp, #12
 8002208:	4718      	bx	r3
 800220a:	46c0      	nop			@ (mov r8, r8)
 800220c:	7fffffff 	.word	0x7fffffff
 8002210:	2000000c 	.word	0x2000000c
 8002214:	ffff0208 	.word	0xffff0208

08002218 <memset>:
 8002218:	0003      	movs	r3, r0
 800221a:	1882      	adds	r2, r0, r2
 800221c:	4293      	cmp	r3, r2
 800221e:	d100      	bne.n	8002222 <memset+0xa>
 8002220:	4770      	bx	lr
 8002222:	7019      	strb	r1, [r3, #0]
 8002224:	3301      	adds	r3, #1
 8002226:	e7f9      	b.n	800221c <memset+0x4>

08002228 <__errno>:
 8002228:	4b01      	ldr	r3, [pc, #4]	@ (8002230 <__errno+0x8>)
 800222a:	6818      	ldr	r0, [r3, #0]
 800222c:	4770      	bx	lr
 800222e:	46c0      	nop			@ (mov r8, r8)
 8002230:	2000000c 	.word	0x2000000c

08002234 <__libc_init_array>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	2600      	movs	r6, #0
 8002238:	4c0c      	ldr	r4, [pc, #48]	@ (800226c <__libc_init_array+0x38>)
 800223a:	4d0d      	ldr	r5, [pc, #52]	@ (8002270 <__libc_init_array+0x3c>)
 800223c:	1b64      	subs	r4, r4, r5
 800223e:	10a4      	asrs	r4, r4, #2
 8002240:	42a6      	cmp	r6, r4
 8002242:	d109      	bne.n	8002258 <__libc_init_array+0x24>
 8002244:	2600      	movs	r6, #0
 8002246:	f000 fc61 	bl	8002b0c <_init>
 800224a:	4c0a      	ldr	r4, [pc, #40]	@ (8002274 <__libc_init_array+0x40>)
 800224c:	4d0a      	ldr	r5, [pc, #40]	@ (8002278 <__libc_init_array+0x44>)
 800224e:	1b64      	subs	r4, r4, r5
 8002250:	10a4      	asrs	r4, r4, #2
 8002252:	42a6      	cmp	r6, r4
 8002254:	d105      	bne.n	8002262 <__libc_init_array+0x2e>
 8002256:	bd70      	pop	{r4, r5, r6, pc}
 8002258:	00b3      	lsls	r3, r6, #2
 800225a:	58eb      	ldr	r3, [r5, r3]
 800225c:	4798      	blx	r3
 800225e:	3601      	adds	r6, #1
 8002260:	e7ee      	b.n	8002240 <__libc_init_array+0xc>
 8002262:	00b3      	lsls	r3, r6, #2
 8002264:	58eb      	ldr	r3, [r5, r3]
 8002266:	4798      	blx	r3
 8002268:	3601      	adds	r6, #1
 800226a:	e7f2      	b.n	8002252 <__libc_init_array+0x1e>
 800226c:	08002bb4 	.word	0x08002bb4
 8002270:	08002bb4 	.word	0x08002bb4
 8002274:	08002bb8 	.word	0x08002bb8
 8002278:	08002bb4 	.word	0x08002bb4

0800227c <__retarget_lock_acquire_recursive>:
 800227c:	4770      	bx	lr

0800227e <__retarget_lock_release_recursive>:
 800227e:	4770      	bx	lr

08002280 <_free_r>:
 8002280:	b570      	push	{r4, r5, r6, lr}
 8002282:	0005      	movs	r5, r0
 8002284:	1e0c      	subs	r4, r1, #0
 8002286:	d010      	beq.n	80022aa <_free_r+0x2a>
 8002288:	3c04      	subs	r4, #4
 800228a:	6823      	ldr	r3, [r4, #0]
 800228c:	2b00      	cmp	r3, #0
 800228e:	da00      	bge.n	8002292 <_free_r+0x12>
 8002290:	18e4      	adds	r4, r4, r3
 8002292:	0028      	movs	r0, r5
 8002294:	f000 f8e0 	bl	8002458 <__malloc_lock>
 8002298:	4a1d      	ldr	r2, [pc, #116]	@ (8002310 <_free_r+0x90>)
 800229a:	6813      	ldr	r3, [r2, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d105      	bne.n	80022ac <_free_r+0x2c>
 80022a0:	6063      	str	r3, [r4, #4]
 80022a2:	6014      	str	r4, [r2, #0]
 80022a4:	0028      	movs	r0, r5
 80022a6:	f000 f8df 	bl	8002468 <__malloc_unlock>
 80022aa:	bd70      	pop	{r4, r5, r6, pc}
 80022ac:	42a3      	cmp	r3, r4
 80022ae:	d908      	bls.n	80022c2 <_free_r+0x42>
 80022b0:	6820      	ldr	r0, [r4, #0]
 80022b2:	1821      	adds	r1, r4, r0
 80022b4:	428b      	cmp	r3, r1
 80022b6:	d1f3      	bne.n	80022a0 <_free_r+0x20>
 80022b8:	6819      	ldr	r1, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	1809      	adds	r1, r1, r0
 80022be:	6021      	str	r1, [r4, #0]
 80022c0:	e7ee      	b.n	80022a0 <_free_r+0x20>
 80022c2:	001a      	movs	r2, r3
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <_free_r+0x4e>
 80022ca:	42a3      	cmp	r3, r4
 80022cc:	d9f9      	bls.n	80022c2 <_free_r+0x42>
 80022ce:	6811      	ldr	r1, [r2, #0]
 80022d0:	1850      	adds	r0, r2, r1
 80022d2:	42a0      	cmp	r0, r4
 80022d4:	d10b      	bne.n	80022ee <_free_r+0x6e>
 80022d6:	6820      	ldr	r0, [r4, #0]
 80022d8:	1809      	adds	r1, r1, r0
 80022da:	1850      	adds	r0, r2, r1
 80022dc:	6011      	str	r1, [r2, #0]
 80022de:	4283      	cmp	r3, r0
 80022e0:	d1e0      	bne.n	80022a4 <_free_r+0x24>
 80022e2:	6818      	ldr	r0, [r3, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	1841      	adds	r1, r0, r1
 80022e8:	6011      	str	r1, [r2, #0]
 80022ea:	6053      	str	r3, [r2, #4]
 80022ec:	e7da      	b.n	80022a4 <_free_r+0x24>
 80022ee:	42a0      	cmp	r0, r4
 80022f0:	d902      	bls.n	80022f8 <_free_r+0x78>
 80022f2:	230c      	movs	r3, #12
 80022f4:	602b      	str	r3, [r5, #0]
 80022f6:	e7d5      	b.n	80022a4 <_free_r+0x24>
 80022f8:	6820      	ldr	r0, [r4, #0]
 80022fa:	1821      	adds	r1, r4, r0
 80022fc:	428b      	cmp	r3, r1
 80022fe:	d103      	bne.n	8002308 <_free_r+0x88>
 8002300:	6819      	ldr	r1, [r3, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	1809      	adds	r1, r1, r0
 8002306:	6021      	str	r1, [r4, #0]
 8002308:	6063      	str	r3, [r4, #4]
 800230a:	6054      	str	r4, [r2, #4]
 800230c:	e7ca      	b.n	80022a4 <_free_r+0x24>
 800230e:	46c0      	nop			@ (mov r8, r8)
 8002310:	20000284 	.word	0x20000284

08002314 <sbrk_aligned>:
 8002314:	b570      	push	{r4, r5, r6, lr}
 8002316:	4e0f      	ldr	r6, [pc, #60]	@ (8002354 <sbrk_aligned+0x40>)
 8002318:	000d      	movs	r5, r1
 800231a:	6831      	ldr	r1, [r6, #0]
 800231c:	0004      	movs	r4, r0
 800231e:	2900      	cmp	r1, #0
 8002320:	d102      	bne.n	8002328 <sbrk_aligned+0x14>
 8002322:	f000 fb95 	bl	8002a50 <_sbrk_r>
 8002326:	6030      	str	r0, [r6, #0]
 8002328:	0029      	movs	r1, r5
 800232a:	0020      	movs	r0, r4
 800232c:	f000 fb90 	bl	8002a50 <_sbrk_r>
 8002330:	1c43      	adds	r3, r0, #1
 8002332:	d103      	bne.n	800233c <sbrk_aligned+0x28>
 8002334:	2501      	movs	r5, #1
 8002336:	426d      	negs	r5, r5
 8002338:	0028      	movs	r0, r5
 800233a:	bd70      	pop	{r4, r5, r6, pc}
 800233c:	2303      	movs	r3, #3
 800233e:	1cc5      	adds	r5, r0, #3
 8002340:	439d      	bics	r5, r3
 8002342:	42a8      	cmp	r0, r5
 8002344:	d0f8      	beq.n	8002338 <sbrk_aligned+0x24>
 8002346:	1a29      	subs	r1, r5, r0
 8002348:	0020      	movs	r0, r4
 800234a:	f000 fb81 	bl	8002a50 <_sbrk_r>
 800234e:	3001      	adds	r0, #1
 8002350:	d1f2      	bne.n	8002338 <sbrk_aligned+0x24>
 8002352:	e7ef      	b.n	8002334 <sbrk_aligned+0x20>
 8002354:	20000280 	.word	0x20000280

08002358 <_malloc_r>:
 8002358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800235a:	2203      	movs	r2, #3
 800235c:	1ccb      	adds	r3, r1, #3
 800235e:	4393      	bics	r3, r2
 8002360:	3308      	adds	r3, #8
 8002362:	0005      	movs	r5, r0
 8002364:	001f      	movs	r7, r3
 8002366:	2b0c      	cmp	r3, #12
 8002368:	d234      	bcs.n	80023d4 <_malloc_r+0x7c>
 800236a:	270c      	movs	r7, #12
 800236c:	42b9      	cmp	r1, r7
 800236e:	d833      	bhi.n	80023d8 <_malloc_r+0x80>
 8002370:	0028      	movs	r0, r5
 8002372:	f000 f871 	bl	8002458 <__malloc_lock>
 8002376:	4e37      	ldr	r6, [pc, #220]	@ (8002454 <_malloc_r+0xfc>)
 8002378:	6833      	ldr	r3, [r6, #0]
 800237a:	001c      	movs	r4, r3
 800237c:	2c00      	cmp	r4, #0
 800237e:	d12f      	bne.n	80023e0 <_malloc_r+0x88>
 8002380:	0039      	movs	r1, r7
 8002382:	0028      	movs	r0, r5
 8002384:	f7ff ffc6 	bl	8002314 <sbrk_aligned>
 8002388:	0004      	movs	r4, r0
 800238a:	1c43      	adds	r3, r0, #1
 800238c:	d15f      	bne.n	800244e <_malloc_r+0xf6>
 800238e:	6834      	ldr	r4, [r6, #0]
 8002390:	9400      	str	r4, [sp, #0]
 8002392:	9b00      	ldr	r3, [sp, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d14a      	bne.n	800242e <_malloc_r+0xd6>
 8002398:	2c00      	cmp	r4, #0
 800239a:	d052      	beq.n	8002442 <_malloc_r+0xea>
 800239c:	6823      	ldr	r3, [r4, #0]
 800239e:	0028      	movs	r0, r5
 80023a0:	18e3      	adds	r3, r4, r3
 80023a2:	9900      	ldr	r1, [sp, #0]
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	f000 fb53 	bl	8002a50 <_sbrk_r>
 80023aa:	9b01      	ldr	r3, [sp, #4]
 80023ac:	4283      	cmp	r3, r0
 80023ae:	d148      	bne.n	8002442 <_malloc_r+0xea>
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	0028      	movs	r0, r5
 80023b4:	1aff      	subs	r7, r7, r3
 80023b6:	0039      	movs	r1, r7
 80023b8:	f7ff ffac 	bl	8002314 <sbrk_aligned>
 80023bc:	3001      	adds	r0, #1
 80023be:	d040      	beq.n	8002442 <_malloc_r+0xea>
 80023c0:	6823      	ldr	r3, [r4, #0]
 80023c2:	19db      	adds	r3, r3, r7
 80023c4:	6023      	str	r3, [r4, #0]
 80023c6:	6833      	ldr	r3, [r6, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	2a00      	cmp	r2, #0
 80023cc:	d133      	bne.n	8002436 <_malloc_r+0xde>
 80023ce:	9b00      	ldr	r3, [sp, #0]
 80023d0:	6033      	str	r3, [r6, #0]
 80023d2:	e019      	b.n	8002408 <_malloc_r+0xb0>
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	dac9      	bge.n	800236c <_malloc_r+0x14>
 80023d8:	230c      	movs	r3, #12
 80023da:	602b      	str	r3, [r5, #0]
 80023dc:	2000      	movs	r0, #0
 80023de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023e0:	6821      	ldr	r1, [r4, #0]
 80023e2:	1bc9      	subs	r1, r1, r7
 80023e4:	d420      	bmi.n	8002428 <_malloc_r+0xd0>
 80023e6:	290b      	cmp	r1, #11
 80023e8:	d90a      	bls.n	8002400 <_malloc_r+0xa8>
 80023ea:	19e2      	adds	r2, r4, r7
 80023ec:	6027      	str	r7, [r4, #0]
 80023ee:	42a3      	cmp	r3, r4
 80023f0:	d104      	bne.n	80023fc <_malloc_r+0xa4>
 80023f2:	6032      	str	r2, [r6, #0]
 80023f4:	6863      	ldr	r3, [r4, #4]
 80023f6:	6011      	str	r1, [r2, #0]
 80023f8:	6053      	str	r3, [r2, #4]
 80023fa:	e005      	b.n	8002408 <_malloc_r+0xb0>
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	e7f9      	b.n	80023f4 <_malloc_r+0x9c>
 8002400:	6862      	ldr	r2, [r4, #4]
 8002402:	42a3      	cmp	r3, r4
 8002404:	d10e      	bne.n	8002424 <_malloc_r+0xcc>
 8002406:	6032      	str	r2, [r6, #0]
 8002408:	0028      	movs	r0, r5
 800240a:	f000 f82d 	bl	8002468 <__malloc_unlock>
 800240e:	0020      	movs	r0, r4
 8002410:	2207      	movs	r2, #7
 8002412:	300b      	adds	r0, #11
 8002414:	1d23      	adds	r3, r4, #4
 8002416:	4390      	bics	r0, r2
 8002418:	1ac2      	subs	r2, r0, r3
 800241a:	4298      	cmp	r0, r3
 800241c:	d0df      	beq.n	80023de <_malloc_r+0x86>
 800241e:	1a1b      	subs	r3, r3, r0
 8002420:	50a3      	str	r3, [r4, r2]
 8002422:	e7dc      	b.n	80023de <_malloc_r+0x86>
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	e7ef      	b.n	8002408 <_malloc_r+0xb0>
 8002428:	0023      	movs	r3, r4
 800242a:	6864      	ldr	r4, [r4, #4]
 800242c:	e7a6      	b.n	800237c <_malloc_r+0x24>
 800242e:	9c00      	ldr	r4, [sp, #0]
 8002430:	6863      	ldr	r3, [r4, #4]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	e7ad      	b.n	8002392 <_malloc_r+0x3a>
 8002436:	001a      	movs	r2, r3
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	42a3      	cmp	r3, r4
 800243c:	d1fb      	bne.n	8002436 <_malloc_r+0xde>
 800243e:	2300      	movs	r3, #0
 8002440:	e7da      	b.n	80023f8 <_malloc_r+0xa0>
 8002442:	230c      	movs	r3, #12
 8002444:	0028      	movs	r0, r5
 8002446:	602b      	str	r3, [r5, #0]
 8002448:	f000 f80e 	bl	8002468 <__malloc_unlock>
 800244c:	e7c6      	b.n	80023dc <_malloc_r+0x84>
 800244e:	6007      	str	r7, [r0, #0]
 8002450:	e7da      	b.n	8002408 <_malloc_r+0xb0>
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	20000284 	.word	0x20000284

08002458 <__malloc_lock>:
 8002458:	b510      	push	{r4, lr}
 800245a:	4802      	ldr	r0, [pc, #8]	@ (8002464 <__malloc_lock+0xc>)
 800245c:	f7ff ff0e 	bl	800227c <__retarget_lock_acquire_recursive>
 8002460:	bd10      	pop	{r4, pc}
 8002462:	46c0      	nop			@ (mov r8, r8)
 8002464:	2000027c 	.word	0x2000027c

08002468 <__malloc_unlock>:
 8002468:	b510      	push	{r4, lr}
 800246a:	4802      	ldr	r0, [pc, #8]	@ (8002474 <__malloc_unlock+0xc>)
 800246c:	f7ff ff07 	bl	800227e <__retarget_lock_release_recursive>
 8002470:	bd10      	pop	{r4, pc}
 8002472:	46c0      	nop			@ (mov r8, r8)
 8002474:	2000027c 	.word	0x2000027c

08002478 <__ssputs_r>:
 8002478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800247a:	688e      	ldr	r6, [r1, #8]
 800247c:	b085      	sub	sp, #20
 800247e:	001f      	movs	r7, r3
 8002480:	000c      	movs	r4, r1
 8002482:	680b      	ldr	r3, [r1, #0]
 8002484:	9002      	str	r0, [sp, #8]
 8002486:	9203      	str	r2, [sp, #12]
 8002488:	42be      	cmp	r6, r7
 800248a:	d830      	bhi.n	80024ee <__ssputs_r+0x76>
 800248c:	210c      	movs	r1, #12
 800248e:	5e62      	ldrsh	r2, [r4, r1]
 8002490:	2190      	movs	r1, #144	@ 0x90
 8002492:	00c9      	lsls	r1, r1, #3
 8002494:	420a      	tst	r2, r1
 8002496:	d028      	beq.n	80024ea <__ssputs_r+0x72>
 8002498:	2003      	movs	r0, #3
 800249a:	6921      	ldr	r1, [r4, #16]
 800249c:	1a5b      	subs	r3, r3, r1
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6963      	ldr	r3, [r4, #20]
 80024a2:	4343      	muls	r3, r0
 80024a4:	9801      	ldr	r0, [sp, #4]
 80024a6:	0fdd      	lsrs	r5, r3, #31
 80024a8:	18ed      	adds	r5, r5, r3
 80024aa:	1c7b      	adds	r3, r7, #1
 80024ac:	181b      	adds	r3, r3, r0
 80024ae:	106d      	asrs	r5, r5, #1
 80024b0:	42ab      	cmp	r3, r5
 80024b2:	d900      	bls.n	80024b6 <__ssputs_r+0x3e>
 80024b4:	001d      	movs	r5, r3
 80024b6:	0552      	lsls	r2, r2, #21
 80024b8:	d528      	bpl.n	800250c <__ssputs_r+0x94>
 80024ba:	0029      	movs	r1, r5
 80024bc:	9802      	ldr	r0, [sp, #8]
 80024be:	f7ff ff4b 	bl	8002358 <_malloc_r>
 80024c2:	1e06      	subs	r6, r0, #0
 80024c4:	d02c      	beq.n	8002520 <__ssputs_r+0xa8>
 80024c6:	9a01      	ldr	r2, [sp, #4]
 80024c8:	6921      	ldr	r1, [r4, #16]
 80024ca:	f000 fade 	bl	8002a8a <memcpy>
 80024ce:	89a2      	ldrh	r2, [r4, #12]
 80024d0:	4b18      	ldr	r3, [pc, #96]	@ (8002534 <__ssputs_r+0xbc>)
 80024d2:	401a      	ands	r2, r3
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	4313      	orrs	r3, r2
 80024d8:	81a3      	strh	r3, [r4, #12]
 80024da:	9b01      	ldr	r3, [sp, #4]
 80024dc:	6126      	str	r6, [r4, #16]
 80024de:	18f6      	adds	r6, r6, r3
 80024e0:	6026      	str	r6, [r4, #0]
 80024e2:	003e      	movs	r6, r7
 80024e4:	6165      	str	r5, [r4, #20]
 80024e6:	1aed      	subs	r5, r5, r3
 80024e8:	60a5      	str	r5, [r4, #8]
 80024ea:	42be      	cmp	r6, r7
 80024ec:	d900      	bls.n	80024f0 <__ssputs_r+0x78>
 80024ee:	003e      	movs	r6, r7
 80024f0:	0032      	movs	r2, r6
 80024f2:	9903      	ldr	r1, [sp, #12]
 80024f4:	6820      	ldr	r0, [r4, #0]
 80024f6:	f000 fa99 	bl	8002a2c <memmove>
 80024fa:	2000      	movs	r0, #0
 80024fc:	68a3      	ldr	r3, [r4, #8]
 80024fe:	1b9b      	subs	r3, r3, r6
 8002500:	60a3      	str	r3, [r4, #8]
 8002502:	6823      	ldr	r3, [r4, #0]
 8002504:	199b      	adds	r3, r3, r6
 8002506:	6023      	str	r3, [r4, #0]
 8002508:	b005      	add	sp, #20
 800250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800250c:	002a      	movs	r2, r5
 800250e:	9802      	ldr	r0, [sp, #8]
 8002510:	f000 fac4 	bl	8002a9c <_realloc_r>
 8002514:	1e06      	subs	r6, r0, #0
 8002516:	d1e0      	bne.n	80024da <__ssputs_r+0x62>
 8002518:	6921      	ldr	r1, [r4, #16]
 800251a:	9802      	ldr	r0, [sp, #8]
 800251c:	f7ff feb0 	bl	8002280 <_free_r>
 8002520:	230c      	movs	r3, #12
 8002522:	2001      	movs	r0, #1
 8002524:	9a02      	ldr	r2, [sp, #8]
 8002526:	4240      	negs	r0, r0
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	89a2      	ldrh	r2, [r4, #12]
 800252c:	3334      	adds	r3, #52	@ 0x34
 800252e:	4313      	orrs	r3, r2
 8002530:	81a3      	strh	r3, [r4, #12]
 8002532:	e7e9      	b.n	8002508 <__ssputs_r+0x90>
 8002534:	fffffb7f 	.word	0xfffffb7f

08002538 <_svfiprintf_r>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	b0a1      	sub	sp, #132	@ 0x84
 800253c:	9003      	str	r0, [sp, #12]
 800253e:	001d      	movs	r5, r3
 8002540:	898b      	ldrh	r3, [r1, #12]
 8002542:	000f      	movs	r7, r1
 8002544:	0016      	movs	r6, r2
 8002546:	061b      	lsls	r3, r3, #24
 8002548:	d511      	bpl.n	800256e <_svfiprintf_r+0x36>
 800254a:	690b      	ldr	r3, [r1, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10e      	bne.n	800256e <_svfiprintf_r+0x36>
 8002550:	2140      	movs	r1, #64	@ 0x40
 8002552:	f7ff ff01 	bl	8002358 <_malloc_r>
 8002556:	6038      	str	r0, [r7, #0]
 8002558:	6138      	str	r0, [r7, #16]
 800255a:	2800      	cmp	r0, #0
 800255c:	d105      	bne.n	800256a <_svfiprintf_r+0x32>
 800255e:	230c      	movs	r3, #12
 8002560:	9a03      	ldr	r2, [sp, #12]
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	2001      	movs	r0, #1
 8002566:	4240      	negs	r0, r0
 8002568:	e0cf      	b.n	800270a <_svfiprintf_r+0x1d2>
 800256a:	2340      	movs	r3, #64	@ 0x40
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	2300      	movs	r3, #0
 8002570:	ac08      	add	r4, sp, #32
 8002572:	6163      	str	r3, [r4, #20]
 8002574:	3320      	adds	r3, #32
 8002576:	7663      	strb	r3, [r4, #25]
 8002578:	3310      	adds	r3, #16
 800257a:	76a3      	strb	r3, [r4, #26]
 800257c:	9507      	str	r5, [sp, #28]
 800257e:	0035      	movs	r5, r6
 8002580:	782b      	ldrb	r3, [r5, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <_svfiprintf_r+0x52>
 8002586:	2b25      	cmp	r3, #37	@ 0x25
 8002588:	d148      	bne.n	800261c <_svfiprintf_r+0xe4>
 800258a:	1bab      	subs	r3, r5, r6
 800258c:	9305      	str	r3, [sp, #20]
 800258e:	42b5      	cmp	r5, r6
 8002590:	d00b      	beq.n	80025aa <_svfiprintf_r+0x72>
 8002592:	0032      	movs	r2, r6
 8002594:	0039      	movs	r1, r7
 8002596:	9803      	ldr	r0, [sp, #12]
 8002598:	f7ff ff6e 	bl	8002478 <__ssputs_r>
 800259c:	3001      	adds	r0, #1
 800259e:	d100      	bne.n	80025a2 <_svfiprintf_r+0x6a>
 80025a0:	e0ae      	b.n	8002700 <_svfiprintf_r+0x1c8>
 80025a2:	6963      	ldr	r3, [r4, #20]
 80025a4:	9a05      	ldr	r2, [sp, #20]
 80025a6:	189b      	adds	r3, r3, r2
 80025a8:	6163      	str	r3, [r4, #20]
 80025aa:	782b      	ldrb	r3, [r5, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d100      	bne.n	80025b2 <_svfiprintf_r+0x7a>
 80025b0:	e0a6      	b.n	8002700 <_svfiprintf_r+0x1c8>
 80025b2:	2201      	movs	r2, #1
 80025b4:	2300      	movs	r3, #0
 80025b6:	4252      	negs	r2, r2
 80025b8:	6062      	str	r2, [r4, #4]
 80025ba:	a904      	add	r1, sp, #16
 80025bc:	3254      	adds	r2, #84	@ 0x54
 80025be:	1852      	adds	r2, r2, r1
 80025c0:	1c6e      	adds	r6, r5, #1
 80025c2:	6023      	str	r3, [r4, #0]
 80025c4:	60e3      	str	r3, [r4, #12]
 80025c6:	60a3      	str	r3, [r4, #8]
 80025c8:	7013      	strb	r3, [r2, #0]
 80025ca:	65a3      	str	r3, [r4, #88]	@ 0x58
 80025cc:	4b54      	ldr	r3, [pc, #336]	@ (8002720 <_svfiprintf_r+0x1e8>)
 80025ce:	2205      	movs	r2, #5
 80025d0:	0018      	movs	r0, r3
 80025d2:	7831      	ldrb	r1, [r6, #0]
 80025d4:	9305      	str	r3, [sp, #20]
 80025d6:	f000 fa4d 	bl	8002a74 <memchr>
 80025da:	1c75      	adds	r5, r6, #1
 80025dc:	2800      	cmp	r0, #0
 80025de:	d11f      	bne.n	8002620 <_svfiprintf_r+0xe8>
 80025e0:	6822      	ldr	r2, [r4, #0]
 80025e2:	06d3      	lsls	r3, r2, #27
 80025e4:	d504      	bpl.n	80025f0 <_svfiprintf_r+0xb8>
 80025e6:	2353      	movs	r3, #83	@ 0x53
 80025e8:	a904      	add	r1, sp, #16
 80025ea:	185b      	adds	r3, r3, r1
 80025ec:	2120      	movs	r1, #32
 80025ee:	7019      	strb	r1, [r3, #0]
 80025f0:	0713      	lsls	r3, r2, #28
 80025f2:	d504      	bpl.n	80025fe <_svfiprintf_r+0xc6>
 80025f4:	2353      	movs	r3, #83	@ 0x53
 80025f6:	a904      	add	r1, sp, #16
 80025f8:	185b      	adds	r3, r3, r1
 80025fa:	212b      	movs	r1, #43	@ 0x2b
 80025fc:	7019      	strb	r1, [r3, #0]
 80025fe:	7833      	ldrb	r3, [r6, #0]
 8002600:	2b2a      	cmp	r3, #42	@ 0x2a
 8002602:	d016      	beq.n	8002632 <_svfiprintf_r+0xfa>
 8002604:	0035      	movs	r5, r6
 8002606:	2100      	movs	r1, #0
 8002608:	200a      	movs	r0, #10
 800260a:	68e3      	ldr	r3, [r4, #12]
 800260c:	782a      	ldrb	r2, [r5, #0]
 800260e:	1c6e      	adds	r6, r5, #1
 8002610:	3a30      	subs	r2, #48	@ 0x30
 8002612:	2a09      	cmp	r2, #9
 8002614:	d950      	bls.n	80026b8 <_svfiprintf_r+0x180>
 8002616:	2900      	cmp	r1, #0
 8002618:	d111      	bne.n	800263e <_svfiprintf_r+0x106>
 800261a:	e017      	b.n	800264c <_svfiprintf_r+0x114>
 800261c:	3501      	adds	r5, #1
 800261e:	e7af      	b.n	8002580 <_svfiprintf_r+0x48>
 8002620:	9b05      	ldr	r3, [sp, #20]
 8002622:	6822      	ldr	r2, [r4, #0]
 8002624:	1ac0      	subs	r0, r0, r3
 8002626:	2301      	movs	r3, #1
 8002628:	4083      	lsls	r3, r0
 800262a:	4313      	orrs	r3, r2
 800262c:	002e      	movs	r6, r5
 800262e:	6023      	str	r3, [r4, #0]
 8002630:	e7cc      	b.n	80025cc <_svfiprintf_r+0x94>
 8002632:	9b07      	ldr	r3, [sp, #28]
 8002634:	1d19      	adds	r1, r3, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	9107      	str	r1, [sp, #28]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db01      	blt.n	8002642 <_svfiprintf_r+0x10a>
 800263e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8002640:	e004      	b.n	800264c <_svfiprintf_r+0x114>
 8002642:	425b      	negs	r3, r3
 8002644:	60e3      	str	r3, [r4, #12]
 8002646:	2302      	movs	r3, #2
 8002648:	4313      	orrs	r3, r2
 800264a:	6023      	str	r3, [r4, #0]
 800264c:	782b      	ldrb	r3, [r5, #0]
 800264e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002650:	d10c      	bne.n	800266c <_svfiprintf_r+0x134>
 8002652:	786b      	ldrb	r3, [r5, #1]
 8002654:	2b2a      	cmp	r3, #42	@ 0x2a
 8002656:	d134      	bne.n	80026c2 <_svfiprintf_r+0x18a>
 8002658:	9b07      	ldr	r3, [sp, #28]
 800265a:	3502      	adds	r5, #2
 800265c:	1d1a      	adds	r2, r3, #4
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	9207      	str	r2, [sp, #28]
 8002662:	2b00      	cmp	r3, #0
 8002664:	da01      	bge.n	800266a <_svfiprintf_r+0x132>
 8002666:	2301      	movs	r3, #1
 8002668:	425b      	negs	r3, r3
 800266a:	9309      	str	r3, [sp, #36]	@ 0x24
 800266c:	4e2d      	ldr	r6, [pc, #180]	@ (8002724 <_svfiprintf_r+0x1ec>)
 800266e:	2203      	movs	r2, #3
 8002670:	0030      	movs	r0, r6
 8002672:	7829      	ldrb	r1, [r5, #0]
 8002674:	f000 f9fe 	bl	8002a74 <memchr>
 8002678:	2800      	cmp	r0, #0
 800267a:	d006      	beq.n	800268a <_svfiprintf_r+0x152>
 800267c:	2340      	movs	r3, #64	@ 0x40
 800267e:	1b80      	subs	r0, r0, r6
 8002680:	4083      	lsls	r3, r0
 8002682:	6822      	ldr	r2, [r4, #0]
 8002684:	3501      	adds	r5, #1
 8002686:	4313      	orrs	r3, r2
 8002688:	6023      	str	r3, [r4, #0]
 800268a:	7829      	ldrb	r1, [r5, #0]
 800268c:	2206      	movs	r2, #6
 800268e:	4826      	ldr	r0, [pc, #152]	@ (8002728 <_svfiprintf_r+0x1f0>)
 8002690:	1c6e      	adds	r6, r5, #1
 8002692:	7621      	strb	r1, [r4, #24]
 8002694:	f000 f9ee 	bl	8002a74 <memchr>
 8002698:	2800      	cmp	r0, #0
 800269a:	d038      	beq.n	800270e <_svfiprintf_r+0x1d6>
 800269c:	4b23      	ldr	r3, [pc, #140]	@ (800272c <_svfiprintf_r+0x1f4>)
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d122      	bne.n	80026e8 <_svfiprintf_r+0x1b0>
 80026a2:	2207      	movs	r2, #7
 80026a4:	9b07      	ldr	r3, [sp, #28]
 80026a6:	3307      	adds	r3, #7
 80026a8:	4393      	bics	r3, r2
 80026aa:	3308      	adds	r3, #8
 80026ac:	9307      	str	r3, [sp, #28]
 80026ae:	6963      	ldr	r3, [r4, #20]
 80026b0:	9a04      	ldr	r2, [sp, #16]
 80026b2:	189b      	adds	r3, r3, r2
 80026b4:	6163      	str	r3, [r4, #20]
 80026b6:	e762      	b.n	800257e <_svfiprintf_r+0x46>
 80026b8:	4343      	muls	r3, r0
 80026ba:	0035      	movs	r5, r6
 80026bc:	2101      	movs	r1, #1
 80026be:	189b      	adds	r3, r3, r2
 80026c0:	e7a4      	b.n	800260c <_svfiprintf_r+0xd4>
 80026c2:	2300      	movs	r3, #0
 80026c4:	200a      	movs	r0, #10
 80026c6:	0019      	movs	r1, r3
 80026c8:	3501      	adds	r5, #1
 80026ca:	6063      	str	r3, [r4, #4]
 80026cc:	782a      	ldrb	r2, [r5, #0]
 80026ce:	1c6e      	adds	r6, r5, #1
 80026d0:	3a30      	subs	r2, #48	@ 0x30
 80026d2:	2a09      	cmp	r2, #9
 80026d4:	d903      	bls.n	80026de <_svfiprintf_r+0x1a6>
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0c8      	beq.n	800266c <_svfiprintf_r+0x134>
 80026da:	9109      	str	r1, [sp, #36]	@ 0x24
 80026dc:	e7c6      	b.n	800266c <_svfiprintf_r+0x134>
 80026de:	4341      	muls	r1, r0
 80026e0:	0035      	movs	r5, r6
 80026e2:	2301      	movs	r3, #1
 80026e4:	1889      	adds	r1, r1, r2
 80026e6:	e7f1      	b.n	80026cc <_svfiprintf_r+0x194>
 80026e8:	aa07      	add	r2, sp, #28
 80026ea:	9200      	str	r2, [sp, #0]
 80026ec:	0021      	movs	r1, r4
 80026ee:	003a      	movs	r2, r7
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <_svfiprintf_r+0x1f8>)
 80026f2:	9803      	ldr	r0, [sp, #12]
 80026f4:	e000      	b.n	80026f8 <_svfiprintf_r+0x1c0>
 80026f6:	bf00      	nop
 80026f8:	9004      	str	r0, [sp, #16]
 80026fa:	9b04      	ldr	r3, [sp, #16]
 80026fc:	3301      	adds	r3, #1
 80026fe:	d1d6      	bne.n	80026ae <_svfiprintf_r+0x176>
 8002700:	89bb      	ldrh	r3, [r7, #12]
 8002702:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8002704:	065b      	lsls	r3, r3, #25
 8002706:	d500      	bpl.n	800270a <_svfiprintf_r+0x1d2>
 8002708:	e72c      	b.n	8002564 <_svfiprintf_r+0x2c>
 800270a:	b021      	add	sp, #132	@ 0x84
 800270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800270e:	aa07      	add	r2, sp, #28
 8002710:	9200      	str	r2, [sp, #0]
 8002712:	0021      	movs	r1, r4
 8002714:	003a      	movs	r2, r7
 8002716:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <_svfiprintf_r+0x1f8>)
 8002718:	9803      	ldr	r0, [sp, #12]
 800271a:	f000 f87b 	bl	8002814 <_printf_i>
 800271e:	e7eb      	b.n	80026f8 <_svfiprintf_r+0x1c0>
 8002720:	08002b80 	.word	0x08002b80
 8002724:	08002b86 	.word	0x08002b86
 8002728:	08002b8a 	.word	0x08002b8a
 800272c:	00000000 	.word	0x00000000
 8002730:	08002479 	.word	0x08002479

08002734 <_printf_common>:
 8002734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002736:	0016      	movs	r6, r2
 8002738:	9301      	str	r3, [sp, #4]
 800273a:	688a      	ldr	r2, [r1, #8]
 800273c:	690b      	ldr	r3, [r1, #16]
 800273e:	000c      	movs	r4, r1
 8002740:	9000      	str	r0, [sp, #0]
 8002742:	4293      	cmp	r3, r2
 8002744:	da00      	bge.n	8002748 <_printf_common+0x14>
 8002746:	0013      	movs	r3, r2
 8002748:	0022      	movs	r2, r4
 800274a:	6033      	str	r3, [r6, #0]
 800274c:	3243      	adds	r2, #67	@ 0x43
 800274e:	7812      	ldrb	r2, [r2, #0]
 8002750:	2a00      	cmp	r2, #0
 8002752:	d001      	beq.n	8002758 <_printf_common+0x24>
 8002754:	3301      	adds	r3, #1
 8002756:	6033      	str	r3, [r6, #0]
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	069b      	lsls	r3, r3, #26
 800275c:	d502      	bpl.n	8002764 <_printf_common+0x30>
 800275e:	6833      	ldr	r3, [r6, #0]
 8002760:	3302      	adds	r3, #2
 8002762:	6033      	str	r3, [r6, #0]
 8002764:	6822      	ldr	r2, [r4, #0]
 8002766:	2306      	movs	r3, #6
 8002768:	0015      	movs	r5, r2
 800276a:	401d      	ands	r5, r3
 800276c:	421a      	tst	r2, r3
 800276e:	d027      	beq.n	80027c0 <_printf_common+0x8c>
 8002770:	0023      	movs	r3, r4
 8002772:	3343      	adds	r3, #67	@ 0x43
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	1e5a      	subs	r2, r3, #1
 8002778:	4193      	sbcs	r3, r2
 800277a:	6822      	ldr	r2, [r4, #0]
 800277c:	0692      	lsls	r2, r2, #26
 800277e:	d430      	bmi.n	80027e2 <_printf_common+0xae>
 8002780:	0022      	movs	r2, r4
 8002782:	9901      	ldr	r1, [sp, #4]
 8002784:	9800      	ldr	r0, [sp, #0]
 8002786:	9d08      	ldr	r5, [sp, #32]
 8002788:	3243      	adds	r2, #67	@ 0x43
 800278a:	47a8      	blx	r5
 800278c:	3001      	adds	r0, #1
 800278e:	d025      	beq.n	80027dc <_printf_common+0xa8>
 8002790:	2206      	movs	r2, #6
 8002792:	6823      	ldr	r3, [r4, #0]
 8002794:	2500      	movs	r5, #0
 8002796:	4013      	ands	r3, r2
 8002798:	2b04      	cmp	r3, #4
 800279a:	d105      	bne.n	80027a8 <_printf_common+0x74>
 800279c:	6833      	ldr	r3, [r6, #0]
 800279e:	68e5      	ldr	r5, [r4, #12]
 80027a0:	1aed      	subs	r5, r5, r3
 80027a2:	43eb      	mvns	r3, r5
 80027a4:	17db      	asrs	r3, r3, #31
 80027a6:	401d      	ands	r5, r3
 80027a8:	68a3      	ldr	r3, [r4, #8]
 80027aa:	6922      	ldr	r2, [r4, #16]
 80027ac:	4293      	cmp	r3, r2
 80027ae:	dd01      	ble.n	80027b4 <_printf_common+0x80>
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	18ed      	adds	r5, r5, r3
 80027b4:	2600      	movs	r6, #0
 80027b6:	42b5      	cmp	r5, r6
 80027b8:	d120      	bne.n	80027fc <_printf_common+0xc8>
 80027ba:	2000      	movs	r0, #0
 80027bc:	e010      	b.n	80027e0 <_printf_common+0xac>
 80027be:	3501      	adds	r5, #1
 80027c0:	68e3      	ldr	r3, [r4, #12]
 80027c2:	6832      	ldr	r2, [r6, #0]
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	42ab      	cmp	r3, r5
 80027c8:	ddd2      	ble.n	8002770 <_printf_common+0x3c>
 80027ca:	0022      	movs	r2, r4
 80027cc:	2301      	movs	r3, #1
 80027ce:	9901      	ldr	r1, [sp, #4]
 80027d0:	9800      	ldr	r0, [sp, #0]
 80027d2:	9f08      	ldr	r7, [sp, #32]
 80027d4:	3219      	adds	r2, #25
 80027d6:	47b8      	blx	r7
 80027d8:	3001      	adds	r0, #1
 80027da:	d1f0      	bne.n	80027be <_printf_common+0x8a>
 80027dc:	2001      	movs	r0, #1
 80027de:	4240      	negs	r0, r0
 80027e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027e2:	2030      	movs	r0, #48	@ 0x30
 80027e4:	18e1      	adds	r1, r4, r3
 80027e6:	3143      	adds	r1, #67	@ 0x43
 80027e8:	7008      	strb	r0, [r1, #0]
 80027ea:	0021      	movs	r1, r4
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	3145      	adds	r1, #69	@ 0x45
 80027f0:	7809      	ldrb	r1, [r1, #0]
 80027f2:	18a2      	adds	r2, r4, r2
 80027f4:	3243      	adds	r2, #67	@ 0x43
 80027f6:	3302      	adds	r3, #2
 80027f8:	7011      	strb	r1, [r2, #0]
 80027fa:	e7c1      	b.n	8002780 <_printf_common+0x4c>
 80027fc:	0022      	movs	r2, r4
 80027fe:	2301      	movs	r3, #1
 8002800:	9901      	ldr	r1, [sp, #4]
 8002802:	9800      	ldr	r0, [sp, #0]
 8002804:	9f08      	ldr	r7, [sp, #32]
 8002806:	321a      	adds	r2, #26
 8002808:	47b8      	blx	r7
 800280a:	3001      	adds	r0, #1
 800280c:	d0e6      	beq.n	80027dc <_printf_common+0xa8>
 800280e:	3601      	adds	r6, #1
 8002810:	e7d1      	b.n	80027b6 <_printf_common+0x82>
	...

08002814 <_printf_i>:
 8002814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002816:	b08b      	sub	sp, #44	@ 0x2c
 8002818:	9206      	str	r2, [sp, #24]
 800281a:	000a      	movs	r2, r1
 800281c:	3243      	adds	r2, #67	@ 0x43
 800281e:	9307      	str	r3, [sp, #28]
 8002820:	9005      	str	r0, [sp, #20]
 8002822:	9203      	str	r2, [sp, #12]
 8002824:	7e0a      	ldrb	r2, [r1, #24]
 8002826:	000c      	movs	r4, r1
 8002828:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800282a:	2a78      	cmp	r2, #120	@ 0x78
 800282c:	d809      	bhi.n	8002842 <_printf_i+0x2e>
 800282e:	2a62      	cmp	r2, #98	@ 0x62
 8002830:	d80b      	bhi.n	800284a <_printf_i+0x36>
 8002832:	2a00      	cmp	r2, #0
 8002834:	d100      	bne.n	8002838 <_printf_i+0x24>
 8002836:	e0ba      	b.n	80029ae <_printf_i+0x19a>
 8002838:	497a      	ldr	r1, [pc, #488]	@ (8002a24 <_printf_i+0x210>)
 800283a:	9104      	str	r1, [sp, #16]
 800283c:	2a58      	cmp	r2, #88	@ 0x58
 800283e:	d100      	bne.n	8002842 <_printf_i+0x2e>
 8002840:	e08e      	b.n	8002960 <_printf_i+0x14c>
 8002842:	0025      	movs	r5, r4
 8002844:	3542      	adds	r5, #66	@ 0x42
 8002846:	702a      	strb	r2, [r5, #0]
 8002848:	e022      	b.n	8002890 <_printf_i+0x7c>
 800284a:	0010      	movs	r0, r2
 800284c:	3863      	subs	r0, #99	@ 0x63
 800284e:	2815      	cmp	r0, #21
 8002850:	d8f7      	bhi.n	8002842 <_printf_i+0x2e>
 8002852:	f7fd fc59 	bl	8000108 <__gnu_thumb1_case_shi>
 8002856:	0016      	.short	0x0016
 8002858:	fff6001f 	.word	0xfff6001f
 800285c:	fff6fff6 	.word	0xfff6fff6
 8002860:	001ffff6 	.word	0x001ffff6
 8002864:	fff6fff6 	.word	0xfff6fff6
 8002868:	fff6fff6 	.word	0xfff6fff6
 800286c:	0036009f 	.word	0x0036009f
 8002870:	fff6007e 	.word	0xfff6007e
 8002874:	00b0fff6 	.word	0x00b0fff6
 8002878:	0036fff6 	.word	0x0036fff6
 800287c:	fff6fff6 	.word	0xfff6fff6
 8002880:	0082      	.short	0x0082
 8002882:	0025      	movs	r5, r4
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	3542      	adds	r5, #66	@ 0x42
 8002888:	1d11      	adds	r1, r2, #4
 800288a:	6019      	str	r1, [r3, #0]
 800288c:	6813      	ldr	r3, [r2, #0]
 800288e:	702b      	strb	r3, [r5, #0]
 8002890:	2301      	movs	r3, #1
 8002892:	e09e      	b.n	80029d2 <_printf_i+0x1be>
 8002894:	6818      	ldr	r0, [r3, #0]
 8002896:	6809      	ldr	r1, [r1, #0]
 8002898:	1d02      	adds	r2, r0, #4
 800289a:	060d      	lsls	r5, r1, #24
 800289c:	d50b      	bpl.n	80028b6 <_printf_i+0xa2>
 800289e:	6806      	ldr	r6, [r0, #0]
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	2e00      	cmp	r6, #0
 80028a4:	da03      	bge.n	80028ae <_printf_i+0x9a>
 80028a6:	232d      	movs	r3, #45	@ 0x2d
 80028a8:	9a03      	ldr	r2, [sp, #12]
 80028aa:	4276      	negs	r6, r6
 80028ac:	7013      	strb	r3, [r2, #0]
 80028ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002a24 <_printf_i+0x210>)
 80028b0:	270a      	movs	r7, #10
 80028b2:	9304      	str	r3, [sp, #16]
 80028b4:	e018      	b.n	80028e8 <_printf_i+0xd4>
 80028b6:	6806      	ldr	r6, [r0, #0]
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	0649      	lsls	r1, r1, #25
 80028bc:	d5f1      	bpl.n	80028a2 <_printf_i+0x8e>
 80028be:	b236      	sxth	r6, r6
 80028c0:	e7ef      	b.n	80028a2 <_printf_i+0x8e>
 80028c2:	6808      	ldr	r0, [r1, #0]
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	c940      	ldmia	r1!, {r6}
 80028c8:	0605      	lsls	r5, r0, #24
 80028ca:	d402      	bmi.n	80028d2 <_printf_i+0xbe>
 80028cc:	0640      	lsls	r0, r0, #25
 80028ce:	d500      	bpl.n	80028d2 <_printf_i+0xbe>
 80028d0:	b2b6      	uxth	r6, r6
 80028d2:	6019      	str	r1, [r3, #0]
 80028d4:	4b53      	ldr	r3, [pc, #332]	@ (8002a24 <_printf_i+0x210>)
 80028d6:	270a      	movs	r7, #10
 80028d8:	9304      	str	r3, [sp, #16]
 80028da:	2a6f      	cmp	r2, #111	@ 0x6f
 80028dc:	d100      	bne.n	80028e0 <_printf_i+0xcc>
 80028de:	3f02      	subs	r7, #2
 80028e0:	0023      	movs	r3, r4
 80028e2:	2200      	movs	r2, #0
 80028e4:	3343      	adds	r3, #67	@ 0x43
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	6863      	ldr	r3, [r4, #4]
 80028ea:	60a3      	str	r3, [r4, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	db06      	blt.n	80028fe <_printf_i+0xea>
 80028f0:	2104      	movs	r1, #4
 80028f2:	6822      	ldr	r2, [r4, #0]
 80028f4:	9d03      	ldr	r5, [sp, #12]
 80028f6:	438a      	bics	r2, r1
 80028f8:	6022      	str	r2, [r4, #0]
 80028fa:	4333      	orrs	r3, r6
 80028fc:	d00c      	beq.n	8002918 <_printf_i+0x104>
 80028fe:	9d03      	ldr	r5, [sp, #12]
 8002900:	0030      	movs	r0, r6
 8002902:	0039      	movs	r1, r7
 8002904:	f7fd fc90 	bl	8000228 <__aeabi_uidivmod>
 8002908:	9b04      	ldr	r3, [sp, #16]
 800290a:	3d01      	subs	r5, #1
 800290c:	5c5b      	ldrb	r3, [r3, r1]
 800290e:	702b      	strb	r3, [r5, #0]
 8002910:	0033      	movs	r3, r6
 8002912:	0006      	movs	r6, r0
 8002914:	429f      	cmp	r7, r3
 8002916:	d9f3      	bls.n	8002900 <_printf_i+0xec>
 8002918:	2f08      	cmp	r7, #8
 800291a:	d109      	bne.n	8002930 <_printf_i+0x11c>
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	07db      	lsls	r3, r3, #31
 8002920:	d506      	bpl.n	8002930 <_printf_i+0x11c>
 8002922:	6862      	ldr	r2, [r4, #4]
 8002924:	6923      	ldr	r3, [r4, #16]
 8002926:	429a      	cmp	r2, r3
 8002928:	dc02      	bgt.n	8002930 <_printf_i+0x11c>
 800292a:	2330      	movs	r3, #48	@ 0x30
 800292c:	3d01      	subs	r5, #1
 800292e:	702b      	strb	r3, [r5, #0]
 8002930:	9b03      	ldr	r3, [sp, #12]
 8002932:	1b5b      	subs	r3, r3, r5
 8002934:	6123      	str	r3, [r4, #16]
 8002936:	9b07      	ldr	r3, [sp, #28]
 8002938:	0021      	movs	r1, r4
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	9805      	ldr	r0, [sp, #20]
 800293e:	9b06      	ldr	r3, [sp, #24]
 8002940:	aa09      	add	r2, sp, #36	@ 0x24
 8002942:	f7ff fef7 	bl	8002734 <_printf_common>
 8002946:	3001      	adds	r0, #1
 8002948:	d148      	bne.n	80029dc <_printf_i+0x1c8>
 800294a:	2001      	movs	r0, #1
 800294c:	4240      	negs	r0, r0
 800294e:	b00b      	add	sp, #44	@ 0x2c
 8002950:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002952:	2220      	movs	r2, #32
 8002954:	6809      	ldr	r1, [r1, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	6022      	str	r2, [r4, #0]
 800295a:	2278      	movs	r2, #120	@ 0x78
 800295c:	4932      	ldr	r1, [pc, #200]	@ (8002a28 <_printf_i+0x214>)
 800295e:	9104      	str	r1, [sp, #16]
 8002960:	0021      	movs	r1, r4
 8002962:	3145      	adds	r1, #69	@ 0x45
 8002964:	700a      	strb	r2, [r1, #0]
 8002966:	6819      	ldr	r1, [r3, #0]
 8002968:	6822      	ldr	r2, [r4, #0]
 800296a:	c940      	ldmia	r1!, {r6}
 800296c:	0610      	lsls	r0, r2, #24
 800296e:	d402      	bmi.n	8002976 <_printf_i+0x162>
 8002970:	0650      	lsls	r0, r2, #25
 8002972:	d500      	bpl.n	8002976 <_printf_i+0x162>
 8002974:	b2b6      	uxth	r6, r6
 8002976:	6019      	str	r1, [r3, #0]
 8002978:	07d3      	lsls	r3, r2, #31
 800297a:	d502      	bpl.n	8002982 <_printf_i+0x16e>
 800297c:	2320      	movs	r3, #32
 800297e:	4313      	orrs	r3, r2
 8002980:	6023      	str	r3, [r4, #0]
 8002982:	2e00      	cmp	r6, #0
 8002984:	d001      	beq.n	800298a <_printf_i+0x176>
 8002986:	2710      	movs	r7, #16
 8002988:	e7aa      	b.n	80028e0 <_printf_i+0xcc>
 800298a:	2220      	movs	r2, #32
 800298c:	6823      	ldr	r3, [r4, #0]
 800298e:	4393      	bics	r3, r2
 8002990:	6023      	str	r3, [r4, #0]
 8002992:	e7f8      	b.n	8002986 <_printf_i+0x172>
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	680d      	ldr	r5, [r1, #0]
 8002998:	1d10      	adds	r0, r2, #4
 800299a:	6949      	ldr	r1, [r1, #20]
 800299c:	6018      	str	r0, [r3, #0]
 800299e:	6813      	ldr	r3, [r2, #0]
 80029a0:	062e      	lsls	r6, r5, #24
 80029a2:	d501      	bpl.n	80029a8 <_printf_i+0x194>
 80029a4:	6019      	str	r1, [r3, #0]
 80029a6:	e002      	b.n	80029ae <_printf_i+0x19a>
 80029a8:	066d      	lsls	r5, r5, #25
 80029aa:	d5fb      	bpl.n	80029a4 <_printf_i+0x190>
 80029ac:	8019      	strh	r1, [r3, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	9d03      	ldr	r5, [sp, #12]
 80029b2:	6123      	str	r3, [r4, #16]
 80029b4:	e7bf      	b.n	8002936 <_printf_i+0x122>
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	1d11      	adds	r1, r2, #4
 80029ba:	6019      	str	r1, [r3, #0]
 80029bc:	6815      	ldr	r5, [r2, #0]
 80029be:	2100      	movs	r1, #0
 80029c0:	0028      	movs	r0, r5
 80029c2:	6862      	ldr	r2, [r4, #4]
 80029c4:	f000 f856 	bl	8002a74 <memchr>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	d001      	beq.n	80029d0 <_printf_i+0x1bc>
 80029cc:	1b40      	subs	r0, r0, r5
 80029ce:	6060      	str	r0, [r4, #4]
 80029d0:	6863      	ldr	r3, [r4, #4]
 80029d2:	6123      	str	r3, [r4, #16]
 80029d4:	2300      	movs	r3, #0
 80029d6:	9a03      	ldr	r2, [sp, #12]
 80029d8:	7013      	strb	r3, [r2, #0]
 80029da:	e7ac      	b.n	8002936 <_printf_i+0x122>
 80029dc:	002a      	movs	r2, r5
 80029de:	6923      	ldr	r3, [r4, #16]
 80029e0:	9906      	ldr	r1, [sp, #24]
 80029e2:	9805      	ldr	r0, [sp, #20]
 80029e4:	9d07      	ldr	r5, [sp, #28]
 80029e6:	47a8      	blx	r5
 80029e8:	3001      	adds	r0, #1
 80029ea:	d0ae      	beq.n	800294a <_printf_i+0x136>
 80029ec:	6823      	ldr	r3, [r4, #0]
 80029ee:	079b      	lsls	r3, r3, #30
 80029f0:	d415      	bmi.n	8002a1e <_printf_i+0x20a>
 80029f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80029f4:	68e0      	ldr	r0, [r4, #12]
 80029f6:	4298      	cmp	r0, r3
 80029f8:	daa9      	bge.n	800294e <_printf_i+0x13a>
 80029fa:	0018      	movs	r0, r3
 80029fc:	e7a7      	b.n	800294e <_printf_i+0x13a>
 80029fe:	0022      	movs	r2, r4
 8002a00:	2301      	movs	r3, #1
 8002a02:	9906      	ldr	r1, [sp, #24]
 8002a04:	9805      	ldr	r0, [sp, #20]
 8002a06:	9e07      	ldr	r6, [sp, #28]
 8002a08:	3219      	adds	r2, #25
 8002a0a:	47b0      	blx	r6
 8002a0c:	3001      	adds	r0, #1
 8002a0e:	d09c      	beq.n	800294a <_printf_i+0x136>
 8002a10:	3501      	adds	r5, #1
 8002a12:	68e3      	ldr	r3, [r4, #12]
 8002a14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	42ab      	cmp	r3, r5
 8002a1a:	dcf0      	bgt.n	80029fe <_printf_i+0x1ea>
 8002a1c:	e7e9      	b.n	80029f2 <_printf_i+0x1de>
 8002a1e:	2500      	movs	r5, #0
 8002a20:	e7f7      	b.n	8002a12 <_printf_i+0x1fe>
 8002a22:	46c0      	nop			@ (mov r8, r8)
 8002a24:	08002b91 	.word	0x08002b91
 8002a28:	08002ba2 	.word	0x08002ba2

08002a2c <memmove>:
 8002a2c:	b510      	push	{r4, lr}
 8002a2e:	4288      	cmp	r0, r1
 8002a30:	d902      	bls.n	8002a38 <memmove+0xc>
 8002a32:	188b      	adds	r3, r1, r2
 8002a34:	4298      	cmp	r0, r3
 8002a36:	d308      	bcc.n	8002a4a <memmove+0x1e>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d007      	beq.n	8002a4e <memmove+0x22>
 8002a3e:	5ccc      	ldrb	r4, [r1, r3]
 8002a40:	54c4      	strb	r4, [r0, r3]
 8002a42:	3301      	adds	r3, #1
 8002a44:	e7f9      	b.n	8002a3a <memmove+0xe>
 8002a46:	5c8b      	ldrb	r3, [r1, r2]
 8002a48:	5483      	strb	r3, [r0, r2]
 8002a4a:	3a01      	subs	r2, #1
 8002a4c:	d2fb      	bcs.n	8002a46 <memmove+0x1a>
 8002a4e:	bd10      	pop	{r4, pc}

08002a50 <_sbrk_r>:
 8002a50:	2300      	movs	r3, #0
 8002a52:	b570      	push	{r4, r5, r6, lr}
 8002a54:	4d06      	ldr	r5, [pc, #24]	@ (8002a70 <_sbrk_r+0x20>)
 8002a56:	0004      	movs	r4, r0
 8002a58:	0008      	movs	r0, r1
 8002a5a:	602b      	str	r3, [r5, #0]
 8002a5c:	f7fd fdfa 	bl	8000654 <_sbrk>
 8002a60:	1c43      	adds	r3, r0, #1
 8002a62:	d103      	bne.n	8002a6c <_sbrk_r+0x1c>
 8002a64:	682b      	ldr	r3, [r5, #0]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d000      	beq.n	8002a6c <_sbrk_r+0x1c>
 8002a6a:	6023      	str	r3, [r4, #0]
 8002a6c:	bd70      	pop	{r4, r5, r6, pc}
 8002a6e:	46c0      	nop			@ (mov r8, r8)
 8002a70:	20000278 	.word	0x20000278

08002a74 <memchr>:
 8002a74:	b2c9      	uxtb	r1, r1
 8002a76:	1882      	adds	r2, r0, r2
 8002a78:	4290      	cmp	r0, r2
 8002a7a:	d101      	bne.n	8002a80 <memchr+0xc>
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	4770      	bx	lr
 8002a80:	7803      	ldrb	r3, [r0, #0]
 8002a82:	428b      	cmp	r3, r1
 8002a84:	d0fb      	beq.n	8002a7e <memchr+0xa>
 8002a86:	3001      	adds	r0, #1
 8002a88:	e7f6      	b.n	8002a78 <memchr+0x4>

08002a8a <memcpy>:
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	b510      	push	{r4, lr}
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d100      	bne.n	8002a94 <memcpy+0xa>
 8002a92:	bd10      	pop	{r4, pc}
 8002a94:	5ccc      	ldrb	r4, [r1, r3]
 8002a96:	54c4      	strb	r4, [r0, r3]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	e7f8      	b.n	8002a8e <memcpy+0x4>

08002a9c <_realloc_r>:
 8002a9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9e:	0006      	movs	r6, r0
 8002aa0:	000c      	movs	r4, r1
 8002aa2:	0015      	movs	r5, r2
 8002aa4:	2900      	cmp	r1, #0
 8002aa6:	d105      	bne.n	8002ab4 <_realloc_r+0x18>
 8002aa8:	0011      	movs	r1, r2
 8002aaa:	f7ff fc55 	bl	8002358 <_malloc_r>
 8002aae:	0004      	movs	r4, r0
 8002ab0:	0020      	movs	r0, r4
 8002ab2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002ab4:	2a00      	cmp	r2, #0
 8002ab6:	d103      	bne.n	8002ac0 <_realloc_r+0x24>
 8002ab8:	f7ff fbe2 	bl	8002280 <_free_r>
 8002abc:	002c      	movs	r4, r5
 8002abe:	e7f7      	b.n	8002ab0 <_realloc_r+0x14>
 8002ac0:	f000 f81c 	bl	8002afc <_malloc_usable_size_r>
 8002ac4:	0007      	movs	r7, r0
 8002ac6:	4285      	cmp	r5, r0
 8002ac8:	d802      	bhi.n	8002ad0 <_realloc_r+0x34>
 8002aca:	0843      	lsrs	r3, r0, #1
 8002acc:	42ab      	cmp	r3, r5
 8002ace:	d3ef      	bcc.n	8002ab0 <_realloc_r+0x14>
 8002ad0:	0029      	movs	r1, r5
 8002ad2:	0030      	movs	r0, r6
 8002ad4:	f7ff fc40 	bl	8002358 <_malloc_r>
 8002ad8:	9001      	str	r0, [sp, #4]
 8002ada:	2800      	cmp	r0, #0
 8002adc:	d101      	bne.n	8002ae2 <_realloc_r+0x46>
 8002ade:	9c01      	ldr	r4, [sp, #4]
 8002ae0:	e7e6      	b.n	8002ab0 <_realloc_r+0x14>
 8002ae2:	002a      	movs	r2, r5
 8002ae4:	42bd      	cmp	r5, r7
 8002ae6:	d900      	bls.n	8002aea <_realloc_r+0x4e>
 8002ae8:	003a      	movs	r2, r7
 8002aea:	0021      	movs	r1, r4
 8002aec:	9801      	ldr	r0, [sp, #4]
 8002aee:	f7ff ffcc 	bl	8002a8a <memcpy>
 8002af2:	0021      	movs	r1, r4
 8002af4:	0030      	movs	r0, r6
 8002af6:	f7ff fbc3 	bl	8002280 <_free_r>
 8002afa:	e7f0      	b.n	8002ade <_realloc_r+0x42>

08002afc <_malloc_usable_size_r>:
 8002afc:	1f0b      	subs	r3, r1, #4
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1f18      	subs	r0, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da01      	bge.n	8002b0a <_malloc_usable_size_r+0xe>
 8002b06:	580b      	ldr	r3, [r1, r0]
 8002b08:	18c0      	adds	r0, r0, r3
 8002b0a:	4770      	bx	lr

08002b0c <_init>:
 8002b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b0e:	46c0      	nop			@ (mov r8, r8)
 8002b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b12:	bc08      	pop	{r3}
 8002b14:	469e      	mov	lr, r3
 8002b16:	4770      	bx	lr

08002b18 <_fini>:
 8002b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b1a:	46c0      	nop			@ (mov r8, r8)
 8002b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b1e:	bc08      	pop	{r3}
 8002b20:	469e      	mov	lr, r3
 8002b22:	4770      	bx	lr
