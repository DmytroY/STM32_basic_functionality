
PWM by timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037c8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003888  08003888  00004888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003930  08003930  0000505c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003930  08003930  0000505c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003930  08003930  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003930  08003930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003938  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  2000005c  08003994  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000308  08003994  00005308  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000092ef  00000000  00000000  00005084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a9e  00000000  00000000  0000e373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  0000fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b3  00000000  00000000  00010970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000c580  00000000  00000000  00011223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b705  00000000  00000000  0001d7a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004baea  00000000  00000000  00028ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00074992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d74  00000000  00000000  000749d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  0007774c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003870 	.word	0x08003870

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	08003870 	.word	0x08003870

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f000 fc06 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f850 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f99c 	bl	800057c <MX_GPIO_Init>
  MX_DMA_Init();
 8000244:	f000 f97c 	bl	8000540 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000248:	f000 f94a 	bl	80004e0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800024c:	f000 f892 	bl	8000374 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  	  uart_buffer_length = sprintf(uart_buffer, "Serial started at %d baud rate.\r\n", huart2.Init.BaudRate);
 8000250:	4b1b      	ldr	r3, [pc, #108]	@ (80002c0 <main+0x8c>)
 8000252:	685a      	ldr	r2, [r3, #4]
 8000254:	491b      	ldr	r1, [pc, #108]	@ (80002c4 <main+0x90>)
 8000256:	4b1c      	ldr	r3, [pc, #112]	@ (80002c8 <main+0x94>)
 8000258:	0018      	movs	r0, r3
 800025a:	f002 fe6d 	bl	8002f38 <siprintf>
 800025e:	0002      	movs	r2, r0
 8000260:	4b1a      	ldr	r3, [pc, #104]	@ (80002cc <main+0x98>)
 8000262:	601a      	str	r2, [r3, #0]
  	  HAL_UART_Transmit(&huart2, &uart_buffer, uart_buffer_length, 100);
 8000264:	4b19      	ldr	r3, [pc, #100]	@ (80002cc <main+0x98>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	b29a      	uxth	r2, r3
 800026a:	4917      	ldr	r1, [pc, #92]	@ (80002c8 <main+0x94>)
 800026c:	4814      	ldr	r0, [pc, #80]	@ (80002c0 <main+0x8c>)
 800026e:	2364      	movs	r3, #100	@ 0x64
 8000270:	f002 fabc 	bl	80027ec <HAL_UART_Transmit>


  	  TIM1->CCR1 = 5; // setup pulse width
 8000274:	4b16      	ldr	r3, [pc, #88]	@ (80002d0 <main+0x9c>)
 8000276:	2205      	movs	r2, #5
 8000278:	635a      	str	r2, [r3, #52]	@ 0x34
  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800027a:	4b16      	ldr	r3, [pc, #88]	@ (80002d4 <main+0xa0>)
 800027c:	2100      	movs	r1, #0
 800027e:	0018      	movs	r0, r3
 8000280:	f001 fca0 	bl	8001bc4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sauron_eye = (GPIOB->IDR & (1 << 0)) ? 1 : 0;
 8000284:	4b14      	ldr	r3, [pc, #80]	@ (80002d8 <main+0xa4>)
 8000286:	691b      	ldr	r3, [r3, #16]
 8000288:	2201      	movs	r2, #1
 800028a:	4013      	ands	r3, r2
 800028c:	1e5a      	subs	r2, r3, #1
 800028e:	4193      	sbcs	r3, r2
 8000290:	b2db      	uxtb	r3, r3
 8000292:	001a      	movs	r2, r3
 8000294:	4b11      	ldr	r3, [pc, #68]	@ (80002dc <main+0xa8>)
 8000296:	701a      	strb	r2, [r3, #0]
	  if (sauron_eye)
 8000298:	4b10      	ldr	r3, [pc, #64]	@ (80002dc <main+0xa8>)
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2b00      	cmp	r3, #0
 800029e:	d007      	beq.n	80002b0 <main+0x7c>
	  {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 80002a0:	2390      	movs	r3, #144	@ 0x90
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	2201      	movs	r2, #1
 80002a6:	2120      	movs	r1, #32
 80002a8:	0018      	movs	r0, r3
 80002aa:	f000 ff85 	bl	80011b8 <HAL_GPIO_WritePin>
 80002ae:	e7e9      	b.n	8000284 <main+0x50>
	  } else {
		  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 80002b0:	2390      	movs	r3, #144	@ 0x90
 80002b2:	05db      	lsls	r3, r3, #23
 80002b4:	2200      	movs	r2, #0
 80002b6:	2120      	movs	r1, #32
 80002b8:	0018      	movs	r0, r3
 80002ba:	f000 ff7d 	bl	80011b8 <HAL_GPIO_WritePin>
	  sauron_eye = (GPIOB->IDR & (1 << 0)) ? 1 : 0;
 80002be:	e7e1      	b.n	8000284 <main+0x50>
 80002c0:	200000fc 	.word	0x200000fc
 80002c4:	08003888 	.word	0x08003888
 80002c8:	20000180 	.word	0x20000180
 80002cc:	200001b4 	.word	0x200001b4
 80002d0:	40012c00 	.word	0x40012c00
 80002d4:	20000078 	.word	0x20000078
 80002d8:	48000400 	.word	0x48000400
 80002dc:	2000017c 	.word	0x2000017c

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b590      	push	{r4, r7, lr}
 80002e2:	b091      	sub	sp, #68	@ 0x44
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	2410      	movs	r4, #16
 80002e8:	193b      	adds	r3, r7, r4
 80002ea:	0018      	movs	r0, r3
 80002ec:	2330      	movs	r3, #48	@ 0x30
 80002ee:	001a      	movs	r2, r3
 80002f0:	2100      	movs	r1, #0
 80002f2:	f002 fe43 	bl	8002f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f6:	003b      	movs	r3, r7
 80002f8:	0018      	movs	r0, r3
 80002fa:	2310      	movs	r3, #16
 80002fc:	001a      	movs	r2, r3
 80002fe:	2100      	movs	r1, #0
 8000300:	f002 fe3c 	bl	8002f7c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000304:	0021      	movs	r1, r4
 8000306:	187b      	adds	r3, r7, r1
 8000308:	2202      	movs	r2, #2
 800030a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800030c:	187b      	adds	r3, r7, r1
 800030e:	2201      	movs	r2, #1
 8000310:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000312:	187b      	adds	r3, r7, r1
 8000314:	2210      	movs	r2, #16
 8000316:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000318:	187b      	adds	r3, r7, r1
 800031a:	2202      	movs	r2, #2
 800031c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800031e:	187b      	adds	r3, r7, r1
 8000320:	2200      	movs	r2, #0
 8000322:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000324:	187b      	adds	r3, r7, r1
 8000326:	22a0      	movs	r2, #160	@ 0xa0
 8000328:	0392      	lsls	r2, r2, #14
 800032a:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800032c:	187b      	adds	r3, r7, r1
 800032e:	2200      	movs	r2, #0
 8000330:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	187b      	adds	r3, r7, r1
 8000334:	0018      	movs	r0, r3
 8000336:	f000 ff79 	bl	800122c <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800033e:	f000 f9eb 	bl	8000718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	003b      	movs	r3, r7
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000348:	003b      	movs	r3, r7
 800034a:	2202      	movs	r2, #2
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	003b      	movs	r3, r7
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	003b      	movs	r3, r7
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	003b      	movs	r3, r7
 800035c:	2101      	movs	r1, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f001 fa7e 	bl	8001860 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000368:	f000 f9d6 	bl	8000718 <Error_Handler>
  }
}
 800036c:	46c0      	nop			@ (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b011      	add	sp, #68	@ 0x44
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b096      	sub	sp, #88	@ 0x58
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800037a:	2348      	movs	r3, #72	@ 0x48
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	0018      	movs	r0, r3
 8000380:	2310      	movs	r3, #16
 8000382:	001a      	movs	r2, r3
 8000384:	2100      	movs	r1, #0
 8000386:	f002 fdf9 	bl	8002f7c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038a:	2340      	movs	r3, #64	@ 0x40
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	0018      	movs	r0, r3
 8000390:	2308      	movs	r3, #8
 8000392:	001a      	movs	r2, r3
 8000394:	2100      	movs	r1, #0
 8000396:	f002 fdf1 	bl	8002f7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800039a:	2324      	movs	r3, #36	@ 0x24
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	0018      	movs	r0, r3
 80003a0:	231c      	movs	r3, #28
 80003a2:	001a      	movs	r2, r3
 80003a4:	2100      	movs	r1, #0
 80003a6:	f002 fde9 	bl	8002f7c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	0018      	movs	r0, r3
 80003ae:	2320      	movs	r3, #32
 80003b0:	001a      	movs	r2, r3
 80003b2:	2100      	movs	r1, #0
 80003b4:	f002 fde2 	bl	8002f7c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003b8:	4b46      	ldr	r3, [pc, #280]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003ba:	4a47      	ldr	r2, [pc, #284]	@ (80004d8 <MX_TIM1_Init+0x164>)
 80003bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = (48000-1);
 80003be:	4b45      	ldr	r3, [pc, #276]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003c0:	4a46      	ldr	r2, [pc, #280]	@ (80004dc <MX_TIM1_Init+0x168>)
 80003c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003c4:	4b43      	ldr	r3, [pc, #268]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10;
 80003ca:	4b42      	ldr	r3, [pc, #264]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003cc:	220a      	movs	r2, #10
 80003ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003d0:	4b40      	ldr	r3, [pc, #256]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80003d6:	4b3f      	ldr	r3, [pc, #252]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003d8:	2200      	movs	r2, #0
 80003da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003dc:	4b3d      	ldr	r3, [pc, #244]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003de:	2200      	movs	r2, #0
 80003e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80003e2:	4b3c      	ldr	r3, [pc, #240]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fb8d 	bl	8001b04 <HAL_TIM_Base_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80003ee:	f000 f993 	bl	8000718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003f2:	2148      	movs	r1, #72	@ 0x48
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2280      	movs	r2, #128	@ 0x80
 80003f8:	0152      	lsls	r2, r2, #5
 80003fa:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80003fc:	187a      	adds	r2, r7, r1
 80003fe:	4b35      	ldr	r3, [pc, #212]	@ (80004d4 <MX_TIM1_Init+0x160>)
 8000400:	0011      	movs	r1, r2
 8000402:	0018      	movs	r0, r3
 8000404:	f001 fcee 	bl	8001de4 <HAL_TIM_ConfigClockSource>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800040c:	f000 f984 	bl	8000718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000410:	4b30      	ldr	r3, [pc, #192]	@ (80004d4 <MX_TIM1_Init+0x160>)
 8000412:	0018      	movs	r0, r3
 8000414:	f001 fba2 	bl	8001b5c <HAL_TIM_PWM_Init>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800041c:	f000 f97c 	bl	8000718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000420:	2140      	movs	r1, #64	@ 0x40
 8000422:	187b      	adds	r3, r7, r1
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000428:	187b      	adds	r3, r7, r1
 800042a:	2200      	movs	r2, #0
 800042c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800042e:	187a      	adds	r2, r7, r1
 8000430:	4b28      	ldr	r3, [pc, #160]	@ (80004d4 <MX_TIM1_Init+0x160>)
 8000432:	0011      	movs	r1, r2
 8000434:	0018      	movs	r0, r3
 8000436:	f002 f8cf 	bl	80025d8 <HAL_TIMEx_MasterConfigSynchronization>
 800043a:	1e03      	subs	r3, r0, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800043e:	f000 f96b 	bl	8000718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000442:	2124      	movs	r1, #36	@ 0x24
 8000444:	187b      	adds	r3, r7, r1
 8000446:	2260      	movs	r2, #96	@ 0x60
 8000448:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800044a:	187b      	adds	r3, r7, r1
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000450:	187b      	adds	r3, r7, r1
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000456:	187b      	adds	r3, r7, r1
 8000458:	2200      	movs	r2, #0
 800045a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000462:	187b      	adds	r3, r7, r1
 8000464:	2200      	movs	r2, #0
 8000466:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000468:	187b      	adds	r3, r7, r1
 800046a:	2200      	movs	r2, #0
 800046c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800046e:	1879      	adds	r1, r7, r1
 8000470:	4b18      	ldr	r3, [pc, #96]	@ (80004d4 <MX_TIM1_Init+0x160>)
 8000472:	2200      	movs	r2, #0
 8000474:	0018      	movs	r0, r3
 8000476:	f001 fbf1 	bl	8001c5c <HAL_TIM_PWM_ConfigChannel>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d001      	beq.n	8000482 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800047e:	f000 f94b 	bl	8000718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000482:	1d3b      	adds	r3, r7, #4
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800048e:	1d3b      	adds	r3, r7, #4
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000494:	1d3b      	adds	r3, r7, #4
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800049a:	1d3b      	adds	r3, r7, #4
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80004a0:	1d3b      	adds	r3, r7, #4
 80004a2:	2280      	movs	r2, #128	@ 0x80
 80004a4:	0192      	lsls	r2, r2, #6
 80004a6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80004a8:	1d3b      	adds	r3, r7, #4
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80004ae:	1d3a      	adds	r2, r7, #4
 80004b0:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80004b2:	0011      	movs	r1, r2
 80004b4:	0018      	movs	r0, r3
 80004b6:	f002 f8e7 	bl	8002688 <HAL_TIMEx_ConfigBreakDeadTime>
 80004ba:	1e03      	subs	r3, r0, #0
 80004bc:	d001      	beq.n	80004c2 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80004be:	f000 f92b 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80004c2:	4b04      	ldr	r3, [pc, #16]	@ (80004d4 <MX_TIM1_Init+0x160>)
 80004c4:	0018      	movs	r0, r3
 80004c6:	f000 f99d 	bl	8000804 <HAL_TIM_MspPostInit>

}
 80004ca:	46c0      	nop			@ (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b016      	add	sp, #88	@ 0x58
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			@ (mov r8, r8)
 80004d4:	20000078 	.word	0x20000078
 80004d8:	40012c00 	.word	0x40012c00
 80004dc:	0000bb7f 	.word	0x0000bb7f

080004e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80004e4:	4b14      	ldr	r3, [pc, #80]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 80004e6:	4a15      	ldr	r2, [pc, #84]	@ (800053c <MX_USART2_UART_Init+0x5c>)
 80004e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80004ea:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 80004ec:	2296      	movs	r2, #150	@ 0x96
 80004ee:	0212      	lsls	r2, r2, #8
 80004f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004f2:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 8000500:	2200      	movs	r2, #0
 8000502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000504:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 8000506:	220c      	movs	r2, #12
 8000508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 800050c:	2200      	movs	r2, #0
 800050e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000510:	4b09      	ldr	r3, [pc, #36]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 8000512:	2200      	movs	r2, #0
 8000514:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MX_USART2_UART_Init+0x58>)
 8000524:	0018      	movs	r0, r3
 8000526:	f002 f90d 	bl	8002744 <HAL_UART_Init>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800052e:	f000 f8f3 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	46bd      	mov	sp, r7
 8000536:	bd80      	pop	{r7, pc}
 8000538:	200000fc 	.word	0x200000fc
 800053c:	40004400 	.word	0x40004400

08000540 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <MX_DMA_Init+0x38>)
 8000548:	695a      	ldr	r2, [r3, #20]
 800054a:	4b0b      	ldr	r3, [pc, #44]	@ (8000578 <MX_DMA_Init+0x38>)
 800054c:	2101      	movs	r1, #1
 800054e:	430a      	orrs	r2, r1
 8000550:	615a      	str	r2, [r3, #20]
 8000552:	4b09      	ldr	r3, [pc, #36]	@ (8000578 <MX_DMA_Init+0x38>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	2201      	movs	r2, #1
 8000558:	4013      	ands	r3, r2
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800055e:	2200      	movs	r2, #0
 8000560:	2100      	movs	r1, #0
 8000562:	200a      	movs	r0, #10
 8000564:	f000 fb80 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000568:	200a      	movs	r0, #10
 800056a:	f000 fb92 	bl	8000c92 <HAL_NVIC_EnableIRQ>

}
 800056e:	46c0      	nop			@ (mov r8, r8)
 8000570:	46bd      	mov	sp, r7
 8000572:	b002      	add	sp, #8
 8000574:	bd80      	pop	{r7, pc}
 8000576:	46c0      	nop			@ (mov r8, r8)
 8000578:	40021000 	.word	0x40021000

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b590      	push	{r4, r7, lr}
 800057e:	b08b      	sub	sp, #44	@ 0x2c
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	2414      	movs	r4, #20
 8000584:	193b      	adds	r3, r7, r4
 8000586:	0018      	movs	r0, r3
 8000588:	2314      	movs	r3, #20
 800058a:	001a      	movs	r2, r3
 800058c:	2100      	movs	r1, #0
 800058e:	f002 fcf5 	bl	8002f7c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	4b3e      	ldr	r3, [pc, #248]	@ (800068c <MX_GPIO_Init+0x110>)
 8000594:	695a      	ldr	r2, [r3, #20]
 8000596:	4b3d      	ldr	r3, [pc, #244]	@ (800068c <MX_GPIO_Init+0x110>)
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	0309      	lsls	r1, r1, #12
 800059c:	430a      	orrs	r2, r1
 800059e:	615a      	str	r2, [r3, #20]
 80005a0:	4b3a      	ldr	r3, [pc, #232]	@ (800068c <MX_GPIO_Init+0x110>)
 80005a2:	695a      	ldr	r2, [r3, #20]
 80005a4:	2380      	movs	r3, #128	@ 0x80
 80005a6:	031b      	lsls	r3, r3, #12
 80005a8:	4013      	ands	r3, r2
 80005aa:	613b      	str	r3, [r7, #16]
 80005ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ae:	4b37      	ldr	r3, [pc, #220]	@ (800068c <MX_GPIO_Init+0x110>)
 80005b0:	695a      	ldr	r2, [r3, #20]
 80005b2:	4b36      	ldr	r3, [pc, #216]	@ (800068c <MX_GPIO_Init+0x110>)
 80005b4:	2180      	movs	r1, #128	@ 0x80
 80005b6:	03c9      	lsls	r1, r1, #15
 80005b8:	430a      	orrs	r2, r1
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	4b33      	ldr	r3, [pc, #204]	@ (800068c <MX_GPIO_Init+0x110>)
 80005be:	695a      	ldr	r2, [r3, #20]
 80005c0:	2380      	movs	r3, #128	@ 0x80
 80005c2:	03db      	lsls	r3, r3, #15
 80005c4:	4013      	ands	r3, r2
 80005c6:	60fb      	str	r3, [r7, #12]
 80005c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b30      	ldr	r3, [pc, #192]	@ (800068c <MX_GPIO_Init+0x110>)
 80005cc:	695a      	ldr	r2, [r3, #20]
 80005ce:	4b2f      	ldr	r3, [pc, #188]	@ (800068c <MX_GPIO_Init+0x110>)
 80005d0:	2180      	movs	r1, #128	@ 0x80
 80005d2:	0289      	lsls	r1, r1, #10
 80005d4:	430a      	orrs	r2, r1
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	4b2c      	ldr	r3, [pc, #176]	@ (800068c <MX_GPIO_Init+0x110>)
 80005da:	695a      	ldr	r2, [r3, #20]
 80005dc:	2380      	movs	r3, #128	@ 0x80
 80005de:	029b      	lsls	r3, r3, #10
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b29      	ldr	r3, [pc, #164]	@ (800068c <MX_GPIO_Init+0x110>)
 80005e8:	695a      	ldr	r2, [r3, #20]
 80005ea:	4b28      	ldr	r3, [pc, #160]	@ (800068c <MX_GPIO_Init+0x110>)
 80005ec:	2180      	movs	r1, #128	@ 0x80
 80005ee:	02c9      	lsls	r1, r1, #11
 80005f0:	430a      	orrs	r2, r1
 80005f2:	615a      	str	r2, [r3, #20]
 80005f4:	4b25      	ldr	r3, [pc, #148]	@ (800068c <MX_GPIO_Init+0x110>)
 80005f6:	695a      	ldr	r2, [r3, #20]
 80005f8:	2380      	movs	r3, #128	@ 0x80
 80005fa:	02db      	lsls	r3, r3, #11
 80005fc:	4013      	ands	r3, r2
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000602:	2390      	movs	r3, #144	@ 0x90
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	0018      	movs	r0, r3
 800060c:	f000 fdd4 	bl	80011b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2280      	movs	r2, #128	@ 0x80
 8000614:	0192      	lsls	r2, r2, #6
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	4a1d      	ldr	r2, [pc, #116]	@ (8000690 <MX_GPIO_Init+0x114>)
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000624:	193b      	adds	r3, r7, r4
 8000626:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <MX_GPIO_Init+0x118>)
 8000628:	0019      	movs	r1, r3
 800062a:	0010      	movs	r0, r2
 800062c:	f000 fc54 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2220      	movs	r2, #32
 8000634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2201      	movs	r2, #1
 800063a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000648:	193a      	adds	r2, r7, r4
 800064a:	2390      	movs	r3, #144	@ 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f000 fc41 	bl	8000ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0_Pin */
  GPIO_InitStruct.Pin = PB0_Pin;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800065c:	193b      	adds	r3, r7, r4
 800065e:	2200      	movs	r2, #0
 8000660:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	193b      	adds	r3, r7, r4
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PB0_GPIO_Port, &GPIO_InitStruct);
 8000668:	193b      	adds	r3, r7, r4
 800066a:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <MX_GPIO_Init+0x11c>)
 800066c:	0019      	movs	r1, r3
 800066e:	0010      	movs	r0, r2
 8000670:	f000 fc32 	bl	8000ed8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000674:	2200      	movs	r2, #0
 8000676:	2100      	movs	r1, #0
 8000678:	2007      	movs	r0, #7
 800067a:	f000 faf5 	bl	8000c68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800067e:	2007      	movs	r0, #7
 8000680:	f000 fb07 	bl	8000c92 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b00b      	add	sp, #44	@ 0x2c
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	40021000 	.word	0x40021000
 8000690:	10210000 	.word	0x10210000
 8000694:	48000800 	.word	0x48000800
 8000698:	48000400 	.word	0x48000400

0800069c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	0002      	movs	r2, r0
 80006a4:	1dbb      	adds	r3, r7, #6
 80006a6:	801a      	strh	r2, [r3, #0]
	if(GPIO_Pin == B1_Pin){
 80006a8:	1dbb      	adds	r3, r7, #6
 80006aa:	881a      	ldrh	r2, [r3, #0]
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	019b      	lsls	r3, r3, #6
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d120      	bne.n	80006f6 <HAL_GPIO_EXTI_Callback+0x5a>
		if (TIM1->CCR1 <= htim1.Init.Period)
 80006b4:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <HAL_GPIO_EXTI_Callback+0x64>)
 80006b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <HAL_GPIO_EXTI_Callback+0x68>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d805      	bhi.n	80006cc <HAL_GPIO_EXTI_Callback+0x30>
		{
			TIM1->CCR1 += 1; // increase pulse width
 80006c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <HAL_GPIO_EXTI_Callback+0x64>)
 80006c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000700 <HAL_GPIO_EXTI_Callback+0x64>)
 80006c6:	3201      	adds	r2, #1
 80006c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ca:	e002      	b.n	80006d2 <HAL_GPIO_EXTI_Callback+0x36>
		}
		else
		{
			TIM1->CCR1 = 0; // reset pulse with
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <HAL_GPIO_EXTI_Callback+0x64>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
		}

		uart_buffer_length = sprintf(uart_buffer, "Pulse with set to %d \r\n",TIM1->CCR1);
 80006d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000700 <HAL_GPIO_EXTI_Callback+0x64>)
 80006d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006d6:	490c      	ldr	r1, [pc, #48]	@ (8000708 <HAL_GPIO_EXTI_Callback+0x6c>)
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_GPIO_EXTI_Callback+0x70>)
 80006da:	0018      	movs	r0, r3
 80006dc:	f002 fc2c 	bl	8002f38 <siprintf>
 80006e0:	0002      	movs	r2, r0
 80006e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <HAL_GPIO_EXTI_Callback+0x74>)
 80006e4:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, &uart_buffer, uart_buffer_length, 100);
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <HAL_GPIO_EXTI_Callback+0x74>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	4907      	ldr	r1, [pc, #28]	@ (800070c <HAL_GPIO_EXTI_Callback+0x70>)
 80006ee:	4809      	ldr	r0, [pc, #36]	@ (8000714 <HAL_GPIO_EXTI_Callback+0x78>)
 80006f0:	2364      	movs	r3, #100	@ 0x64
 80006f2:	f002 f87b 	bl	80027ec <HAL_UART_Transmit>
	}


}
 80006f6:	46c0      	nop			@ (mov r8, r8)
 80006f8:	46bd      	mov	sp, r7
 80006fa:	b002      	add	sp, #8
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	46c0      	nop			@ (mov r8, r8)
 8000700:	40012c00 	.word	0x40012c00
 8000704:	20000078 	.word	0x20000078
 8000708:	080038ac 	.word	0x080038ac
 800070c:	20000180 	.word	0x20000180
 8000710:	200001b4 	.word	0x200001b4
 8000714:	200000fc 	.word	0x200000fc

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	46c0      	nop			@ (mov r8, r8)
 8000722:	e7fd      	b.n	8000720 <Error_Handler+0x8>

08000724 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_MspInit+0x44>)
 800072c:	699a      	ldr	r2, [r3, #24]
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <HAL_MspInit+0x44>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	619a      	str	r2, [r3, #24]
 8000736:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <HAL_MspInit+0x44>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	4b09      	ldr	r3, [pc, #36]	@ (8000768 <HAL_MspInit+0x44>)
 8000744:	69da      	ldr	r2, [r3, #28]
 8000746:	4b08      	ldr	r3, [pc, #32]	@ (8000768 <HAL_MspInit+0x44>)
 8000748:	2180      	movs	r1, #128	@ 0x80
 800074a:	0549      	lsls	r1, r1, #21
 800074c:	430a      	orrs	r2, r1
 800074e:	61da      	str	r2, [r3, #28]
 8000750:	4b05      	ldr	r3, [pc, #20]	@ (8000768 <HAL_MspInit+0x44>)
 8000752:	69da      	ldr	r2, [r3, #28]
 8000754:	2380      	movs	r3, #128	@ 0x80
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	4013      	ands	r3, r2
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <HAL_TIM_Base_MspInit+0x88>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d135      	bne.n	80007ea <HAL_TIM_Base_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800077e:	4b1e      	ldr	r3, [pc, #120]	@ (80007f8 <HAL_TIM_Base_MspInit+0x8c>)
 8000780:	699a      	ldr	r2, [r3, #24]
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <HAL_TIM_Base_MspInit+0x8c>)
 8000784:	2180      	movs	r1, #128	@ 0x80
 8000786:	0109      	lsls	r1, r1, #4
 8000788:	430a      	orrs	r2, r1
 800078a:	619a      	str	r2, [r3, #24]
 800078c:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <HAL_TIM_Base_MspInit+0x8c>)
 800078e:	699a      	ldr	r2, [r3, #24]
 8000790:	2380      	movs	r3, #128	@ 0x80
 8000792:	011b      	lsls	r3, r3, #4
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800079a:	4b18      	ldr	r3, [pc, #96]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 800079c:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <HAL_TIM_Base_MspInit+0x94>)
 800079e:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80007a0:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007a2:	2210      	movs	r2, #16
 80007a4:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80007ac:	4b13      	ldr	r3, [pc, #76]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007ae:	2280      	movs	r2, #128	@ 0x80
 80007b0:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80007b2:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007b4:	2280      	movs	r2, #128	@ 0x80
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007bc:	2280      	movs	r2, #128	@ 0x80
 80007be:	00d2      	lsls	r2, r2, #3
 80007c0:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f000 fa7b 	bl	8000ccc <HAL_DMA_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <HAL_TIM_Base_MspInit+0x72>
    {
      Error_Handler();
 80007da:	f7ff ff9d 	bl	8000718 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4a06      	ldr	r2, [pc, #24]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007e2:	625a      	str	r2, [r3, #36]	@ 0x24
 80007e4:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <HAL_TIM_Base_MspInit+0x90>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	40012c00 	.word	0x40012c00
 80007f8:	40021000 	.word	0x40021000
 80007fc:	200000b8 	.word	0x200000b8
 8000800:	4002001c 	.word	0x4002001c

08000804 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000804:	b590      	push	{r4, r7, lr}
 8000806:	b089      	sub	sp, #36	@ 0x24
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	240c      	movs	r4, #12
 800080e:	193b      	adds	r3, r7, r4
 8000810:	0018      	movs	r0, r3
 8000812:	2314      	movs	r3, #20
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f002 fbb0 	bl	8002f7c <memset>
  if(htim->Instance==TIM1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a16      	ldr	r2, [pc, #88]	@ (800087c <HAL_TIM_MspPostInit+0x78>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d125      	bne.n	8000872 <HAL_TIM_MspPostInit+0x6e>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b16      	ldr	r3, [pc, #88]	@ (8000880 <HAL_TIM_MspPostInit+0x7c>)
 8000828:	695a      	ldr	r2, [r3, #20]
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <HAL_TIM_MspPostInit+0x7c>)
 800082c:	2180      	movs	r1, #128	@ 0x80
 800082e:	0289      	lsls	r1, r1, #10
 8000830:	430a      	orrs	r2, r1
 8000832:	615a      	str	r2, [r3, #20]
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_TIM_MspPostInit+0x7c>)
 8000836:	695a      	ldr	r2, [r3, #20]
 8000838:	2380      	movs	r3, #128	@ 0x80
 800083a:	029b      	lsls	r3, r3, #10
 800083c:	4013      	ands	r3, r2
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000842:	193b      	adds	r3, r7, r4
 8000844:	2280      	movs	r2, #128	@ 0x80
 8000846:	0052      	lsls	r2, r2, #1
 8000848:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	0021      	movs	r1, r4
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2202      	movs	r2, #2
 8000850:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800085e:	187b      	adds	r3, r7, r1
 8000860:	2202      	movs	r2, #2
 8000862:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	187a      	adds	r2, r7, r1
 8000866:	2390      	movs	r3, #144	@ 0x90
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	0011      	movs	r1, r2
 800086c:	0018      	movs	r0, r3
 800086e:	f000 fb33 	bl	8000ed8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000872:	46c0      	nop			@ (mov r8, r8)
 8000874:	46bd      	mov	sp, r7
 8000876:	b009      	add	sp, #36	@ 0x24
 8000878:	bd90      	pop	{r4, r7, pc}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	40012c00 	.word	0x40012c00
 8000880:	40021000 	.word	0x40021000

08000884 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b590      	push	{r4, r7, lr}
 8000886:	b08b      	sub	sp, #44	@ 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	2414      	movs	r4, #20
 800088e:	193b      	adds	r3, r7, r4
 8000890:	0018      	movs	r0, r3
 8000892:	2314      	movs	r3, #20
 8000894:	001a      	movs	r2, r3
 8000896:	2100      	movs	r1, #0
 8000898:	f002 fb70 	bl	8002f7c <memset>
  if(huart->Instance==USART2)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000914 <HAL_UART_MspInit+0x90>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d132      	bne.n	800090c <HAL_UART_MspInit+0x88>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <HAL_UART_MspInit+0x94>)
 80008a8:	69da      	ldr	r2, [r3, #28]
 80008aa:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <HAL_UART_MspInit+0x94>)
 80008ac:	2180      	movs	r1, #128	@ 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	61da      	str	r2, [r3, #28]
 80008b4:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <HAL_UART_MspInit+0x94>)
 80008b6:	69da      	ldr	r2, [r3, #28]
 80008b8:	2380      	movs	r3, #128	@ 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <HAL_UART_MspInit+0x94>)
 80008c4:	695a      	ldr	r2, [r3, #20]
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <HAL_UART_MspInit+0x94>)
 80008c8:	2180      	movs	r1, #128	@ 0x80
 80008ca:	0289      	lsls	r1, r1, #10
 80008cc:	430a      	orrs	r2, r1
 80008ce:	615a      	str	r2, [r3, #20]
 80008d0:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <HAL_UART_MspInit+0x94>)
 80008d2:	695a      	ldr	r2, [r3, #20]
 80008d4:	2380      	movs	r3, #128	@ 0x80
 80008d6:	029b      	lsls	r3, r3, #10
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008de:	0021      	movs	r1, r4
 80008e0:	187b      	adds	r3, r7, r1
 80008e2:	220c      	movs	r2, #12
 80008e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	187b      	adds	r3, r7, r1
 80008e8:	2202      	movs	r2, #2
 80008ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	187b      	adds	r3, r7, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	187b      	adds	r3, r7, r1
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008f8:	187b      	adds	r3, r7, r1
 80008fa:	2201      	movs	r2, #1
 80008fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	187a      	adds	r2, r7, r1
 8000900:	2390      	movs	r3, #144	@ 0x90
 8000902:	05db      	lsls	r3, r3, #23
 8000904:	0011      	movs	r1, r2
 8000906:	0018      	movs	r0, r3
 8000908:	f000 fae6 	bl	8000ed8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800090c:	46c0      	nop			@ (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	b00b      	add	sp, #44	@ 0x2c
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	40004400 	.word	0x40004400
 8000918:	40021000 	.word	0x40021000

0800091c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	e7fd      	b.n	8000920 <NMI_Handler+0x4>

08000924 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000928:	46c0      	nop			@ (mov r8, r8)
 800092a:	e7fd      	b.n	8000928 <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			@ (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			@ (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f8c8 	bl	8000ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800094e:	b580      	push	{r7, lr}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000952:	2380      	movs	r3, #128	@ 0x80
 8000954:	019b      	lsls	r3, r3, #6
 8000956:	0018      	movs	r0, r3
 8000958:	f000 fc4c 	bl	80011f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800095c:	46c0      	nop			@ (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000968:	4b03      	ldr	r3, [pc, #12]	@ (8000978 <DMA1_Channel2_3_IRQHandler+0x14>)
 800096a:	0018      	movs	r0, r3
 800096c:	f000 f9f6 	bl	8000d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000970:	46c0      	nop			@ (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	200000b8 	.word	0x200000b8

0800097c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b086      	sub	sp, #24
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000984:	4a14      	ldr	r2, [pc, #80]	@ (80009d8 <_sbrk+0x5c>)
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <_sbrk+0x60>)
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000990:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <_sbrk+0x64>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d102      	bne.n	800099e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <_sbrk+0x64>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <_sbrk+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <_sbrk+0x64>)
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d207      	bcs.n	80009bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009ac:	f002 faee 	bl	8002f8c <__errno>
 80009b0:	0003      	movs	r3, r0
 80009b2:	220c      	movs	r2, #12
 80009b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	425b      	negs	r3, r3
 80009ba:	e009      	b.n	80009d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009bc:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009c2:	4b07      	ldr	r3, [pc, #28]	@ (80009e0 <_sbrk+0x64>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	18d2      	adds	r2, r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <_sbrk+0x64>)
 80009cc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009ce:	68fb      	ldr	r3, [r7, #12]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b006      	add	sp, #24
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20002000 	.word	0x20002000
 80009dc:	00000400 	.word	0x00000400
 80009e0:	200001b8 	.word	0x200001b8
 80009e4:	20000308 	.word	0x20000308

080009e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f8:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fa:	490e      	ldr	r1, [pc, #56]	@ (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000a38 <LoopForever+0xe>)
  movs r3, #0
 80009fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a00:	e002      	b.n	8000a08 <LoopCopyDataInit>

08000a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a06:	3304      	adds	r3, #4

08000a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a0c:	d3f9      	bcc.n	8000a02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a10:	4c0b      	ldr	r4, [pc, #44]	@ (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a14:	e001      	b.n	8000a1a <LoopFillZerobss>

08000a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a18:	3204      	adds	r2, #4

08000a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a1c:	d3fb      	bcc.n	8000a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a1e:	f7ff ffe3 	bl	80009e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000a22:	f002 fab9 	bl	8002f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a26:	f7ff fc05 	bl	8000234 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   r0, =_estack
 8000a2c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a38:	08003938 	.word	0x08003938
  ldr r2, =_sbss
 8000a3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a40:	20000308 	.word	0x20000308

08000a44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_IRQHandler>
	...

08000a48 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a4c:	4b07      	ldr	r3, [pc, #28]	@ (8000a6c <HAL_Init+0x24>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <HAL_Init+0x24>)
 8000a52:	2110      	movs	r1, #16
 8000a54:	430a      	orrs	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f000 f809 	bl	8000a70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5e:	f7ff fe61 	bl	8000724 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a62:	2300      	movs	r3, #0
}
 8000a64:	0018      	movs	r0, r3
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	40022000 	.word	0x40022000

08000a70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a78:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <HAL_InitTick+0x5c>)
 8000a7a:	681c      	ldr	r4, [r3, #0]
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <HAL_InitTick+0x60>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	0019      	movs	r1, r3
 8000a82:	23fa      	movs	r3, #250	@ 0xfa
 8000a84:	0098      	lsls	r0, r3, #2
 8000a86:	f7ff fb49 	bl	800011c <__udivsi3>
 8000a8a:	0003      	movs	r3, r0
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	0020      	movs	r0, r4
 8000a90:	f7ff fb44 	bl	800011c <__udivsi3>
 8000a94:	0003      	movs	r3, r0
 8000a96:	0018      	movs	r0, r3
 8000a98:	f000 f90b 	bl	8000cb2 <HAL_SYSTICK_Config>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e00f      	b.n	8000ac4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2b03      	cmp	r3, #3
 8000aa8:	d80b      	bhi.n	8000ac2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	2301      	movs	r3, #1
 8000aae:	425b      	negs	r3, r3
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f000 f8d8 	bl	8000c68 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_InitTick+0x64>)
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e000      	b.n	8000ac4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
}
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	b003      	add	sp, #12
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000008 	.word	0x20000008
 8000ad4:	20000004 	.word	0x20000004

08000ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000adc:	4b05      	ldr	r3, [pc, #20]	@ (8000af4 <HAL_IncTick+0x1c>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	001a      	movs	r2, r3
 8000ae2:	4b05      	ldr	r3, [pc, #20]	@ (8000af8 <HAL_IncTick+0x20>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	18d2      	adds	r2, r2, r3
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <HAL_IncTick+0x20>)
 8000aea:	601a      	str	r2, [r3, #0]
}
 8000aec:	46c0      	nop			@ (mov r8, r8)
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			@ (mov r8, r8)
 8000af4:	20000008 	.word	0x20000008
 8000af8:	200001bc 	.word	0x200001bc

08000afc <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  return uwTick;
 8000b00:	4b02      	ldr	r3, [pc, #8]	@ (8000b0c <HAL_GetTick+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	200001bc 	.word	0x200001bc

08000b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	0002      	movs	r2, r0
 8000b18:	1dfb      	adds	r3, r7, #7
 8000b1a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b22:	d809      	bhi.n	8000b38 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b24:	1dfb      	adds	r3, r7, #7
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	001a      	movs	r2, r3
 8000b2a:	231f      	movs	r3, #31
 8000b2c:	401a      	ands	r2, r3
 8000b2e:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <__NVIC_EnableIRQ+0x30>)
 8000b30:	2101      	movs	r1, #1
 8000b32:	4091      	lsls	r1, r2
 8000b34:	000a      	movs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]
  }
}
 8000b38:	46c0      	nop			@ (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	b002      	add	sp, #8
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	e000e100 	.word	0xe000e100

08000b44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b44:	b590      	push	{r4, r7, lr}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	6039      	str	r1, [r7, #0]
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b52:	1dfb      	adds	r3, r7, #7
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b58:	d828      	bhi.n	8000bac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c18 <__NVIC_SetPriority+0xd4>)
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	089b      	lsrs	r3, r3, #2
 8000b64:	33c0      	adds	r3, #192	@ 0xc0
 8000b66:	009b      	lsls	r3, r3, #2
 8000b68:	589b      	ldr	r3, [r3, r2]
 8000b6a:	1dfa      	adds	r2, r7, #7
 8000b6c:	7812      	ldrb	r2, [r2, #0]
 8000b6e:	0011      	movs	r1, r2
 8000b70:	2203      	movs	r2, #3
 8000b72:	400a      	ands	r2, r1
 8000b74:	00d2      	lsls	r2, r2, #3
 8000b76:	21ff      	movs	r1, #255	@ 0xff
 8000b78:	4091      	lsls	r1, r2
 8000b7a:	000a      	movs	r2, r1
 8000b7c:	43d2      	mvns	r2, r2
 8000b7e:	401a      	ands	r2, r3
 8000b80:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	019b      	lsls	r3, r3, #6
 8000b86:	22ff      	movs	r2, #255	@ 0xff
 8000b88:	401a      	ands	r2, r3
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0018      	movs	r0, r3
 8000b90:	2303      	movs	r3, #3
 8000b92:	4003      	ands	r3, r0
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b98:	481f      	ldr	r0, [pc, #124]	@ (8000c18 <__NVIC_SetPriority+0xd4>)
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b25b      	sxtb	r3, r3
 8000ba0:	089b      	lsrs	r3, r3, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	33c0      	adds	r3, #192	@ 0xc0
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000baa:	e031      	b.n	8000c10 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bac:	4a1b      	ldr	r2, [pc, #108]	@ (8000c1c <__NVIC_SetPriority+0xd8>)
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0019      	movs	r1, r3
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	400b      	ands	r3, r1
 8000bb8:	3b08      	subs	r3, #8
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3306      	adds	r3, #6
 8000bbe:	009b      	lsls	r3, r3, #2
 8000bc0:	18d3      	adds	r3, r2, r3
 8000bc2:	3304      	adds	r3, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	1dfa      	adds	r2, r7, #7
 8000bc8:	7812      	ldrb	r2, [r2, #0]
 8000bca:	0011      	movs	r1, r2
 8000bcc:	2203      	movs	r2, #3
 8000bce:	400a      	ands	r2, r1
 8000bd0:	00d2      	lsls	r2, r2, #3
 8000bd2:	21ff      	movs	r1, #255	@ 0xff
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	000a      	movs	r2, r1
 8000bd8:	43d2      	mvns	r2, r2
 8000bda:	401a      	ands	r2, r3
 8000bdc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	019b      	lsls	r3, r3, #6
 8000be2:	22ff      	movs	r2, #255	@ 0xff
 8000be4:	401a      	ands	r2, r3
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	0018      	movs	r0, r3
 8000bec:	2303      	movs	r3, #3
 8000bee:	4003      	ands	r3, r0
 8000bf0:	00db      	lsls	r3, r3, #3
 8000bf2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <__NVIC_SetPriority+0xd8>)
 8000bf6:	1dfb      	adds	r3, r7, #7
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	001c      	movs	r4, r3
 8000bfc:	230f      	movs	r3, #15
 8000bfe:	4023      	ands	r3, r4
 8000c00:	3b08      	subs	r3, #8
 8000c02:	089b      	lsrs	r3, r3, #2
 8000c04:	430a      	orrs	r2, r1
 8000c06:	3306      	adds	r3, #6
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	18c3      	adds	r3, r0, r3
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	601a      	str	r2, [r3, #0]
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b003      	add	sp, #12
 8000c16:	bd90      	pop	{r4, r7, pc}
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	1e5a      	subs	r2, r3, #1
 8000c2c:	2380      	movs	r3, #128	@ 0x80
 8000c2e:	045b      	lsls	r3, r3, #17
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d301      	bcc.n	8000c38 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c34:	2301      	movs	r3, #1
 8000c36:	e010      	b.n	8000c5a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c38:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <SysTick_Config+0x44>)
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	3a01      	subs	r2, #1
 8000c3e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c40:	2301      	movs	r3, #1
 8000c42:	425b      	negs	r3, r3
 8000c44:	2103      	movs	r1, #3
 8000c46:	0018      	movs	r0, r3
 8000c48:	f7ff ff7c 	bl	8000b44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c4c:	4b05      	ldr	r3, [pc, #20]	@ (8000c64 <SysTick_Config+0x44>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <SysTick_Config+0x44>)
 8000c54:	2207      	movs	r2, #7
 8000c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	b002      	add	sp, #8
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			@ (mov r8, r8)
 8000c64:	e000e010 	.word	0xe000e010

08000c68 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	210f      	movs	r1, #15
 8000c74:	187b      	adds	r3, r7, r1
 8000c76:	1c02      	adds	r2, r0, #0
 8000c78:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b25b      	sxtb	r3, r3
 8000c82:	0011      	movs	r1, r2
 8000c84:	0018      	movs	r0, r3
 8000c86:	f7ff ff5d 	bl	8000b44 <__NVIC_SetPriority>
}
 8000c8a:	46c0      	nop			@ (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	0002      	movs	r2, r0
 8000c9a:	1dfb      	adds	r3, r7, #7
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c9e:	1dfb      	adds	r3, r7, #7
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	b25b      	sxtb	r3, r3
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ff33 	bl	8000b10 <__NVIC_EnableIRQ>
}
 8000caa:	46c0      	nop			@ (mov r8, r8)
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ffaf 	bl	8000c20 <SysTick_Config>
 8000cc2:	0003      	movs	r3, r0
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e036      	b.n	8000d50 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2221      	movs	r2, #33	@ 0x21
 8000ce6:	2102      	movs	r1, #2
 8000ce8:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	4a18      	ldr	r2, [pc, #96]	@ (8000d58 <HAL_DMA_Init+0x8c>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	695b      	ldr	r3, [r3, #20]
 8000d14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	69db      	ldr	r3, [r3, #28]
 8000d20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000d22:	68fa      	ldr	r2, [r7, #12]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	68fa      	ldr	r2, [r7, #12]
 8000d2e:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f8b4 	bl	8000ea0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2221      	movs	r2, #33	@ 0x21
 8000d42:	2101      	movs	r1, #1
 8000d44:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2220      	movs	r2, #32
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d4e:	2300      	movs	r3, #0
}  
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b004      	add	sp, #16
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	ffffc00f 	.word	0xffffc00f

08000d5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d78:	2204      	movs	r2, #4
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	68fa      	ldr	r2, [r7, #12]
 8000d80:	4013      	ands	r3, r2
 8000d82:	d024      	beq.n	8000dce <HAL_DMA_IRQHandler+0x72>
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2204      	movs	r2, #4
 8000d88:	4013      	ands	r3, r2
 8000d8a:	d020      	beq.n	8000dce <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2220      	movs	r2, #32
 8000d94:	4013      	ands	r3, r2
 8000d96:	d107      	bne.n	8000da8 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	2104      	movs	r1, #4
 8000da4:	438a      	bics	r2, r1
 8000da6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000db0:	2104      	movs	r1, #4
 8000db2:	4091      	lsls	r1, r2
 8000db4:	000a      	movs	r2, r1
 8000db6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d100      	bne.n	8000dc2 <HAL_DMA_IRQHandler+0x66>
 8000dc0:	e06a      	b.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	0010      	movs	r0, r2
 8000dca:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8000dcc:	e064      	b.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	2202      	movs	r2, #2
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	d02b      	beq.n	8000e36 <HAL_DMA_IRQHandler+0xda>
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	2202      	movs	r2, #2
 8000de2:	4013      	ands	r3, r2
 8000de4:	d027      	beq.n	8000e36 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2220      	movs	r2, #32
 8000dee:	4013      	ands	r3, r2
 8000df0:	d10b      	bne.n	8000e0a <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	210a      	movs	r1, #10
 8000dfe:	438a      	bics	r2, r1
 8000e00:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	2221      	movs	r2, #33	@ 0x21
 8000e06:	2101      	movs	r1, #1
 8000e08:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e12:	2102      	movs	r1, #2
 8000e14:	4091      	lsls	r1, r2
 8000e16:	000a      	movs	r2, r1
 8000e18:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2220      	movs	r2, #32
 8000e1e:	2100      	movs	r1, #0
 8000e20:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d036      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	0010      	movs	r0, r2
 8000e32:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8000e34:	e030      	b.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	409a      	lsls	r2, r3
 8000e3e:	0013      	movs	r3, r2
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4013      	ands	r3, r2
 8000e44:	d028      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	2208      	movs	r2, #8
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	d024      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	210e      	movs	r1, #14
 8000e5a:	438a      	bics	r2, r1
 8000e5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e66:	2101      	movs	r1, #1
 8000e68:	4091      	lsls	r1, r2
 8000e6a:	000a      	movs	r2, r1
 8000e6c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2201      	movs	r2, #1
 8000e72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2221      	movs	r2, #33	@ 0x21
 8000e78:	2101      	movs	r1, #1
 8000e7a:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2220      	movs	r2, #32
 8000e80:	2100      	movs	r1, #0
 8000e82:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	0010      	movs	r0, r2
 8000e94:	4798      	blx	r3
    }
   }
}  
 8000e96:	e7ff      	b.n	8000e98 <HAL_DMA_IRQHandler+0x13c>
 8000e98:	46c0      	nop			@ (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b004      	add	sp, #16
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a08      	ldr	r2, [pc, #32]	@ (8000ed0 <DMA_CalcBaseAndBitshift+0x30>)
 8000eae:	4694      	mov	ip, r2
 8000eb0:	4463      	add	r3, ip
 8000eb2:	2114      	movs	r1, #20
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f7ff f931 	bl	800011c <__udivsi3>
 8000eba:	0003      	movs	r3, r0
 8000ebc:	009a      	lsls	r2, r3, #2
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a03      	ldr	r2, [pc, #12]	@ (8000ed4 <DMA_CalcBaseAndBitshift+0x34>)
 8000ec6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 8000ec8:	46c0      	nop			@ (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	bffdfff8 	.word	0xbffdfff8
 8000ed4:	40020000 	.word	0x40020000

08000ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	e14f      	b.n	8001188 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4091      	lsls	r1, r2
 8000ef2:	000a      	movs	r2, r1
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d100      	bne.n	8000f00 <HAL_GPIO_Init+0x28>
 8000efe:	e140      	b.n	8001182 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	2b02      	cmp	r3, #2
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x38>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	2b12      	cmp	r3, #18
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	58d3      	ldr	r3, [r2, r3]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	2207      	movs	r2, #7
 8000f22:	4013      	ands	r3, r2
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	409a      	lsls	r2, r3
 8000f2a:	0013      	movs	r3, r2
 8000f2c:	43da      	mvns	r2, r3
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	4013      	ands	r3, r2
 8000f32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	2107      	movs	r1, #7
 8000f3c:	400b      	ands	r3, r1
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	409a      	lsls	r2, r3
 8000f42:	0013      	movs	r3, r2
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	6939      	ldr	r1, [r7, #16]
 8000f56:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	409a      	lsls	r2, r3
 8000f66:	0013      	movs	r3, r2
 8000f68:	43da      	mvns	r2, r3
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	2203      	movs	r2, #3
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	409a      	lsls	r2, r3
 8000f7e:	0013      	movs	r3, r2
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d00b      	beq.n	8000fac <HAL_GPIO_Init+0xd4>
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d007      	beq.n	8000fac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fa0:	2b11      	cmp	r3, #17
 8000fa2:	d003      	beq.n	8000fac <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	2b12      	cmp	r3, #18
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	43da      	mvns	r2, r3
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	409a      	lsls	r2, r3
 8000fce:	0013      	movs	r3, r2
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	409a      	lsls	r2, r3
 8000fe8:	0013      	movs	r3, r2
 8000fea:	43da      	mvns	r2, r3
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
 8001000:	0013      	movs	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	68db      	ldr	r3, [r3, #12]
 8001012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	2203      	movs	r2, #3
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	43da      	mvns	r2, r3
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	689a      	ldr	r2, [r3, #8]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	409a      	lsls	r2, r3
 8001030:	0013      	movs	r3, r2
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	@ 0x80
 8001044:	055b      	lsls	r3, r3, #21
 8001046:	4013      	ands	r3, r2
 8001048:	d100      	bne.n	800104c <HAL_GPIO_Init+0x174>
 800104a:	e09a      	b.n	8001182 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	4b54      	ldr	r3, [pc, #336]	@ (80011a0 <HAL_GPIO_Init+0x2c8>)
 800104e:	699a      	ldr	r2, [r3, #24]
 8001050:	4b53      	ldr	r3, [pc, #332]	@ (80011a0 <HAL_GPIO_Init+0x2c8>)
 8001052:	2101      	movs	r1, #1
 8001054:	430a      	orrs	r2, r1
 8001056:	619a      	str	r2, [r3, #24]
 8001058:	4b51      	ldr	r3, [pc, #324]	@ (80011a0 <HAL_GPIO_Init+0x2c8>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	2201      	movs	r2, #1
 800105e:	4013      	ands	r3, r2
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001064:	4a4f      	ldr	r2, [pc, #316]	@ (80011a4 <HAL_GPIO_Init+0x2cc>)
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	589b      	ldr	r3, [r3, r2]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	220f      	movs	r2, #15
 800107c:	409a      	lsls	r2, r3
 800107e:	0013      	movs	r3, r2
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	2390      	movs	r3, #144	@ 0x90
 800108c:	05db      	lsls	r3, r3, #23
 800108e:	429a      	cmp	r2, r3
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0x1e2>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a44      	ldr	r2, [pc, #272]	@ (80011a8 <HAL_GPIO_Init+0x2d0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d00d      	beq.n	80010b6 <HAL_GPIO_Init+0x1de>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a43      	ldr	r2, [pc, #268]	@ (80011ac <HAL_GPIO_Init+0x2d4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d007      	beq.n	80010b2 <HAL_GPIO_Init+0x1da>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a42      	ldr	r2, [pc, #264]	@ (80011b0 <HAL_GPIO_Init+0x2d8>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_GPIO_Init+0x1d6>
 80010aa:	2303      	movs	r3, #3
 80010ac:	e006      	b.n	80010bc <HAL_GPIO_Init+0x1e4>
 80010ae:	2305      	movs	r3, #5
 80010b0:	e004      	b.n	80010bc <HAL_GPIO_Init+0x1e4>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e002      	b.n	80010bc <HAL_GPIO_Init+0x1e4>
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_GPIO_Init+0x1e4>
 80010ba:	2300      	movs	r3, #0
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	2103      	movs	r1, #3
 80010c0:	400a      	ands	r2, r1
 80010c2:	0092      	lsls	r2, r2, #2
 80010c4:	4093      	lsls	r3, r2
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010cc:	4935      	ldr	r1, [pc, #212]	@ (80011a4 <HAL_GPIO_Init+0x2cc>)
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3302      	adds	r3, #2
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010da:	4b36      	ldr	r3, [pc, #216]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	43da      	mvns	r2, r3
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685a      	ldr	r2, [r3, #4]
 80010ee:	2380      	movs	r3, #128	@ 0x80
 80010f0:	025b      	lsls	r3, r3, #9
 80010f2:	4013      	ands	r3, r2
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010fe:	4b2d      	ldr	r3, [pc, #180]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001104:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	43da      	mvns	r2, r3
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	2380      	movs	r3, #128	@ 0x80
 800111a:	029b      	lsls	r3, r3, #10
 800111c:	4013      	ands	r3, r2
 800111e:	d003      	beq.n	8001128 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4313      	orrs	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001128:	4b22      	ldr	r3, [pc, #136]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	43da      	mvns	r2, r3
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	2380      	movs	r3, #128	@ 0x80
 8001144:	035b      	lsls	r3, r3, #13
 8001146:	4013      	ands	r3, r2
 8001148:	d003      	beq.n	8001152 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001152:	4b18      	ldr	r3, [pc, #96]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001158:	4b16      	ldr	r3, [pc, #88]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 800115a:	68db      	ldr	r3, [r3, #12]
 800115c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	2380      	movs	r3, #128	@ 0x80
 800116e:	039b      	lsls	r3, r3, #14
 8001170:	4013      	ands	r3, r2
 8001172:	d003      	beq.n	800117c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800117c:	4b0d      	ldr	r3, [pc, #52]	@ (80011b4 <HAL_GPIO_Init+0x2dc>)
 800117e:	693a      	ldr	r2, [r7, #16]
 8001180:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	3301      	adds	r3, #1
 8001186:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	40da      	lsrs	r2, r3
 8001190:	1e13      	subs	r3, r2, #0
 8001192:	d000      	beq.n	8001196 <HAL_GPIO_Init+0x2be>
 8001194:	e6a8      	b.n	8000ee8 <HAL_GPIO_Init+0x10>
  } 
}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b006      	add	sp, #24
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010000 	.word	0x40010000
 80011a8:	48000400 	.word	0x48000400
 80011ac:	48000800 	.word	0x48000800
 80011b0:	48000c00 	.word	0x48000c00
 80011b4:	40010400 	.word	0x40010400

080011b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	0008      	movs	r0, r1
 80011c2:	0011      	movs	r1, r2
 80011c4:	1cbb      	adds	r3, r7, #2
 80011c6:	1c02      	adds	r2, r0, #0
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	1c7b      	adds	r3, r7, #1
 80011cc:	1c0a      	adds	r2, r1, #0
 80011ce:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d0:	1c7b      	adds	r3, r7, #1
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d004      	beq.n	80011e2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011d8:	1cbb      	adds	r3, r7, #2
 80011da:	881a      	ldrh	r2, [r3, #0]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011e2:	1cbb      	adds	r3, r7, #2
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011ea:	46c0      	nop			@ (mov r8, r8)
 80011ec:	46bd      	mov	sp, r7
 80011ee:	b002      	add	sp, #8
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dbb      	adds	r3, r7, #6
 80011fe:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001200:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	1dba      	adds	r2, r7, #6
 8001206:	8812      	ldrh	r2, [r2, #0]
 8001208:	4013      	ands	r3, r2
 800120a:	d008      	beq.n	800121e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800120e:	1dba      	adds	r2, r7, #6
 8001210:	8812      	ldrh	r2, [r2, #0]
 8001212:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001214:	1dbb      	adds	r3, r7, #6
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff fa3f 	bl	800069c <HAL_GPIO_EXTI_Callback>
  }
}
 800121e:	46c0      	nop			@ (mov r8, r8)
 8001220:	46bd      	mov	sp, r7
 8001222:	b002      	add	sp, #8
 8001224:	bd80      	pop	{r7, pc}
 8001226:	46c0      	nop			@ (mov r8, r8)
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e301      	b.n	8001842 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2201      	movs	r2, #1
 8001244:	4013      	ands	r3, r2
 8001246:	d100      	bne.n	800124a <HAL_RCC_OscConfig+0x1e>
 8001248:	e08d      	b.n	8001366 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800124a:	4bc3      	ldr	r3, [pc, #780]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	220c      	movs	r2, #12
 8001250:	4013      	ands	r3, r2
 8001252:	2b04      	cmp	r3, #4
 8001254:	d00e      	beq.n	8001274 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001256:	4bc0      	ldr	r3, [pc, #768]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	220c      	movs	r2, #12
 800125c:	4013      	ands	r3, r2
 800125e:	2b08      	cmp	r3, #8
 8001260:	d116      	bne.n	8001290 <HAL_RCC_OscConfig+0x64>
 8001262:	4bbd      	ldr	r3, [pc, #756]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001264:	685a      	ldr	r2, [r3, #4]
 8001266:	2380      	movs	r3, #128	@ 0x80
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	401a      	ands	r2, r3
 800126c:	2380      	movs	r3, #128	@ 0x80
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	429a      	cmp	r2, r3
 8001272:	d10d      	bne.n	8001290 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	4bb8      	ldr	r3, [pc, #736]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	2380      	movs	r3, #128	@ 0x80
 800127a:	029b      	lsls	r3, r3, #10
 800127c:	4013      	ands	r3, r2
 800127e:	d100      	bne.n	8001282 <HAL_RCC_OscConfig+0x56>
 8001280:	e070      	b.n	8001364 <HAL_RCC_OscConfig+0x138>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d000      	beq.n	800128c <HAL_RCC_OscConfig+0x60>
 800128a:	e06b      	b.n	8001364 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e2d8      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d107      	bne.n	80012a8 <HAL_RCC_OscConfig+0x7c>
 8001298:	4baf      	ldr	r3, [pc, #700]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4bae      	ldr	r3, [pc, #696]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800129e:	2180      	movs	r1, #128	@ 0x80
 80012a0:	0249      	lsls	r1, r1, #9
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	e02f      	b.n	8001308 <HAL_RCC_OscConfig+0xdc>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d10c      	bne.n	80012ca <HAL_RCC_OscConfig+0x9e>
 80012b0:	4ba9      	ldr	r3, [pc, #676]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4ba8      	ldr	r3, [pc, #672]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012b6:	49a9      	ldr	r1, [pc, #676]	@ (800155c <HAL_RCC_OscConfig+0x330>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	4ba6      	ldr	r3, [pc, #664]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4ba5      	ldr	r3, [pc, #660]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012c2:	49a7      	ldr	r1, [pc, #668]	@ (8001560 <HAL_RCC_OscConfig+0x334>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e01e      	b.n	8001308 <HAL_RCC_OscConfig+0xdc>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b05      	cmp	r3, #5
 80012d0:	d10e      	bne.n	80012f0 <HAL_RCC_OscConfig+0xc4>
 80012d2:	4ba1      	ldr	r3, [pc, #644]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	4ba0      	ldr	r3, [pc, #640]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012d8:	2180      	movs	r1, #128	@ 0x80
 80012da:	02c9      	lsls	r1, r1, #11
 80012dc:	430a      	orrs	r2, r1
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	4b9d      	ldr	r3, [pc, #628]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b9c      	ldr	r3, [pc, #624]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012e6:	2180      	movs	r1, #128	@ 0x80
 80012e8:	0249      	lsls	r1, r1, #9
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	e00b      	b.n	8001308 <HAL_RCC_OscConfig+0xdc>
 80012f0:	4b99      	ldr	r3, [pc, #612]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	4b98      	ldr	r3, [pc, #608]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	4999      	ldr	r1, [pc, #612]	@ (800155c <HAL_RCC_OscConfig+0x330>)
 80012f8:	400a      	ands	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	4b96      	ldr	r3, [pc, #600]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b95      	ldr	r3, [pc, #596]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001302:	4997      	ldr	r1, [pc, #604]	@ (8001560 <HAL_RCC_OscConfig+0x334>)
 8001304:	400a      	ands	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d014      	beq.n	800133a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001310:	f7ff fbf4 	bl	8000afc <HAL_GetTick>
 8001314:	0003      	movs	r3, r0
 8001316:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800131a:	f7ff fbef 	bl	8000afc <HAL_GetTick>
 800131e:	0002      	movs	r2, r0
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b64      	cmp	r3, #100	@ 0x64
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e28a      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800132c:	4b8a      	ldr	r3, [pc, #552]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	2380      	movs	r3, #128	@ 0x80
 8001332:	029b      	lsls	r3, r3, #10
 8001334:	4013      	ands	r3, r2
 8001336:	d0f0      	beq.n	800131a <HAL_RCC_OscConfig+0xee>
 8001338:	e015      	b.n	8001366 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133a:	f7ff fbdf 	bl	8000afc <HAL_GetTick>
 800133e:	0003      	movs	r3, r0
 8001340:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fbda 	bl	8000afc <HAL_GetTick>
 8001348:	0002      	movs	r2, r0
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	@ 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e275      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001356:	4b80      	ldr	r3, [pc, #512]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	@ 0x80
 800135c:	029b      	lsls	r3, r3, #10
 800135e:	4013      	ands	r3, r2
 8001360:	d1f0      	bne.n	8001344 <HAL_RCC_OscConfig+0x118>
 8001362:	e000      	b.n	8001366 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001364:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d100      	bne.n	8001372 <HAL_RCC_OscConfig+0x146>
 8001370:	e069      	b.n	8001446 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001372:	4b79      	ldr	r3, [pc, #484]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	220c      	movs	r2, #12
 8001378:	4013      	ands	r3, r2
 800137a:	d00b      	beq.n	8001394 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800137c:	4b76      	ldr	r3, [pc, #472]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	220c      	movs	r2, #12
 8001382:	4013      	ands	r3, r2
 8001384:	2b08      	cmp	r3, #8
 8001386:	d11c      	bne.n	80013c2 <HAL_RCC_OscConfig+0x196>
 8001388:	4b73      	ldr	r3, [pc, #460]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	2380      	movs	r3, #128	@ 0x80
 800138e:	025b      	lsls	r3, r3, #9
 8001390:	4013      	ands	r3, r2
 8001392:	d116      	bne.n	80013c2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001394:	4b70      	ldr	r3, [pc, #448]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2202      	movs	r2, #2
 800139a:	4013      	ands	r3, r2
 800139c:	d005      	beq.n	80013aa <HAL_RCC_OscConfig+0x17e>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d001      	beq.n	80013aa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
 80013a8:	e24b      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	22f8      	movs	r2, #248	@ 0xf8
 80013b0:	4393      	bics	r3, r2
 80013b2:	0019      	movs	r1, r3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	00da      	lsls	r2, r3, #3
 80013ba:	4b67      	ldr	r3, [pc, #412]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80013bc:	430a      	orrs	r2, r1
 80013be:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c0:	e041      	b.n	8001446 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d024      	beq.n	8001414 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013ca:	4b63      	ldr	r3, [pc, #396]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b62      	ldr	r3, [pc, #392]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80013d0:	2101      	movs	r1, #1
 80013d2:	430a      	orrs	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d6:	f7ff fb91 	bl	8000afc <HAL_GetTick>
 80013da:	0003      	movs	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e0:	f7ff fb8c 	bl	8000afc <HAL_GetTick>
 80013e4:	0002      	movs	r2, r0
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e227      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013f2:	4b59      	ldr	r3, [pc, #356]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2202      	movs	r2, #2
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0f1      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013fc:	4b56      	ldr	r3, [pc, #344]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	22f8      	movs	r2, #248	@ 0xf8
 8001402:	4393      	bics	r3, r2
 8001404:	0019      	movs	r1, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	00da      	lsls	r2, r3, #3
 800140c:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800140e:	430a      	orrs	r2, r1
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	e018      	b.n	8001446 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001414:	4b50      	ldr	r3, [pc, #320]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b4f      	ldr	r3, [pc, #316]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800141a:	2101      	movs	r1, #1
 800141c:	438a      	bics	r2, r1
 800141e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb6c 	bl	8000afc <HAL_GetTick>
 8001424:	0003      	movs	r3, r0
 8001426:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001428:	e008      	b.n	800143c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800142a:	f7ff fb67 	bl	8000afc <HAL_GetTick>
 800142e:	0002      	movs	r2, r0
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d901      	bls.n	800143c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e202      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800143c:	4b46      	ldr	r3, [pc, #280]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2202      	movs	r2, #2
 8001442:	4013      	ands	r3, r2
 8001444:	d1f1      	bne.n	800142a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2208      	movs	r2, #8
 800144c:	4013      	ands	r3, r2
 800144e:	d036      	beq.n	80014be <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d019      	beq.n	800148c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001458:	4b3f      	ldr	r3, [pc, #252]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800145a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800145c:	4b3e      	ldr	r3, [pc, #248]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800145e:	2101      	movs	r1, #1
 8001460:	430a      	orrs	r2, r1
 8001462:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff fb4a 	bl	8000afc <HAL_GetTick>
 8001468:	0003      	movs	r3, r0
 800146a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800146c:	e008      	b.n	8001480 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fb45 	bl	8000afc <HAL_GetTick>
 8001472:	0002      	movs	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e1e0      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001480:	4b35      	ldr	r3, [pc, #212]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001484:	2202      	movs	r2, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d0f1      	beq.n	800146e <HAL_RCC_OscConfig+0x242>
 800148a:	e018      	b.n	80014be <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800148c:	4b32      	ldr	r3, [pc, #200]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800148e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001490:	4b31      	ldr	r3, [pc, #196]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001492:	2101      	movs	r1, #1
 8001494:	438a      	bics	r2, r1
 8001496:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001498:	f7ff fb30 	bl	8000afc <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014a2:	f7ff fb2b 	bl	8000afc <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e1c6      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	4b28      	ldr	r3, [pc, #160]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80014b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b8:	2202      	movs	r2, #2
 80014ba:	4013      	ands	r3, r2
 80014bc:	d1f1      	bne.n	80014a2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2204      	movs	r2, #4
 80014c4:	4013      	ands	r3, r2
 80014c6:	d100      	bne.n	80014ca <HAL_RCC_OscConfig+0x29e>
 80014c8:	e0b4      	b.n	8001634 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ca:	201f      	movs	r0, #31
 80014cc:	183b      	adds	r3, r7, r0
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014d2:	4b21      	ldr	r3, [pc, #132]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	2380      	movs	r3, #128	@ 0x80
 80014d8:	055b      	lsls	r3, r3, #21
 80014da:	4013      	ands	r3, r2
 80014dc:	d110      	bne.n	8001500 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	4b1d      	ldr	r3, [pc, #116]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80014e4:	2180      	movs	r1, #128	@ 0x80
 80014e6:	0549      	lsls	r1, r1, #21
 80014e8:	430a      	orrs	r2, r1
 80014ea:	61da      	str	r2, [r3, #28]
 80014ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	055b      	lsls	r3, r3, #21
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80014fa:	183b      	adds	r3, r7, r0
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	4013      	ands	r3, r2
 800150a:	d11a      	bne.n	8001542 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800150c:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001512:	2180      	movs	r1, #128	@ 0x80
 8001514:	0049      	lsls	r1, r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800151a:	f7ff faef 	bl	8000afc <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001524:	f7ff faea 	bl	8000afc <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e185      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001536:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <HAL_RCC_OscConfig+0x338>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4013      	ands	r3, r2
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10e      	bne.n	8001568 <HAL_RCC_OscConfig+0x33c>
 800154a:	4b03      	ldr	r3, [pc, #12]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 800154c:	6a1a      	ldr	r2, [r3, #32]
 800154e:	4b02      	ldr	r3, [pc, #8]	@ (8001558 <HAL_RCC_OscConfig+0x32c>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	621a      	str	r2, [r3, #32]
 8001556:	e035      	b.n	80015c4 <HAL_RCC_OscConfig+0x398>
 8001558:	40021000 	.word	0x40021000
 800155c:	fffeffff 	.word	0xfffeffff
 8001560:	fffbffff 	.word	0xfffbffff
 8001564:	40007000 	.word	0x40007000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d10c      	bne.n	800158a <HAL_RCC_OscConfig+0x35e>
 8001570:	4bb6      	ldr	r3, [pc, #728]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001572:	6a1a      	ldr	r2, [r3, #32]
 8001574:	4bb5      	ldr	r3, [pc, #724]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	621a      	str	r2, [r3, #32]
 800157c:	4bb3      	ldr	r3, [pc, #716]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800157e:	6a1a      	ldr	r2, [r3, #32]
 8001580:	4bb2      	ldr	r3, [pc, #712]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001582:	2104      	movs	r1, #4
 8001584:	438a      	bics	r2, r1
 8001586:	621a      	str	r2, [r3, #32]
 8001588:	e01c      	b.n	80015c4 <HAL_RCC_OscConfig+0x398>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b05      	cmp	r3, #5
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x380>
 8001592:	4bae      	ldr	r3, [pc, #696]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001594:	6a1a      	ldr	r2, [r3, #32]
 8001596:	4bad      	ldr	r3, [pc, #692]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001598:	2104      	movs	r1, #4
 800159a:	430a      	orrs	r2, r1
 800159c:	621a      	str	r2, [r3, #32]
 800159e:	4bab      	ldr	r3, [pc, #684]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	4baa      	ldr	r3, [pc, #680]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	430a      	orrs	r2, r1
 80015a8:	621a      	str	r2, [r3, #32]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x398>
 80015ac:	4ba7      	ldr	r3, [pc, #668]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80015ae:	6a1a      	ldr	r2, [r3, #32]
 80015b0:	4ba6      	ldr	r3, [pc, #664]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	438a      	bics	r2, r1
 80015b6:	621a      	str	r2, [r3, #32]
 80015b8:	4ba4      	ldr	r3, [pc, #656]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80015ba:	6a1a      	ldr	r2, [r3, #32]
 80015bc:	4ba3      	ldr	r3, [pc, #652]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80015be:	2104      	movs	r1, #4
 80015c0:	438a      	bics	r2, r1
 80015c2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d014      	beq.n	80015f6 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa96 	bl	8000afc <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015d6:	f7ff fa91 	bl	8000afc <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4a9b      	ldr	r2, [pc, #620]	@ (8001850 <HAL_RCC_OscConfig+0x624>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e12b      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ea:	4b98      	ldr	r3, [pc, #608]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	2202      	movs	r2, #2
 80015f0:	4013      	ands	r3, r2
 80015f2:	d0f0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3aa>
 80015f4:	e013      	b.n	800161e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa81 	bl	8000afc <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	e009      	b.n	8001614 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001600:	f7ff fa7c 	bl	8000afc <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	4a91      	ldr	r2, [pc, #580]	@ (8001850 <HAL_RCC_OscConfig+0x624>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e116      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	4b8d      	ldr	r3, [pc, #564]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	2202      	movs	r2, #2
 800161a:	4013      	ands	r3, r2
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800161e:	231f      	movs	r3, #31
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d105      	bne.n	8001634 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001628:	4b88      	ldr	r3, [pc, #544]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800162a:	69da      	ldr	r2, [r3, #28]
 800162c:	4b87      	ldr	r3, [pc, #540]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800162e:	4989      	ldr	r1, [pc, #548]	@ (8001854 <HAL_RCC_OscConfig+0x628>)
 8001630:	400a      	ands	r2, r1
 8001632:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2210      	movs	r2, #16
 800163a:	4013      	ands	r3, r2
 800163c:	d063      	beq.n	8001706 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d12a      	bne.n	800169c <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001646:	4b81      	ldr	r3, [pc, #516]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001648:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800164a:	4b80      	ldr	r3, [pc, #512]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800164c:	2104      	movs	r1, #4
 800164e:	430a      	orrs	r2, r1
 8001650:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001652:	4b7e      	ldr	r3, [pc, #504]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001654:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001656:	4b7d      	ldr	r3, [pc, #500]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001658:	2101      	movs	r1, #1
 800165a:	430a      	orrs	r2, r1
 800165c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165e:	f7ff fa4d 	bl	8000afc <HAL_GetTick>
 8001662:	0003      	movs	r3, r0
 8001664:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001668:	f7ff fa48 	bl	8000afc <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e0e3      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800167a:	4b74      	ldr	r3, [pc, #464]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800167c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800167e:	2202      	movs	r2, #2
 8001680:	4013      	ands	r3, r2
 8001682:	d0f1      	beq.n	8001668 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001684:	4b71      	ldr	r3, [pc, #452]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001688:	22f8      	movs	r2, #248	@ 0xf8
 800168a:	4393      	bics	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	00da      	lsls	r2, r3, #3
 8001694:	4b6d      	ldr	r3, [pc, #436]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001696:	430a      	orrs	r2, r1
 8001698:	635a      	str	r2, [r3, #52]	@ 0x34
 800169a:	e034      	b.n	8001706 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	695b      	ldr	r3, [r3, #20]
 80016a0:	3305      	adds	r3, #5
 80016a2:	d111      	bne.n	80016c8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80016a4:	4b69      	ldr	r3, [pc, #420]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016a8:	4b68      	ldr	r3, [pc, #416]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016aa:	2104      	movs	r1, #4
 80016ac:	438a      	bics	r2, r1
 80016ae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80016b0:	4b66      	ldr	r3, [pc, #408]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80016b4:	22f8      	movs	r2, #248	@ 0xf8
 80016b6:	4393      	bics	r3, r2
 80016b8:	0019      	movs	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	699b      	ldr	r3, [r3, #24]
 80016be:	00da      	lsls	r2, r3, #3
 80016c0:	4b62      	ldr	r3, [pc, #392]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016c2:	430a      	orrs	r2, r1
 80016c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80016c6:	e01e      	b.n	8001706 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016c8:	4b60      	ldr	r3, [pc, #384]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016cc:	4b5f      	ldr	r3, [pc, #380]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016ce:	2104      	movs	r1, #4
 80016d0:	430a      	orrs	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80016d4:	4b5d      	ldr	r3, [pc, #372]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80016d8:	4b5c      	ldr	r3, [pc, #368]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016da:	2101      	movs	r1, #1
 80016dc:	438a      	bics	r2, r1
 80016de:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e0:	f7ff fa0c 	bl	8000afc <HAL_GetTick>
 80016e4:	0003      	movs	r3, r0
 80016e6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016ea:	f7ff fa07 	bl	8000afc <HAL_GetTick>
 80016ee:	0002      	movs	r2, r0
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e0a2      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80016fc:	4b53      	ldr	r3, [pc, #332]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80016fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001700:	2202      	movs	r2, #2
 8001702:	4013      	ands	r3, r2
 8001704:	d1f1      	bne.n	80016ea <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a1b      	ldr	r3, [r3, #32]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d100      	bne.n	8001710 <HAL_RCC_OscConfig+0x4e4>
 800170e:	e097      	b.n	8001840 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001710:	4b4e      	ldr	r3, [pc, #312]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	220c      	movs	r2, #12
 8001716:	4013      	ands	r3, r2
 8001718:	2b08      	cmp	r3, #8
 800171a:	d100      	bne.n	800171e <HAL_RCC_OscConfig+0x4f2>
 800171c:	e06b      	b.n	80017f6 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	2b02      	cmp	r3, #2
 8001724:	d14c      	bne.n	80017c0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001726:	4b49      	ldr	r3, [pc, #292]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b48      	ldr	r3, [pc, #288]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800172c:	494a      	ldr	r1, [pc, #296]	@ (8001858 <HAL_RCC_OscConfig+0x62c>)
 800172e:	400a      	ands	r2, r1
 8001730:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff f9e3 	bl	8000afc <HAL_GetTick>
 8001736:	0003      	movs	r3, r0
 8001738:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800173c:	f7ff f9de 	bl	8000afc <HAL_GetTick>
 8001740:	0002      	movs	r2, r0
 8001742:	69bb      	ldr	r3, [r7, #24]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e079      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174e:	4b3f      	ldr	r3, [pc, #252]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	2380      	movs	r3, #128	@ 0x80
 8001754:	049b      	lsls	r3, r3, #18
 8001756:	4013      	ands	r3, r2
 8001758:	d1f0      	bne.n	800173c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800175a:	4b3c      	ldr	r3, [pc, #240]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	220f      	movs	r2, #15
 8001760:	4393      	bics	r3, r2
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001768:	4b38      	ldr	r3, [pc, #224]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800176e:	4b37      	ldr	r3, [pc, #220]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	4a3a      	ldr	r2, [pc, #232]	@ (800185c <HAL_RCC_OscConfig+0x630>)
 8001774:	4013      	ands	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	431a      	orrs	r2, r3
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001784:	430a      	orrs	r2, r1
 8001786:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001788:	4b30      	ldr	r3, [pc, #192]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800178e:	2180      	movs	r1, #128	@ 0x80
 8001790:	0449      	lsls	r1, r1, #17
 8001792:	430a      	orrs	r2, r1
 8001794:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001796:	f7ff f9b1 	bl	8000afc <HAL_GetTick>
 800179a:	0003      	movs	r3, r0
 800179c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017a0:	f7ff f9ac 	bl	8000afc <HAL_GetTick>
 80017a4:	0002      	movs	r2, r0
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e047      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017b2:	4b26      	ldr	r3, [pc, #152]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	2380      	movs	r3, #128	@ 0x80
 80017b8:	049b      	lsls	r3, r3, #18
 80017ba:	4013      	ands	r3, r2
 80017bc:	d0f0      	beq.n	80017a0 <HAL_RCC_OscConfig+0x574>
 80017be:	e03f      	b.n	8001840 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c0:	4b22      	ldr	r3, [pc, #136]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80017c6:	4924      	ldr	r1, [pc, #144]	@ (8001858 <HAL_RCC_OscConfig+0x62c>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff f996 	bl	8000afc <HAL_GetTick>
 80017d0:	0003      	movs	r3, r0
 80017d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d4:	e008      	b.n	80017e8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017d6:	f7ff f991 	bl	8000afc <HAL_GetTick>
 80017da:	0002      	movs	r2, r0
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d901      	bls.n	80017e8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80017e4:	2303      	movs	r3, #3
 80017e6:	e02c      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	049b      	lsls	r3, r3, #18
 80017f0:	4013      	ands	r3, r2
 80017f2:	d1f0      	bne.n	80017d6 <HAL_RCC_OscConfig+0x5aa>
 80017f4:	e024      	b.n	8001840 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d101      	bne.n	8001802 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e01f      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001802:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001808:	4b10      	ldr	r3, [pc, #64]	@ (800184c <HAL_RCC_OscConfig+0x620>)
 800180a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800180c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	025b      	lsls	r3, r3, #9
 8001814:	401a      	ands	r2, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	429a      	cmp	r2, r3
 800181c:	d10e      	bne.n	800183c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	220f      	movs	r2, #15
 8001822:	401a      	ands	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001828:	429a      	cmp	r2, r3
 800182a:	d107      	bne.n	800183c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	23f0      	movs	r3, #240	@ 0xf0
 8001830:	039b      	lsls	r3, r3, #14
 8001832:	401a      	ands	r2, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001838:	429a      	cmp	r2, r3
 800183a:	d001      	beq.n	8001840 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	0018      	movs	r0, r3
 8001844:	46bd      	mov	sp, r7
 8001846:	b008      	add	sp, #32
 8001848:	bd80      	pop	{r7, pc}
 800184a:	46c0      	nop			@ (mov r8, r8)
 800184c:	40021000 	.word	0x40021000
 8001850:	00001388 	.word	0x00001388
 8001854:	efffffff 	.word	0xefffffff
 8001858:	feffffff 	.word	0xfeffffff
 800185c:	ffc2ffff 	.word	0xffc2ffff

08001860 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d101      	bne.n	8001874 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
 8001872:	e0b3      	b.n	80019dc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001874:	4b5b      	ldr	r3, [pc, #364]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2201      	movs	r2, #1
 800187a:	4013      	ands	r3, r2
 800187c:	683a      	ldr	r2, [r7, #0]
 800187e:	429a      	cmp	r2, r3
 8001880:	d911      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001882:	4b58      	ldr	r3, [pc, #352]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2201      	movs	r2, #1
 8001888:	4393      	bics	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	4b55      	ldr	r3, [pc, #340]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 800188e:	683a      	ldr	r2, [r7, #0]
 8001890:	430a      	orrs	r2, r1
 8001892:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001894:	4b53      	ldr	r3, [pc, #332]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2201      	movs	r2, #1
 800189a:	4013      	ands	r3, r2
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d001      	beq.n	80018a6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e09a      	b.n	80019dc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2202      	movs	r2, #2
 80018ac:	4013      	ands	r3, r2
 80018ae:	d015      	beq.n	80018dc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2204      	movs	r2, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d006      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80018ba:	4b4b      	ldr	r3, [pc, #300]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80018bc:	685a      	ldr	r2, [r3, #4]
 80018be:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80018c0:	21e0      	movs	r1, #224	@ 0xe0
 80018c2:	00c9      	lsls	r1, r1, #3
 80018c4:	430a      	orrs	r2, r1
 80018c6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b47      	ldr	r3, [pc, #284]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	22f0      	movs	r2, #240	@ 0xf0
 80018ce:	4393      	bics	r3, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	689a      	ldr	r2, [r3, #8]
 80018d6:	4b44      	ldr	r3, [pc, #272]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80018d8:	430a      	orrs	r2, r1
 80018da:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2201      	movs	r2, #1
 80018e2:	4013      	ands	r3, r2
 80018e4:	d040      	beq.n	8001968 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b3e      	ldr	r3, [pc, #248]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	2380      	movs	r3, #128	@ 0x80
 80018f4:	029b      	lsls	r3, r3, #10
 80018f6:	4013      	ands	r3, r2
 80018f8:	d114      	bne.n	8001924 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e06e      	b.n	80019dc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b38      	ldr	r3, [pc, #224]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	2380      	movs	r3, #128	@ 0x80
 800190c:	049b      	lsls	r3, r3, #18
 800190e:	4013      	ands	r3, r2
 8001910:	d108      	bne.n	8001924 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e062      	b.n	80019dc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e05b      	b.n	80019dc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001924:	4b30      	ldr	r3, [pc, #192]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4b2d      	ldr	r3, [pc, #180]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 8001934:	430a      	orrs	r2, r1
 8001936:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff f8e0 	bl	8000afc <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001940:	e009      	b.n	8001956 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7ff f8db 	bl	8000afc <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a27      	ldr	r2, [pc, #156]	@ (80019ec <HAL_RCC_ClockConfig+0x18c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e042      	b.n	80019dc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	220c      	movs	r2, #12
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1ec      	bne.n	8001942 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d211      	bcs.n	800199a <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2201      	movs	r2, #1
 800197c:	4393      	bics	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_RCC_ClockConfig+0x184>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	2201      	movs	r2, #1
 800198e:	4013      	ands	r3, r2
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e020      	b.n	80019dc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	d009      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	4a11      	ldr	r2, [pc, #68]	@ (80019f0 <HAL_RCC_ClockConfig+0x190>)
 80019aa:	4013      	ands	r3, r2
 80019ac:	0019      	movs	r1, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80019b4:	430a      	orrs	r2, r1
 80019b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019b8:	f000 f820 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 80019bc:	0001      	movs	r1, r0
 80019be:	4b0a      	ldr	r3, [pc, #40]	@ (80019e8 <HAL_RCC_ClockConfig+0x188>)
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	091b      	lsrs	r3, r3, #4
 80019c4:	220f      	movs	r2, #15
 80019c6:	4013      	ands	r3, r2
 80019c8:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_RCC_ClockConfig+0x194>)
 80019ca:	5cd3      	ldrb	r3, [r2, r3]
 80019cc:	000a      	movs	r2, r1
 80019ce:	40da      	lsrs	r2, r3
 80019d0:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_ClockConfig+0x198>)
 80019d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019d4:	2000      	movs	r0, #0
 80019d6:	f7ff f84b 	bl	8000a70 <HAL_InitTick>
  
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	0018      	movs	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	b004      	add	sp, #16
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	00001388 	.word	0x00001388
 80019f0:	fffff8ff 	.word	0xfffff8ff
 80019f4:	080038e4 	.word	0x080038e4
 80019f8:	20000000 	.word	0x20000000

080019fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019fc:	b590      	push	{r4, r7, lr}
 80019fe:	b08f      	sub	sp, #60	@ 0x3c
 8001a00:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a02:	2314      	movs	r3, #20
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	4a2b      	ldr	r2, [pc, #172]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a0a:	c313      	stmia	r3!, {r0, r1, r4}
 8001a0c:	6812      	ldr	r2, [r2, #0]
 8001a0e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a10:	1d3b      	adds	r3, r7, #4
 8001a12:	4a29      	ldr	r2, [pc, #164]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a14:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a16:	c313      	stmia	r3!, {r0, r1, r4}
 8001a18:	6812      	ldr	r2, [r2, #0]
 8001a1a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a20:	2300      	movs	r3, #0
 8001a22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a24:	2300      	movs	r3, #0
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	633b      	str	r3, [r7, #48]	@ 0x30
  
  tmpreg = RCC->CFGR;
 8001a30:	4b22      	ldr	r3, [pc, #136]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a38:	220c      	movs	r2, #12
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	2b04      	cmp	r3, #4
 8001a3e:	d002      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x4a>
 8001a40:	2b08      	cmp	r3, #8
 8001a42:	d003      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0x50>
 8001a44:	e02d      	b.n	8001aa2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a46:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a48:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001a4a:	e02d      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a4e:	0c9b      	lsrs	r3, r3, #18
 8001a50:	220f      	movs	r2, #15
 8001a52:	4013      	ands	r3, r2
 8001a54:	2214      	movs	r2, #20
 8001a56:	18ba      	adds	r2, r7, r2
 8001a58:	5cd3      	ldrb	r3, [r2, r3]
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a5c:	4b17      	ldr	r3, [pc, #92]	@ (8001abc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a60:	220f      	movs	r2, #15
 8001a62:	4013      	ands	r3, r2
 8001a64:	1d3a      	adds	r2, r7, #4
 8001a66:	5cd3      	ldrb	r3, [r2, r3]
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001a6c:	2380      	movs	r3, #128	@ 0x80
 8001a6e:	025b      	lsls	r3, r3, #9
 8001a70:	4013      	ands	r3, r2
 8001a72:	d009      	beq.n	8001a88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a76:	4812      	ldr	r0, [pc, #72]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a78:	f7fe fb50 	bl	800011c <__udivsi3>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	001a      	movs	r2, r3
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	4353      	muls	r3, r2
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a86:	e009      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001a88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a8a:	000a      	movs	r2, r1
 8001a8c:	0152      	lsls	r2, r2, #5
 8001a8e:	1a52      	subs	r2, r2, r1
 8001a90:	0193      	lsls	r3, r2, #6
 8001a92:	1a9b      	subs	r3, r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	185b      	adds	r3, r3, r1
 8001a98:	021b      	lsls	r3, r3, #8
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a9e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001aa0:	e002      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001aa4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001aa6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001aaa:	0018      	movs	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	b00f      	add	sp, #60	@ 0x3c
 8001ab0:	bd90      	pop	{r4, r7, pc}
 8001ab2:	46c0      	nop			@ (mov r8, r8)
 8001ab4:	080038c4 	.word	0x080038c4
 8001ab8:	080038d4 	.word	0x080038d4
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	007a1200 	.word	0x007a1200

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b02      	ldr	r3, [pc, #8]	@ (8001ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			@ (mov r8, r8)
 8001ad4:	20000000 	.word	0x20000000

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001adc:	f7ff fff2 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae0:	0001      	movs	r1, r0
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	2207      	movs	r2, #7
 8001aea:	4013      	ands	r3, r2
 8001aec:	4a04      	ldr	r2, [pc, #16]	@ (8001b00 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	40d9      	lsrs	r1, r3
 8001af2:	000b      	movs	r3, r1
}    
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	46c0      	nop			@ (mov r8, r8)
 8001afc:	40021000 	.word	0x40021000
 8001b00:	080038f4 	.word	0x080038f4

08001b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e01e      	b.n	8001b54 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	223d      	movs	r2, #61	@ 0x3d
 8001b1a:	5c9b      	ldrb	r3, [r3, r2]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d107      	bne.n	8001b32 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	223c      	movs	r2, #60	@ 0x3c
 8001b26:	2100      	movs	r1, #0
 8001b28:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0018      	movs	r0, r3
 8001b2e:	f7fe fe1d 	bl	800076c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	223d      	movs	r2, #61	@ 0x3d
 8001b36:	2102      	movs	r1, #2
 8001b38:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3304      	adds	r3, #4
 8001b42:	0019      	movs	r1, r3
 8001b44:	0010      	movs	r0, r2
 8001b46:	f000 fa17 	bl	8001f78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	223d      	movs	r2, #61	@ 0x3d
 8001b4e:	2101      	movs	r1, #1
 8001b50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	0018      	movs	r0, r3
 8001b56:	46bd      	mov	sp, r7
 8001b58:	b002      	add	sp, #8
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01e      	b.n	8001bac <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	223d      	movs	r2, #61	@ 0x3d
 8001b72:	5c9b      	ldrb	r3, [r3, r2]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	223c      	movs	r2, #60	@ 0x3c
 8001b7e:	2100      	movs	r1, #0
 8001b80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	0018      	movs	r0, r3
 8001b86:	f000 f815 	bl	8001bb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223d      	movs	r2, #61	@ 0x3d
 8001b8e:	2102      	movs	r1, #2
 8001b90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	0010      	movs	r0, r2
 8001b9e:	f000 f9eb 	bl	8001f78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	223d      	movs	r2, #61	@ 0x3d
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	0018      	movs	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	b002      	add	sp, #8
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001bbc:	46c0      	nop			@ (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b002      	add	sp, #8
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6839      	ldr	r1, [r7, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f000 fcda 	bl	8002590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	@ (8001c4c <HAL_TIM_PWM_Start+0x88>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d00e      	beq.n	8001c04 <HAL_TIM_PWM_Start+0x40>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a19      	ldr	r2, [pc, #100]	@ (8001c50 <HAL_TIM_PWM_Start+0x8c>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d009      	beq.n	8001c04 <HAL_TIM_PWM_Start+0x40>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <HAL_TIM_PWM_Start+0x90>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d004      	beq.n	8001c04 <HAL_TIM_PWM_Start+0x40>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a16      	ldr	r2, [pc, #88]	@ (8001c58 <HAL_TIM_PWM_Start+0x94>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d101      	bne.n	8001c08 <HAL_TIM_PWM_Start+0x44>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <HAL_TIM_PWM_Start+0x46>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d008      	beq.n	8001c20 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2180      	movs	r1, #128	@ 0x80
 8001c1a:	0209      	lsls	r1, r1, #8
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2207      	movs	r2, #7
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2b06      	cmp	r3, #6
 8001c30:	d007      	beq.n	8001c42 <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	0018      	movs	r0, r3
 8001c46:	46bd      	mov	sp, r7
 8001c48:	b004      	add	sp, #16
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	40014000 	.word	0x40014000
 8001c54:	40014400 	.word	0x40014400
 8001c58:	40014800 	.word	0x40014800

08001c5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	223c      	movs	r2, #60	@ 0x3c
 8001c6c:	5c9b      	ldrb	r3, [r3, r2]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e0af      	b.n	8001dd6 <HAL_TIM_PWM_ConfigChannel+0x17a>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	223c      	movs	r2, #60	@ 0x3c
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	223d      	movs	r2, #61	@ 0x3d
 8001c82:	2102      	movs	r1, #2
 8001c84:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b0c      	cmp	r3, #12
 8001c8a:	d100      	bne.n	8001c8e <HAL_TIM_PWM_ConfigChannel+0x32>
 8001c8c:	e076      	b.n	8001d7c <HAL_TIM_PWM_ConfigChannel+0x120>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b0c      	cmp	r3, #12
 8001c92:	d900      	bls.n	8001c96 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8001c94:	e095      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d04e      	beq.n	8001d3a <HAL_TIM_PWM_ConfigChannel+0xde>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d900      	bls.n	8001ca4 <HAL_TIM_PWM_ConfigChannel+0x48>
 8001ca2:	e08e      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_TIM_PWM_ConfigChannel+0x56>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b04      	cmp	r3, #4
 8001cae:	d021      	beq.n	8001cf4 <HAL_TIM_PWM_ConfigChannel+0x98>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8001cb0:	e087      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x166>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68ba      	ldr	r2, [r7, #8]
 8001cb8:	0011      	movs	r1, r2
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f000 f9d2 	bl	8002064 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	699a      	ldr	r2, [r3, #24]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2108      	movs	r1, #8
 8001ccc:	430a      	orrs	r2, r1
 8001cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	699a      	ldr	r2, [r3, #24]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2104      	movs	r1, #4
 8001cdc:	438a      	bics	r2, r1
 8001cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6999      	ldr	r1, [r3, #24]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	691a      	ldr	r2, [r3, #16]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	619a      	str	r2, [r3, #24]
      break;
 8001cf2:	e067      	b.n	8001dc4 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68ba      	ldr	r2, [r7, #8]
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f000 fa39 	bl	8002174 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2180      	movs	r1, #128	@ 0x80
 8001d0e:	0109      	lsls	r1, r1, #4
 8001d10:	430a      	orrs	r2, r1
 8001d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4930      	ldr	r1, [pc, #192]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x184>)
 8001d20:	400a      	ands	r2, r1
 8001d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6999      	ldr	r1, [r3, #24]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	021a      	lsls	r2, r3, #8
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	619a      	str	r2, [r3, #24]
      break;
 8001d38:	e044      	b.n	8001dc4 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	0011      	movs	r1, r2
 8001d42:	0018      	movs	r0, r3
 8001d44:	f000 fa9a 	bl	800227c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	69da      	ldr	r2, [r3, #28]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2108      	movs	r1, #8
 8001d54:	430a      	orrs	r2, r1
 8001d56:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69da      	ldr	r2, [r3, #28]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2104      	movs	r1, #4
 8001d64:	438a      	bics	r2, r1
 8001d66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	69d9      	ldr	r1, [r3, #28]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	61da      	str	r2, [r3, #28]
      break;
 8001d7a:	e023      	b.n	8001dc4 <HAL_TIM_PWM_ConfigChannel+0x168>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	0011      	movs	r1, r2
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 faff 	bl	8002388 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2180      	movs	r1, #128	@ 0x80
 8001d96:	0109      	lsls	r1, r1, #4
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	69da      	ldr	r2, [r3, #28]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	490e      	ldr	r1, [pc, #56]	@ (8001de0 <HAL_TIM_PWM_ConfigChannel+0x184>)
 8001da8:	400a      	ands	r2, r1
 8001daa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	69d9      	ldr	r1, [r3, #28]
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	021a      	lsls	r2, r3, #8
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	61da      	str	r2, [r3, #28]
      break;
 8001dc0:	e000      	b.n	8001dc4 <HAL_TIM_PWM_ConfigChannel+0x168>
      break;
 8001dc2:	46c0      	nop			@ (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	223d      	movs	r2, #61	@ 0x3d
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	223c      	movs	r2, #60	@ 0x3c
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			@ (mov r8, r8)
 8001de0:	fffffbff 	.word	0xfffffbff

08001de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223c      	movs	r2, #60	@ 0x3c
 8001df2:	5c9b      	ldrb	r3, [r3, r2]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d101      	bne.n	8001dfc <HAL_TIM_ConfigClockSource+0x18>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e0b7      	b.n	8001f6c <HAL_TIM_ConfigClockSource+0x188>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	223c      	movs	r2, #60	@ 0x3c
 8001e00:	2101      	movs	r1, #1
 8001e02:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	223d      	movs	r2, #61	@ 0x3d
 8001e08:	2102      	movs	r1, #2
 8001e0a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2277      	movs	r2, #119	@ 0x77
 8001e18:	4393      	bics	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4a55      	ldr	r2, [pc, #340]	@ (8001f74 <HAL_TIM_ConfigClockSource+0x190>)
 8001e20:	4013      	ands	r3, r2
 8001e22:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68fa      	ldr	r2, [r7, #12]
 8001e2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2280      	movs	r2, #128	@ 0x80
 8001e32:	0192      	lsls	r2, r2, #6
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d040      	beq.n	8001eba <HAL_TIM_ConfigClockSource+0xd6>
 8001e38:	2280      	movs	r2, #128	@ 0x80
 8001e3a:	0192      	lsls	r2, r2, #6
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d900      	bls.n	8001e42 <HAL_TIM_ConfigClockSource+0x5e>
 8001e40:	e088      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e42:	2280      	movs	r2, #128	@ 0x80
 8001e44:	0152      	lsls	r2, r2, #5
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d100      	bne.n	8001e4c <HAL_TIM_ConfigClockSource+0x68>
 8001e4a:	e085      	b.n	8001f58 <HAL_TIM_ConfigClockSource+0x174>
 8001e4c:	2280      	movs	r2, #128	@ 0x80
 8001e4e:	0152      	lsls	r2, r2, #5
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d900      	bls.n	8001e56 <HAL_TIM_ConfigClockSource+0x72>
 8001e54:	e07e      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e56:	2b70      	cmp	r3, #112	@ 0x70
 8001e58:	d018      	beq.n	8001e8c <HAL_TIM_ConfigClockSource+0xa8>
 8001e5a:	d900      	bls.n	8001e5e <HAL_TIM_ConfigClockSource+0x7a>
 8001e5c:	e07a      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e5e:	2b60      	cmp	r3, #96	@ 0x60
 8001e60:	d04f      	beq.n	8001f02 <HAL_TIM_ConfigClockSource+0x11e>
 8001e62:	d900      	bls.n	8001e66 <HAL_TIM_ConfigClockSource+0x82>
 8001e64:	e076      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e66:	2b50      	cmp	r3, #80	@ 0x50
 8001e68:	d03b      	beq.n	8001ee2 <HAL_TIM_ConfigClockSource+0xfe>
 8001e6a:	d900      	bls.n	8001e6e <HAL_TIM_ConfigClockSource+0x8a>
 8001e6c:	e072      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e6e:	2b40      	cmp	r3, #64	@ 0x40
 8001e70:	d057      	beq.n	8001f22 <HAL_TIM_ConfigClockSource+0x13e>
 8001e72:	d900      	bls.n	8001e76 <HAL_TIM_ConfigClockSource+0x92>
 8001e74:	e06e      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e76:	2b30      	cmp	r3, #48	@ 0x30
 8001e78:	d063      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0x15e>
 8001e7a:	d86b      	bhi.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e7c:	2b20      	cmp	r3, #32
 8001e7e:	d060      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0x15e>
 8001e80:	d868      	bhi.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d05d      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0x15e>
 8001e86:	2b10      	cmp	r3, #16
 8001e88:	d05b      	beq.n	8001f42 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001e8a:	e063      	b.n	8001f54 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6818      	ldr	r0, [r3, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f000 fb58 	bl	8002550 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2277      	movs	r2, #119	@ 0x77
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	609a      	str	r2, [r3, #8]
      break;
 8001eb8:	e04f      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6818      	ldr	r0, [r3, #0]
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	6899      	ldr	r1, [r3, #8]
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f000 fb41 	bl	8002550 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	01c9      	lsls	r1, r1, #7
 8001edc:	430a      	orrs	r2, r1
 8001ede:	609a      	str	r2, [r3, #8]
      break;
 8001ee0:	e03b      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	6859      	ldr	r1, [r3, #4]
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	001a      	movs	r2, r3
 8001ef0:	f000 fab4 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2150      	movs	r1, #80	@ 0x50
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 fb0e 	bl	800251c <TIM_ITRx_SetConfig>
      break;
 8001f00:	e02b      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6818      	ldr	r0, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	6859      	ldr	r1, [r3, #4]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	001a      	movs	r2, r3
 8001f10:	f000 fad2 	bl	80024b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2160      	movs	r1, #96	@ 0x60
 8001f1a:	0018      	movs	r0, r3
 8001f1c:	f000 fafe 	bl	800251c <TIM_ITRx_SetConfig>
      break;
 8001f20:	e01b      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	6859      	ldr	r1, [r3, #4]
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	001a      	movs	r2, r3
 8001f30:	f000 fa94 	bl	800245c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2140      	movs	r1, #64	@ 0x40
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 faee 	bl	800251c <TIM_ITRx_SetConfig>
      break;
 8001f40:	e00b      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x176>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0019      	movs	r1, r3
 8001f4c:	0010      	movs	r0, r2
 8001f4e:	f000 fae5 	bl	800251c <TIM_ITRx_SetConfig>
      break;
 8001f52:	e002      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f54:	46c0      	nop			@ (mov r8, r8)
 8001f56:	e000      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x176>
      break;
 8001f58:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	223d      	movs	r2, #61	@ 0x3d
 8001f5e:	2101      	movs	r1, #1
 8001f60:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	223c      	movs	r2, #60	@ 0x3c
 8001f66:	2100      	movs	r1, #0
 8001f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	ffff00ff 	.word	0xffff00ff

08001f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	@ (8002048 <TIM_Base_SetConfig+0xd0>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d003      	beq.n	8001f98 <TIM_Base_SetConfig+0x20>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a2e      	ldr	r2, [pc, #184]	@ (800204c <TIM_Base_SetConfig+0xd4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d108      	bne.n	8001faa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2270      	movs	r2, #112	@ 0x70
 8001f9c:	4393      	bics	r3, r2
 8001f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a26      	ldr	r2, [pc, #152]	@ (8002048 <TIM_Base_SetConfig+0xd0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <TIM_Base_SetConfig+0x62>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a25      	ldr	r2, [pc, #148]	@ (800204c <TIM_Base_SetConfig+0xd4>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0x62>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a24      	ldr	r2, [pc, #144]	@ (8002050 <TIM_Base_SetConfig+0xd8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0x62>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a23      	ldr	r2, [pc, #140]	@ (8002054 <TIM_Base_SetConfig+0xdc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0x62>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a22      	ldr	r2, [pc, #136]	@ (8002058 <TIM_Base_SetConfig+0xe0>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0x62>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a21      	ldr	r2, [pc, #132]	@ (800205c <TIM_Base_SetConfig+0xe4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d108      	bne.n	8001fec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a20      	ldr	r2, [pc, #128]	@ (8002060 <TIM_Base_SetConfig+0xe8>)
 8001fde:	4013      	ands	r3, r2
 8001fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	4393      	bics	r3, r2
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	695b      	ldr	r3, [r3, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	689a      	ldr	r2, [r3, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a0c      	ldr	r2, [pc, #48]	@ (8002048 <TIM_Base_SetConfig+0xd0>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d00b      	beq.n	8002032 <TIM_Base_SetConfig+0xba>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <TIM_Base_SetConfig+0xdc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d007      	beq.n	8002032 <TIM_Base_SetConfig+0xba>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a0c      	ldr	r2, [pc, #48]	@ (8002058 <TIM_Base_SetConfig+0xe0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d003      	beq.n	8002032 <TIM_Base_SetConfig+0xba>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a0b      	ldr	r2, [pc, #44]	@ (800205c <TIM_Base_SetConfig+0xe4>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d103      	bne.n	800203a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	691a      	ldr	r2, [r3, #16]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	615a      	str	r2, [r3, #20]
}
 8002040:	46c0      	nop			@ (mov r8, r8)
 8002042:	46bd      	mov	sp, r7
 8002044:	b004      	add	sp, #16
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40012c00 	.word	0x40012c00
 800204c:	40000400 	.word	0x40000400
 8002050:	40002000 	.word	0x40002000
 8002054:	40014000 	.word	0x40014000
 8002058:	40014400 	.word	0x40014400
 800205c:	40014800 	.word	0x40014800
 8002060:	fffffcff 	.word	0xfffffcff

08002064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	2201      	movs	r2, #1
 8002074:	4393      	bics	r3, r2
 8002076:	001a      	movs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2270      	movs	r2, #112	@ 0x70
 8002092:	4393      	bics	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2203      	movs	r2, #3
 800209a:	4393      	bics	r3, r2
 800209c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	2202      	movs	r2, #2
 80020ac:	4393      	bics	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a27      	ldr	r2, [pc, #156]	@ (800215c <TIM_OC1_SetConfig+0xf8>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d00b      	beq.n	80020da <TIM_OC1_SetConfig+0x76>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a26      	ldr	r2, [pc, #152]	@ (8002160 <TIM_OC1_SetConfig+0xfc>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d007      	beq.n	80020da <TIM_OC1_SetConfig+0x76>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a25      	ldr	r2, [pc, #148]	@ (8002164 <TIM_OC1_SetConfig+0x100>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d003      	beq.n	80020da <TIM_OC1_SetConfig+0x76>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a24      	ldr	r2, [pc, #144]	@ (8002168 <TIM_OC1_SetConfig+0x104>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10c      	bne.n	80020f4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2208      	movs	r2, #8
 80020de:	4393      	bics	r3, r2
 80020e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	2204      	movs	r2, #4
 80020f0:	4393      	bics	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a19      	ldr	r2, [pc, #100]	@ (800215c <TIM_OC1_SetConfig+0xf8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d00b      	beq.n	8002114 <TIM_OC1_SetConfig+0xb0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a18      	ldr	r2, [pc, #96]	@ (8002160 <TIM_OC1_SetConfig+0xfc>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d007      	beq.n	8002114 <TIM_OC1_SetConfig+0xb0>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a17      	ldr	r2, [pc, #92]	@ (8002164 <TIM_OC1_SetConfig+0x100>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d003      	beq.n	8002114 <TIM_OC1_SetConfig+0xb0>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a16      	ldr	r2, [pc, #88]	@ (8002168 <TIM_OC1_SetConfig+0x104>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d111      	bne.n	8002138 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4a15      	ldr	r2, [pc, #84]	@ (800216c <TIM_OC1_SetConfig+0x108>)
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4a14      	ldr	r2, [pc, #80]	@ (8002170 <TIM_OC1_SetConfig+0x10c>)
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	695b      	ldr	r3, [r3, #20]
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4313      	orrs	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	699b      	ldr	r3, [r3, #24]
 8002132:	693a      	ldr	r2, [r7, #16]
 8002134:	4313      	orrs	r3, r2
 8002136:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	621a      	str	r2, [r3, #32]
}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	46bd      	mov	sp, r7
 8002156:	b006      	add	sp, #24
 8002158:	bd80      	pop	{r7, pc}
 800215a:	46c0      	nop			@ (mov r8, r8)
 800215c:	40012c00 	.word	0x40012c00
 8002160:	40014000 	.word	0x40014000
 8002164:	40014400 	.word	0x40014400
 8002168:	40014800 	.word	0x40014800
 800216c:	fffffeff 	.word	0xfffffeff
 8002170:	fffffdff 	.word	0xfffffdff

08002174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	2210      	movs	r2, #16
 8002184:	4393      	bics	r3, r2
 8002186:	001a      	movs	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	699b      	ldr	r3, [r3, #24]
 800219c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4a2e      	ldr	r2, [pc, #184]	@ (800225c <TIM_OC2_SetConfig+0xe8>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002260 <TIM_OC2_SetConfig+0xec>)
 80021aa:	4013      	ands	r3, r2
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	021b      	lsls	r3, r3, #8
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2220      	movs	r2, #32
 80021be:	4393      	bics	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a24      	ldr	r2, [pc, #144]	@ (8002264 <TIM_OC2_SetConfig+0xf0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d10d      	bne.n	80021f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2280      	movs	r2, #128	@ 0x80
 80021da:	4393      	bics	r3, r2
 80021dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	697a      	ldr	r2, [r7, #20]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2240      	movs	r2, #64	@ 0x40
 80021ee:	4393      	bics	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a1b      	ldr	r2, [pc, #108]	@ (8002264 <TIM_OC2_SetConfig+0xf0>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d00b      	beq.n	8002212 <TIM_OC2_SetConfig+0x9e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a1a      	ldr	r2, [pc, #104]	@ (8002268 <TIM_OC2_SetConfig+0xf4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d007      	beq.n	8002212 <TIM_OC2_SetConfig+0x9e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a19      	ldr	r2, [pc, #100]	@ (800226c <TIM_OC2_SetConfig+0xf8>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d003      	beq.n	8002212 <TIM_OC2_SetConfig+0x9e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a18      	ldr	r2, [pc, #96]	@ (8002270 <TIM_OC2_SetConfig+0xfc>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d113      	bne.n	800223a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4a17      	ldr	r2, [pc, #92]	@ (8002274 <TIM_OC2_SetConfig+0x100>)
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4a16      	ldr	r2, [pc, #88]	@ (8002278 <TIM_OC2_SetConfig+0x104>)
 800221e:	4013      	ands	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	621a      	str	r2, [r3, #32]
}
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b006      	add	sp, #24
 800225a:	bd80      	pop	{r7, pc}
 800225c:	ffff8fff 	.word	0xffff8fff
 8002260:	fffffcff 	.word	0xfffffcff
 8002264:	40012c00 	.word	0x40012c00
 8002268:	40014000 	.word	0x40014000
 800226c:	40014400 	.word	0x40014400
 8002270:	40014800 	.word	0x40014800
 8002274:	fffffbff 	.word	0xfffffbff
 8002278:	fffff7ff 	.word	0xfffff7ff

0800227c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a35      	ldr	r2, [pc, #212]	@ (8002360 <TIM_OC3_SetConfig+0xe4>)
 800228c:	401a      	ands	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2270      	movs	r2, #112	@ 0x70
 80022a8:	4393      	bics	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2203      	movs	r2, #3
 80022b0:	4393      	bics	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4a28      	ldr	r2, [pc, #160]	@ (8002364 <TIM_OC3_SetConfig+0xe8>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	697a      	ldr	r2, [r7, #20]
 80022ce:	4313      	orrs	r3, r2
 80022d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a24      	ldr	r2, [pc, #144]	@ (8002368 <TIM_OC3_SetConfig+0xec>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10d      	bne.n	80022f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <TIM_OC3_SetConfig+0xf0>)
 80022de:	4013      	ands	r3, r2
 80022e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	021b      	lsls	r3, r3, #8
 80022e8:	697a      	ldr	r2, [r7, #20]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	@ (8002370 <TIM_OC3_SetConfig+0xf4>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002368 <TIM_OC3_SetConfig+0xec>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00b      	beq.n	8002316 <TIM_OC3_SetConfig+0x9a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a1c      	ldr	r2, [pc, #112]	@ (8002374 <TIM_OC3_SetConfig+0xf8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <TIM_OC3_SetConfig+0x9a>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a1b      	ldr	r2, [pc, #108]	@ (8002378 <TIM_OC3_SetConfig+0xfc>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d003      	beq.n	8002316 <TIM_OC3_SetConfig+0x9a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a1a      	ldr	r2, [pc, #104]	@ (800237c <TIM_OC3_SetConfig+0x100>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d113      	bne.n	800233e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	4a19      	ldr	r2, [pc, #100]	@ (8002380 <TIM_OC3_SetConfig+0x104>)
 800231a:	4013      	ands	r3, r2
 800231c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	4a18      	ldr	r2, [pc, #96]	@ (8002384 <TIM_OC3_SetConfig+0x108>)
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	693a      	ldr	r2, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	693a      	ldr	r2, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68fa      	ldr	r2, [r7, #12]
 8002348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	621a      	str	r2, [r3, #32]
}
 8002358:	46c0      	nop			@ (mov r8, r8)
 800235a:	46bd      	mov	sp, r7
 800235c:	b006      	add	sp, #24
 800235e:	bd80      	pop	{r7, pc}
 8002360:	fffffeff 	.word	0xfffffeff
 8002364:	fffffdff 	.word	0xfffffdff
 8002368:	40012c00 	.word	0x40012c00
 800236c:	fffff7ff 	.word	0xfffff7ff
 8002370:	fffffbff 	.word	0xfffffbff
 8002374:	40014000 	.word	0x40014000
 8002378:	40014400 	.word	0x40014400
 800237c:	40014800 	.word	0x40014800
 8002380:	ffffefff 	.word	0xffffefff
 8002384:	ffffdfff 	.word	0xffffdfff

08002388 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	4a28      	ldr	r2, [pc, #160]	@ (8002438 <TIM_OC4_SetConfig+0xb0>)
 8002398:	401a      	ands	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4a22      	ldr	r2, [pc, #136]	@ (800243c <TIM_OC4_SetConfig+0xb4>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4a21      	ldr	r2, [pc, #132]	@ (8002440 <TIM_OC4_SetConfig+0xb8>)
 80023bc:	4013      	ands	r3, r2
 80023be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	68fa      	ldr	r2, [r7, #12]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002444 <TIM_OC4_SetConfig+0xbc>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	031b      	lsls	r3, r3, #12
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a19      	ldr	r2, [pc, #100]	@ (8002448 <TIM_OC4_SetConfig+0xc0>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d00b      	beq.n	8002400 <TIM_OC4_SetConfig+0x78>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a18      	ldr	r2, [pc, #96]	@ (800244c <TIM_OC4_SetConfig+0xc4>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d007      	beq.n	8002400 <TIM_OC4_SetConfig+0x78>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a17      	ldr	r2, [pc, #92]	@ (8002450 <TIM_OC4_SetConfig+0xc8>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d003      	beq.n	8002400 <TIM_OC4_SetConfig+0x78>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a16      	ldr	r2, [pc, #88]	@ (8002454 <TIM_OC4_SetConfig+0xcc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d109      	bne.n	8002414 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	4a15      	ldr	r2, [pc, #84]	@ (8002458 <TIM_OC4_SetConfig+0xd0>)
 8002404:	4013      	ands	r3, r2
 8002406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	019b      	lsls	r3, r3, #6
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4313      	orrs	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685a      	ldr	r2, [r3, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	621a      	str	r2, [r3, #32]
}
 800242e:	46c0      	nop			@ (mov r8, r8)
 8002430:	46bd      	mov	sp, r7
 8002432:	b006      	add	sp, #24
 8002434:	bd80      	pop	{r7, pc}
 8002436:	46c0      	nop			@ (mov r8, r8)
 8002438:	ffffefff 	.word	0xffffefff
 800243c:	ffff8fff 	.word	0xffff8fff
 8002440:	fffffcff 	.word	0xfffffcff
 8002444:	ffffdfff 	.word	0xffffdfff
 8002448:	40012c00 	.word	0x40012c00
 800244c:	40014000 	.word	0x40014000
 8002450:	40014400 	.word	0x40014400
 8002454:	40014800 	.word	0x40014800
 8002458:	ffffbfff 	.word	0xffffbfff

0800245c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	60f8      	str	r0, [r7, #12]
 8002464:	60b9      	str	r1, [r7, #8]
 8002466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	2201      	movs	r2, #1
 8002474:	4393      	bics	r3, r2
 8002476:	001a      	movs	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	22f0      	movs	r2, #240	@ 0xf0
 8002486:	4393      	bics	r3, r2
 8002488:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	220a      	movs	r2, #10
 8002498:	4393      	bics	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	621a      	str	r2, [r3, #32]
}
 80024b0:	46c0      	nop			@ (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b006      	add	sp, #24
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	2210      	movs	r2, #16
 80024ca:	4393      	bics	r3, r2
 80024cc:	001a      	movs	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002518 <TIM_TI2_ConfigInputStage+0x60>)
 80024e2:	4013      	ands	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	031b      	lsls	r3, r3, #12
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	22a0      	movs	r2, #160	@ 0xa0
 80024f4:	4393      	bics	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	621a      	str	r2, [r3, #32]
}
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b006      	add	sp, #24
 8002514:	bd80      	pop	{r7, pc}
 8002516:	46c0      	nop			@ (mov r8, r8)
 8002518:	ffff0fff 	.word	0xffff0fff

0800251c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2270      	movs	r2, #112	@ 0x70
 8002530:	4393      	bics	r3, r2
 8002532:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4313      	orrs	r3, r2
 800253a:	2207      	movs	r2, #7
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	609a      	str	r2, [r3, #8]
}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	46bd      	mov	sp, r7
 800254a:	b004      	add	sp, #16
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	4a09      	ldr	r2, [pc, #36]	@ (800258c <TIM_ETR_SetConfig+0x3c>)
 8002568:	4013      	ands	r3, r2
 800256a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	021a      	lsls	r2, r3, #8
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	431a      	orrs	r2, r3
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	4313      	orrs	r3, r2
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	609a      	str	r2, [r3, #8]
}
 8002584:	46c0      	nop			@ (mov r8, r8)
 8002586:	46bd      	mov	sp, r7
 8002588:	b006      	add	sp, #24
 800258a:	bd80      	pop	{r7, pc}
 800258c:	ffff00ff 	.word	0xffff00ff

08002590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	221f      	movs	r2, #31
 80025a0:	4013      	ands	r3, r2
 80025a2:	2201      	movs	r2, #1
 80025a4:	409a      	lsls	r2, r3
 80025a6:	0013      	movs	r3, r2
 80025a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	43d2      	mvns	r2, r2
 80025b2:	401a      	ands	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a1a      	ldr	r2, [r3, #32]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	211f      	movs	r1, #31
 80025c0:	400b      	ands	r3, r1
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4099      	lsls	r1, r3
 80025c6:	000b      	movs	r3, r1
 80025c8:	431a      	orrs	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	621a      	str	r2, [r3, #32]
}
 80025ce:	46c0      	nop			@ (mov r8, r8)
 80025d0:	46bd      	mov	sp, r7
 80025d2:	b006      	add	sp, #24
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	223c      	movs	r2, #60	@ 0x3c
 80025e6:	5c9b      	ldrb	r3, [r3, r2]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d101      	bne.n	80025f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025ec:	2302      	movs	r3, #2
 80025ee:	e041      	b.n	8002674 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	223c      	movs	r2, #60	@ 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	223d      	movs	r2, #61	@ 0x3d
 80025fc:	2102      	movs	r1, #2
 80025fe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2270      	movs	r2, #112	@ 0x70
 8002614:	4393      	bics	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	4313      	orrs	r3, r2
 8002620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a13      	ldr	r2, [pc, #76]	@ (800267c <HAL_TIMEx_MasterConfigSynchronization+0xa4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d009      	beq.n	8002648 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a11      	ldr	r2, [pc, #68]	@ (8002680 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d004      	beq.n	8002648 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d10c      	bne.n	8002662 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	2280      	movs	r2, #128	@ 0x80
 800264c:	4393      	bics	r3, r2
 800264e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	68ba      	ldr	r2, [r7, #8]
 8002656:	4313      	orrs	r3, r2
 8002658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	223d      	movs	r2, #61	@ 0x3d
 8002666:	2101      	movs	r1, #1
 8002668:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	223c      	movs	r2, #60	@ 0x3c
 800266e:	2100      	movs	r1, #0
 8002670:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	0018      	movs	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40012c00 	.word	0x40012c00
 8002680:	40000400 	.word	0x40000400
 8002684:	40014000 	.word	0x40014000

08002688 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	223c      	movs	r2, #60	@ 0x3c
 800269a:	5c9b      	ldrb	r3, [r3, r2]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d101      	bne.n	80026a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026a0:	2302      	movs	r3, #2
 80026a2:	e03e      	b.n	8002722 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	223c      	movs	r2, #60	@ 0x3c
 80026a8:	2101      	movs	r1, #1
 80026aa:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	22ff      	movs	r2, #255	@ 0xff
 80026b0:	4393      	bics	r3, r2
 80026b2:	001a      	movs	r2, r3
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80026c0:	401a      	ands	r2, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	4a18      	ldr	r2, [pc, #96]	@ (8002730 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 80026ce:	401a      	ands	r2, r3
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a16      	ldr	r2, [pc, #88]	@ (8002734 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 80026dc:	401a      	ands	r2, r3
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	4a13      	ldr	r2, [pc, #76]	@ (8002738 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 80026ea:	401a      	ands	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	4a11      	ldr	r2, [pc, #68]	@ (800273c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 80026f8:	401a      	ands	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	695b      	ldr	r3, [r3, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	4a0e      	ldr	r2, [pc, #56]	@ (8002740 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002706:	401a      	ands	r2, r3
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	4313      	orrs	r3, r2
 800270e:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	223c      	movs	r2, #60	@ 0x3c
 800271c:	2100      	movs	r1, #0
 800271e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			@ (mov r8, r8)
 800272c:	fffffcff 	.word	0xfffffcff
 8002730:	fffffbff 	.word	0xfffffbff
 8002734:	fffff7ff 	.word	0xfffff7ff
 8002738:	ffffefff 	.word	0xffffefff
 800273c:	ffffdfff 	.word	0xffffdfff
 8002740:	ffffbfff 	.word	0xffffbfff

08002744 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e044      	b.n	80027e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2270      	movs	r2, #112	@ 0x70
 8002762:	2100      	movs	r1, #0
 8002764:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	0018      	movs	r0, r3
 800276a:	f7fe f88b 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2224      	movs	r2, #36	@ 0x24
 8002772:	675a      	str	r2, [r3, #116]	@ 0x74

  __HAL_UART_DISABLE(huart);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2101      	movs	r1, #1
 8002780:	438a      	bics	r2, r1
 8002782:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0018      	movs	r0, r3
 8002788:	f000 f8d8 	bl	800293c <UART_SetConfig>
 800278c:	0003      	movs	r3, r0
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e024      	b.n	80027e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	0018      	movs	r0, r3
 80027a2:	f000 fa53 	bl	8002c4c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	490d      	ldr	r1, [pc, #52]	@ (80027e8 <HAL_UART_Init+0xa4>)
 80027b2:	400a      	ands	r2, r1
 80027b4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2108      	movs	r1, #8
 80027c2:	438a      	bics	r2, r1
 80027c4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2101      	movs	r1, #1
 80027d2:	430a      	orrs	r2, r1
 80027d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0018      	movs	r0, r3
 80027da:	f000 faeb 	bl	8002db4 <UART_CheckIdleState>
 80027de:	0003      	movs	r3, r0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	fffff7ff 	.word	0xfffff7ff

080027ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08a      	sub	sp, #40	@ 0x28
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	60b9      	str	r1, [r7, #8]
 80027f6:	603b      	str	r3, [r7, #0]
 80027f8:	1dbb      	adds	r3, r7, #6
 80027fa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002800:	2b20      	cmp	r3, #32
 8002802:	d000      	beq.n	8002806 <HAL_UART_Transmit+0x1a>
 8002804:	e094      	b.n	8002930 <HAL_UART_Transmit+0x144>
  {
    if ((pData == NULL) || (Size == 0U))
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d003      	beq.n	8002814 <HAL_UART_Transmit+0x28>
 800280c:	1dbb      	adds	r3, r7, #6
 800280e:	881b      	ldrh	r3, [r3, #0]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e08c      	b.n	8002932 <HAL_UART_Transmit+0x146>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	689a      	ldr	r2, [r3, #8]
 800281c:	2380      	movs	r3, #128	@ 0x80
 800281e:	015b      	lsls	r3, r3, #5
 8002820:	429a      	cmp	r2, r3
 8002822:	d109      	bne.n	8002838 <HAL_UART_Transmit+0x4c>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d105      	bne.n	8002838 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	2201      	movs	r2, #1
 8002830:	4013      	ands	r3, r2
 8002832:	d001      	beq.n	8002838 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e07c      	b.n	8002932 <HAL_UART_Transmit+0x146>
      }
    }

    __HAL_LOCK(huart);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2270      	movs	r2, #112	@ 0x70
 800283c:	5c9b      	ldrb	r3, [r3, r2]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_UART_Transmit+0x5a>
 8002842:	2302      	movs	r3, #2
 8002844:	e075      	b.n	8002932 <HAL_UART_Transmit+0x146>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2270      	movs	r2, #112	@ 0x70
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	67da      	str	r2, [r3, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2221      	movs	r2, #33	@ 0x21
 8002858:	675a      	str	r2, [r3, #116]	@ 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800285a:	f7fe f94f 	bl	8000afc <HAL_GetTick>
 800285e:	0003      	movs	r3, r0
 8002860:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1dba      	adds	r2, r7, #6
 8002866:	2150      	movs	r1, #80	@ 0x50
 8002868:	8812      	ldrh	r2, [r2, #0]
 800286a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1dba      	adds	r2, r7, #6
 8002870:	2152      	movs	r1, #82	@ 0x52
 8002872:	8812      	ldrh	r2, [r2, #0]
 8002874:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	2380      	movs	r3, #128	@ 0x80
 800287c:	015b      	lsls	r3, r3, #5
 800287e:	429a      	cmp	r2, r3
 8002880:	d108      	bne.n	8002894 <HAL_UART_Transmit+0xa8>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d104      	bne.n	8002894 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	e003      	b.n	800289c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800289c:	e02c      	b.n	80028f8 <HAL_UART_Transmit+0x10c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	0013      	movs	r3, r2
 80028a8:	2200      	movs	r2, #0
 80028aa:	2180      	movs	r1, #128	@ 0x80
 80028ac:	f000 fac6 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 80028b0:	1e03      	subs	r3, r0, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e03c      	b.n	8002932 <HAL_UART_Transmit+0x146>
      }
      if (pdata8bits == NULL)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d10b      	bne.n	80028d6 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	881a      	ldrh	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	05d2      	lsls	r2, r2, #23
 80028c8:	0dd2      	lsrs	r2, r2, #23
 80028ca:	b292      	uxth	r2, r2
 80028cc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	3302      	adds	r3, #2
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	e007      	b.n	80028e6 <HAL_UART_Transmit+0xfa>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	3301      	adds	r3, #1
 80028e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2252      	movs	r2, #82	@ 0x52
 80028ea:	5a9b      	ldrh	r3, [r3, r2]
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	3b01      	subs	r3, #1
 80028f0:	b299      	uxth	r1, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2252      	movs	r2, #82	@ 0x52
 80028f6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2252      	movs	r2, #82	@ 0x52
 80028fc:	5a9b      	ldrh	r3, [r3, r2]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1cc      	bne.n	800289e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	0013      	movs	r3, r2
 800290e:	2200      	movs	r2, #0
 8002910:	2140      	movs	r1, #64	@ 0x40
 8002912:	f000 fa93 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 8002916:	1e03      	subs	r3, r0, #0
 8002918:	d001      	beq.n	800291e <HAL_UART_Transmit+0x132>
    {
      return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e009      	b.n	8002932 <HAL_UART_Transmit+0x146>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2220      	movs	r2, #32
 8002922:	675a      	str	r2, [r3, #116]	@ 0x74

    __HAL_UNLOCK(huart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2270      	movs	r2, #112	@ 0x70
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	e000      	b.n	8002932 <HAL_UART_Transmit+0x146>
  }
  else
  {
    return HAL_BUSY;
 8002930:	2302      	movs	r3, #2
  }
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b008      	add	sp, #32
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b088      	sub	sp, #32
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002944:	2300      	movs	r3, #0
 8002946:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002948:	2317      	movs	r3, #23
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	2200      	movs	r2, #0
 800294e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	4313      	orrs	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4aaf      	ldr	r2, [pc, #700]	@ (8002c2c <UART_SetConfig+0x2f0>)
 8002970:	4013      	ands	r3, r2
 8002972:	0019      	movs	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	430a      	orrs	r2, r1
 800297c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	4aaa      	ldr	r2, [pc, #680]	@ (8002c30 <UART_SetConfig+0x2f4>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	693a      	ldr	r2, [r7, #16]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	4aa1      	ldr	r2, [pc, #644]	@ (8002c34 <UART_SetConfig+0x2f8>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	0019      	movs	r1, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a9d      	ldr	r2, [pc, #628]	@ (8002c38 <UART_SetConfig+0x2fc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d127      	bne.n	8002a16 <UART_SetConfig+0xda>
 80029c6:	4b9d      	ldr	r3, [pc, #628]	@ (8002c3c <UART_SetConfig+0x300>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	2203      	movs	r2, #3
 80029cc:	4013      	ands	r3, r2
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d00d      	beq.n	80029ee <UART_SetConfig+0xb2>
 80029d2:	d81b      	bhi.n	8002a0c <UART_SetConfig+0xd0>
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d014      	beq.n	8002a02 <UART_SetConfig+0xc6>
 80029d8:	d818      	bhi.n	8002a0c <UART_SetConfig+0xd0>
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d002      	beq.n	80029e4 <UART_SetConfig+0xa8>
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d00a      	beq.n	80029f8 <UART_SetConfig+0xbc>
 80029e2:	e013      	b.n	8002a0c <UART_SetConfig+0xd0>
 80029e4:	231f      	movs	r3, #31
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	2200      	movs	r2, #0
 80029ea:	701a      	strb	r2, [r3, #0]
 80029ec:	e021      	b.n	8002a32 <UART_SetConfig+0xf6>
 80029ee:	231f      	movs	r3, #31
 80029f0:	18fb      	adds	r3, r7, r3
 80029f2:	2202      	movs	r2, #2
 80029f4:	701a      	strb	r2, [r3, #0]
 80029f6:	e01c      	b.n	8002a32 <UART_SetConfig+0xf6>
 80029f8:	231f      	movs	r3, #31
 80029fa:	18fb      	adds	r3, r7, r3
 80029fc:	2204      	movs	r2, #4
 80029fe:	701a      	strb	r2, [r3, #0]
 8002a00:	e017      	b.n	8002a32 <UART_SetConfig+0xf6>
 8002a02:	231f      	movs	r3, #31
 8002a04:	18fb      	adds	r3, r7, r3
 8002a06:	2208      	movs	r2, #8
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e012      	b.n	8002a32 <UART_SetConfig+0xf6>
 8002a0c:	231f      	movs	r3, #31
 8002a0e:	18fb      	adds	r3, r7, r3
 8002a10:	2210      	movs	r2, #16
 8002a12:	701a      	strb	r2, [r3, #0]
 8002a14:	e00d      	b.n	8002a32 <UART_SetConfig+0xf6>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a89      	ldr	r2, [pc, #548]	@ (8002c40 <UART_SetConfig+0x304>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d104      	bne.n	8002a2a <UART_SetConfig+0xee>
 8002a20:	231f      	movs	r3, #31
 8002a22:	18fb      	adds	r3, r7, r3
 8002a24:	2200      	movs	r2, #0
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e003      	b.n	8002a32 <UART_SetConfig+0xf6>
 8002a2a:	231f      	movs	r3, #31
 8002a2c:	18fb      	adds	r3, r7, r3
 8002a2e:	2210      	movs	r2, #16
 8002a30:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	2380      	movs	r3, #128	@ 0x80
 8002a38:	021b      	lsls	r3, r3, #8
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d000      	beq.n	8002a40 <UART_SetConfig+0x104>
 8002a3e:	e07e      	b.n	8002b3e <UART_SetConfig+0x202>
  {
    switch (clocksource)
 8002a40:	231f      	movs	r3, #31
 8002a42:	18fb      	adds	r3, r7, r3
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b08      	cmp	r3, #8
 8002a48:	d03f      	beq.n	8002aca <UART_SetConfig+0x18e>
 8002a4a:	dc4e      	bgt.n	8002aea <UART_SetConfig+0x1ae>
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d028      	beq.n	8002aa2 <UART_SetConfig+0x166>
 8002a50:	dc4b      	bgt.n	8002aea <UART_SetConfig+0x1ae>
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d002      	beq.n	8002a5c <UART_SetConfig+0x120>
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d014      	beq.n	8002a84 <UART_SetConfig+0x148>
 8002a5a:	e046      	b.n	8002aea <UART_SetConfig+0x1ae>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a5c:	f7ff f83c 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002a60:	0003      	movs	r3, r0
 8002a62:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	005a      	lsls	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	085b      	lsrs	r3, r3, #1
 8002a6e:	18d2      	adds	r2, r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	0019      	movs	r1, r3
 8002a76:	0010      	movs	r0, r2
 8002a78:	f7fd fb50 	bl	800011c <__udivsi3>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	61bb      	str	r3, [r7, #24]
        break;
 8002a82:	e037      	b.n	8002af4 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	085b      	lsrs	r3, r3, #1
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c44 <UART_SetConfig+0x308>)
 8002a8c:	189a      	adds	r2, r3, r2
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	0019      	movs	r1, r3
 8002a94:	0010      	movs	r0, r2
 8002a96:	f7fd fb41 	bl	800011c <__udivsi3>
 8002a9a:	0003      	movs	r3, r0
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	61bb      	str	r3, [r7, #24]
        break;
 8002aa0:	e028      	b.n	8002af4 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002aa2:	f7fe ffab 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	005a      	lsls	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	18d2      	adds	r2, r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	0019      	movs	r1, r3
 8002abc:	0010      	movs	r0, r2
 8002abe:	f7fd fb2d 	bl	800011c <__udivsi3>
 8002ac2:	0003      	movs	r3, r0
 8002ac4:	b29b      	uxth	r3, r3
 8002ac6:	61bb      	str	r3, [r7, #24]
        break;
 8002ac8:	e014      	b.n	8002af4 <UART_SetConfig+0x1b8>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	2280      	movs	r2, #128	@ 0x80
 8002ad2:	0252      	lsls	r2, r2, #9
 8002ad4:	189a      	adds	r2, r3, r2
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	0019      	movs	r1, r3
 8002adc:	0010      	movs	r0, r2
 8002ade:	f7fd fb1d 	bl	800011c <__udivsi3>
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	61bb      	str	r3, [r7, #24]
        break;
 8002ae8:	e004      	b.n	8002af4 <UART_SetConfig+0x1b8>
      default:
        ret = HAL_ERROR;
 8002aea:	2317      	movs	r3, #23
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	2201      	movs	r2, #1
 8002af0:	701a      	strb	r2, [r3, #0]
        break;
 8002af2:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b0f      	cmp	r3, #15
 8002af8:	d91c      	bls.n	8002b34 <UART_SetConfig+0x1f8>
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	2380      	movs	r3, #128	@ 0x80
 8002afe:	025b      	lsls	r3, r3, #9
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d217      	bcs.n	8002b34 <UART_SetConfig+0x1f8>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	200a      	movs	r0, #10
 8002b0a:	183b      	adds	r3, r7, r0
 8002b0c:	210f      	movs	r1, #15
 8002b0e:	438a      	bics	r2, r1
 8002b10:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2207      	movs	r2, #7
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b299      	uxth	r1, r3
 8002b1e:	183b      	adds	r3, r7, r0
 8002b20:	183a      	adds	r2, r7, r0
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	183a      	adds	r2, r7, r0
 8002b2e:	8812      	ldrh	r2, [r2, #0]
 8002b30:	60da      	str	r2, [r3, #12]
 8002b32:	e06d      	b.n	8002c10 <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 8002b34:	2317      	movs	r3, #23
 8002b36:	18fb      	adds	r3, r7, r3
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	e068      	b.n	8002c10 <UART_SetConfig+0x2d4>
    }
  }
  else
  {
    switch (clocksource)
 8002b3e:	231f      	movs	r3, #31
 8002b40:	18fb      	adds	r3, r7, r3
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d03d      	beq.n	8002bc4 <UART_SetConfig+0x288>
 8002b48:	dc4c      	bgt.n	8002be4 <UART_SetConfig+0x2a8>
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d027      	beq.n	8002b9e <UART_SetConfig+0x262>
 8002b4e:	dc49      	bgt.n	8002be4 <UART_SetConfig+0x2a8>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <UART_SetConfig+0x21e>
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d013      	beq.n	8002b80 <UART_SetConfig+0x244>
 8002b58:	e044      	b.n	8002be4 <UART_SetConfig+0x2a8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b5a:	f7fe ffbd 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	085a      	lsrs	r2, r3, #1
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	18d2      	adds	r2, r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	0019      	movs	r1, r3
 8002b72:	0010      	movs	r0, r2
 8002b74:	f7fd fad2 	bl	800011c <__udivsi3>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	61bb      	str	r3, [r7, #24]
        break;
 8002b7e:	e036      	b.n	8002bee <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	4a30      	ldr	r2, [pc, #192]	@ (8002c48 <UART_SetConfig+0x30c>)
 8002b88:	189a      	adds	r2, r3, r2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	0019      	movs	r1, r3
 8002b90:	0010      	movs	r0, r2
 8002b92:	f7fd fac3 	bl	800011c <__udivsi3>
 8002b96:	0003      	movs	r3, r0
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	61bb      	str	r3, [r7, #24]
        break;
 8002b9c:	e027      	b.n	8002bee <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b9e:	f7fe ff2d 	bl	80019fc <HAL_RCC_GetSysClockFreq>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	085a      	lsrs	r2, r3, #1
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	18d2      	adds	r2, r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	f7fd fab0 	bl	800011c <__udivsi3>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	61bb      	str	r3, [r7, #24]
        break;
 8002bc2:	e014      	b.n	8002bee <UART_SetConfig+0x2b2>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	2280      	movs	r2, #128	@ 0x80
 8002bcc:	0212      	lsls	r2, r2, #8
 8002bce:	189a      	adds	r2, r3, r2
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	0010      	movs	r0, r2
 8002bd8:	f7fd faa0 	bl	800011c <__udivsi3>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	61bb      	str	r3, [r7, #24]
        break;
 8002be2:	e004      	b.n	8002bee <UART_SetConfig+0x2b2>
      default:
        ret = HAL_ERROR;
 8002be4:	2317      	movs	r3, #23
 8002be6:	18fb      	adds	r3, r7, r3
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
        break;
 8002bec:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bee:	69bb      	ldr	r3, [r7, #24]
 8002bf0:	2b0f      	cmp	r3, #15
 8002bf2:	d909      	bls.n	8002c08 <UART_SetConfig+0x2cc>
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	2380      	movs	r3, #128	@ 0x80
 8002bf8:	025b      	lsls	r3, r3, #9
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d204      	bcs.n	8002c08 <UART_SetConfig+0x2cc>
    {
      huart->Instance->BRR = usartdiv;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	e003      	b.n	8002c10 <UART_SetConfig+0x2d4>
    }
    else
    {
      ret = HAL_ERROR;
 8002c08:	2317      	movs	r3, #23
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->TxISR = NULL;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	665a      	str	r2, [r3, #100]	@ 0x64

  return ret;
 8002c1c:	2317      	movs	r3, #23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	781b      	ldrb	r3, [r3, #0]
}
 8002c22:	0018      	movs	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b008      	add	sp, #32
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	ffff69f3 	.word	0xffff69f3
 8002c30:	ffffcfff 	.word	0xffffcfff
 8002c34:	fffff4ff 	.word	0xfffff4ff
 8002c38:	40013800 	.word	0x40013800
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40004400 	.word	0x40004400
 8002c44:	00f42400 	.word	0x00f42400
 8002c48:	007a1200 	.word	0x007a1200

08002c4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	2201      	movs	r2, #1
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4a4a      	ldr	r2, [pc, #296]	@ (8002d90 <UART_AdvFeatureConfig+0x144>)
 8002c66:	4013      	ands	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	d00b      	beq.n	8002c98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	4a43      	ldr	r2, [pc, #268]	@ (8002d94 <UART_AdvFeatureConfig+0x148>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9c:	2204      	movs	r2, #4
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	d00b      	beq.n	8002cba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8002d98 <UART_AdvFeatureConfig+0x14c>)
 8002caa:	4013      	ands	r3, r2
 8002cac:	0019      	movs	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cbe:	2208      	movs	r2, #8
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	4a34      	ldr	r2, [pc, #208]	@ (8002d9c <UART_AdvFeatureConfig+0x150>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	0019      	movs	r1, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce0:	2210      	movs	r2, #16
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d00b      	beq.n	8002cfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	4a2c      	ldr	r2, [pc, #176]	@ (8002da0 <UART_AdvFeatureConfig+0x154>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	0019      	movs	r1, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d02:	2220      	movs	r2, #32
 8002d04:	4013      	ands	r3, r2
 8002d06:	d00b      	beq.n	8002d20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4a25      	ldr	r2, [pc, #148]	@ (8002da4 <UART_AdvFeatureConfig+0x158>)
 8002d10:	4013      	ands	r3, r2
 8002d12:	0019      	movs	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d24:	2240      	movs	r2, #64	@ 0x40
 8002d26:	4013      	ands	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	4a1d      	ldr	r2, [pc, #116]	@ (8002da8 <UART_AdvFeatureConfig+0x15c>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	0019      	movs	r1, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d46:	2380      	movs	r3, #128	@ 0x80
 8002d48:	035b      	lsls	r3, r3, #13
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d10b      	bne.n	8002d66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4a15      	ldr	r2, [pc, #84]	@ (8002dac <UART_AdvFeatureConfig+0x160>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	0019      	movs	r1, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6a:	2280      	movs	r2, #128	@ 0x80
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	d00b      	beq.n	8002d88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	4a0e      	ldr	r2, [pc, #56]	@ (8002db0 <UART_AdvFeatureConfig+0x164>)
 8002d78:	4013      	ands	r3, r2
 8002d7a:	0019      	movs	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	605a      	str	r2, [r3, #4]
  }
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	b002      	add	sp, #8
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	fffdffff 	.word	0xfffdffff
 8002d94:	fffeffff 	.word	0xfffeffff
 8002d98:	fffbffff 	.word	0xfffbffff
 8002d9c:	ffff7fff 	.word	0xffff7fff
 8002da0:	ffffefff 	.word	0xffffefff
 8002da4:	ffffdfff 	.word	0xffffdfff
 8002da8:	ffefffff 	.word	0xffefffff
 8002dac:	ff9fffff 	.word	0xff9fffff
 8002db0:	fff7ffff 	.word	0xfff7ffff

08002db4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b086      	sub	sp, #24
 8002db8:	af02      	add	r7, sp, #8
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002dc2:	f7fd fe9b 	bl	8000afc <HAL_GetTick>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2208      	movs	r2, #8
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d10c      	bne.n	8002df2 <UART_CheckIdleState+0x3e>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2280      	movs	r2, #128	@ 0x80
 8002ddc:	0391      	lsls	r1, r2, #14
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4a15      	ldr	r2, [pc, #84]	@ (8002e38 <UART_CheckIdleState+0x84>)
 8002de2:	9200      	str	r2, [sp, #0]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f000 f829 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 8002dea:	1e03      	subs	r3, r0, #0
 8002dec:	d001      	beq.n	8002df2 <UART_CheckIdleState+0x3e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e01e      	b.n	8002e30 <UART_CheckIdleState+0x7c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2204      	movs	r2, #4
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	2b04      	cmp	r3, #4
 8002dfe:	d10c      	bne.n	8002e1a <UART_CheckIdleState+0x66>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2280      	movs	r2, #128	@ 0x80
 8002e04:	03d1      	lsls	r1, r2, #15
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	4a0b      	ldr	r2, [pc, #44]	@ (8002e38 <UART_CheckIdleState+0x84>)
 8002e0a:	9200      	str	r2, [sp, #0]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f000 f815 	bl	8002e3c <UART_WaitOnFlagUntilTimeout>
 8002e12:	1e03      	subs	r3, r0, #0
 8002e14:	d001      	beq.n	8002e1a <UART_CheckIdleState+0x66>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e00a      	b.n	8002e30 <UART_CheckIdleState+0x7c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2220      	movs	r2, #32
 8002e24:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UNLOCK(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2270      	movs	r2, #112	@ 0x70
 8002e2a:	2100      	movs	r1, #0
 8002e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	0018      	movs	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	b004      	add	sp, #16
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	01ffffff 	.word	0x01ffffff

08002e3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	603b      	str	r3, [r7, #0]
 8002e48:	1dfb      	adds	r3, r7, #7
 8002e4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	e05d      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	3301      	adds	r3, #1
 8002e52:	d05a      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e54:	f7fd fe52 	bl	8000afc <HAL_GetTick>
 8002e58:	0002      	movs	r2, r0
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	69ba      	ldr	r2, [r7, #24]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d302      	bcc.n	8002e6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d11b      	bne.n	8002ea2 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	492f      	ldr	r1, [pc, #188]	@ (8002f34 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002e76:	400a      	ands	r2, r1
 8002e78:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2101      	movs	r1, #1
 8002e86:	438a      	bics	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	675a      	str	r2, [r3, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	679a      	str	r2, [r3, #120]	@ 0x78

        __HAL_UNLOCK(huart);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2270      	movs	r2, #112	@ 0x70
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e043      	b.n	8002f2a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d02d      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	69da      	ldr	r2, [r3, #28]
 8002eb4:	2380      	movs	r3, #128	@ 0x80
 8002eb6:	011b      	lsls	r3, r3, #4
 8002eb8:	401a      	ands	r2, r3
 8002eba:	2380      	movs	r3, #128	@ 0x80
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d123      	bne.n	8002f0a <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2280      	movs	r2, #128	@ 0x80
 8002ec8:	0112      	lsls	r2, r2, #4
 8002eca:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4917      	ldr	r1, [pc, #92]	@ (8002f34 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002ed8:	400a      	ands	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	689a      	ldr	r2, [r3, #8]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2101      	movs	r1, #1
 8002ee8:	438a      	bics	r2, r1
 8002eea:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	675a      	str	r2, [r3, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	67da      	str	r2, [r3, #124]	@ 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2270      	movs	r2, #112	@ 0x70
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e00f      	b.n	8002f2a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69db      	ldr	r3, [r3, #28]
 8002f10:	68ba      	ldr	r2, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	425a      	negs	r2, r3
 8002f1a:	4153      	adcs	r3, r2
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	001a      	movs	r2, r3
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d092      	beq.n	8002e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b004      	add	sp, #16
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	46c0      	nop			@ (mov r8, r8)
 8002f34:	fffffe5f 	.word	0xfffffe5f

08002f38 <siprintf>:
 8002f38:	b40e      	push	{r1, r2, r3}
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	2400      	movs	r4, #0
 8002f3e:	490c      	ldr	r1, [pc, #48]	@ (8002f70 <siprintf+0x38>)
 8002f40:	b09d      	sub	sp, #116	@ 0x74
 8002f42:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002f44:	9002      	str	r0, [sp, #8]
 8002f46:	9006      	str	r0, [sp, #24]
 8002f48:	9107      	str	r1, [sp, #28]
 8002f4a:	9104      	str	r1, [sp, #16]
 8002f4c:	4809      	ldr	r0, [pc, #36]	@ (8002f74 <siprintf+0x3c>)
 8002f4e:	490a      	ldr	r1, [pc, #40]	@ (8002f78 <siprintf+0x40>)
 8002f50:	cb04      	ldmia	r3!, {r2}
 8002f52:	9105      	str	r1, [sp, #20]
 8002f54:	6800      	ldr	r0, [r0, #0]
 8002f56:	a902      	add	r1, sp, #8
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002f5c:	f000 f99e 	bl	800329c <_svfiprintf_r>
 8002f60:	9b02      	ldr	r3, [sp, #8]
 8002f62:	701c      	strb	r4, [r3, #0]
 8002f64:	b01d      	add	sp, #116	@ 0x74
 8002f66:	bc10      	pop	{r4}
 8002f68:	bc08      	pop	{r3}
 8002f6a:	b003      	add	sp, #12
 8002f6c:	4718      	bx	r3
 8002f6e:	46c0      	nop			@ (mov r8, r8)
 8002f70:	7fffffff 	.word	0x7fffffff
 8002f74:	2000000c 	.word	0x2000000c
 8002f78:	ffff0208 	.word	0xffff0208

08002f7c <memset>:
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	1882      	adds	r2, r0, r2
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d100      	bne.n	8002f86 <memset+0xa>
 8002f84:	4770      	bx	lr
 8002f86:	7019      	strb	r1, [r3, #0]
 8002f88:	3301      	adds	r3, #1
 8002f8a:	e7f9      	b.n	8002f80 <memset+0x4>

08002f8c <__errno>:
 8002f8c:	4b01      	ldr	r3, [pc, #4]	@ (8002f94 <__errno+0x8>)
 8002f8e:	6818      	ldr	r0, [r3, #0]
 8002f90:	4770      	bx	lr
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	2000000c 	.word	0x2000000c

08002f98 <__libc_init_array>:
 8002f98:	b570      	push	{r4, r5, r6, lr}
 8002f9a:	2600      	movs	r6, #0
 8002f9c:	4c0c      	ldr	r4, [pc, #48]	@ (8002fd0 <__libc_init_array+0x38>)
 8002f9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002fd4 <__libc_init_array+0x3c>)
 8002fa0:	1b64      	subs	r4, r4, r5
 8002fa2:	10a4      	asrs	r4, r4, #2
 8002fa4:	42a6      	cmp	r6, r4
 8002fa6:	d109      	bne.n	8002fbc <__libc_init_array+0x24>
 8002fa8:	2600      	movs	r6, #0
 8002faa:	f000 fc61 	bl	8003870 <_init>
 8002fae:	4c0a      	ldr	r4, [pc, #40]	@ (8002fd8 <__libc_init_array+0x40>)
 8002fb0:	4d0a      	ldr	r5, [pc, #40]	@ (8002fdc <__libc_init_array+0x44>)
 8002fb2:	1b64      	subs	r4, r4, r5
 8002fb4:	10a4      	asrs	r4, r4, #2
 8002fb6:	42a6      	cmp	r6, r4
 8002fb8:	d105      	bne.n	8002fc6 <__libc_init_array+0x2e>
 8002fba:	bd70      	pop	{r4, r5, r6, pc}
 8002fbc:	00b3      	lsls	r3, r6, #2
 8002fbe:	58eb      	ldr	r3, [r5, r3]
 8002fc0:	4798      	blx	r3
 8002fc2:	3601      	adds	r6, #1
 8002fc4:	e7ee      	b.n	8002fa4 <__libc_init_array+0xc>
 8002fc6:	00b3      	lsls	r3, r6, #2
 8002fc8:	58eb      	ldr	r3, [r5, r3]
 8002fca:	4798      	blx	r3
 8002fcc:	3601      	adds	r6, #1
 8002fce:	e7f2      	b.n	8002fb6 <__libc_init_array+0x1e>
 8002fd0:	08003930 	.word	0x08003930
 8002fd4:	08003930 	.word	0x08003930
 8002fd8:	08003934 	.word	0x08003934
 8002fdc:	08003930 	.word	0x08003930

08002fe0 <__retarget_lock_acquire_recursive>:
 8002fe0:	4770      	bx	lr

08002fe2 <__retarget_lock_release_recursive>:
 8002fe2:	4770      	bx	lr

08002fe4 <_free_r>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	0005      	movs	r5, r0
 8002fe8:	1e0c      	subs	r4, r1, #0
 8002fea:	d010      	beq.n	800300e <_free_r+0x2a>
 8002fec:	3c04      	subs	r4, #4
 8002fee:	6823      	ldr	r3, [r4, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	da00      	bge.n	8002ff6 <_free_r+0x12>
 8002ff4:	18e4      	adds	r4, r4, r3
 8002ff6:	0028      	movs	r0, r5
 8002ff8:	f000 f8e0 	bl	80031bc <__malloc_lock>
 8002ffc:	4a1d      	ldr	r2, [pc, #116]	@ (8003074 <_free_r+0x90>)
 8002ffe:	6813      	ldr	r3, [r2, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d105      	bne.n	8003010 <_free_r+0x2c>
 8003004:	6063      	str	r3, [r4, #4]
 8003006:	6014      	str	r4, [r2, #0]
 8003008:	0028      	movs	r0, r5
 800300a:	f000 f8df 	bl	80031cc <__malloc_unlock>
 800300e:	bd70      	pop	{r4, r5, r6, pc}
 8003010:	42a3      	cmp	r3, r4
 8003012:	d908      	bls.n	8003026 <_free_r+0x42>
 8003014:	6820      	ldr	r0, [r4, #0]
 8003016:	1821      	adds	r1, r4, r0
 8003018:	428b      	cmp	r3, r1
 800301a:	d1f3      	bne.n	8003004 <_free_r+0x20>
 800301c:	6819      	ldr	r1, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	1809      	adds	r1, r1, r0
 8003022:	6021      	str	r1, [r4, #0]
 8003024:	e7ee      	b.n	8003004 <_free_r+0x20>
 8003026:	001a      	movs	r2, r3
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <_free_r+0x4e>
 800302e:	42a3      	cmp	r3, r4
 8003030:	d9f9      	bls.n	8003026 <_free_r+0x42>
 8003032:	6811      	ldr	r1, [r2, #0]
 8003034:	1850      	adds	r0, r2, r1
 8003036:	42a0      	cmp	r0, r4
 8003038:	d10b      	bne.n	8003052 <_free_r+0x6e>
 800303a:	6820      	ldr	r0, [r4, #0]
 800303c:	1809      	adds	r1, r1, r0
 800303e:	1850      	adds	r0, r2, r1
 8003040:	6011      	str	r1, [r2, #0]
 8003042:	4283      	cmp	r3, r0
 8003044:	d1e0      	bne.n	8003008 <_free_r+0x24>
 8003046:	6818      	ldr	r0, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	1841      	adds	r1, r0, r1
 800304c:	6011      	str	r1, [r2, #0]
 800304e:	6053      	str	r3, [r2, #4]
 8003050:	e7da      	b.n	8003008 <_free_r+0x24>
 8003052:	42a0      	cmp	r0, r4
 8003054:	d902      	bls.n	800305c <_free_r+0x78>
 8003056:	230c      	movs	r3, #12
 8003058:	602b      	str	r3, [r5, #0]
 800305a:	e7d5      	b.n	8003008 <_free_r+0x24>
 800305c:	6820      	ldr	r0, [r4, #0]
 800305e:	1821      	adds	r1, r4, r0
 8003060:	428b      	cmp	r3, r1
 8003062:	d103      	bne.n	800306c <_free_r+0x88>
 8003064:	6819      	ldr	r1, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	1809      	adds	r1, r1, r0
 800306a:	6021      	str	r1, [r4, #0]
 800306c:	6063      	str	r3, [r4, #4]
 800306e:	6054      	str	r4, [r2, #4]
 8003070:	e7ca      	b.n	8003008 <_free_r+0x24>
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	20000304 	.word	0x20000304

08003078 <sbrk_aligned>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	4e0f      	ldr	r6, [pc, #60]	@ (80030b8 <sbrk_aligned+0x40>)
 800307c:	000d      	movs	r5, r1
 800307e:	6831      	ldr	r1, [r6, #0]
 8003080:	0004      	movs	r4, r0
 8003082:	2900      	cmp	r1, #0
 8003084:	d102      	bne.n	800308c <sbrk_aligned+0x14>
 8003086:	f000 fb95 	bl	80037b4 <_sbrk_r>
 800308a:	6030      	str	r0, [r6, #0]
 800308c:	0029      	movs	r1, r5
 800308e:	0020      	movs	r0, r4
 8003090:	f000 fb90 	bl	80037b4 <_sbrk_r>
 8003094:	1c43      	adds	r3, r0, #1
 8003096:	d103      	bne.n	80030a0 <sbrk_aligned+0x28>
 8003098:	2501      	movs	r5, #1
 800309a:	426d      	negs	r5, r5
 800309c:	0028      	movs	r0, r5
 800309e:	bd70      	pop	{r4, r5, r6, pc}
 80030a0:	2303      	movs	r3, #3
 80030a2:	1cc5      	adds	r5, r0, #3
 80030a4:	439d      	bics	r5, r3
 80030a6:	42a8      	cmp	r0, r5
 80030a8:	d0f8      	beq.n	800309c <sbrk_aligned+0x24>
 80030aa:	1a29      	subs	r1, r5, r0
 80030ac:	0020      	movs	r0, r4
 80030ae:	f000 fb81 	bl	80037b4 <_sbrk_r>
 80030b2:	3001      	adds	r0, #1
 80030b4:	d1f2      	bne.n	800309c <sbrk_aligned+0x24>
 80030b6:	e7ef      	b.n	8003098 <sbrk_aligned+0x20>
 80030b8:	20000300 	.word	0x20000300

080030bc <_malloc_r>:
 80030bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80030be:	2203      	movs	r2, #3
 80030c0:	1ccb      	adds	r3, r1, #3
 80030c2:	4393      	bics	r3, r2
 80030c4:	3308      	adds	r3, #8
 80030c6:	0005      	movs	r5, r0
 80030c8:	001f      	movs	r7, r3
 80030ca:	2b0c      	cmp	r3, #12
 80030cc:	d234      	bcs.n	8003138 <_malloc_r+0x7c>
 80030ce:	270c      	movs	r7, #12
 80030d0:	42b9      	cmp	r1, r7
 80030d2:	d833      	bhi.n	800313c <_malloc_r+0x80>
 80030d4:	0028      	movs	r0, r5
 80030d6:	f000 f871 	bl	80031bc <__malloc_lock>
 80030da:	4e37      	ldr	r6, [pc, #220]	@ (80031b8 <_malloc_r+0xfc>)
 80030dc:	6833      	ldr	r3, [r6, #0]
 80030de:	001c      	movs	r4, r3
 80030e0:	2c00      	cmp	r4, #0
 80030e2:	d12f      	bne.n	8003144 <_malloc_r+0x88>
 80030e4:	0039      	movs	r1, r7
 80030e6:	0028      	movs	r0, r5
 80030e8:	f7ff ffc6 	bl	8003078 <sbrk_aligned>
 80030ec:	0004      	movs	r4, r0
 80030ee:	1c43      	adds	r3, r0, #1
 80030f0:	d15f      	bne.n	80031b2 <_malloc_r+0xf6>
 80030f2:	6834      	ldr	r4, [r6, #0]
 80030f4:	9400      	str	r4, [sp, #0]
 80030f6:	9b00      	ldr	r3, [sp, #0]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d14a      	bne.n	8003192 <_malloc_r+0xd6>
 80030fc:	2c00      	cmp	r4, #0
 80030fe:	d052      	beq.n	80031a6 <_malloc_r+0xea>
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	0028      	movs	r0, r5
 8003104:	18e3      	adds	r3, r4, r3
 8003106:	9900      	ldr	r1, [sp, #0]
 8003108:	9301      	str	r3, [sp, #4]
 800310a:	f000 fb53 	bl	80037b4 <_sbrk_r>
 800310e:	9b01      	ldr	r3, [sp, #4]
 8003110:	4283      	cmp	r3, r0
 8003112:	d148      	bne.n	80031a6 <_malloc_r+0xea>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	0028      	movs	r0, r5
 8003118:	1aff      	subs	r7, r7, r3
 800311a:	0039      	movs	r1, r7
 800311c:	f7ff ffac 	bl	8003078 <sbrk_aligned>
 8003120:	3001      	adds	r0, #1
 8003122:	d040      	beq.n	80031a6 <_malloc_r+0xea>
 8003124:	6823      	ldr	r3, [r4, #0]
 8003126:	19db      	adds	r3, r3, r7
 8003128:	6023      	str	r3, [r4, #0]
 800312a:	6833      	ldr	r3, [r6, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	2a00      	cmp	r2, #0
 8003130:	d133      	bne.n	800319a <_malloc_r+0xde>
 8003132:	9b00      	ldr	r3, [sp, #0]
 8003134:	6033      	str	r3, [r6, #0]
 8003136:	e019      	b.n	800316c <_malloc_r+0xb0>
 8003138:	2b00      	cmp	r3, #0
 800313a:	dac9      	bge.n	80030d0 <_malloc_r+0x14>
 800313c:	230c      	movs	r3, #12
 800313e:	602b      	str	r3, [r5, #0]
 8003140:	2000      	movs	r0, #0
 8003142:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003144:	6821      	ldr	r1, [r4, #0]
 8003146:	1bc9      	subs	r1, r1, r7
 8003148:	d420      	bmi.n	800318c <_malloc_r+0xd0>
 800314a:	290b      	cmp	r1, #11
 800314c:	d90a      	bls.n	8003164 <_malloc_r+0xa8>
 800314e:	19e2      	adds	r2, r4, r7
 8003150:	6027      	str	r7, [r4, #0]
 8003152:	42a3      	cmp	r3, r4
 8003154:	d104      	bne.n	8003160 <_malloc_r+0xa4>
 8003156:	6032      	str	r2, [r6, #0]
 8003158:	6863      	ldr	r3, [r4, #4]
 800315a:	6011      	str	r1, [r2, #0]
 800315c:	6053      	str	r3, [r2, #4]
 800315e:	e005      	b.n	800316c <_malloc_r+0xb0>
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	e7f9      	b.n	8003158 <_malloc_r+0x9c>
 8003164:	6862      	ldr	r2, [r4, #4]
 8003166:	42a3      	cmp	r3, r4
 8003168:	d10e      	bne.n	8003188 <_malloc_r+0xcc>
 800316a:	6032      	str	r2, [r6, #0]
 800316c:	0028      	movs	r0, r5
 800316e:	f000 f82d 	bl	80031cc <__malloc_unlock>
 8003172:	0020      	movs	r0, r4
 8003174:	2207      	movs	r2, #7
 8003176:	300b      	adds	r0, #11
 8003178:	1d23      	adds	r3, r4, #4
 800317a:	4390      	bics	r0, r2
 800317c:	1ac2      	subs	r2, r0, r3
 800317e:	4298      	cmp	r0, r3
 8003180:	d0df      	beq.n	8003142 <_malloc_r+0x86>
 8003182:	1a1b      	subs	r3, r3, r0
 8003184:	50a3      	str	r3, [r4, r2]
 8003186:	e7dc      	b.n	8003142 <_malloc_r+0x86>
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	e7ef      	b.n	800316c <_malloc_r+0xb0>
 800318c:	0023      	movs	r3, r4
 800318e:	6864      	ldr	r4, [r4, #4]
 8003190:	e7a6      	b.n	80030e0 <_malloc_r+0x24>
 8003192:	9c00      	ldr	r4, [sp, #0]
 8003194:	6863      	ldr	r3, [r4, #4]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	e7ad      	b.n	80030f6 <_malloc_r+0x3a>
 800319a:	001a      	movs	r2, r3
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	42a3      	cmp	r3, r4
 80031a0:	d1fb      	bne.n	800319a <_malloc_r+0xde>
 80031a2:	2300      	movs	r3, #0
 80031a4:	e7da      	b.n	800315c <_malloc_r+0xa0>
 80031a6:	230c      	movs	r3, #12
 80031a8:	0028      	movs	r0, r5
 80031aa:	602b      	str	r3, [r5, #0]
 80031ac:	f000 f80e 	bl	80031cc <__malloc_unlock>
 80031b0:	e7c6      	b.n	8003140 <_malloc_r+0x84>
 80031b2:	6007      	str	r7, [r0, #0]
 80031b4:	e7da      	b.n	800316c <_malloc_r+0xb0>
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	20000304 	.word	0x20000304

080031bc <__malloc_lock>:
 80031bc:	b510      	push	{r4, lr}
 80031be:	4802      	ldr	r0, [pc, #8]	@ (80031c8 <__malloc_lock+0xc>)
 80031c0:	f7ff ff0e 	bl	8002fe0 <__retarget_lock_acquire_recursive>
 80031c4:	bd10      	pop	{r4, pc}
 80031c6:	46c0      	nop			@ (mov r8, r8)
 80031c8:	200002fc 	.word	0x200002fc

080031cc <__malloc_unlock>:
 80031cc:	b510      	push	{r4, lr}
 80031ce:	4802      	ldr	r0, [pc, #8]	@ (80031d8 <__malloc_unlock+0xc>)
 80031d0:	f7ff ff07 	bl	8002fe2 <__retarget_lock_release_recursive>
 80031d4:	bd10      	pop	{r4, pc}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	200002fc 	.word	0x200002fc

080031dc <__ssputs_r>:
 80031dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031de:	688e      	ldr	r6, [r1, #8]
 80031e0:	b085      	sub	sp, #20
 80031e2:	001f      	movs	r7, r3
 80031e4:	000c      	movs	r4, r1
 80031e6:	680b      	ldr	r3, [r1, #0]
 80031e8:	9002      	str	r0, [sp, #8]
 80031ea:	9203      	str	r2, [sp, #12]
 80031ec:	42be      	cmp	r6, r7
 80031ee:	d830      	bhi.n	8003252 <__ssputs_r+0x76>
 80031f0:	210c      	movs	r1, #12
 80031f2:	5e62      	ldrsh	r2, [r4, r1]
 80031f4:	2190      	movs	r1, #144	@ 0x90
 80031f6:	00c9      	lsls	r1, r1, #3
 80031f8:	420a      	tst	r2, r1
 80031fa:	d028      	beq.n	800324e <__ssputs_r+0x72>
 80031fc:	2003      	movs	r0, #3
 80031fe:	6921      	ldr	r1, [r4, #16]
 8003200:	1a5b      	subs	r3, r3, r1
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	6963      	ldr	r3, [r4, #20]
 8003206:	4343      	muls	r3, r0
 8003208:	9801      	ldr	r0, [sp, #4]
 800320a:	0fdd      	lsrs	r5, r3, #31
 800320c:	18ed      	adds	r5, r5, r3
 800320e:	1c7b      	adds	r3, r7, #1
 8003210:	181b      	adds	r3, r3, r0
 8003212:	106d      	asrs	r5, r5, #1
 8003214:	42ab      	cmp	r3, r5
 8003216:	d900      	bls.n	800321a <__ssputs_r+0x3e>
 8003218:	001d      	movs	r5, r3
 800321a:	0552      	lsls	r2, r2, #21
 800321c:	d528      	bpl.n	8003270 <__ssputs_r+0x94>
 800321e:	0029      	movs	r1, r5
 8003220:	9802      	ldr	r0, [sp, #8]
 8003222:	f7ff ff4b 	bl	80030bc <_malloc_r>
 8003226:	1e06      	subs	r6, r0, #0
 8003228:	d02c      	beq.n	8003284 <__ssputs_r+0xa8>
 800322a:	9a01      	ldr	r2, [sp, #4]
 800322c:	6921      	ldr	r1, [r4, #16]
 800322e:	f000 fade 	bl	80037ee <memcpy>
 8003232:	89a2      	ldrh	r2, [r4, #12]
 8003234:	4b18      	ldr	r3, [pc, #96]	@ (8003298 <__ssputs_r+0xbc>)
 8003236:	401a      	ands	r2, r3
 8003238:	2380      	movs	r3, #128	@ 0x80
 800323a:	4313      	orrs	r3, r2
 800323c:	81a3      	strh	r3, [r4, #12]
 800323e:	9b01      	ldr	r3, [sp, #4]
 8003240:	6126      	str	r6, [r4, #16]
 8003242:	18f6      	adds	r6, r6, r3
 8003244:	6026      	str	r6, [r4, #0]
 8003246:	003e      	movs	r6, r7
 8003248:	6165      	str	r5, [r4, #20]
 800324a:	1aed      	subs	r5, r5, r3
 800324c:	60a5      	str	r5, [r4, #8]
 800324e:	42be      	cmp	r6, r7
 8003250:	d900      	bls.n	8003254 <__ssputs_r+0x78>
 8003252:	003e      	movs	r6, r7
 8003254:	0032      	movs	r2, r6
 8003256:	9903      	ldr	r1, [sp, #12]
 8003258:	6820      	ldr	r0, [r4, #0]
 800325a:	f000 fa99 	bl	8003790 <memmove>
 800325e:	2000      	movs	r0, #0
 8003260:	68a3      	ldr	r3, [r4, #8]
 8003262:	1b9b      	subs	r3, r3, r6
 8003264:	60a3      	str	r3, [r4, #8]
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	199b      	adds	r3, r3, r6
 800326a:	6023      	str	r3, [r4, #0]
 800326c:	b005      	add	sp, #20
 800326e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003270:	002a      	movs	r2, r5
 8003272:	9802      	ldr	r0, [sp, #8]
 8003274:	f000 fac4 	bl	8003800 <_realloc_r>
 8003278:	1e06      	subs	r6, r0, #0
 800327a:	d1e0      	bne.n	800323e <__ssputs_r+0x62>
 800327c:	6921      	ldr	r1, [r4, #16]
 800327e:	9802      	ldr	r0, [sp, #8]
 8003280:	f7ff feb0 	bl	8002fe4 <_free_r>
 8003284:	230c      	movs	r3, #12
 8003286:	2001      	movs	r0, #1
 8003288:	9a02      	ldr	r2, [sp, #8]
 800328a:	4240      	negs	r0, r0
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	89a2      	ldrh	r2, [r4, #12]
 8003290:	3334      	adds	r3, #52	@ 0x34
 8003292:	4313      	orrs	r3, r2
 8003294:	81a3      	strh	r3, [r4, #12]
 8003296:	e7e9      	b.n	800326c <__ssputs_r+0x90>
 8003298:	fffffb7f 	.word	0xfffffb7f

0800329c <_svfiprintf_r>:
 800329c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800329e:	b0a1      	sub	sp, #132	@ 0x84
 80032a0:	9003      	str	r0, [sp, #12]
 80032a2:	001d      	movs	r5, r3
 80032a4:	898b      	ldrh	r3, [r1, #12]
 80032a6:	000f      	movs	r7, r1
 80032a8:	0016      	movs	r6, r2
 80032aa:	061b      	lsls	r3, r3, #24
 80032ac:	d511      	bpl.n	80032d2 <_svfiprintf_r+0x36>
 80032ae:	690b      	ldr	r3, [r1, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10e      	bne.n	80032d2 <_svfiprintf_r+0x36>
 80032b4:	2140      	movs	r1, #64	@ 0x40
 80032b6:	f7ff ff01 	bl	80030bc <_malloc_r>
 80032ba:	6038      	str	r0, [r7, #0]
 80032bc:	6138      	str	r0, [r7, #16]
 80032be:	2800      	cmp	r0, #0
 80032c0:	d105      	bne.n	80032ce <_svfiprintf_r+0x32>
 80032c2:	230c      	movs	r3, #12
 80032c4:	9a03      	ldr	r2, [sp, #12]
 80032c6:	6013      	str	r3, [r2, #0]
 80032c8:	2001      	movs	r0, #1
 80032ca:	4240      	negs	r0, r0
 80032cc:	e0cf      	b.n	800346e <_svfiprintf_r+0x1d2>
 80032ce:	2340      	movs	r3, #64	@ 0x40
 80032d0:	617b      	str	r3, [r7, #20]
 80032d2:	2300      	movs	r3, #0
 80032d4:	ac08      	add	r4, sp, #32
 80032d6:	6163      	str	r3, [r4, #20]
 80032d8:	3320      	adds	r3, #32
 80032da:	7663      	strb	r3, [r4, #25]
 80032dc:	3310      	adds	r3, #16
 80032de:	76a3      	strb	r3, [r4, #26]
 80032e0:	9507      	str	r5, [sp, #28]
 80032e2:	0035      	movs	r5, r6
 80032e4:	782b      	ldrb	r3, [r5, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <_svfiprintf_r+0x52>
 80032ea:	2b25      	cmp	r3, #37	@ 0x25
 80032ec:	d148      	bne.n	8003380 <_svfiprintf_r+0xe4>
 80032ee:	1bab      	subs	r3, r5, r6
 80032f0:	9305      	str	r3, [sp, #20]
 80032f2:	42b5      	cmp	r5, r6
 80032f4:	d00b      	beq.n	800330e <_svfiprintf_r+0x72>
 80032f6:	0032      	movs	r2, r6
 80032f8:	0039      	movs	r1, r7
 80032fa:	9803      	ldr	r0, [sp, #12]
 80032fc:	f7ff ff6e 	bl	80031dc <__ssputs_r>
 8003300:	3001      	adds	r0, #1
 8003302:	d100      	bne.n	8003306 <_svfiprintf_r+0x6a>
 8003304:	e0ae      	b.n	8003464 <_svfiprintf_r+0x1c8>
 8003306:	6963      	ldr	r3, [r4, #20]
 8003308:	9a05      	ldr	r2, [sp, #20]
 800330a:	189b      	adds	r3, r3, r2
 800330c:	6163      	str	r3, [r4, #20]
 800330e:	782b      	ldrb	r3, [r5, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d100      	bne.n	8003316 <_svfiprintf_r+0x7a>
 8003314:	e0a6      	b.n	8003464 <_svfiprintf_r+0x1c8>
 8003316:	2201      	movs	r2, #1
 8003318:	2300      	movs	r3, #0
 800331a:	4252      	negs	r2, r2
 800331c:	6062      	str	r2, [r4, #4]
 800331e:	a904      	add	r1, sp, #16
 8003320:	3254      	adds	r2, #84	@ 0x54
 8003322:	1852      	adds	r2, r2, r1
 8003324:	1c6e      	adds	r6, r5, #1
 8003326:	6023      	str	r3, [r4, #0]
 8003328:	60e3      	str	r3, [r4, #12]
 800332a:	60a3      	str	r3, [r4, #8]
 800332c:	7013      	strb	r3, [r2, #0]
 800332e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003330:	4b54      	ldr	r3, [pc, #336]	@ (8003484 <_svfiprintf_r+0x1e8>)
 8003332:	2205      	movs	r2, #5
 8003334:	0018      	movs	r0, r3
 8003336:	7831      	ldrb	r1, [r6, #0]
 8003338:	9305      	str	r3, [sp, #20]
 800333a:	f000 fa4d 	bl	80037d8 <memchr>
 800333e:	1c75      	adds	r5, r6, #1
 8003340:	2800      	cmp	r0, #0
 8003342:	d11f      	bne.n	8003384 <_svfiprintf_r+0xe8>
 8003344:	6822      	ldr	r2, [r4, #0]
 8003346:	06d3      	lsls	r3, r2, #27
 8003348:	d504      	bpl.n	8003354 <_svfiprintf_r+0xb8>
 800334a:	2353      	movs	r3, #83	@ 0x53
 800334c:	a904      	add	r1, sp, #16
 800334e:	185b      	adds	r3, r3, r1
 8003350:	2120      	movs	r1, #32
 8003352:	7019      	strb	r1, [r3, #0]
 8003354:	0713      	lsls	r3, r2, #28
 8003356:	d504      	bpl.n	8003362 <_svfiprintf_r+0xc6>
 8003358:	2353      	movs	r3, #83	@ 0x53
 800335a:	a904      	add	r1, sp, #16
 800335c:	185b      	adds	r3, r3, r1
 800335e:	212b      	movs	r1, #43	@ 0x2b
 8003360:	7019      	strb	r1, [r3, #0]
 8003362:	7833      	ldrb	r3, [r6, #0]
 8003364:	2b2a      	cmp	r3, #42	@ 0x2a
 8003366:	d016      	beq.n	8003396 <_svfiprintf_r+0xfa>
 8003368:	0035      	movs	r5, r6
 800336a:	2100      	movs	r1, #0
 800336c:	200a      	movs	r0, #10
 800336e:	68e3      	ldr	r3, [r4, #12]
 8003370:	782a      	ldrb	r2, [r5, #0]
 8003372:	1c6e      	adds	r6, r5, #1
 8003374:	3a30      	subs	r2, #48	@ 0x30
 8003376:	2a09      	cmp	r2, #9
 8003378:	d950      	bls.n	800341c <_svfiprintf_r+0x180>
 800337a:	2900      	cmp	r1, #0
 800337c:	d111      	bne.n	80033a2 <_svfiprintf_r+0x106>
 800337e:	e017      	b.n	80033b0 <_svfiprintf_r+0x114>
 8003380:	3501      	adds	r5, #1
 8003382:	e7af      	b.n	80032e4 <_svfiprintf_r+0x48>
 8003384:	9b05      	ldr	r3, [sp, #20]
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	1ac0      	subs	r0, r0, r3
 800338a:	2301      	movs	r3, #1
 800338c:	4083      	lsls	r3, r0
 800338e:	4313      	orrs	r3, r2
 8003390:	002e      	movs	r6, r5
 8003392:	6023      	str	r3, [r4, #0]
 8003394:	e7cc      	b.n	8003330 <_svfiprintf_r+0x94>
 8003396:	9b07      	ldr	r3, [sp, #28]
 8003398:	1d19      	adds	r1, r3, #4
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	9107      	str	r1, [sp, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	db01      	blt.n	80033a6 <_svfiprintf_r+0x10a>
 80033a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80033a4:	e004      	b.n	80033b0 <_svfiprintf_r+0x114>
 80033a6:	425b      	negs	r3, r3
 80033a8:	60e3      	str	r3, [r4, #12]
 80033aa:	2302      	movs	r3, #2
 80033ac:	4313      	orrs	r3, r2
 80033ae:	6023      	str	r3, [r4, #0]
 80033b0:	782b      	ldrb	r3, [r5, #0]
 80033b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80033b4:	d10c      	bne.n	80033d0 <_svfiprintf_r+0x134>
 80033b6:	786b      	ldrb	r3, [r5, #1]
 80033b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80033ba:	d134      	bne.n	8003426 <_svfiprintf_r+0x18a>
 80033bc:	9b07      	ldr	r3, [sp, #28]
 80033be:	3502      	adds	r5, #2
 80033c0:	1d1a      	adds	r2, r3, #4
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	9207      	str	r2, [sp, #28]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	da01      	bge.n	80033ce <_svfiprintf_r+0x132>
 80033ca:	2301      	movs	r3, #1
 80033cc:	425b      	negs	r3, r3
 80033ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80033d0:	4e2d      	ldr	r6, [pc, #180]	@ (8003488 <_svfiprintf_r+0x1ec>)
 80033d2:	2203      	movs	r2, #3
 80033d4:	0030      	movs	r0, r6
 80033d6:	7829      	ldrb	r1, [r5, #0]
 80033d8:	f000 f9fe 	bl	80037d8 <memchr>
 80033dc:	2800      	cmp	r0, #0
 80033de:	d006      	beq.n	80033ee <_svfiprintf_r+0x152>
 80033e0:	2340      	movs	r3, #64	@ 0x40
 80033e2:	1b80      	subs	r0, r0, r6
 80033e4:	4083      	lsls	r3, r0
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	3501      	adds	r5, #1
 80033ea:	4313      	orrs	r3, r2
 80033ec:	6023      	str	r3, [r4, #0]
 80033ee:	7829      	ldrb	r1, [r5, #0]
 80033f0:	2206      	movs	r2, #6
 80033f2:	4826      	ldr	r0, [pc, #152]	@ (800348c <_svfiprintf_r+0x1f0>)
 80033f4:	1c6e      	adds	r6, r5, #1
 80033f6:	7621      	strb	r1, [r4, #24]
 80033f8:	f000 f9ee 	bl	80037d8 <memchr>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	d038      	beq.n	8003472 <_svfiprintf_r+0x1d6>
 8003400:	4b23      	ldr	r3, [pc, #140]	@ (8003490 <_svfiprintf_r+0x1f4>)
 8003402:	2b00      	cmp	r3, #0
 8003404:	d122      	bne.n	800344c <_svfiprintf_r+0x1b0>
 8003406:	2207      	movs	r2, #7
 8003408:	9b07      	ldr	r3, [sp, #28]
 800340a:	3307      	adds	r3, #7
 800340c:	4393      	bics	r3, r2
 800340e:	3308      	adds	r3, #8
 8003410:	9307      	str	r3, [sp, #28]
 8003412:	6963      	ldr	r3, [r4, #20]
 8003414:	9a04      	ldr	r2, [sp, #16]
 8003416:	189b      	adds	r3, r3, r2
 8003418:	6163      	str	r3, [r4, #20]
 800341a:	e762      	b.n	80032e2 <_svfiprintf_r+0x46>
 800341c:	4343      	muls	r3, r0
 800341e:	0035      	movs	r5, r6
 8003420:	2101      	movs	r1, #1
 8003422:	189b      	adds	r3, r3, r2
 8003424:	e7a4      	b.n	8003370 <_svfiprintf_r+0xd4>
 8003426:	2300      	movs	r3, #0
 8003428:	200a      	movs	r0, #10
 800342a:	0019      	movs	r1, r3
 800342c:	3501      	adds	r5, #1
 800342e:	6063      	str	r3, [r4, #4]
 8003430:	782a      	ldrb	r2, [r5, #0]
 8003432:	1c6e      	adds	r6, r5, #1
 8003434:	3a30      	subs	r2, #48	@ 0x30
 8003436:	2a09      	cmp	r2, #9
 8003438:	d903      	bls.n	8003442 <_svfiprintf_r+0x1a6>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0c8      	beq.n	80033d0 <_svfiprintf_r+0x134>
 800343e:	9109      	str	r1, [sp, #36]	@ 0x24
 8003440:	e7c6      	b.n	80033d0 <_svfiprintf_r+0x134>
 8003442:	4341      	muls	r1, r0
 8003444:	0035      	movs	r5, r6
 8003446:	2301      	movs	r3, #1
 8003448:	1889      	adds	r1, r1, r2
 800344a:	e7f1      	b.n	8003430 <_svfiprintf_r+0x194>
 800344c:	aa07      	add	r2, sp, #28
 800344e:	9200      	str	r2, [sp, #0]
 8003450:	0021      	movs	r1, r4
 8003452:	003a      	movs	r2, r7
 8003454:	4b0f      	ldr	r3, [pc, #60]	@ (8003494 <_svfiprintf_r+0x1f8>)
 8003456:	9803      	ldr	r0, [sp, #12]
 8003458:	e000      	b.n	800345c <_svfiprintf_r+0x1c0>
 800345a:	bf00      	nop
 800345c:	9004      	str	r0, [sp, #16]
 800345e:	9b04      	ldr	r3, [sp, #16]
 8003460:	3301      	adds	r3, #1
 8003462:	d1d6      	bne.n	8003412 <_svfiprintf_r+0x176>
 8003464:	89bb      	ldrh	r3, [r7, #12]
 8003466:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003468:	065b      	lsls	r3, r3, #25
 800346a:	d500      	bpl.n	800346e <_svfiprintf_r+0x1d2>
 800346c:	e72c      	b.n	80032c8 <_svfiprintf_r+0x2c>
 800346e:	b021      	add	sp, #132	@ 0x84
 8003470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003472:	aa07      	add	r2, sp, #28
 8003474:	9200      	str	r2, [sp, #0]
 8003476:	0021      	movs	r1, r4
 8003478:	003a      	movs	r2, r7
 800347a:	4b06      	ldr	r3, [pc, #24]	@ (8003494 <_svfiprintf_r+0x1f8>)
 800347c:	9803      	ldr	r0, [sp, #12]
 800347e:	f000 f87b 	bl	8003578 <_printf_i>
 8003482:	e7eb      	b.n	800345c <_svfiprintf_r+0x1c0>
 8003484:	080038fc 	.word	0x080038fc
 8003488:	08003902 	.word	0x08003902
 800348c:	08003906 	.word	0x08003906
 8003490:	00000000 	.word	0x00000000
 8003494:	080031dd 	.word	0x080031dd

08003498 <_printf_common>:
 8003498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800349a:	0016      	movs	r6, r2
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	688a      	ldr	r2, [r1, #8]
 80034a0:	690b      	ldr	r3, [r1, #16]
 80034a2:	000c      	movs	r4, r1
 80034a4:	9000      	str	r0, [sp, #0]
 80034a6:	4293      	cmp	r3, r2
 80034a8:	da00      	bge.n	80034ac <_printf_common+0x14>
 80034aa:	0013      	movs	r3, r2
 80034ac:	0022      	movs	r2, r4
 80034ae:	6033      	str	r3, [r6, #0]
 80034b0:	3243      	adds	r2, #67	@ 0x43
 80034b2:	7812      	ldrb	r2, [r2, #0]
 80034b4:	2a00      	cmp	r2, #0
 80034b6:	d001      	beq.n	80034bc <_printf_common+0x24>
 80034b8:	3301      	adds	r3, #1
 80034ba:	6033      	str	r3, [r6, #0]
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	069b      	lsls	r3, r3, #26
 80034c0:	d502      	bpl.n	80034c8 <_printf_common+0x30>
 80034c2:	6833      	ldr	r3, [r6, #0]
 80034c4:	3302      	adds	r3, #2
 80034c6:	6033      	str	r3, [r6, #0]
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	2306      	movs	r3, #6
 80034cc:	0015      	movs	r5, r2
 80034ce:	401d      	ands	r5, r3
 80034d0:	421a      	tst	r2, r3
 80034d2:	d027      	beq.n	8003524 <_printf_common+0x8c>
 80034d4:	0023      	movs	r3, r4
 80034d6:	3343      	adds	r3, #67	@ 0x43
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	1e5a      	subs	r2, r3, #1
 80034dc:	4193      	sbcs	r3, r2
 80034de:	6822      	ldr	r2, [r4, #0]
 80034e0:	0692      	lsls	r2, r2, #26
 80034e2:	d430      	bmi.n	8003546 <_printf_common+0xae>
 80034e4:	0022      	movs	r2, r4
 80034e6:	9901      	ldr	r1, [sp, #4]
 80034e8:	9800      	ldr	r0, [sp, #0]
 80034ea:	9d08      	ldr	r5, [sp, #32]
 80034ec:	3243      	adds	r2, #67	@ 0x43
 80034ee:	47a8      	blx	r5
 80034f0:	3001      	adds	r0, #1
 80034f2:	d025      	beq.n	8003540 <_printf_common+0xa8>
 80034f4:	2206      	movs	r2, #6
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	2500      	movs	r5, #0
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d105      	bne.n	800350c <_printf_common+0x74>
 8003500:	6833      	ldr	r3, [r6, #0]
 8003502:	68e5      	ldr	r5, [r4, #12]
 8003504:	1aed      	subs	r5, r5, r3
 8003506:	43eb      	mvns	r3, r5
 8003508:	17db      	asrs	r3, r3, #31
 800350a:	401d      	ands	r5, r3
 800350c:	68a3      	ldr	r3, [r4, #8]
 800350e:	6922      	ldr	r2, [r4, #16]
 8003510:	4293      	cmp	r3, r2
 8003512:	dd01      	ble.n	8003518 <_printf_common+0x80>
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	18ed      	adds	r5, r5, r3
 8003518:	2600      	movs	r6, #0
 800351a:	42b5      	cmp	r5, r6
 800351c:	d120      	bne.n	8003560 <_printf_common+0xc8>
 800351e:	2000      	movs	r0, #0
 8003520:	e010      	b.n	8003544 <_printf_common+0xac>
 8003522:	3501      	adds	r5, #1
 8003524:	68e3      	ldr	r3, [r4, #12]
 8003526:	6832      	ldr	r2, [r6, #0]
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	42ab      	cmp	r3, r5
 800352c:	ddd2      	ble.n	80034d4 <_printf_common+0x3c>
 800352e:	0022      	movs	r2, r4
 8003530:	2301      	movs	r3, #1
 8003532:	9901      	ldr	r1, [sp, #4]
 8003534:	9800      	ldr	r0, [sp, #0]
 8003536:	9f08      	ldr	r7, [sp, #32]
 8003538:	3219      	adds	r2, #25
 800353a:	47b8      	blx	r7
 800353c:	3001      	adds	r0, #1
 800353e:	d1f0      	bne.n	8003522 <_printf_common+0x8a>
 8003540:	2001      	movs	r0, #1
 8003542:	4240      	negs	r0, r0
 8003544:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003546:	2030      	movs	r0, #48	@ 0x30
 8003548:	18e1      	adds	r1, r4, r3
 800354a:	3143      	adds	r1, #67	@ 0x43
 800354c:	7008      	strb	r0, [r1, #0]
 800354e:	0021      	movs	r1, r4
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	3145      	adds	r1, #69	@ 0x45
 8003554:	7809      	ldrb	r1, [r1, #0]
 8003556:	18a2      	adds	r2, r4, r2
 8003558:	3243      	adds	r2, #67	@ 0x43
 800355a:	3302      	adds	r3, #2
 800355c:	7011      	strb	r1, [r2, #0]
 800355e:	e7c1      	b.n	80034e4 <_printf_common+0x4c>
 8003560:	0022      	movs	r2, r4
 8003562:	2301      	movs	r3, #1
 8003564:	9901      	ldr	r1, [sp, #4]
 8003566:	9800      	ldr	r0, [sp, #0]
 8003568:	9f08      	ldr	r7, [sp, #32]
 800356a:	321a      	adds	r2, #26
 800356c:	47b8      	blx	r7
 800356e:	3001      	adds	r0, #1
 8003570:	d0e6      	beq.n	8003540 <_printf_common+0xa8>
 8003572:	3601      	adds	r6, #1
 8003574:	e7d1      	b.n	800351a <_printf_common+0x82>
	...

08003578 <_printf_i>:
 8003578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800357a:	b08b      	sub	sp, #44	@ 0x2c
 800357c:	9206      	str	r2, [sp, #24]
 800357e:	000a      	movs	r2, r1
 8003580:	3243      	adds	r2, #67	@ 0x43
 8003582:	9307      	str	r3, [sp, #28]
 8003584:	9005      	str	r0, [sp, #20]
 8003586:	9203      	str	r2, [sp, #12]
 8003588:	7e0a      	ldrb	r2, [r1, #24]
 800358a:	000c      	movs	r4, r1
 800358c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800358e:	2a78      	cmp	r2, #120	@ 0x78
 8003590:	d809      	bhi.n	80035a6 <_printf_i+0x2e>
 8003592:	2a62      	cmp	r2, #98	@ 0x62
 8003594:	d80b      	bhi.n	80035ae <_printf_i+0x36>
 8003596:	2a00      	cmp	r2, #0
 8003598:	d100      	bne.n	800359c <_printf_i+0x24>
 800359a:	e0ba      	b.n	8003712 <_printf_i+0x19a>
 800359c:	497a      	ldr	r1, [pc, #488]	@ (8003788 <_printf_i+0x210>)
 800359e:	9104      	str	r1, [sp, #16]
 80035a0:	2a58      	cmp	r2, #88	@ 0x58
 80035a2:	d100      	bne.n	80035a6 <_printf_i+0x2e>
 80035a4:	e08e      	b.n	80036c4 <_printf_i+0x14c>
 80035a6:	0025      	movs	r5, r4
 80035a8:	3542      	adds	r5, #66	@ 0x42
 80035aa:	702a      	strb	r2, [r5, #0]
 80035ac:	e022      	b.n	80035f4 <_printf_i+0x7c>
 80035ae:	0010      	movs	r0, r2
 80035b0:	3863      	subs	r0, #99	@ 0x63
 80035b2:	2815      	cmp	r0, #21
 80035b4:	d8f7      	bhi.n	80035a6 <_printf_i+0x2e>
 80035b6:	f7fc fda7 	bl	8000108 <__gnu_thumb1_case_shi>
 80035ba:	0016      	.short	0x0016
 80035bc:	fff6001f 	.word	0xfff6001f
 80035c0:	fff6fff6 	.word	0xfff6fff6
 80035c4:	001ffff6 	.word	0x001ffff6
 80035c8:	fff6fff6 	.word	0xfff6fff6
 80035cc:	fff6fff6 	.word	0xfff6fff6
 80035d0:	0036009f 	.word	0x0036009f
 80035d4:	fff6007e 	.word	0xfff6007e
 80035d8:	00b0fff6 	.word	0x00b0fff6
 80035dc:	0036fff6 	.word	0x0036fff6
 80035e0:	fff6fff6 	.word	0xfff6fff6
 80035e4:	0082      	.short	0x0082
 80035e6:	0025      	movs	r5, r4
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	3542      	adds	r5, #66	@ 0x42
 80035ec:	1d11      	adds	r1, r2, #4
 80035ee:	6019      	str	r1, [r3, #0]
 80035f0:	6813      	ldr	r3, [r2, #0]
 80035f2:	702b      	strb	r3, [r5, #0]
 80035f4:	2301      	movs	r3, #1
 80035f6:	e09e      	b.n	8003736 <_printf_i+0x1be>
 80035f8:	6818      	ldr	r0, [r3, #0]
 80035fa:	6809      	ldr	r1, [r1, #0]
 80035fc:	1d02      	adds	r2, r0, #4
 80035fe:	060d      	lsls	r5, r1, #24
 8003600:	d50b      	bpl.n	800361a <_printf_i+0xa2>
 8003602:	6806      	ldr	r6, [r0, #0]
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	2e00      	cmp	r6, #0
 8003608:	da03      	bge.n	8003612 <_printf_i+0x9a>
 800360a:	232d      	movs	r3, #45	@ 0x2d
 800360c:	9a03      	ldr	r2, [sp, #12]
 800360e:	4276      	negs	r6, r6
 8003610:	7013      	strb	r3, [r2, #0]
 8003612:	4b5d      	ldr	r3, [pc, #372]	@ (8003788 <_printf_i+0x210>)
 8003614:	270a      	movs	r7, #10
 8003616:	9304      	str	r3, [sp, #16]
 8003618:	e018      	b.n	800364c <_printf_i+0xd4>
 800361a:	6806      	ldr	r6, [r0, #0]
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	0649      	lsls	r1, r1, #25
 8003620:	d5f1      	bpl.n	8003606 <_printf_i+0x8e>
 8003622:	b236      	sxth	r6, r6
 8003624:	e7ef      	b.n	8003606 <_printf_i+0x8e>
 8003626:	6808      	ldr	r0, [r1, #0]
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	c940      	ldmia	r1!, {r6}
 800362c:	0605      	lsls	r5, r0, #24
 800362e:	d402      	bmi.n	8003636 <_printf_i+0xbe>
 8003630:	0640      	lsls	r0, r0, #25
 8003632:	d500      	bpl.n	8003636 <_printf_i+0xbe>
 8003634:	b2b6      	uxth	r6, r6
 8003636:	6019      	str	r1, [r3, #0]
 8003638:	4b53      	ldr	r3, [pc, #332]	@ (8003788 <_printf_i+0x210>)
 800363a:	270a      	movs	r7, #10
 800363c:	9304      	str	r3, [sp, #16]
 800363e:	2a6f      	cmp	r2, #111	@ 0x6f
 8003640:	d100      	bne.n	8003644 <_printf_i+0xcc>
 8003642:	3f02      	subs	r7, #2
 8003644:	0023      	movs	r3, r4
 8003646:	2200      	movs	r2, #0
 8003648:	3343      	adds	r3, #67	@ 0x43
 800364a:	701a      	strb	r2, [r3, #0]
 800364c:	6863      	ldr	r3, [r4, #4]
 800364e:	60a3      	str	r3, [r4, #8]
 8003650:	2b00      	cmp	r3, #0
 8003652:	db06      	blt.n	8003662 <_printf_i+0xea>
 8003654:	2104      	movs	r1, #4
 8003656:	6822      	ldr	r2, [r4, #0]
 8003658:	9d03      	ldr	r5, [sp, #12]
 800365a:	438a      	bics	r2, r1
 800365c:	6022      	str	r2, [r4, #0]
 800365e:	4333      	orrs	r3, r6
 8003660:	d00c      	beq.n	800367c <_printf_i+0x104>
 8003662:	9d03      	ldr	r5, [sp, #12]
 8003664:	0030      	movs	r0, r6
 8003666:	0039      	movs	r1, r7
 8003668:	f7fc fdde 	bl	8000228 <__aeabi_uidivmod>
 800366c:	9b04      	ldr	r3, [sp, #16]
 800366e:	3d01      	subs	r5, #1
 8003670:	5c5b      	ldrb	r3, [r3, r1]
 8003672:	702b      	strb	r3, [r5, #0]
 8003674:	0033      	movs	r3, r6
 8003676:	0006      	movs	r6, r0
 8003678:	429f      	cmp	r7, r3
 800367a:	d9f3      	bls.n	8003664 <_printf_i+0xec>
 800367c:	2f08      	cmp	r7, #8
 800367e:	d109      	bne.n	8003694 <_printf_i+0x11c>
 8003680:	6823      	ldr	r3, [r4, #0]
 8003682:	07db      	lsls	r3, r3, #31
 8003684:	d506      	bpl.n	8003694 <_printf_i+0x11c>
 8003686:	6862      	ldr	r2, [r4, #4]
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	429a      	cmp	r2, r3
 800368c:	dc02      	bgt.n	8003694 <_printf_i+0x11c>
 800368e:	2330      	movs	r3, #48	@ 0x30
 8003690:	3d01      	subs	r5, #1
 8003692:	702b      	strb	r3, [r5, #0]
 8003694:	9b03      	ldr	r3, [sp, #12]
 8003696:	1b5b      	subs	r3, r3, r5
 8003698:	6123      	str	r3, [r4, #16]
 800369a:	9b07      	ldr	r3, [sp, #28]
 800369c:	0021      	movs	r1, r4
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	9805      	ldr	r0, [sp, #20]
 80036a2:	9b06      	ldr	r3, [sp, #24]
 80036a4:	aa09      	add	r2, sp, #36	@ 0x24
 80036a6:	f7ff fef7 	bl	8003498 <_printf_common>
 80036aa:	3001      	adds	r0, #1
 80036ac:	d148      	bne.n	8003740 <_printf_i+0x1c8>
 80036ae:	2001      	movs	r0, #1
 80036b0:	4240      	negs	r0, r0
 80036b2:	b00b      	add	sp, #44	@ 0x2c
 80036b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036b6:	2220      	movs	r2, #32
 80036b8:	6809      	ldr	r1, [r1, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	6022      	str	r2, [r4, #0]
 80036be:	2278      	movs	r2, #120	@ 0x78
 80036c0:	4932      	ldr	r1, [pc, #200]	@ (800378c <_printf_i+0x214>)
 80036c2:	9104      	str	r1, [sp, #16]
 80036c4:	0021      	movs	r1, r4
 80036c6:	3145      	adds	r1, #69	@ 0x45
 80036c8:	700a      	strb	r2, [r1, #0]
 80036ca:	6819      	ldr	r1, [r3, #0]
 80036cc:	6822      	ldr	r2, [r4, #0]
 80036ce:	c940      	ldmia	r1!, {r6}
 80036d0:	0610      	lsls	r0, r2, #24
 80036d2:	d402      	bmi.n	80036da <_printf_i+0x162>
 80036d4:	0650      	lsls	r0, r2, #25
 80036d6:	d500      	bpl.n	80036da <_printf_i+0x162>
 80036d8:	b2b6      	uxth	r6, r6
 80036da:	6019      	str	r1, [r3, #0]
 80036dc:	07d3      	lsls	r3, r2, #31
 80036de:	d502      	bpl.n	80036e6 <_printf_i+0x16e>
 80036e0:	2320      	movs	r3, #32
 80036e2:	4313      	orrs	r3, r2
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	2e00      	cmp	r6, #0
 80036e8:	d001      	beq.n	80036ee <_printf_i+0x176>
 80036ea:	2710      	movs	r7, #16
 80036ec:	e7aa      	b.n	8003644 <_printf_i+0xcc>
 80036ee:	2220      	movs	r2, #32
 80036f0:	6823      	ldr	r3, [r4, #0]
 80036f2:	4393      	bics	r3, r2
 80036f4:	6023      	str	r3, [r4, #0]
 80036f6:	e7f8      	b.n	80036ea <_printf_i+0x172>
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	680d      	ldr	r5, [r1, #0]
 80036fc:	1d10      	adds	r0, r2, #4
 80036fe:	6949      	ldr	r1, [r1, #20]
 8003700:	6018      	str	r0, [r3, #0]
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	062e      	lsls	r6, r5, #24
 8003706:	d501      	bpl.n	800370c <_printf_i+0x194>
 8003708:	6019      	str	r1, [r3, #0]
 800370a:	e002      	b.n	8003712 <_printf_i+0x19a>
 800370c:	066d      	lsls	r5, r5, #25
 800370e:	d5fb      	bpl.n	8003708 <_printf_i+0x190>
 8003710:	8019      	strh	r1, [r3, #0]
 8003712:	2300      	movs	r3, #0
 8003714:	9d03      	ldr	r5, [sp, #12]
 8003716:	6123      	str	r3, [r4, #16]
 8003718:	e7bf      	b.n	800369a <_printf_i+0x122>
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	1d11      	adds	r1, r2, #4
 800371e:	6019      	str	r1, [r3, #0]
 8003720:	6815      	ldr	r5, [r2, #0]
 8003722:	2100      	movs	r1, #0
 8003724:	0028      	movs	r0, r5
 8003726:	6862      	ldr	r2, [r4, #4]
 8003728:	f000 f856 	bl	80037d8 <memchr>
 800372c:	2800      	cmp	r0, #0
 800372e:	d001      	beq.n	8003734 <_printf_i+0x1bc>
 8003730:	1b40      	subs	r0, r0, r5
 8003732:	6060      	str	r0, [r4, #4]
 8003734:	6863      	ldr	r3, [r4, #4]
 8003736:	6123      	str	r3, [r4, #16]
 8003738:	2300      	movs	r3, #0
 800373a:	9a03      	ldr	r2, [sp, #12]
 800373c:	7013      	strb	r3, [r2, #0]
 800373e:	e7ac      	b.n	800369a <_printf_i+0x122>
 8003740:	002a      	movs	r2, r5
 8003742:	6923      	ldr	r3, [r4, #16]
 8003744:	9906      	ldr	r1, [sp, #24]
 8003746:	9805      	ldr	r0, [sp, #20]
 8003748:	9d07      	ldr	r5, [sp, #28]
 800374a:	47a8      	blx	r5
 800374c:	3001      	adds	r0, #1
 800374e:	d0ae      	beq.n	80036ae <_printf_i+0x136>
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	079b      	lsls	r3, r3, #30
 8003754:	d415      	bmi.n	8003782 <_printf_i+0x20a>
 8003756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003758:	68e0      	ldr	r0, [r4, #12]
 800375a:	4298      	cmp	r0, r3
 800375c:	daa9      	bge.n	80036b2 <_printf_i+0x13a>
 800375e:	0018      	movs	r0, r3
 8003760:	e7a7      	b.n	80036b2 <_printf_i+0x13a>
 8003762:	0022      	movs	r2, r4
 8003764:	2301      	movs	r3, #1
 8003766:	9906      	ldr	r1, [sp, #24]
 8003768:	9805      	ldr	r0, [sp, #20]
 800376a:	9e07      	ldr	r6, [sp, #28]
 800376c:	3219      	adds	r2, #25
 800376e:	47b0      	blx	r6
 8003770:	3001      	adds	r0, #1
 8003772:	d09c      	beq.n	80036ae <_printf_i+0x136>
 8003774:	3501      	adds	r5, #1
 8003776:	68e3      	ldr	r3, [r4, #12]
 8003778:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	42ab      	cmp	r3, r5
 800377e:	dcf0      	bgt.n	8003762 <_printf_i+0x1ea>
 8003780:	e7e9      	b.n	8003756 <_printf_i+0x1de>
 8003782:	2500      	movs	r5, #0
 8003784:	e7f7      	b.n	8003776 <_printf_i+0x1fe>
 8003786:	46c0      	nop			@ (mov r8, r8)
 8003788:	0800390d 	.word	0x0800390d
 800378c:	0800391e 	.word	0x0800391e

08003790 <memmove>:
 8003790:	b510      	push	{r4, lr}
 8003792:	4288      	cmp	r0, r1
 8003794:	d902      	bls.n	800379c <memmove+0xc>
 8003796:	188b      	adds	r3, r1, r2
 8003798:	4298      	cmp	r0, r3
 800379a:	d308      	bcc.n	80037ae <memmove+0x1e>
 800379c:	2300      	movs	r3, #0
 800379e:	429a      	cmp	r2, r3
 80037a0:	d007      	beq.n	80037b2 <memmove+0x22>
 80037a2:	5ccc      	ldrb	r4, [r1, r3]
 80037a4:	54c4      	strb	r4, [r0, r3]
 80037a6:	3301      	adds	r3, #1
 80037a8:	e7f9      	b.n	800379e <memmove+0xe>
 80037aa:	5c8b      	ldrb	r3, [r1, r2]
 80037ac:	5483      	strb	r3, [r0, r2]
 80037ae:	3a01      	subs	r2, #1
 80037b0:	d2fb      	bcs.n	80037aa <memmove+0x1a>
 80037b2:	bd10      	pop	{r4, pc}

080037b4 <_sbrk_r>:
 80037b4:	2300      	movs	r3, #0
 80037b6:	b570      	push	{r4, r5, r6, lr}
 80037b8:	4d06      	ldr	r5, [pc, #24]	@ (80037d4 <_sbrk_r+0x20>)
 80037ba:	0004      	movs	r4, r0
 80037bc:	0008      	movs	r0, r1
 80037be:	602b      	str	r3, [r5, #0]
 80037c0:	f7fd f8dc 	bl	800097c <_sbrk>
 80037c4:	1c43      	adds	r3, r0, #1
 80037c6:	d103      	bne.n	80037d0 <_sbrk_r+0x1c>
 80037c8:	682b      	ldr	r3, [r5, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d000      	beq.n	80037d0 <_sbrk_r+0x1c>
 80037ce:	6023      	str	r3, [r4, #0]
 80037d0:	bd70      	pop	{r4, r5, r6, pc}
 80037d2:	46c0      	nop			@ (mov r8, r8)
 80037d4:	200002f8 	.word	0x200002f8

080037d8 <memchr>:
 80037d8:	b2c9      	uxtb	r1, r1
 80037da:	1882      	adds	r2, r0, r2
 80037dc:	4290      	cmp	r0, r2
 80037de:	d101      	bne.n	80037e4 <memchr+0xc>
 80037e0:	2000      	movs	r0, #0
 80037e2:	4770      	bx	lr
 80037e4:	7803      	ldrb	r3, [r0, #0]
 80037e6:	428b      	cmp	r3, r1
 80037e8:	d0fb      	beq.n	80037e2 <memchr+0xa>
 80037ea:	3001      	adds	r0, #1
 80037ec:	e7f6      	b.n	80037dc <memchr+0x4>

080037ee <memcpy>:
 80037ee:	2300      	movs	r3, #0
 80037f0:	b510      	push	{r4, lr}
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d100      	bne.n	80037f8 <memcpy+0xa>
 80037f6:	bd10      	pop	{r4, pc}
 80037f8:	5ccc      	ldrb	r4, [r1, r3]
 80037fa:	54c4      	strb	r4, [r0, r3]
 80037fc:	3301      	adds	r3, #1
 80037fe:	e7f8      	b.n	80037f2 <memcpy+0x4>

08003800 <_realloc_r>:
 8003800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003802:	0006      	movs	r6, r0
 8003804:	000c      	movs	r4, r1
 8003806:	0015      	movs	r5, r2
 8003808:	2900      	cmp	r1, #0
 800380a:	d105      	bne.n	8003818 <_realloc_r+0x18>
 800380c:	0011      	movs	r1, r2
 800380e:	f7ff fc55 	bl	80030bc <_malloc_r>
 8003812:	0004      	movs	r4, r0
 8003814:	0020      	movs	r0, r4
 8003816:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003818:	2a00      	cmp	r2, #0
 800381a:	d103      	bne.n	8003824 <_realloc_r+0x24>
 800381c:	f7ff fbe2 	bl	8002fe4 <_free_r>
 8003820:	002c      	movs	r4, r5
 8003822:	e7f7      	b.n	8003814 <_realloc_r+0x14>
 8003824:	f000 f81c 	bl	8003860 <_malloc_usable_size_r>
 8003828:	0007      	movs	r7, r0
 800382a:	4285      	cmp	r5, r0
 800382c:	d802      	bhi.n	8003834 <_realloc_r+0x34>
 800382e:	0843      	lsrs	r3, r0, #1
 8003830:	42ab      	cmp	r3, r5
 8003832:	d3ef      	bcc.n	8003814 <_realloc_r+0x14>
 8003834:	0029      	movs	r1, r5
 8003836:	0030      	movs	r0, r6
 8003838:	f7ff fc40 	bl	80030bc <_malloc_r>
 800383c:	9001      	str	r0, [sp, #4]
 800383e:	2800      	cmp	r0, #0
 8003840:	d101      	bne.n	8003846 <_realloc_r+0x46>
 8003842:	9c01      	ldr	r4, [sp, #4]
 8003844:	e7e6      	b.n	8003814 <_realloc_r+0x14>
 8003846:	002a      	movs	r2, r5
 8003848:	42bd      	cmp	r5, r7
 800384a:	d900      	bls.n	800384e <_realloc_r+0x4e>
 800384c:	003a      	movs	r2, r7
 800384e:	0021      	movs	r1, r4
 8003850:	9801      	ldr	r0, [sp, #4]
 8003852:	f7ff ffcc 	bl	80037ee <memcpy>
 8003856:	0021      	movs	r1, r4
 8003858:	0030      	movs	r0, r6
 800385a:	f7ff fbc3 	bl	8002fe4 <_free_r>
 800385e:	e7f0      	b.n	8003842 <_realloc_r+0x42>

08003860 <_malloc_usable_size_r>:
 8003860:	1f0b      	subs	r3, r1, #4
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	1f18      	subs	r0, r3, #4
 8003866:	2b00      	cmp	r3, #0
 8003868:	da01      	bge.n	800386e <_malloc_usable_size_r+0xe>
 800386a:	580b      	ldr	r3, [r1, r0]
 800386c:	18c0      	adds	r0, r0, r3
 800386e:	4770      	bx	lr

08003870 <_init>:
 8003870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003872:	46c0      	nop			@ (mov r8, r8)
 8003874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003876:	bc08      	pop	{r3}
 8003878:	469e      	mov	lr, r3
 800387a:	4770      	bx	lr

0800387c <_fini>:
 800387c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003882:	bc08      	pop	{r3}
 8003884:	469e      	mov	lr, r3
 8003886:	4770      	bx	lr
